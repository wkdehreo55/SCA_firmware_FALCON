   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"vrfy.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.rodata
  16              		.align	3
  19              	fpr_q:
  20 0000 00000000 		.word	0
  21 0004 8000C840 		.word	1086849152
  22              		.align	3
  25              	fpr_inverse_of_q:
  26 0008 82A79790 		.word	-1869109374
  27 000c E354153F 		.word	1058362595
  28              		.align	3
  31              	fpr_inv_2sqrsigma0:
  32 0010 C2BB83C1 		.word	-1048331326
  33 0014 8B4FC33F 		.word	1069764491
  34              		.align	3
  37              	fpr_inv_sigma:
  38 0018 00000000 		.word	0
  39 001c 00000000 		.word	0
  40 0020 9A16247E 		.word	2116294298
  41 0024 EB487C3F 		.word	1065109739
  42 0028 D9AE8C54 		.word	1418505945
  43 002c 0AE57B3F 		.word	1065084170
  44 0030 2C769EE0 		.word	-526485972
  45 0034 2E857B3F 		.word	1065059630
  46 0038 36DACAD3 		.word	-741680586
  47 003c 5EFC7A3F 		.word	1065024606
  48 0040 EDB37609 		.word	158774253
  49 0044 3B7B7A3F 		.word	1064991547
  50 0048 989CCA82 		.word	-2100650856
  51 004c 12017A3F 		.word	1064960274
  52 0050 36275FCE 		.word	-832624842
  53 0054 498D793F 		.word	1064930633
  54 0058 EED96EC5 		.word	-982590994
  55 005c 571F793F 		.word	1064902487
  56 0060 CAC764DE 		.word	-563820598
  57 0064 C2B6783F 		.word	1064875714
  58 0068 E31A31F6 		.word	-164554013
  59 006c 1E53783F 		.word	1064850206
  60              		.align	3
  63              	fpr_sigma_min:
  64 0070 00000000 		.word	0
  65 0074 00000000 		.word	0
  66 0078 8B564406 		.word	105141899
  67 007c 38DDF13F 		.word	1072815416
  68 0080 2686ADDC 		.word	-592607706
  69 0084 2E1DF23F 		.word	1072831790
  70 0088 7A7CAAE1 		.word	-508920710
  71 008c 465CF23F 		.word	1072847942
  72 0090 25FB4A57 		.word	1464531749
  73 0094 5CB9F23F 		.word	1072871772
  74 0098 B622FEC7 		.word	-939646282
  75 009c AB14F33F 		.word	1072895147
  76 00a0 C3D77534 		.word	880138179
  77 00a4 4E6EF33F 		.word	1072918094
  78 00a8 24C2A166 		.word	1721877028
  79 00ac 5AC6F33F 		.word	1072940634
  80 00b0 A0B38C35 		.word	898413472
  81 00b4 E51CF43F 		.word	1072962789
  82 00b8 757A1FBF 		.word	-1088456075
  83 00bc 0172F43F 		.word	1072984577
  84 00c0 64C79099 		.word	-1718565020
  85 00c4 C1C5F43F 		.word	1073006017
  86              		.align	3
  89              	fpr_log2:
  90 00c8 EF39FAFE 		.word	-17155601
  91 00cc 422EE63F 		.word	1072049730
  92              		.align	3
  95              	fpr_inv_log2:
  96 00d0 FE822B65 		.word	1697350398
  97 00d4 4715F73F 		.word	1073157447
  98              		.align	3
 101              	fpr_bnorm_max:
 102 00d8 ACADD85F 		.word	1608035756
 103 00dc 9A6DD040 		.word	1087401370
 104              		.align	3
 107              	fpr_zero:
 108 00e0 00000000 		.space	8
 108      00000000 
 109              		.align	3
 112              	fpr_one:
 113 00e8 00000000 		.word	0
 114 00ec 0000F03F 		.word	1072693248
 115              		.align	3
 118              	fpr_two:
 119 00f0 00000000 		.word	0
 120 00f4 00000040 		.word	1073741824
 121              		.align	3
 124              	fpr_onehalf:
 125 00f8 00000000 		.word	0
 126 00fc 0000E03F 		.word	1071644672
 127              		.align	3
 130              	fpr_invsqrt2:
 131 0100 CD3B7F66 		.word	1719614413
 132 0104 9EA0E63F 		.word	1072079006
 133              		.align	3
 136              	fpr_invsqrt8:
 137 0108 CD3B7F66 		.word	1719614413
 138 010c 9EA0D63F 		.word	1071030430
 139              		.align	3
 142              	fpr_ptwo31:
 143 0110 00000000 		.word	0
 144 0114 0000E041 		.word	1105199104
 145              		.align	3
 148              	fpr_ptwo31m1:
 149 0118 0000C0FF 		.word	-4194304
 150 011c FFFFDF41 		.word	1105199103
 151              		.align	3
 154              	fpr_mtwo31m1:
 155 0120 0000C0FF 		.word	-4194304
 156 0124 FFFFDFC1 		.word	-1042284545
 157              		.align	3
 160              	fpr_ptwo63m1:
 161 0128 00000000 		.word	0
 162 012c 0000E043 		.word	1138753536
 163              		.align	3
 166              	fpr_mtwo63m1:
 167 0130 00000000 		.word	0
 168 0134 0000E0C3 		.word	-1008730112
 169              		.align	3
 172              	fpr_ptwo63:
 173 0138 00000000 		.word	0
 174 013c 0000E043 		.word	1138753536
 175              		.align	2
 178              	GMb:
 179 0140 FB0F     		.short	4091
 180 0142 D01E     		.short	7888
 181 0144 342B     		.short	11060
 182 0146 C82B     		.short	11208
 183 0148 301B     		.short	6960
 184 014a F610     		.short	4342
 185 014c 8318     		.short	6275
 186 014e 1F26     		.short	9759
 187 0150 3706     		.short	1591
 188 0152 FF18     		.short	6399
 189 0154 0525     		.short	9477
 190 0156 9214     		.short	5266
 191 0158 4A02     		.short	586
 192 015a C116     		.short	5825
 193 015c 721D     		.short	7538
 194 015e EE25     		.short	9710
 195 0160 6E04     		.short	1134
 196 0162 0719     		.short	6407
 197 0164 AF06     		.short	1711
 198 0166 C503     		.short	965
 199 0168 BB1B     		.short	7099
 200 016a FA1D     		.short	7674
 201 016c 9F0E     		.short	3743
 202 016e 2A19     		.short	6442
 203 0170 AE28     		.short	10414
 204 0172 A41F     		.short	8100
 205 0174 5D07     		.short	1885
 206 0176 9806     		.short	1688
 207 0178 5405     		.short	1364
 208 017a 5928     		.short	10329
 209 017c B427     		.short	10164
 210 017e DC23     		.short	9180
 211 0180 B22F     		.short	12210
 212 0182 6018     		.short	6240
 213 0184 E503     		.short	997
 214 0186 7500     		.short	117
 215 0188 AF12     		.short	4783
 216 018a 3711     		.short	4407
 217 018c 0D06     		.short	1549
 218 018e A01B     		.short	7072
 219 0190 0D0B     		.short	2829
 220 0192 3A19     		.short	6458
 221 0194 4F11     		.short	4431
 222 0196 AD22     		.short	8877
 223 0198 E81B     		.short	7144
 224 019a 040A     		.short	2564
 225 019c 2016     		.short	5664
 226 019e CA0F     		.short	4042
 227 01a0 9D2F     		.short	12189
 228 01a2 B001     		.short	432
 229 01a4 FF29     		.short	10751
 230 01a6 D504     		.short	1237
 231 01a8 BA1D     		.short	7610
 232 01aa FE05     		.short	1534
 233 01ac 8F0F     		.short	3983
 234 01ae B71E     		.short	7863
 235 01b0 8508     		.short	2181
 236 01b2 A418     		.short	6308
 237 01b4 1022     		.short	8720
 238 01b6 AA19     		.short	6570
 239 01b8 EB12     		.short	4843
 240 01ba 9A06     		.short	1690
 241 01bc 0E00     		.short	14
 242 01be 200F     		.short	3872
 243 01c0 C115     		.short	5569
 244 01c2 9824     		.short	9368
 245 01c4 832F     		.short	12163
 246 01c6 E307     		.short	2019
 247 01c8 771D     		.short	7543
 248 01ca 0B09     		.short	2315
 249 01cc 4112     		.short	4673
 250 01ce AC1C     		.short	7340
 251 01d0 1106     		.short	1553
 252 01d2 8404     		.short	1156
 253 01d4 D120     		.short	8401
 254 01d6 7D2C     		.short	11389
 255 01d8 FC03     		.short	1020
 256 01da 970B     		.short	2967
 257 01dc 142A     		.short	10772
 258 01de 851B     		.short	7045
 259 01e0 F40C     		.short	3316
 260 01e2 E42B     		.short	11236
 261 01e4 A514     		.short	5285
 262 01e6 3A2D     		.short	11578
 263 01e8 8D29     		.short	10637
 264 01ea 6627     		.short	10086
 265 01ec 1525     		.short	9493
 266 01ee 2418     		.short	6180
 267 01f0 3D24     		.short	9277
 268 01f2 F217     		.short	6130
 269 01f4 FB0C     		.short	3323
 270 01f6 7303     		.short	883
 271 01f8 E528     		.short	10469
 272 01fa E901     		.short	489
 273 01fc DE05     		.short	1502
 274 01fe 230B     		.short	2851
 275 0200 352B     		.short	11061
 276 0202 0126     		.short	9729
 277 0204 B60A     		.short	2742
 278 0206 D12F     		.short	12241
 279 0208 6A13     		.short	4970
 280 020a F128     		.short	10481
 281 020c 5E27     		.short	10078
 282 020e AB04     		.short	1195
 283 0210 DA02     		.short	730
 284 0212 E206     		.short	1762
 285 0214 0E0F     		.short	3854
 286 0216 EE07     		.short	2030
 287 0218 0417     		.short	5892
 288 021a AA2A     		.short	10922
 289 021c 3C23     		.short	9020
 290 021e 9A14     		.short	5274
 291 0220 DB23     		.short	9179
 292 0222 140E     		.short	3604
 293 0224 C60E     		.short	3782
 294 0226 DE27     		.short	10206
 295 0228 6C0C     		.short	3180
 296 022a 8B0D     		.short	3467
 297 022c 3C12     		.short	4668
 298 022e 8E09     		.short	2446
 299 0230 BD1D     		.short	7613
 300 0232 AA24     		.short	9386
 301 0234 4203     		.short	834
 302 0236 171E     		.short	7703
 303 0238 B41A     		.short	6836
 304 023a 4B0D     		.short	3403
 305 023c E714     		.short	5351
 306 023e F42F     		.short	12276
 307 0240 FC0D     		.short	3580
 308 0242 CB06     		.short	1739
 309 0244 442A     		.short	10820
 310 0246 3B26     		.short	9787
 311 0248 E127     		.short	10209
 312 024a E60F     		.short	4070
 313 024c DA2F     		.short	12250
 314 024e 4D21     		.short	8525
 315 0250 A128     		.short	10401
 316 0252 BD0A     		.short	2749
 317 0254 AA1C     		.short	7338
 318 0256 4E29     		.short	10574
 319 0258 9817     		.short	6040
 320 025a AF03     		.short	943
 321 025c 7224     		.short	9330
 322 025e C505     		.short	1477
 323 0260 D11A     		.short	6865
 324 0262 C425     		.short	9668
 325 0264 010E     		.short	3585
 326 0266 E919     		.short	6633
 327 0268 712F     		.short	12145
 328 026a DF0F     		.short	4063
 329 026c 640E     		.short	3684
 330 026e 001E     		.short	7680
 331 0270 FC1F     		.short	8188
 332 0272 F61A     		.short	6902
 333 0274 CD0D     		.short	3533
 334 0276 4F26     		.short	9807
 335 0278 CA17     		.short	6090
 336 027a D702     		.short	727
 337 027c 7327     		.short	10099
 338 027e 5B1B     		.short	7003
 339 0280 211B     		.short	6945
 340 0282 9D07     		.short	1949
 341 0284 0326     		.short	9731
 342 0286 3F29     		.short	10559
 343 0288 A917     		.short	6057
 344 028a 7A01     		.short	378
 345 028c BF1E     		.short	7871
 346 028e 3B22     		.short	8763
 347 0290 C522     		.short	8901
 348 0292 0D24     		.short	9229
 349 0294 8E22     		.short	8846
 350 0296 C711     		.short	4551
 351 0298 7525     		.short	9589
 352 029a 902D     		.short	11664
 353 029c CE1D     		.short	7630
 354 029e 7522     		.short	8821
 355 02a0 3016     		.short	5680
 356 02a2 5C13     		.short	4956
 357 02a4 6B18     		.short	6251
 358 02a6 C420     		.short	8388
 359 02a8 AC27     		.short	10156
 360 02aa 1322     		.short	8723
 361 02ac 2509     		.short	2341
 362 02ae 570C     		.short	3159
 363 02b0 BB05     		.short	1467
 364 02b2 5415     		.short	5460
 365 02b4 6921     		.short	8553
 366 02b6 671E     		.short	7783
 367 02b8 590A     		.short	2649
 368 02ba 1009     		.short	2320
 369 02bc 4C23     		.short	9036
 370 02be 2C18     		.short	6188
 371 02c0 E102     		.short	737
 372 02c2 720E     		.short	3698
 373 02c4 5B12     		.short	4699
 374 02c6 7916     		.short	5753
 375 02c8 5623     		.short	9046
 376 02ca 670E     		.short	3687
 377 02cc 1000     		.short	16
 378 02ce 9203     		.short	914
 379 02d0 4214     		.short	5186
 380 02d2 2329     		.short	10531
 381 02d4 C811     		.short	4552
 382 02d6 AC07     		.short	1964
 383 02d8 B50D     		.short	3509
 384 02da F420     		.short	8436
 385 02dc 5C1D     		.short	7516
 386 02de 0515     		.short	5381
 387 02e0 ED29     		.short	10733
 388 02e2 D10C     		.short	3281
 389 02e4 7D1B     		.short	7037
 390 02e6 2404     		.short	1060
 391 02e8 4F0B     		.short	2895
 392 02ea F41B     		.short	7156
 393 02ec B722     		.short	8887
 394 02ee ED14     		.short	5357
 395 02f0 0919     		.short	6409
 396 02f2 0520     		.short	8197
 397 02f4 920B     		.short	2962
 398 02f6 E718     		.short	6375
 399 02f8 C813     		.short	5064
 400 02fa EA19     		.short	6634
 401 02fc F915     		.short	5625
 402 02fe 1601     		.short	278
 403 0300 A403     		.short	932
 404 0302 F527     		.short	10229
 405 0304 DF22     		.short	8927
 406 0306 DA1D     		.short	7642
 407 0308 5F01     		.short	351
 408 030a 5224     		.short	9298
 409 030c ED00     		.short	237
 410 030e E216     		.short	5858
 411 0310 0C1E     		.short	7692
 412 0312 4A0C     		.short	3146
 413 0314 5E2F     		.short	12126
 414 0316 A21D     		.short	7586
 415 0318 0508     		.short	2053
 416 031a 152C     		.short	11285
 417 031c DA0E     		.short	3802
 418 031e 5414     		.short	5204
 419 0320 FA11     		.short	4602
 420 0322 D406     		.short	1748
 421 0324 242C     		.short	11300
 422 0326 5401     		.short	340
 423 0328 7F0E     		.short	3711
 424 032a 0612     		.short	4614
 425 032c 2C01     		.short	300
 426 032e F12A     		.short	10993
 427 0330 CE13     		.short	5070
 428 0332 4127     		.short	10049
 429 0334 602D     		.short	11616
 430 0336 D72F     		.short	12247
 431 0338 FD1C     		.short	7421
 432 033a D329     		.short	10707
 433 033c 7216     		.short	5746
 434 033e 1616     		.short	5654
 435 0340 FB0E     		.short	3835
 436 0342 B115     		.short	5553
 437 0344 C804     		.short	1224
 438 0346 1C21     		.short	8476
 439 0348 1524     		.short	9237
 440 034a 050F     		.short	3845
 441 034c FA00     		.short	250
 442 034e C92B     		.short	11209
 443 0350 8110     		.short	4225
 444 0352 B618     		.short	6326
 445 0354 D025     		.short	9680
 446 0356 DE2F     		.short	12254
 447 0358 2810     		.short	4136
 448 035a DA0A     		.short	2778
 449 035c B402     		.short	692
 450 035e 6822     		.short	8808
 451 0360 0A19     		.short	6410
 452 0362 3E1A     		.short	6718
 453 0364 7927     		.short	10105
 454 0366 B228     		.short	10418
 455 0368 AF0E     		.short	3759
 456 036a BC1C     		.short	7356
 457 036c 612C     		.short	11361
 458 036e F120     		.short	8433
 459 0370 2519     		.short	6437
 460 0372 440E     		.short	3652
 461 0374 C618     		.short	6342
 462 0376 1223     		.short	8978
 463 0378 0F15     		.short	5391
 464 037a E008     		.short	2272
 465 037c 4C19     		.short	6476
 466 037e F81C     		.short	7416
 467 0380 E220     		.short	8418
 468 0382 482A     		.short	10824
 469 0384 D22E     		.short	11986
 470 0386 6516     		.short	5733
 471 0388 6C03     		.short	876
 472 038a 761B     		.short	7030
 473 038c 7708     		.short	2167
 474 038e 8409     		.short	2436
 475 0390 720D     		.short	3442
 476 0392 0124     		.short	9217
 477 0394 0E20     		.short	8206
 478 0396 FA12     		.short	4858
 479 0398 4C17     		.short	5964
 480 039a BA0A     		.short	2746
 481 039c 0A1C     		.short	7178
 482 039e 9A05     		.short	1434
 483 03a0 DD1C     		.short	7389
 484 03a2 AF22     		.short	8879
 485 03a4 A529     		.short	10661
 486 03a6 C12C     		.short	11457
 487 03a8 7C10     		.short	4220
 488 03aa 9805     		.short	1432
 489 03ac 502A     		.short	10832
 490 03ae E810     		.short	4328
 491 03b0 6D21     		.short	8557
 492 03b2 4B07     		.short	1867
 493 03b4 EE24     		.short	9454
 494 03b6 7009     		.short	2416
 495 03b8 E80E     		.short	3816
 496 03ba 7423     		.short	9076
 497 03bc AE02     		.short	686
 498 03be 1115     		.short	5393
 499 03c0 DB09     		.short	2523
 500 03c2 F310     		.short	4339
 501 03c4 E317     		.short	6115
 502 03c6 6B02     		.short	619
 503 03c8 A903     		.short	937
 504 03ca 120B     		.short	2834
 505 03cc 5F1E     		.short	7775
 506 03ce CF0C     		.short	3279
 507 03d0 3B09     		.short	2363
 508 03d2 401D     		.short	7488
 509 03d4 E017     		.short	6112
 510 03d6 C013     		.short	5056
 511 03d8 3803     		.short	824
 512 03da DC27     		.short	10204
 513 03dc AA2D     		.short	11690
 514 03de 5904     		.short	1113
 515 03e0 A70A     		.short	2727
 516 03e2 7826     		.short	9848
 517 03e4 8003     		.short	896
 518 03e6 EC07     		.short	2028
 519 03e8 D313     		.short	5075
 520 03ea 5E0A     		.short	2654
 521 03ec E028     		.short	10464
 522 03ee CC1E     		.short	7884
 523 03f0 892F     		.short	12169
 524 03f2 3A15     		.short	5434
 525 03f4 FE0B     		.short	3070
 526 03f6 0019     		.short	6400
 527 03f8 AC23     		.short	9132
 528 03fa 982D     		.short	11672
 529 03fc 792F     		.short	12153
 530 03fe A811     		.short	4520
 531 0400 F904     		.short	1273
 532 0402 0B26     		.short	9739
 533 0404 CC2C     		.short	11468
 534 0406 D126     		.short	9937
 535 0408 3727     		.short	10039
 536 040a F825     		.short	9720
 537 040c D608     		.short	2262
 538 040e B724     		.short	9399
 539 0410 B82B     		.short	11192
 540 0412 3B01     		.short	315
 541 0414 9F11     		.short	4511
 542 0416 8604     		.short	1158
 543 0418 AD17     		.short	6061
 544 041a 5F1A     		.short	6751
 545 041c 592E     		.short	11865
 546 041e 6501     		.short	357
 547 0420 C71C     		.short	7367
 548 0422 C611     		.short	4550
 549 0424 D703     		.short	983
 550 0426 5621     		.short	8534
 551 0428 A020     		.short	8352
 552 042a 8E27     		.short	10126
 553 042c 6A1D     		.short	7530
 554 042e 2524     		.short	9253
 555 0430 0F11     		.short	4367
 556 0432 6514     		.short	5221
 557 0434 9F0F     		.short	3999
 558 0436 4922     		.short	8777
 559 0438 590C     		.short	3161
 560 043a 4E1B     		.short	6990
 561 043c 2210     		.short	4130
 562 043e 842D     		.short	11652
 563 0440 2E0D     		.short	3374
 564 0442 D52C     		.short	11477
 565 0444 D906     		.short	1753
 566 0446 2401     		.short	292
 567 0448 E921     		.short	8681
 568 044a F60A     		.short	2806
 569 044c 8A28     		.short	10378
 570 044e 9C2F     		.short	12188
 571 0450 A816     		.short	5800
 572 0452 232E     		.short	11811
 573 0454 6D0C     		.short	3181
 574 0456 C407     		.short	1988
 575 0458 0004     		.short	1024
 576 045a 7C24     		.short	9340
 577 045c AD09     		.short	2477
 578 045e B02A     		.short	10928
 579 0460 E611     		.short	4582
 580 0462 5E1A     		.short	6750
 581 0464 230E     		.short	3619
 582 0466 7F15     		.short	5503
 583 0468 7114     		.short	5233
 584 046a 9F09     		.short	2463
 585 046c 1621     		.short	8470
 586 046e E21D     		.short	7650
 587 0470 1C1F     		.short	7964
 588 0472 FB18     		.short	6395
 589 0474 2F04     		.short	1071
 590 0476 F804     		.short	1272
 591 0478 920D     		.short	3474
 592 047a 252B     		.short	11045
 593 047c DB0C     		.short	3291
 594 047e 502C     		.short	11344
 595 0480 3621     		.short	8502
 596 0482 0625     		.short	9478
 597 0484 6D26     		.short	9837
 598 0486 E504     		.short	1253
 599 0488 4107     		.short	1857
 600 048a 5918     		.short	6233
 601 048c 7012     		.short	4720
 602 048e 292D     		.short	11561
 603 0490 9217     		.short	6034
 604 0492 5926     		.short	9817
 605 0494 0B0D     		.short	3339
 606 0496 0507     		.short	1797
 607 0498 3F0B     		.short	2879
 608 049a 6218     		.short	6242
 609 049c 5014     		.short	5200
 610 049e 4208     		.short	2114
 611 04a0 1A1F     		.short	7962
 612 04a2 8924     		.short	9353
 613 04a4 632C     		.short	11363
 614 04a6 6315     		.short	5475
 615 04a8 C417     		.short	6084
 616 04aa 8125     		.short	9601
 617 04ac 0C10     		.short	4108
 618 04ae 9B1C     		.short	7323
 619 04b0 C628     		.short	10438
 620 04b2 FF24     		.short	9471
 621 04b4 F704     		.short	1271
 622 04b6 9801     		.short	408
 623 04b8 FF1A     		.short	6911
 624 04ba 070C     		.short	3079
 625 04bc 6801     		.short	360
 626 04be 5420     		.short	8276
 627 04c0 0F2D     		.short	11535
 628 04c2 C423     		.short	9156
 629 04c4 5923     		.short	9049
 630 04c6 132D     		.short	11539
 631 04c8 5203     		.short	850
 632 04ca A921     		.short	8617
 633 04cc 1003     		.short	784
 634 04ce EF1E     		.short	7919
 635 04d0 8E20     		.short	8334
 636 04d2 8A2F     		.short	12170
 637 04d4 3607     		.short	1846
 638 04d6 E527     		.short	10213
 639 04d8 982F     		.short	12184
 640 04da 931E     		.short	7827
 641 04dc 7F2E     		.short	11903
 642 04de E015     		.short	5600
 643 04e0 3326     		.short	9779
 644 04e2 F403     		.short	1012
 645 04e4 D102     		.short	721
 646 04e6 E00A     		.short	2784
 647 04e8 141A     		.short	6676
 648 04ea 9819     		.short	6552
 649 04ec E414     		.short	5348
 650 04ee 4811     		.short	4424
 651 04f0 A01A     		.short	6816
 652 04f2 D520     		.short	8405
 653 04f4 E726     		.short	9959
 654 04f6 1E14     		.short	5150
 655 04f8 3409     		.short	2356
 656 04fa B015     		.short	5552
 657 04fc 9314     		.short	5267
 658 04fe 3505     		.short	1333
 659 0500 6122     		.short	8801
 660 0502 BD25     		.short	9661
 661 0504 8C1C     		.short	7308
 662 0506 9C16     		.short	5788
 663 0508 2E13     		.short	4910
 664 050a 8D03     		.short	909
 665 050c 5D2D     		.short	11613
 666 050e 2B11     		.short	4395
 667 0510 2E20     		.short	8238
 668 0512 1E1A     		.short	6686
 669 0514 CE10     		.short	4302
 670 0516 E40B     		.short	3044
 671 0518 ED08     		.short	2285
 672 051a D92F     		.short	12249
 673 051c AB07     		.short	1963
 674 051e 0024     		.short	9216
 675 0520 C810     		.short	4296
 676 0522 8E2E     		.short	11918
 677 0524 B702     		.short	695
 678 0526 1311     		.short	4371
 679 0528 4126     		.short	9793
 680 052a 1413     		.short	4884
 681 052c 6B09     		.short	2411
 682 052e F627     		.short	10230
 683 0530 5A0A     		.short	2650
 684 0532 4903     		.short	841
 685 0534 320F     		.short	3890
 686 0536 F727     		.short	10231
 687 0538 501C     		.short	7248
 688 053a 3921     		.short	8505
 689 053c BC2B     		.short	11196
 690 053e 201A     		.short	6688
 691 0540 DB0F     		.short	4059
 692 0542 AC17     		.short	6060
 693 0544 660E     		.short	3686
 694 0546 7212     		.short	4722
 695 0548 4D2E     		.short	11853
 696 054a B816     		.short	5816
 697 054c 921B     		.short	7058
 698 054e D41A     		.short	6868
 699 0550 812B     		.short	11137
 700 0552 F61E     		.short	7926
 701 0554 1E13     		.short	4894
 702 0556 FC2F     		.short	12284
 703 0558 0610     		.short	4102
 704 055a 440F     		.short	3908
 705 055c 1A0E     		.short	3610
 706 055e 7D19     		.short	6525
 707 0560 021F     		.short	7938
 708 0562 2E1F     		.short	7982
 709 0564 C92E     		.short	11977
 710 0566 631A     		.short	6755
 711 0568 1902     		.short	537
 712 056a D211     		.short	4562
 713 056c 5706     		.short	1623
 714 056e 2320     		.short	8227
 715 0570 BD2C     		.short	11453
 716 0572 781D     		.short	7544
 717 0574 8A03     		.short	906
 718 0576 282E     		.short	11816
 719 0578 4C25     		.short	9548
 720 057a 6A2A     		.short	10858
 721 057c E725     		.short	9703
 722 057e FF0A     		.short	2815
 723 0580 D82D     		.short	11736
 724 0582 9D1A     		.short	6813
 725 0584 431B     		.short	6979
 726 0586 3303     		.short	819
 727 0588 C722     		.short	8903
 728 058a 7F18     		.short	6271
 729 058c 5B2A     		.short	10843
 730 058e 5C01     		.short	348
 731 0590 5A1D     		.short	7514
 732 0592 9320     		.short	8339
 733 0594 2719     		.short	6439
 734 0596 B602     		.short	694
 735 0598 5403     		.short	852
 736 059a 1B16     		.short	5659
 737 059c DD0A     		.short	2781
 738 059e 840E     		.short	3716
 739 05a0 452D     		.short	11589
 740 05a2 D00B     		.short	3024
 741 05a4 F305     		.short	1523
 742 05a6 D321     		.short	8659
 743 05a8 1210     		.short	4114
 744 05aa F229     		.short	10738
 745 05ac E70C     		.short	3303
 746 05ae FD16     		.short	5885
 747 05b0 A20B     		.short	2978
 748 05b2 791C     		.short	7289
 749 05b4 6C2E     		.short	11884
 750 05b6 A323     		.short	9123
 751 05b8 6B24     		.short	9323
 752 05ba 362E     		.short	11830
 753 05bc 6200     		.short	98
 754 05be DE09     		.short	2526
 755 05c0 4408     		.short	2116
 756 05c2 2310     		.short	4131
 757 05c4 8F2C     		.short	11407
 758 05c6 3407     		.short	1844
 759 05c8 3D0E     		.short	3645
 760 05ca 4C0F     		.short	3916
 761 05cc C51F     		.short	8133
 762 05ce B008     		.short	2224
 763 05d0 772A     		.short	10871
 764 05d2 9C1F     		.short	8092
 765 05d4 B325     		.short	9651
 766 05d6 6517     		.short	5989
 767 05d8 E41B     		.short	7140
 768 05da 2021     		.short	8480
 769 05dc 8606     		.short	1670
 770 05de 9F00     		.short	159
 771 05e0 AB2A     		.short	10923
 772 05e2 3613     		.short	4918
 773 05e4 8000     		.short	128
 774 05e6 901C     		.short	7312
 775 05e8 D502     		.short	725
 776 05ea C523     		.short	9157
 777 05ec 8E13     		.short	5006
 778 05ee F918     		.short	6393
 779 05f0 A60D     		.short	3494
 780 05f2 9B17     		.short	6043
 781 05f4 DC2A     		.short	10972
 782 05f6 2518     		.short	6181
 783 05f8 3E2E     		.short	11838
 784 05fa 5F0D     		.short	3423
 785 05fc 1229     		.short	10514
 786 05fe F41D     		.short	7668
 787 0600 6D0E     		.short	3693
 788 0602 021A     		.short	6658
 789 0604 F91A     		.short	6905
 790 0606 B12E     		.short	11953
 791 0608 E427     		.short	10212
 792 060a 922E     		.short	11922
 793 060c 8D23     		.short	9101
 794 060e AD20     		.short	8365
 795 0610 F613     		.short	5110
 796 0612 2D00     		.short	45
 797 0614 6009     		.short	2400
 798 0616 8107     		.short	1921
 799 0618 1911     		.short	4377
 800 061a A00A     		.short	2720
 801 061c 9F06     		.short	1695
 802 061e 3300     		.short	51
 803 0620 F80A     		.short	2808
 804 0622 8A02     		.short	650
 805 0624 6807     		.short	1896
 806 0626 0D27     		.short	9997
 807 0628 F326     		.short	9971
 808 062a CC2E     		.short	11980
 809 062c A21F     		.short	8098
 810 062e E112     		.short	4833
 811 0630 2710     		.short	4135
 812 0632 A110     		.short	4257
 813 0634 CE16     		.short	5838
 814 0636 9D12     		.short	4765
 815 0638 E92A     		.short	10985
 816 063a 0C2D     		.short	11532
 817 063c 4E02     		.short	590
 818 063e A62F     		.short	12198
 819 0640 E201     		.short	482
 820 0642 8D2F     		.short	12173
 821 0644 D607     		.short	2006
 822 0646 981B     		.short	7064
 823 0648 2227     		.short	10018
 824 064a 480F     		.short	3912
 825 064c F02E     		.short	12016
 826 064e 1729     		.short	10519
 827 0650 622C     		.short	11362
 828 0652 2A1B     		.short	6954
 829 0654 A208     		.short	2210
 830 0656 1C01     		.short	284
 831 0658 2515     		.short	5413
 832 065a C919     		.short	6601
 833 065c 190F     		.short	3865
 834 065e 6328     		.short	10339
 835 0660 B42B     		.short	11188
 836 0662 5718     		.short	6231
 837 0664 0502     		.short	517
 838 0666 5C25     		.short	9564
 839 0668 112C     		.short	11281
 840 066a 170F     		.short	3863
 841 066c BA04     		.short	1210
 842 066e FC11     		.short	4604
 843 0670 E01F     		.short	8160
 844 0672 B72C     		.short	11447
 845 0674 9900     		.short	153
 846 0676 241C     		.short	7204
 847 0678 8316     		.short	5763
 848 067a E113     		.short	5089
 849 067c 2024     		.short	9248
 850 067e 7A2F     		.short	12154
 851 0680 E42D     		.short	11748
 852 0682 4A05     		.short	1354
 853 0684 101A     		.short	6672
 854 0686 B300     		.short	179
 855 0688 9C15     		.short	5532
 856 068a 560A     		.short	2646
 857 068c 3517     		.short	5941
 858 068e 992F     		.short	12185
 859 0690 5E03     		.short	862
 860 0692 560C     		.short	3158
 861 0694 DD01     		.short	477
 862 0696 6F1C     		.short	7279
 863 0698 2E16     		.short	5678
 864 069a EA1E     		.short	7914
 865 069c 9E10     		.short	4254
 866 069e 2E01     		.short	302
 867 06a0 4D0B     		.short	2893
 868 06a2 8227     		.short	10114
 869 06a4 EA1A     		.short	6890
 870 06a6 5825     		.short	9560
 871 06a8 AF25     		.short	9647
 872 06aa 812E     		.short	11905
 873 06ac 0210     		.short	4098
 874 06ae 6026     		.short	9824
 875 06b0 1D28     		.short	10269
 876 06b2 4905     		.short	1353
 877 06b4 DB29     		.short	10715
 878 06b6 CD14     		.short	5325
 879 06b8 6E18     		.short	6254
 880 06ba 6F0F     		.short	3951
 881 06bc 0F07     		.short	1807
 882 06be 3119     		.short	6449
 883 06c0 2714     		.short	5159
 884 06c2 1C05     		.short	1308
 885 06c4 7B20     		.short	8315
 886 06c6 4C0D     		.short	3404
 887 06c8 5507     		.short	1877
 888 06ca CF04     		.short	1231
 889 06cc 7000     		.short	112
 890 06ce FE18     		.short	6398
 891 06d0 CC2D     		.short	11724
 892 06d2 F02F     		.short	12272
 893 06d4 761C     		.short	7286
 894 06d6 B305     		.short	1459
 895 06d8 F22F     		.short	12274
 896 06da A826     		.short	9896
 897 06dc 800D     		.short	3456
 898 06de 2003     		.short	800
 899 06e0 7505     		.short	1397
 900 06e2 B629     		.short	10678
 901 06e4 6700     		.short	103
 902 06e6 FC1C     		.short	7420
 903 06e8 281F     		.short	7976
 904 06ea A803     		.short	936
 905 06ec FC02     		.short	764
 906 06ee 7802     		.short	632
 907 06f0 3C1F     		.short	7996
 908 06f2 1F20     		.short	8223
 909 06f4 FD20     		.short	8445
 910 06f6 4E1E     		.short	7758
 911 06f8 762A     		.short	10870
 912 06fa 6325     		.short	9571
 913 06fc CC09     		.short	2508
 914 06fe 9A07     		.short	1946
 915 0700 7C19     		.short	6524
 916 0702 AE27     		.short	10158
 917 0704 1404     		.short	1044
 918 0706 F210     		.short	4338
 919 0708 9909     		.short	2457
 920 070a 390E     		.short	3641
 921 070c 7B06     		.short	1659
 922 070e 2B10     		.short	4139
 923 0710 5012     		.short	4688
 924 0712 0526     		.short	9733
 925 0714 8C2B     		.short	11148
 926 0716 6A0F     		.short	3946
 927 0718 2208     		.short	2082
 928 071a 8D14     		.short	5261
 929 071c F407     		.short	2036
 930 071e 4A2E     		.short	11850
 931 0720 D41D     		.short	7636
 932 0722 CC2F     		.short	12236
 933 0724 F614     		.short	5366
 934 0726 4C09     		.short	2380
 935 0728 7705     		.short	1399
 936 072a 281E     		.short	7720
 937 072c 3408     		.short	2100
 938 072e 910C     		.short	3217
 939 0730 A02A     		.short	10912
 940 0732 C222     		.short	8898
 941 0734 9A1D     		.short	7578
 942 0736 DB2E     		.short	11995
 943 0738 E70A     		.short	2791
 944 073a BF04     		.short	1215
 945 073c 1B0D     		.short	3355
 946 073e 970A     		.short	2711
 947 0740 DB08     		.short	2267
 948 0742 D407     		.short	2004
 949 0744 7821     		.short	8568
 950 0746 C027     		.short	10176
 951 0748 8E0C     		.short	3214
 952 074a 2109     		.short	2337
 953 074c D606     		.short	1750
 954 074e 7912     		.short	4729
 955 0750 8513     		.short	4997
 956 0752 F71C     		.short	7415
 957 0754 AB18     		.short	6315
 958 0756 0C2F     		.short	12044
 959 0758 1611     		.short	4374
 960 075a F51B     		.short	7157
 961 075c EC12     		.short	4844
 962 075e D300     		.short	211
 963 0760 431F     		.short	8003
 964 0762 AF27     		.short	10159
 965 0764 4A24     		.short	9290
 966 0766 D92C     		.short	11481
 967 0768 C706     		.short	1735
 968 076a 2009     		.short	2336
 969 076c A116     		.short	5793
 970 076e 9326     		.short	9875
 971 0770 0020     		.short	8192
 972 0772 DA03     		.short	986
 973 0774 671D     		.short	7527
 974 0776 7905     		.short	1401
 975 0778 6603     		.short	870
 976 077a 1F0E     		.short	3615
 977 077c 1121     		.short	8465
 978 077e C40A     		.short	2756
 979 0780 2A26     		.short	9770
 980 0782 F207     		.short	2034
 981 0784 B827     		.short	10168
 982 0786 C00C     		.short	3264
 983 0788 F417     		.short	6132
 984 078a 3600     		.short	54
 985 078c 400B     		.short	2880
 986 078e 9B12     		.short	4763
 987 0790 1D2E     		.short	11805
 988 0792 020C     		.short	3074
 989 0794 5E20     		.short	8286
 990 0796 D424     		.short	9428
 991 0798 1113     		.short	4881
 992 079a 151B     		.short	6933
 993 079c 4204     		.short	1090
 994 079e 3627     		.short	10038
 995 07a0 070A     		.short	2567
 996 07a2 C402     		.short	708
 997 07a4 7D03     		.short	893
 998 07a6 4119     		.short	6465
 999 07a8 6213     		.short	4962
 1000 07aa 2827     		.short	10024
 1001 07ac 2A08     		.short	2090
 1002 07ae 5616     		.short	5718
 1003 07b0 F729     		.short	10743
 1004 07b2 0C03     		.short	780
 1005 07b4 7D12     		.short	4733
 1006 07b6 0F12     		.short	4623
 1007 07b8 5608     		.short	2134
 1008 07ba 2708     		.short	2087
 1009 07bc C212     		.short	4802
 1010 07be 7403     		.short	884
 1011 07c0 FC14     		.short	5372
 1012 07c2 A316     		.short	5795
 1013 07c4 3217     		.short	5938
 1014 07c6 ED10     		.short	4333
 1015 07c8 9F19     		.short	6559
 1016 07ca 7D1D     		.short	7549
 1017 07cc 9514     		.short	5269
 1018 07ce A829     		.short	10664
 1019 07d0 9C10     		.short	4252
 1020 07d2 BC0C     		.short	3260
 1021 07d4 1D17     		.short	5917
 1022 07d6 3E2A     		.short	10814
 1023 07d8 8816     		.short	5768
 1024 07da FF26     		.short	9983
 1025 07dc A01F     		.short	8096
 1026 07de 6F1E     		.short	7791
 1027 07e0 901A     		.short	6800
 1028 07e2 431D     		.short	7491
 1029 07e4 8018     		.short	6272
 1030 07e6 7307     		.short	1907
 1031 07e8 C32A     		.short	10947
 1032 07ea 9118     		.short	6289
 1033 07ec 1B2E     		.short	11803
 1034 07ee 9017     		.short	6032
 1035 07f0 B92C     		.short	11449
 1036 07f2 9304     		.short	1171
 1037 07f4 F123     		.short	9201
 1038 07f6 FD1E     		.short	7933
 1039 07f8 AF09     		.short	2479
 1040 07fa 221F     		.short	7970
 1041 07fc 492C     		.short	11337
 1042 07fe 961B     		.short	7062
 1043 0800 CF22     		.short	8911
 1044 0802 481A     		.short	6728
 1045 0804 8E19     		.short	6542
 1046 0806 B21F     		.short	8114
 1047 0808 7C22     		.short	8828
 1048 080a C319     		.short	6595
 1049 080c D90D     		.short	3545
 1050 080e FC10     		.short	4348
 1051 0810 0212     		.short	4610
 1052 0812 9D08     		.short	2205
 1053 0814 571B     		.short	6999
 1054 0816 AA1F     		.short	8106
 1055 0818 B815     		.short	5560
 1056 081a 9628     		.short	10390
 1057 081c 6924     		.short	9321
 1058 081e C309     		.short	2499
 1059 0820 6D09     		.short	2413
 1060 0822 681C     		.short	7272
 1061 0824 E11A     		.short	6881
 1062 0826 5629     		.short	10582
 1063 0828 5C24     		.short	9308
 1064 082a DD24     		.short	9437
 1065 082c E20D     		.short	3554
 1066 082e FE0C     		.short	3326
 1067 0830 6717     		.short	5991
 1068 0832 C12E     		.short	11969
 1069 0834 570D     		.short	3415
 1070 0836 FB2F     		.short	12283
 1071 0838 6E26     		.short	9838
 1072 083a 1F2F     		.short	12063
 1073 083c EC10     		.short	4332
 1074 083e 961E     		.short	7830
 1075 0840 412C     		.short	11329
 1076 0842 CD19     		.short	6605
 1077 0844 EF2F     		.short	12271
 1078 0846 FC07     		.short	2044
 1079 0848 5B2D     		.short	11611
 1080 084a B91C     		.short	7353
 1081 084c C12B     		.short	11201
 1082 084e 3E2D     		.short	11582
 1083 0850 950E     		.short	3733
 1084 0852 EF22     		.short	8943
 1085 0854 FA26     		.short	9978
 1086 0856 5B06     		.short	1627
 1087 0858 001C     		.short	7168
 1088 085a 5F0F     		.short	3935
 1089 085c BA13     		.short	5050
 1090 085e CA0A     		.short	2762
 1091 0860 481D     		.short	7496
 1092 0862 8F28     		.short	10383
 1093 0864 F302     		.short	755
 1094 0866 7606     		.short	1654
 1095 0868 152F     		.short	12053
 1096 086a 5813     		.short	4952
 1097 086c 9627     		.short	10134
 1098 086e 2A11     		.short	4394
 1099 0870 C019     		.short	6592
 1100 0872 DA1E     		.short	7898
 1101 0874 491D     		.short	7497
 1102 0876 C822     		.short	8904
 1103 0878 FD2E     		.short	12029
 1104 087a FD0D     		.short	3581
 1105 087c FC29     		.short	10748
 1106 087e 2A16     		.short	5674
 1107 0880 7628     		.short	10358
 1108 0882 2513     		.short	4901
 1109 0884 F61C     		.short	7414
 1110 0886 4322     		.short	8771
 1111 0888 C602     		.short	710
 1112 088a 6C1A     		.short	6764
 1113 088c 0E21     		.short	8462
 1114 088e 191C     		.short	7193
 1115 0890 FB14     		.short	5371
 1116 0892 6A1C     		.short	7274
 1117 0894 4C2B     		.short	11084
 1118 0896 2201     		.short	290
 1119 0898 B81E     		.short	7864
 1120 089a AB1A     		.short	6827
 1121 089c 2E2E     		.short	11822
 1122 089e CD09     		.short	2509
 1123 08a0 B219     		.short	6578
 1124 08a2 BA0F     		.short	4026
 1125 08a4 AF16     		.short	5807
 1126 08a6 B205     		.short	1458
 1127 08a8 5916     		.short	5721
 1128 08aa 8216     		.short	5762
 1129 08ac 5210     		.short	4178
 1130 08ae 3908     		.short	2105
 1131 08b0 652D     		.short	11621
 1132 08b2 F412     		.short	4852
 1133 08b4 C122     		.short	8897
 1134 08b6 280B     		.short	2856
 1135 08b8 F62C     		.short	11510
 1136 08ba 3024     		.short	9264
 1137 08bc D809     		.short	2520
 1138 08be 4822     		.short	8776
 1139 08c0 631B     		.short	7011
 1140 08c2 570A     		.short	2647
 1141 08c4 6A07     		.short	1898
 1142 08c6 7F1B     		.short	7039
 1143 08c8 3E17     		.short	5950
 1144 08ca 9B2B     		.short	11163
 1145 08cc 7015     		.short	5488
 1146 08ce 8518     		.short	6277
 1147 08d0 DE23     		.short	9182
 1148 08d2 C02C     		.short	11456
 1149 08d4 7902     		.short	633
 1150 08d6 3E27     		.short	10046
 1151 08d8 222D     		.short	11554
 1152 08da 0116     		.short	5633
 1153 08dc 7325     		.short	9587
 1154 08de 1D09     		.short	2333
 1155 08e0 601B     		.short	7008
 1156 08e2 AC1B     		.short	7084
 1157 08e4 B713     		.short	5047
 1158 08e6 1F1C     		.short	7199
 1159 08e8 8926     		.short	9865
 1160 08ea 2523     		.short	8997
 1161 08ec 3902     		.short	569
 1162 08ee F618     		.short	6390
 1163 08f0 5D2A     		.short	10845
 1164 08f2 CF25     		.short	9679
 1165 08f4 4C20     		.short	8268
 1166 08f6 D02C     		.short	11472
 1167 08f8 6B10     		.short	4203
 1168 08fa CD07     		.short	1997
 1169 08fc 0200     		.short	2
 1170 08fe 7324     		.short	9331
 1171 0900 A200     		.short	162
 1172 0902 2618     		.short	6182
 1173 0904 D007     		.short	2000
 1174 0906 410E     		.short	3649
 1175 0908 4026     		.short	9792
 1176 090a DB18     		.short	6363
 1177 090c 851D     		.short	7557
 1178 090e 2B18     		.short	6187
 1179 0910 3E21     		.short	8510
 1180 0912 CF26     		.short	9935
 1181 0914 A015     		.short	5536
 1182 0916 3B23     		.short	9019
 1183 0918 7A0E     		.short	3706
 1184 091a E92E     		.short	12009
 1185 091c AC05     		.short	1452
 1186 091e FB0B     		.short	3067
 1187 0920 7615     		.short	5494
 1188 0922 DC25     		.short	9692
 1189 0924 0113     		.short	4865
 1190 0926 8317     		.short	6019
 1191 0928 C21B     		.short	7106
 1192 092a 8A25     		.short	9610
 1193 092c EC11     		.short	4588
 1194 092e B527     		.short	10165
 1195 0930 7518     		.short	6261
 1196 0932 FF16     		.short	5887
 1197 0934 5C0A     		.short	2652
 1198 0936 BC27     		.short	10172
 1199 0938 2C06     		.short	1580
 1200 093a 8B28     		.short	10379
 1201 093c 1E12     		.short	4638
 1202 093e DD26     		.short	9949
 1203              		.align	2
 1206              	iGMb:
 1207 0940 FB0F     		.short	4091
 1208 0942 3111     		.short	4401
 1209 0944 3904     		.short	1081
 1210 0946 CD04     		.short	1229
 1211 0948 E209     		.short	2530
 1212 094a 7E17     		.short	6014
 1213 094c 0B1F     		.short	7947
 1214 094e D114     		.short	5329
 1215 0950 130A     		.short	2579
 1216 0952 8F12     		.short	4751
 1217 0954 4019     		.short	6464
 1218 0956 B72D     		.short	11703
 1219 0958 6F1B     		.short	7023
 1220 095a FC0A     		.short	2812
 1221 095c 0217     		.short	5890
 1222 095e CA29     		.short	10698
 1223 0960 250C     		.short	3109
 1224 0962 4D08     		.short	2125
 1225 0964 A807     		.short	1960
 1226 0966 AD2A     		.short	10925
 1227 0968 6929     		.short	10601
 1228 096a A428     		.short	10404
 1229 096c 5D10     		.short	4189
 1230 096e 5307     		.short	1875
 1231 0970 D716     		.short	5847
 1232 0972 6221     		.short	8546
 1233 0974 0712     		.short	4615
 1234 0976 4614     		.short	5190
 1235 0978 3C2C     		.short	11324
 1236 097a 5229     		.short	10578
 1237 097c FA16     		.short	5882
 1238 097e 932B     		.short	11155
 1239 0980 E120     		.short	8417
 1240 0982 F32F     		.short	12275
 1241 0984 6729     		.short	10599
 1242 0986 161D     		.short	7446
 1243 0988 5716     		.short	5719
 1244 098a F10D     		.short	3569
 1245 098c 5D17     		.short	5981
 1246 098e 7C27     		.short	10108
 1247 0990 4A11     		.short	4426
 1248 0992 7220     		.short	8306
 1249 0994 032A     		.short	10755
 1250 0996 4712     		.short	4679
 1251 0998 2C2B     		.short	11052
 1252 099a 0206     		.short	1538
 1253 099c 512E     		.short	11857
 1254 099e 6400     		.short	100
 1255 09a0 3720     		.short	8247
 1256 09a2 E119     		.short	6625
 1257 09a4 FD25     		.short	9725
 1258 09a6 1914     		.short	5145
 1259 09a8 540D     		.short	3412
 1260 09aa B21E     		.short	7858
 1261 09ac C716     		.short	5831
 1262 09ae F424     		.short	9460
 1263 09b0 6114     		.short	5217
 1264 09b2 F429     		.short	10740
 1265 09b4 CA1E     		.short	7882
 1266 09b6 521D     		.short	7506
 1267 09b8 8C2F     		.short	12172
 1268 09ba 1C2C     		.short	11292
 1269 09bc A117     		.short	6049
 1270 09be 4F00     		.short	79
 1271 09c0 0D00     		.short	13
 1272 09c2 1A1B     		.short	6938
 1273 09c4 B622     		.short	8886
 1274 09c6 4D15     		.short	5453
 1275 09c8 EA11     		.short	4586
 1276 09ca BF2C     		.short	11455
 1277 09cc 570B     		.short	2903
 1278 09ce 4412     		.short	4676
 1279 09d0 7326     		.short	9843
 1280 09d2 C51D     		.short	7621
 1281 09d4 7622     		.short	8822
 1282 09d6 9523     		.short	9109
 1283 09d8 2308     		.short	2083
 1284 09da 3B21     		.short	8507
 1285 09dc ED21     		.short	8685
 1286 09de 260C     		.short	3110
 1287 09e0 671B     		.short	7015
 1288 09e2 C50C     		.short	3269
 1289 09e4 5705     		.short	1367
 1290 09e6 FD18     		.short	6397
 1291 09e8 1328     		.short	10259
 1292 09ea F320     		.short	8435
 1293 09ec 1F29     		.short	10527
 1294 09ee 272D     		.short	11559
 1295 09f0 562B     		.short	11094
 1296 09f2 A308     		.short	2211
 1297 09f4 1007     		.short	1808
 1298 09f6 971C     		.short	7319
 1299 09f8 3000     		.short	48
 1300 09fa 4B25     		.short	9547
 1301 09fc 000A     		.short	2560
 1302 09fe CC04     		.short	1228
 1303 0a00 DE24     		.short	9438
 1304 0a02 232A     		.short	10787
 1305 0a04 182E     		.short	11800
 1306 0a06 1C07     		.short	1820
 1307 0a08 8E2C     		.short	11406
 1308 0a0a 0623     		.short	8966
 1309 0a0c 0F18     		.short	6159
 1310 0a0e C40B     		.short	3012
 1311 0a10 DD17     		.short	6109
 1312 0a12 EC0A     		.short	2796
 1313 0a14 9B08     		.short	2203
 1314 0a16 7406     		.short	1652
 1315 0a18 C702     		.short	711
 1316 0a1a 5C1B     		.short	7004
 1317 0a1c 1D04     		.short	1053
 1318 0a1e 0D23     		.short	8973
 1319 0a20 7C14     		.short	5244
 1320 0a22 ED05     		.short	1517
 1321 0a24 6A24     		.short	9322
 1322 0a26 052C     		.short	11269
 1323 0a28 8403     		.short	900
 1324 0a2a 300F     		.short	3888
 1325 0a2c 7D2B     		.short	11133
 1326 0a2e F029     		.short	10736
 1327 0a30 5513     		.short	4949
 1328 0a32 C01D     		.short	7616
 1329 0a34 F626     		.short	9974
 1330 0a36 8A12     		.short	4746
 1331 0a38 1E28     		.short	10270
 1332 0a3a 7E00     		.short	126
 1333 0a3c 690B     		.short	2921
 1334 0a3e 401A     		.short	6720
 1335 0a40 EB19     		.short	6635
 1336 0a42 8F19     		.short	6543
 1337 0a44 2E06     		.short	1582
 1338 0a46 0413     		.short	4868
 1339 0a48 2A00     		.short	42
 1340 0a4a A102     		.short	673
 1341 0a4c C008     		.short	2240
 1342 0a4e 331C     		.short	7219
 1343 0a50 1005     		.short	1296
 1344 0a52 D52E     		.short	11989
 1345 0a54 FB1D     		.short	7675
 1346 0a56 8221     		.short	8578
 1347 0a58 AD2E     		.short	11949
 1348 0a5a DD03     		.short	989
 1349 0a5c 2D29     		.short	10541
 1350 0a5e 071E     		.short	7687
 1351 0a60 AD1B     		.short	7085
 1352 0a62 2721     		.short	8487
 1353 0a64 EC03     		.short	1004
 1354 0a66 FC27     		.short	10236
 1355 0a68 5F12     		.short	4703
 1356 0a6a A300     		.short	163
 1357 0a6c B723     		.short	9143
 1358 0a6e F511     		.short	4597
 1359 0a70 1F19     		.short	6431
 1360 0a72 142F     		.short	12052
 1361 0a74 AF0B     		.short	2991
 1362 0a76 A22E     		.short	11938
 1363 0a78 2712     		.short	4647
 1364 0a7a 220D     		.short	3362
 1365 0a7c 0C08     		.short	2060
 1366 0a7e 5D2C     		.short	11357
 1367 0a80 EB2E     		.short	12011
 1368 0a82 081A     		.short	6664
 1369 0a84 1716     		.short	5655
 1370 0a86 391C     		.short	7225
 1371 0a88 1A17     		.short	5914
 1372 0a8a 6F24     		.short	9327
 1373 0a8c FC0F     		.short	4092
 1374 0a8e F816     		.short	5880
 1375 0a90 141B     		.short	6932
 1376 0a92 4A0D     		.short	3402
 1377 0a94 0D14     		.short	5133
 1378 0a96 B224     		.short	9394
 1379 0a98 DD2B     		.short	11229
 1380 0a9a 8414     		.short	5252
 1381 0a9c 3023     		.short	9008
 1382 0a9e 1406     		.short	1556
 1383 0aa0 FC1A     		.short	6908
 1384 0aa2 A512     		.short	4773
 1385 0aa4 0D0F     		.short	3853
 1386 0aa6 4C22     		.short	8780
 1387 0aa8 5528     		.short	10325
 1388 0aaa 391E     		.short	7737
 1389 0aac DE06     		.short	1758
 1390 0aae BF1B     		.short	7103
 1391 0ab0 6F2C     		.short	11375
 1392 0ab2 F12F     		.short	12273
 1393 0ab4 9A21     		.short	8602
 1394 0ab6 AB0C     		.short	3243
 1395 0ab8 8819     		.short	6536
 1396 0aba A61D     		.short	7590
 1397 0abc 8F21     		.short	8591
 1398 0abe 202D     		.short	11552
 1399 0ac0 D517     		.short	6101
 1400 0ac2 B50C     		.short	3253
 1401 0ac4 F126     		.short	9969
 1402 0ac6 A825     		.short	9640
 1403 0ac8 9A11     		.short	4506
 1404 0aca 980E     		.short	3736
 1405 0acc AD1A     		.short	6829
 1406 0ace 462A     		.short	10822
 1407 0ad0 AA23     		.short	9130
 1408 0ad2 DC26     		.short	9948
 1409 0ad4 EE0D     		.short	3566
 1410 0ad6 5508     		.short	2133
 1411 0ad8 3D0F     		.short	3901
 1412 0ada 9617     		.short	6038
 1413 0adc A51C     		.short	7333
 1414 0ade D119     		.short	6609
 1415 0ae0 8C0D     		.short	3468
 1416 0ae2 3312     		.short	4659
 1417 0ae4 7102     		.short	625
 1418 0ae6 8C0A     		.short	2700
 1419 0ae8 3A1E     		.short	7738
 1420 0aea 730D     		.short	3443
 1421 0aec F40B     		.short	3060
 1422 0aee 3C0D     		.short	3388
 1423 0af0 C60D     		.short	3526
 1424 0af2 4211     		.short	4418
 1425 0af4 872E     		.short	11911
 1426 0af6 5818     		.short	6232
 1427 0af8 C206     		.short	1730
 1428 0afa FE09     		.short	2558
 1429 0afc 6428     		.short	10340
 1430 0afe E014     		.short	5344
 1431 0b00 A614     		.short	5286
 1432 0b02 8E08     		.short	2190
 1433 0b04 2A2D     		.short	11562
 1434 0b06 3718     		.short	6199
 1435 0b08 B209     		.short	2482
 1436 0b0a 3422     		.short	8756
 1437 0b0c 0B15     		.short	5387
 1438 0b0e 0510     		.short	4101
 1439 0b10 0112     		.short	4609
 1440 0b12 9D21     		.short	8605
 1441 0b14 2220     		.short	8226
 1442 0b16 9000     		.short	144
 1443 0b18 1816     		.short	5656
 1444 0b1a 0022     		.short	8704
 1445 0b1c 3D0A     		.short	2621
 1446 0b1e 3015     		.short	5424
 1447 0b20 3C2A     		.short	10812
 1448 0b22 8F0B     		.short	2959
 1449 0b24 522C     		.short	11346
 1450 0b26 6918     		.short	6249
 1451 0b28 B306     		.short	1715
 1452 0b2a 5713     		.short	4951
 1453 0b2c 4425     		.short	9540
 1454 0b2e 6007     		.short	1888
 1455 0b30 B40E     		.short	3764
 1456 0b32 2700     		.short	39
 1457 0b34 1B20     		.short	8219
 1458 0b36 2008     		.short	2080
 1459 0b38 C609     		.short	2502
 1460 0b3a BD05     		.short	1469
 1461 0b3c 3629     		.short	10550
 1462 0b3e 0522     		.short	8709
 1463 0b40 E115     		.short	5601
 1464 0b42 4504     		.short	1093
 1465 0b44 C80E     		.short	3784
 1466 0b46 B113     		.short	5041
 1467 0b48 0A08     		.short	2058
 1468 0b4a CF20     		.short	8399
 1469 0b4c B82C     		.short	11448
 1470 0b4e A725     		.short	9639
 1471 0b50 0B08     		.short	2059
 1472 0b52 9626     		.short	9878
 1473 0b54 ED1C     		.short	7405
 1474 0b56 C009     		.short	2496
 1475 0b58 EE1E     		.short	7918
 1476 0b5a 4A2D     		.short	11594
 1477 0b5c 7301     		.short	371
 1478 0b5e 391F     		.short	7993
 1479 0b60 010C     		.short	3073
 1480 0b62 5628     		.short	10326
 1481 0b64 2800     		.short	40
 1482 0b66 1427     		.short	10004
 1483 0b68 1D24     		.short	9245
 1484 0b6a 331F     		.short	7987
 1485 0b6c E315     		.short	5603
 1486 0b6e D30F     		.short	4051
 1487 0b70 D61E     		.short	7894
 1488 0b72 A402     		.short	676
 1489 0b74 742C     		.short	11380
 1490 0b76 D31C     		.short	7379
 1491 0b78 6519     		.short	6501
 1492 0b7a 7513     		.short	4981
 1493 0b7c 440A     		.short	2628
 1494 0b7e A00D     		.short	3488
 1495 0b80 CC2A     		.short	10956
 1496 0b82 6E1B     		.short	7022
 1497 0b84 511A     		.short	6737
 1498 0b86 CD26     		.short	9933
 1499 0b88 E31B     		.short	7139
 1500 0b8a 1A09     		.short	2330
 1501 0b8c 2C0F     		.short	3884
 1502 0b8e 6115     		.short	5473
 1503 0b90 B91E     		.short	7865
 1504 0b92 1D1B     		.short	6941
 1505 0b94 6916     		.short	5737
 1506 0b96 ED15     		.short	5613
 1507 0b98 2125     		.short	9505
 1508 0b9a 302D     		.short	11568
 1509 0b9c 0D2C     		.short	11277
 1510 0b9e CE09     		.short	2510
 1511 0ba0 211A     		.short	6689
 1512 0ba2 8201     		.short	386
 1513 0ba4 6E11     		.short	4462
 1514 0ba6 6900     		.short	105
 1515 0ba8 1C08     		.short	2076
 1516 0baa CB28     		.short	10443
 1517 0bac 7700     		.short	119
 1518 0bae 730F     		.short	3955
 1519 0bb0 1211     		.short	4370
 1520 0bb2 F12C     		.short	11505
 1521 0bb4 580E     		.short	3672
 1522 0bb6 AF2C     		.short	11439
 1523 0bb8 EE02     		.short	750
 1524 0bba A80C     		.short	3240
 1525 0bbc 3D0C     		.short	3133
 1526 0bbe F202     		.short	754
 1527 0bc0 AD0F     		.short	4013
 1528 0bc2 992E     		.short	11929
 1529 0bc4 FA23     		.short	9210
 1530 0bc6 0215     		.short	5378
 1531 0bc8 692E     		.short	11881
 1532 0bca 0A2B     		.short	11018
 1533 0bcc 020B     		.short	2818
 1534 0bce 3B07     		.short	1851
 1535 0bd0 6613     		.short	4966
 1536 0bd2 F51F     		.short	8181
 1537 0bd4 800A     		.short	2688
 1538 0bd6 3D18     		.short	6205
 1539 0bd8 9E1A     		.short	6814
 1540 0bda 9E03     		.short	926
 1541 0bdc 780B     		.short	2936
 1542 0bde E710     		.short	4327
 1543 0be0 BF27     		.short	10175
 1544 0be2 B11B     		.short	7089
 1545 0be4 9F17     		.short	6047
 1546 0be6 C224     		.short	9410
 1547 0be8 FC28     		.short	10492
 1548 0bea F622     		.short	8950
 1549 0bec A809     		.short	2472
 1550 0bee 6F18     		.short	6255
 1551 0bf0 D802     		.short	728
 1552 0bf2 911D     		.short	7569
 1553 0bf4 A817     		.short	6056
 1554 0bf6 C028     		.short	10432
 1555 0bf8 1C2B     		.short	11036
 1556 0bfa 9409     		.short	2452
 1557 0bfc FB0A     		.short	2811
 1558 0bfe CB0E     		.short	3787
 1559 0c00 B103     		.short	945
 1560 0c02 2623     		.short	8998
 1561 0c04 DC04     		.short	1244
 1562 0c06 6F22     		.short	8815
 1563 0c08 092B     		.short	11017
 1564 0c0a D22B     		.short	11218
 1565 0c0c 0617     		.short	5894
 1566 0c0e E510     		.short	4325
 1567 0c10 1F12     		.short	4639
 1568 0c12 EB0E     		.short	3819
 1569 0c14 6226     		.short	9826
 1570 0c16 901B     		.short	7056
 1571 0c18 821A     		.short	6786
 1572 0c1a DE21     		.short	8670
 1573 0c1c A315     		.short	5539
 1574 0c1e 1B1E     		.short	7707
 1575 0c20 5105     		.short	1361
 1576 0c22 5426     		.short	9812
 1577 0c24 850B     		.short	2949
 1578 0c26 012C     		.short	11265
 1579 0c28 3D28     		.short	10301
 1580 0c2a 9423     		.short	9108
 1581 0c2c DE01     		.short	478
 1582 0c2e 5919     		.short	6489
 1583 0c30 6500     		.short	101
 1584 0c32 7707     		.short	1911
 1585 0c34 0B25     		.short	9483
 1586 0c36 180E     		.short	3608
 1587 0c38 DD2E     		.short	11997
 1588 0c3a 2829     		.short	10536
 1589 0c3c 2C03     		.short	812
 1590 0c3e D322     		.short	8915
 1591 0c40 7D02     		.short	637
 1592 0c42 DF1F     		.short	8159
 1593 0c44 B314     		.short	5299
 1594 0c46 A823     		.short	9128
 1595 0c48 B80D     		.short	3512
 1596 0c4a 6220     		.short	8290
 1597 0c4c 9C1B     		.short	7068
 1598 0c4e F21E     		.short	7922
 1599 0c50 DC0B     		.short	3036
 1600 0c52 9712     		.short	4759
 1601 0c54 7308     		.short	2163
 1602 0c56 610F     		.short	3937
 1603 0c58 AB0E     		.short	3755
 1604 0c5a 2A2C     		.short	11306
 1605 0c5c 3B1E     		.short	7739
 1606 0c5e 3A13     		.short	4922
 1607 0c60 9C2E     		.short	11932
 1608 0c62 A801     		.short	424
 1609 0c64 A215     		.short	5538
 1610 0c66 5418     		.short	6228
 1611 0c68 7B2B     		.short	11131
 1612 0c6a 621E     		.short	7778
 1613 0c6c C62E     		.short	11974
 1614 0c6e 4904     		.short	1097
 1615 0c70 4A0B     		.short	2890
 1616 0c72 2B27     		.short	10027
 1617 0c74 090A     		.short	2569
 1618 0c76 CA08     		.short	2250
 1619 0c78 3009     		.short	2352
 1620 0c7a 3503     		.short	821
 1621 0c7c F609     		.short	2550
 1622 0c7e 082B     		.short	11016
 1623 0c80 591E     		.short	7769
 1624 0c82 8800     		.short	136
 1625 0c84 6902     		.short	617
 1626 0c86 550C     		.short	3157
 1627 0c88 0117     		.short	5889
 1628 0c8a 0324     		.short	9219
 1629 0c8c C71A     		.short	6855
 1630 0c8e 7800     		.short	120
 1631 0c90 3511     		.short	4405
 1632 0c92 2107     		.short	1825
 1633 0c94 A325     		.short	9635
 1634 0c96 2E1C     		.short	7214
 1635 0c98 1528     		.short	10261
 1636 0c9a 812C     		.short	11393
 1637 0c9c 8909     		.short	2441
 1638 0c9e 5A25     		.short	9562
 1639 0ca0 A82B     		.short	11176
 1640 0ca2 5702     		.short	599
 1641 0ca4 2508     		.short	2085
 1642 0ca6 C92C     		.short	11465
 1643 0ca8 411C     		.short	7233
 1644 0caa 2118     		.short	6177
 1645 0cac C112     		.short	4801
 1646 0cae C626     		.short	9926
 1647 0cb0 3223     		.short	9010
 1648 0cb2 A211     		.short	4514
 1649 0cb4 EF24     		.short	9455
 1650 0cb6 582C     		.short	11352
 1651 0cb8 962D     		.short	11670
 1652 0cba 1E18     		.short	6174
 1653 0cbc 0E1F     		.short	7950
 1654 0cbe 2626     		.short	9766
 1655 0cc0 F01A     		.short	6896
 1656 0cc2 532D     		.short	11603
 1657 0cc4 8D0C     		.short	3213
 1658 0cc6 1921     		.short	8473
 1659 0cc8 9126     		.short	9873
 1660 0cca 130B     		.short	2835
 1661 0ccc B628     		.short	10422
 1662 0cce 940E     		.short	3732
 1663 0cd0 191F     		.short	7961
 1664 0cd2 B105     		.short	1457
 1665 0cd4 692A     		.short	10857
 1666 0cd6 851F     		.short	8069
 1667 0cd8 4003     		.short	832
 1668 0cda 5C06     		.short	1628
 1669 0cdc 520D     		.short	3410
 1670 0cde 2413     		.short	4900
 1671 0ce0 672A     		.short	10855
 1672 0ce2 F713     		.short	5111
 1673 0ce4 4725     		.short	9543
 1674 0ce6 B518     		.short	6325
 1675 0ce8 071D     		.short	7431
 1676 0cea F30F     		.short	4083
 1677 0cec 000C     		.short	3072
 1678 0cee 8F22     		.short	8847
 1679 0cf0 7D26     		.short	9853
 1680 0cf2 8A27     		.short	10122
 1681 0cf4 8B14     		.short	5259
 1682 0cf6 952C     		.short	11413
 1683 0cf8 9C19     		.short	6556
 1684 0cfa 2F01     		.short	303
 1685 0cfc B905     		.short	1465
 1686 0cfe 1F0F     		.short	3871
 1687 0d00 0913     		.short	4873
 1688 0d02 B516     		.short	5813
 1689 0d04 2127     		.short	10017
 1690 0d06 F21A     		.short	6898
 1691 0d08 EF0C     		.short	3311
 1692 0d0a 3B17     		.short	5947
 1693 0d0c BD21     		.short	8637
 1694 0d0e DC16     		.short	5852
 1695 0d10 100F     		.short	3856
 1696 0d12 A003     		.short	928
 1697 0d14 4513     		.short	4933
 1698 0d16 5221     		.short	8530
 1699 0d18 4F07     		.short	1871
 1700 0d1a 8808     		.short	2184
 1701 0d1c C315     		.short	5571
 1702 0d1e F716     		.short	5879
 1703 0d20 990D     		.short	3481
 1704 0d22 4D2D     		.short	11597
 1705 0d24 2725     		.short	9511
 1706 0d26 D91F     		.short	8153
 1707 0d28 2300     		.short	35
 1708 0d2a 310A     		.short	2609
 1709 0d2c 4B17     		.short	5963
 1710 0d2e 801F     		.short	8064
 1711 0d30 3804     		.short	1080
 1712 0d32 072F     		.short	12039
 1713 0d34 FC20     		.short	8444
 1714 0d36 EC0B     		.short	3052
 1715 0d38 E50E     		.short	3813
 1716 0d3a 392B     		.short	11065
 1717 0d3c 501A     		.short	6736
 1718 0d3e 0621     		.short	8454
 1719 0d40 2409     		.short	2340
 1720 0d42 E31D     		.short	7651
 1721 0d44 7607     		.short	1910
 1722 0d46 D529     		.short	10709
 1723 0d48 4508     		.short	2117
 1724 0d4a A525     		.short	9637
 1725 0d4c 0219     		.short	6402
 1726 0d4e 8C17     		.short	6028
 1727 0d50 4C08     		.short	2124
 1728 0d52 151E     		.short	7701
 1729 0d54 770A     		.short	2679
 1730 0d56 3F14     		.short	5183
 1731 0d58 7E18     		.short	6270
 1732 0d5a 001D     		.short	7424
 1733 0d5c 250A     		.short	2597
 1734 0d5e 8B1A     		.short	6795
 1735 0d60 0624     		.short	9222
 1736 0d62 552A     		.short	10837
 1737 0d64 1801     		.short	280
 1738 0d66 8721     		.short	8583
 1739 0d68 C60C     		.short	3270
 1740 0d6a 611A     		.short	6753
 1741 0d6c 3209     		.short	2354
 1742 0d6e C30E     		.short	3779
 1743 0d70 D617     		.short	6102
 1744 0d72 7C12     		.short	4732
 1745 0d74 2617     		.short	5926
 1746 0d76 C109     		.short	2497
 1747 0d78 C021     		.short	8640
 1748 0d7a 3128     		.short	10289
 1749 0d7c DB17     		.short	6107
 1750 0d7e 5F2F     		.short	12127
 1751 0d80 8E0B     		.short	2958
 1752 0d82 FF2F     		.short	12287
 1753 0d84 3428     		.short	10292
 1754 0d86 961F     		.short	8086
 1755 0d88 3103     		.short	817
 1756 0d8a B50F     		.short	4021
 1757 0d8c 320A     		.short	2610
 1758 0d8e A405     		.short	1444
 1759 0d90 0B17     		.short	5899
 1760 0d92 C82D     		.short	11720
 1761 0d94 DC0C     		.short	3292
 1762 0d96 7809     		.short	2424
 1763 0d98 E213     		.short	5090
 1764 0d9a 4A1C     		.short	7242
 1765 0d9c 5514     		.short	5205
 1766 0d9e A114     		.short	5281
 1767 0da0 E426     		.short	9956
 1768 0da2 8E0A     		.short	2702
 1769 0da4 001A     		.short	6656
 1770 0da6 DF02     		.short	735
 1771 0da8 C308     		.short	2243
 1772 0daa 882D     		.short	11656
 1773 0dac 4103     		.short	833
 1774 0dae 230C     		.short	3107
 1775 0db0 7C17     		.short	6012
 1776 0db2 911A     		.short	6801
 1777 0db4 6604     		.short	1126
 1778 0db6 C318     		.short	6339
 1779 0db8 8214     		.short	5250
 1780 0dba 9728     		.short	10391
 1781 0dbc AA25     		.short	9642
 1782 0dbe 9E14     		.short	5278
 1783 0dc0 B90D     		.short	3513
 1784 0dc2 2926     		.short	9769
 1785 0dc4 D10B     		.short	3025
 1786 0dc6 0B03     		.short	779
 1787 0dc8 D924     		.short	9433
 1788 0dca 400D     		.short	3392
 1789 0dcc 0D1D     		.short	7437
 1790 0dce 9C02     		.short	668
 1791 0dd0 C827     		.short	10184
 1792 0dd2 AF1F     		.short	8111
 1793 0dd4 7F19     		.short	6527
 1794 0dd6 A819     		.short	6568
 1795 0dd8 4F2A     		.short	10831
 1796 0dda 5219     		.short	6482
 1797 0ddc 4720     		.short	8263
 1798 0dde 4F16     		.short	5711
 1799 0de0 3426     		.short	9780
 1800 0de2 D301     		.short	467
 1801 0de4 5615     		.short	5462
 1802 0de6 4911     		.short	4425
 1803 0de8 DF2E     		.short	11999
 1804 0dea B504     		.short	1205
 1805 0dec 9713     		.short	5015
 1806 0dee 061B     		.short	6918
 1807 0df0 E813     		.short	5096
 1808 0df2 F30E     		.short	3827
 1809 0df4 9515     		.short	5525
 1810 0df6 3B2D     		.short	11579
 1811 0df8 BE0D     		.short	3518
 1812 0dfa 0B13     		.short	4875
 1813 0dfc DC1C     		.short	7388
 1814 0dfe 8B07     		.short	1931
 1815 0e00 D719     		.short	6615
 1816 0e02 0506     		.short	1541
 1817 0e04 0422     		.short	8708
 1818 0e06 0401     		.short	260
 1819 0e08 390D     		.short	3385
 1820 0e0a B812     		.short	4792
 1821 0e0c 2711     		.short	4391
 1822 0e0e 4116     		.short	5697
 1823 0e10 D71E     		.short	7895
 1824 0e12 6B08     		.short	2155
 1825 0e14 A91C     		.short	7337
 1826 0e16 EC00     		.short	236
 1827 0e18 8B29     		.short	10635
 1828 0e1a 0E2D     		.short	11534
 1829 0e1c 7207     		.short	1906
 1830 0e1e B912     		.short	4793
 1831 0e20 3725     		.short	9527
 1832 0e22 471C     		.short	7239
 1833 0e24 A220     		.short	8354
 1834 0e26 0114     		.short	5121
 1835 0e28 A629     		.short	10662
 1836 0e2a 0709     		.short	2311
 1837 0e2c 120D     		.short	3346
 1838 0e2e 6C21     		.short	8556
 1839 0e30 C302     		.short	707
 1840 0e32 4004     		.short	1088
 1841 0e34 4813     		.short	4936
 1842 0e36 A602     		.short	678
 1843 0e38 0528     		.short	10245
 1844 0e3a 1200     		.short	18
 1845 0e3c 3416     		.short	5684
 1846 0e3e C003     		.short	960
 1847 0e40 6B11     		.short	4459
 1848 0e42 151F     		.short	7957
 1849 0e44 E200     		.short	226
 1850 0e46 9309     		.short	2451
 1851 0e48 0600     		.short	6
 1852 0e4a AA22     		.short	8874
 1853 0e4c 4001     		.short	320
 1854 0e4e 9A18     		.short	6298
 1855 0e50 0323     		.short	8963
 1856 0e52 1F22     		.short	8735
 1857 0e54 240B     		.short	2852
 1858 0e56 A50B     		.short	2981
 1859 0e58 AB06     		.short	1707
 1860 0e5a 2015     		.short	5408
 1861 0e5c 9913     		.short	5017
 1862 0e5e 9426     		.short	9876
 1863 0e60 3E26     		.short	9790
 1864 0e62 980B     		.short	2968
 1865 0e64 6B07     		.short	1899
 1866 0e66 491A     		.short	6729
 1867 0e68 5710     		.short	4183
 1868 0e6a AA14     		.short	5290
 1869 0e6c 6427     		.short	10084
 1870 0e6e FF1D     		.short	7679
 1871 0e70 051F     		.short	7941
 1872 0e72 2822     		.short	8744
 1873 0e74 3E16     		.short	5694
 1874 0e76 850D     		.short	3461
 1875 0e78 4F10     		.short	4175
 1876 0e7a 7316     		.short	5747
 1877 0e7c B915     		.short	5561
 1878 0e7e 320D     		.short	3378
 1879 0e80 6B14     		.short	5227
 1880 0e82 B803     		.short	952
 1881 0e84 DF10     		.short	4319
 1882 0e86 5226     		.short	9810
 1883 0e88 0411     		.short	4356
 1884 0e8a 100C     		.short	3088
 1885 0e8c 6E2B     		.short	11118
 1886 0e8e 4803     		.short	840
 1887 0e90 7118     		.short	6257
 1888 0e92 E601     		.short	486
 1889 0e94 7017     		.short	6000
 1890 0e96 3E05     		.short	1342
 1891 0e98 8E28     		.short	10382
 1892 0e9a 8117     		.short	6017
 1893 0e9c BE12     		.short	4798
 1894 0e9e 7115     		.short	5489
 1895 0ea0 9211     		.short	4498
 1896 0ea2 6110     		.short	4193
 1897 0ea4 0209     		.short	2306
 1898 0ea6 7919     		.short	6521
 1899 0ea8 C305     		.short	1475
 1900 0eaa E418     		.short	6372
 1901 0eac 4523     		.short	9029
 1902 0eae 651F     		.short	8037
 1903 0eb0 5906     		.short	1625
 1904 0eb2 6C1B     		.short	7020
 1905 0eb4 8412     		.short	4740
 1906 0eb6 6216     		.short	5730
 1907 0eb8 141F     		.short	7956
 1908 0eba CF18     		.short	6351
 1909 0ebc 5E19     		.short	6494
 1910 0ebe 051B     		.short	6917
 1911 0ec0 8D2C     		.short	11405
 1912 0ec2 3F1D     		.short	7487
 1913 0ec4 DA27     		.short	10202
 1914 0ec6 AB27     		.short	10155
 1915 0ec8 F21D     		.short	7666
 1916 0eca 841D     		.short	7556
 1917 0ecc F52C     		.short	11509
 1918 0ece 0A06     		.short	1546
 1919 0ed0 AB19     		.short	6571
 1920 0ed2 D727     		.short	10199
 1921 0ed4 D908     		.short	2265
 1922 0ed6 9F1C     		.short	7327
 1923 0ed8 C016     		.short	5824
 1924 0eda 842C     		.short	11396
 1925 0edc 3D2D     		.short	11581
 1926 0ede FA25     		.short	9722
 1927 0ee0 CB08     		.short	2251
 1928 0ee2 BF2B     		.short	11199
 1929 0ee4 EC14     		.short	5356
 1930 0ee6 F01C     		.short	7408
 1931 0ee8 2D0B     		.short	2861
 1932 0eea A30F     		.short	4003
 1933 0eec FF23     		.short	9215
 1934 0eee E401     		.short	484
 1935 0ef0 661D     		.short	7526
 1936 0ef2 C124     		.short	9409
 1937 0ef4 CB2F     		.short	12235
 1938 0ef6 0D18     		.short	6157
 1939 0ef8 4123     		.short	9025
 1940 0efa 4908     		.short	2121
 1941 0efc 0F28     		.short	10255
 1942 0efe D709     		.short	2519
 1943 0f00 3D25     		.short	9533
 1944 0f02 F00E     		.short	3824
 1945 0f04 E221     		.short	8674
 1946 0f06 9B2C     		.short	11419
 1947 0f08 882A     		.short	10888
 1948 0f0a 9A12     		.short	4762
 1949 0f0c 272C     		.short	11303
 1950 0f0e 0110     		.short	4097
 1951 0f10 6E09     		.short	2414
 1952 0f12 6019     		.short	6496
 1953 0f14 E126     		.short	9953
 1954 0f16 3A29     		.short	10554
 1955 0f18 2803     		.short	808
 1956 0f1a B70B     		.short	2999
 1957 0f1c 5208     		.short	2130
 1958 0f1e BE10     		.short	4286
 1959 0f20 2E2F     		.short	12078
 1960 0f22 151D     		.short	7445
 1961 0f24 0C14     		.short	5132
 1962 0f26 EB1E     		.short	7915
 1963 0f28 F500     		.short	245
 1964 0f2a 5617     		.short	5974
 1965 0f2c 0A13     		.short	4874
 1966 0f2e 7C1C     		.short	7292
 1967 0f30 881D     		.short	7560
 1968 0f32 2B29     		.short	10539
 1969 0f34 E026     		.short	9952
 1970 0f36 7323     		.short	9075
 1971 0f38 4108     		.short	2113
 1972 0f3a 890E     		.short	3721
 1973 0f3c 2D28     		.short	10285
 1974 0f3e 2627     		.short	10022
 1975 0f40 6A25     		.short	9578
 1976 0f42 E622     		.short	8934
 1977 0f44 422B     		.short	11074
 1978 0f46 1A25     		.short	9498
 1979 0f48 2601     		.short	294
 1980 0f4a 6712     		.short	4711
 1981 0f4c 3F0D     		.short	3391
 1982 0f4e 6105     		.short	1377
 1983 0f50 7023     		.short	9072
 1984 0f52 CD27     		.short	10189
 1985 0f54 D911     		.short	4569
 1986 0f56 8A2A     		.short	10890
 1987 0f58 B526     		.short	9909
 1988 0f5a 0B1B     		.short	6923
 1989 0f5c 3500     		.short	53
 1990 0f5e 2D12     		.short	4653
 1991 0f60 B701     		.short	439
 1992 0f62 0D28     		.short	10253
 1993 0f64 741B     		.short	7028
 1994 0f66 DF27     		.short	10207
 1995 0f68 9720     		.short	8343
 1996 0f6a 7504     		.short	1141
 1997 0f6c FC09     		.short	2556
 1998 0f6e B11D     		.short	7601
 1999 0f70 D61F     		.short	8150
 2000 0f72 8629     		.short	10630
 2001 0f74 C821     		.short	8648
 2002 0f76 6826     		.short	9832
 2003 0f78 0F1F     		.short	7951
 2004 0f7a ED2B     		.short	11245
 2005 0f7c 5308     		.short	2131
 2006 0f7e 8516     		.short	5765
 2007 0f80 6728     		.short	10343
 2008 0f82 3526     		.short	9781
 2009 0f84 9E0A     		.short	2718
 2010 0f86 8B05     		.short	1419
 2011 0f88 B311     		.short	4531
 2012 0f8a 040F     		.short	3844
 2013 0f8c E20F     		.short	4066
 2014 0f8e C510     		.short	4293
 2015 0f90 892D     		.short	11657
 2016 0f92 052D     		.short	11525
 2017 0f94 592C     		.short	11353
 2018 0f96 D910     		.short	4313
 2019 0f98 0513     		.short	4869
 2020 0f9a 9A2F     		.short	12186
 2021 0f9c 4B06     		.short	1611
 2022 0f9e 8C2A     		.short	10892
 2023 0fa0 E12C     		.short	11489
 2024 0fa2 8122     		.short	8833
 2025 0fa4 5909     		.short	2393
 2026 0fa6 0F00     		.short	15
 2027 0fa8 4E2A     		.short	10830
 2028 0faa 8B13     		.short	5003
 2029 0fac 1100     		.short	17
 2030 0fae 3502     		.short	565
 2031 0fb0 0317     		.short	5891
 2032 0fb2 912F     		.short	12177
 2033 0fb4 322B     		.short	11058
 2034 0fb6 AC28     		.short	10412
 2035 0fb8 B522     		.short	8885
 2036 0fba 860F     		.short	3974
 2037 0fbc E52A     		.short	10981
 2038 0fbe DA1B     		.short	7130
 2039 0fc0 D016     		.short	5840
 2040 0fc2 F228     		.short	10482
 2041 0fc4 9220     		.short	8338
 2042 0fc6 9317     		.short	6035
 2043 0fc8 341B     		.short	6964
 2044 0fca 2606     		.short	1574
 2045 0fcc B82A     		.short	10936
 2046 0fce E407     		.short	2020
 2047 0fd0 A109     		.short	2465
 2048 0fd2 FF1F     		.short	8191
 2049 0fd4 8001     		.short	384
 2050 0fd6 520A     		.short	2642
 2051 0fd8 A90A     		.short	2729
 2052 0fda 1715     		.short	5399
 2053 0fdc 7F08     		.short	2175
 2054 0fde B424     		.short	9396
 2055 0fe0 D32E     		.short	11987
 2056 0fe2 631F     		.short	8035
 2057 0fe4 1711     		.short	4375
 2058 0fe6 D319     		.short	6611
 2059 0fe8 9213     		.short	5010
 2060 0fea 242E     		.short	11812
 2061 0fec AB23     		.short	9131
 2062 0fee A32C     		.short	11427
 2063 0ff0 6800     		.short	104
 2064 0ff2 CC18     		.short	6348
 2065 0ff4 AB25     		.short	9643
 2066 0ff6 651A     		.short	6757
 2067 0ff8 4E2F     		.short	12110
 2068 0ffa F115     		.short	5617
 2069 0ffc B72A     		.short	10935
 2070 0ffe 1D02     		.short	541
 2071 1000 8700     		.short	135
 2072 1002 E10B     		.short	3041
 2073 1004 201C     		.short	7200
 2074 1006 7E19     		.short	6526
 2075 1008 DD13     		.short	5085
 2076 100a 682F     		.short	12136
 2077 100c 4A03     		.short	842
 2078 100e 2110     		.short	4129
 2079 1010 051E     		.short	7685
 2080 1012 472B     		.short	11079
 2081 1014 EA20     		.short	8426
 2082 1016 F003     		.short	1008
 2083 1018 A50A     		.short	2725
 2084 101a FC2D     		.short	11772
 2085 101c AA17     		.short	6058
 2086 101e 4D04     		.short	1101
 2087 1020 9E07     		.short	1950
 2088 1022 E820     		.short	8424
 2089 1024 3816     		.short	5688
 2090 1026 DC1A     		.short	6876
 2091 1028 E52E     		.short	12005
 2092 102a 5F27     		.short	10079
 2093 102c D714     		.short	5335
 2094 102e 9F03     		.short	927
 2095 1030 EA06     		.short	1770
 2096 1032 1101     		.short	273
 2097 1034 B920     		.short	8377
 2098 1036 DF08     		.short	2271
 2099 1038 6914     		.short	5225
 2100 103a 2B28     		.short	10283
 2101 103c 7400     		.short	116
 2102 103e 1F2E     		.short	11807
 2103 1040 5B00     		.short	91
 2104 1042 B32D     		.short	11699
 2105 1044 F502     		.short	757
 2106 1046 1805     		.short	1304
 2107 1048 641D     		.short	7524
 2108 104a 3319     		.short	6451
 2109 104c 601F     		.short	8032
 2110 104e DA1F     		.short	8154
 2111 1050 201D     		.short	7456
 2112 1052 5F10     		.short	4191
 2113 1054 3501     		.short	309
 2114 1056 0E09     		.short	2318
 2115 1058 F408     		.short	2292
 2116 105a 9928     		.short	10393
 2117 105c 772D     		.short	11639
 2118 105e 0925     		.short	9481
 2119 1060 CE2F     		.short	12238
 2120 1062 6229     		.short	10594
 2121 1064 6125     		.short	9569
 2122 1066 E81E     		.short	7912
 2123 1068 8028     		.short	10368
 2124 106a A126     		.short	9889
 2125 106c D42F     		.short	12244
 2126 106e 0B1C     		.short	7179
 2127 1070 540F     		.short	3924
 2128 1072 740C     		.short	3188
 2129 1074 6F01     		.short	367
 2130 1076 1D08     		.short	2077
 2131 1078 5001     		.short	336
 2132 107a 0815     		.short	5384
 2133 107c FF15     		.short	5631
 2134 107e 9421     		.short	8596
 2135 1080 0D12     		.short	4621
 2136 1082 EF06     		.short	1775
 2137 1084 A222     		.short	8866
 2138 1086 C301     		.short	451
 2139 1088 DC17     		.short	6108
 2140 108a 2505     		.short	1317
 2141 108c 6618     		.short	6246
 2142 108e 5B22     		.short	8795
 2143 1090 0817     		.short	5896
 2144 1092 731C     		.short	7283
 2145 1094 3C0C     		.short	3132
 2146 1096 2C2D     		.short	11564
 2147 1098 7113     		.short	4977
 2148 109a 812F     		.short	12161
 2149 109c CB1C     		.short	7371
 2150 109e 5605     		.short	1366
 2151 10a0 622F     		.short	12130
 2152 10a2 7B29     		.short	10619
 2153 10a4 E10E     		.short	3809
 2154 10a6 1D14     		.short	5149
 2155 10a8 9C18     		.short	6300
 2156 10aa 4E0A     		.short	2638
 2157 10ac 6510     		.short	4197
 2158 10ae 8A05     		.short	1418
 2159 10b0 5127     		.short	10065
 2160 10b2 3C10     		.short	4156
 2161 10b4 B520     		.short	8373
 2162 10b6 C421     		.short	8644
 2163 10b8 CD28     		.short	10445
 2164 10ba 7203     		.short	882
 2165 10bc DE1F     		.short	8158
 2166 10be BD27     		.short	10173
 2167 10c0 2326     		.short	9763
 2168 10c2 9F2F     		.short	12191
 2169 10c4 CB01     		.short	459
 2170 10c6 960B     		.short	2966
 2171 10c8 5E0C     		.short	3166
 2172 10ca 9501     		.short	405
 2173 10cc 8813     		.short	5000
 2174 10ce 5F24     		.short	9311
 2175 10d0 0419     		.short	6404
 2176 10d2 1A23     		.short	8986
 2177 10d4 0F06     		.short	1551
 2178 10d6 EF1F     		.short	8175
 2179 10d8 2E0E     		.short	3630
 2180 10da 0E2A     		.short	10766
 2181 10dc 3124     		.short	9265
 2182 10de BC02     		.short	700
 2183 10e0 7D21     		.short	8573
 2184 10e2 2425     		.short	9508
 2185 10e4 E619     		.short	6630
 2186 10e6 AD2C     		.short	11437
 2187 10e8 4B2D     		.short	11595
 2188 10ea DA16     		.short	5850
 2189 10ec 6E0F     		.short	3950
 2190 10ee A712     		.short	4775
 2191 10f0 A52E     		.short	11941
 2192 10f2 A605     		.short	1446
 2193 10f4 8217     		.short	6018
 2194 10f6 3A0D     		.short	3386
 2195 10f8 CE2C     		.short	11470
 2196 10fa BE14     		.short	5310
 2197 10fc 6415     		.short	5476
 2198 10fe 2902     		.short	553
 2199 1100 0225     		.short	9474
 2200 1102 1A0A     		.short	2586
 2201 1104 9705     		.short	1431
 2202 1106 B50A     		.short	2741
 2203 1108 D901     		.short	473
 2204 110a 772C     		.short	11383
 2205 110c 8912     		.short	4745
 2206 110e 4403     		.short	836
 2207 1110 DE0F     		.short	4062
 2208 1112 AA29     		.short	10666
 2209 1114 2F1E     		.short	7727
 2210 1116 E82D     		.short	11752
 2211 1118 9E15     		.short	5534
 2212 111a 3801     		.short	312
 2213 111c D310     		.short	4307
 2214 111e FF10     		.short	4351
 2215 1120 8416     		.short	5764
 2216 1122 E721     		.short	8679
 2217 1124 BD20     		.short	8381
 2218 1126 FB1F     		.short	8187
 2219 1128 0500     		.short	5
 2220 112a E31C     		.short	7395
 2221 112c 0B11     		.short	4363
 2222 112e 8004     		.short	1152
 2223 1130 2D15     		.short	5421
 2224 1132 6F14     		.short	5231
 2225 1134 4919     		.short	6473
 2226 1136 B401     		.short	436
 2227 1138 8F1D     		.short	7567
 2228 113a 9B21     		.short	8603
 2229 113c 5518     		.short	6229
 2230 113e 2620     		.short	8230
 2231              		.section	.text.mq_conv_small,"ax",%progbits
 2232              		.align	1
 2233              		.arch armv7e-m
 2234              		.syntax unified
 2235              		.thumb
 2236              		.thumb_func
 2237              		.fpu softvfp
 2239              	mq_conv_small:
 2240              	.LFB18:
 2241              		.file 1 "vrfy.c"
   1:vrfy.c        **** /*
   2:vrfy.c        ****  * Falcon signature verification.
   3:vrfy.c        ****  *
   4:vrfy.c        ****  * ==========================(LICENSE BEGIN)============================
   5:vrfy.c        ****  *
   6:vrfy.c        ****  * Copyright (c) 2017-2019  Falcon Project
   7:vrfy.c        ****  *
   8:vrfy.c        ****  * Permission is hereby granted, free of charge, to any person obtaining
   9:vrfy.c        ****  * a copy of this software and associated documentation files (the
  10:vrfy.c        ****  * "Software"), to deal in the Software without restriction, including
  11:vrfy.c        ****  * without limitation the rights to use, copy, modify, merge, publish,
  12:vrfy.c        ****  * distribute, sublicense, and/or sell copies of the Software, and to
  13:vrfy.c        ****  * permit persons to whom the Software is furnished to do so, subject to
  14:vrfy.c        ****  * the following conditions:
  15:vrfy.c        ****  *
  16:vrfy.c        ****  * The above copyright notice and this permission notice shall be
  17:vrfy.c        ****  * included in all copies or substantial portions of the Software.
  18:vrfy.c        ****  *
  19:vrfy.c        ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  20:vrfy.c        ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  21:vrfy.c        ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  22:vrfy.c        ****  * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  23:vrfy.c        ****  * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  24:vrfy.c        ****  * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  25:vrfy.c        ****  * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  26:vrfy.c        ****  *
  27:vrfy.c        ****  * ===========================(LICENSE END)=============================
  28:vrfy.c        ****  *
  29:vrfy.c        ****  * @author   Thomas Pornin <thomas.pornin@nccgroup.com>
  30:vrfy.c        ****  */
  31:vrfy.c        **** 
  32:vrfy.c        **** #include "inner.h"
  33:vrfy.c        **** 
  34:vrfy.c        **** /* ===================================================================== */
  35:vrfy.c        **** /*
  36:vrfy.c        ****  * Constants for NTT.
  37:vrfy.c        ****  *
  38:vrfy.c        ****  *   n = 2^logn  (2 <= n <= 1024)
  39:vrfy.c        ****  *   phi = X^n + 1
  40:vrfy.c        ****  *   q = 12289
  41:vrfy.c        ****  *   q0i = -1/q mod 2^16
  42:vrfy.c        ****  *   R = 2^16 mod q
  43:vrfy.c        ****  *   R2 = 2^32 mod q
  44:vrfy.c        ****  */
  45:vrfy.c        **** 
  46:vrfy.c        **** #define Q     12289
  47:vrfy.c        **** #define Q0I   12287
  48:vrfy.c        **** #define R      4091
  49:vrfy.c        **** #define R2    10952
  50:vrfy.c        **** 
  51:vrfy.c        **** /*
  52:vrfy.c        ****  * Table for NTT, binary case:
  53:vrfy.c        ****  *   GMb[x] = R*(g^rev(x)) mod q
  54:vrfy.c        ****  * where g = 7 (it is a 2048-th primitive root of 1 modulo q)
  55:vrfy.c        ****  * and rev() is the bit-reversal function over 10 bits.
  56:vrfy.c        ****  */
  57:vrfy.c        **** static const uint16_t GMb[] = {
  58:vrfy.c        **** 	 4091,  7888, 11060, 11208,  6960,  4342,  6275,  9759,
  59:vrfy.c        **** 	 1591,  6399,  9477,  5266,   586,  5825,  7538,  9710,
  60:vrfy.c        **** 	 1134,  6407,  1711,   965,  7099,  7674,  3743,  6442,
  61:vrfy.c        **** 	10414,  8100,  1885,  1688,  1364, 10329, 10164,  9180,
  62:vrfy.c        **** 	12210,  6240,   997,   117,  4783,  4407,  1549,  7072,
  63:vrfy.c        **** 	 2829,  6458,  4431,  8877,  7144,  2564,  5664,  4042,
  64:vrfy.c        **** 	12189,   432, 10751,  1237,  7610,  1534,  3983,  7863,
  65:vrfy.c        **** 	 2181,  6308,  8720,  6570,  4843,  1690,    14,  3872,
  66:vrfy.c        **** 	 5569,  9368, 12163,  2019,  7543,  2315,  4673,  7340,
  67:vrfy.c        **** 	 1553,  1156,  8401, 11389,  1020,  2967, 10772,  7045,
  68:vrfy.c        **** 	 3316, 11236,  5285, 11578, 10637, 10086,  9493,  6180,
  69:vrfy.c        **** 	 9277,  6130,  3323,   883, 10469,   489,  1502,  2851,
  70:vrfy.c        **** 	11061,  9729,  2742, 12241,  4970, 10481, 10078,  1195,
  71:vrfy.c        **** 	  730,  1762,  3854,  2030,  5892, 10922,  9020,  5274,
  72:vrfy.c        **** 	 9179,  3604,  3782, 10206,  3180,  3467,  4668,  2446,
  73:vrfy.c        **** 	 7613,  9386,   834,  7703,  6836,  3403,  5351, 12276,
  74:vrfy.c        **** 	 3580,  1739, 10820,  9787, 10209,  4070, 12250,  8525,
  75:vrfy.c        **** 	10401,  2749,  7338, 10574,  6040,   943,  9330,  1477,
  76:vrfy.c        **** 	 6865,  9668,  3585,  6633, 12145,  4063,  3684,  7680,
  77:vrfy.c        **** 	 8188,  6902,  3533,  9807,  6090,   727, 10099,  7003,
  78:vrfy.c        **** 	 6945,  1949,  9731, 10559,  6057,   378,  7871,  8763,
  79:vrfy.c        **** 	 8901,  9229,  8846,  4551,  9589, 11664,  7630,  8821,
  80:vrfy.c        **** 	 5680,  4956,  6251,  8388, 10156,  8723,  2341,  3159,
  81:vrfy.c        **** 	 1467,  5460,  8553,  7783,  2649,  2320,  9036,  6188,
  82:vrfy.c        **** 	  737,  3698,  4699,  5753,  9046,  3687,    16,   914,
  83:vrfy.c        **** 	 5186, 10531,  4552,  1964,  3509,  8436,  7516,  5381,
  84:vrfy.c        **** 	10733,  3281,  7037,  1060,  2895,  7156,  8887,  5357,
  85:vrfy.c        **** 	 6409,  8197,  2962,  6375,  5064,  6634,  5625,   278,
  86:vrfy.c        **** 	  932, 10229,  8927,  7642,   351,  9298,   237,  5858,
  87:vrfy.c        **** 	 7692,  3146, 12126,  7586,  2053, 11285,  3802,  5204,
  88:vrfy.c        **** 	 4602,  1748, 11300,   340,  3711,  4614,   300, 10993,
  89:vrfy.c        **** 	 5070, 10049, 11616, 12247,  7421, 10707,  5746,  5654,
  90:vrfy.c        **** 	 3835,  5553,  1224,  8476,  9237,  3845,   250, 11209,
  91:vrfy.c        **** 	 4225,  6326,  9680, 12254,  4136,  2778,   692,  8808,
  92:vrfy.c        **** 	 6410,  6718, 10105, 10418,  3759,  7356, 11361,  8433,
  93:vrfy.c        **** 	 6437,  3652,  6342,  8978,  5391,  2272,  6476,  7416,
  94:vrfy.c        **** 	 8418, 10824, 11986,  5733,   876,  7030,  2167,  2436,
  95:vrfy.c        **** 	 3442,  9217,  8206,  4858,  5964,  2746,  7178,  1434,
  96:vrfy.c        **** 	 7389,  8879, 10661, 11457,  4220,  1432, 10832,  4328,
  97:vrfy.c        **** 	 8557,  1867,  9454,  2416,  3816,  9076,   686,  5393,
  98:vrfy.c        **** 	 2523,  4339,  6115,   619,   937,  2834,  7775,  3279,
  99:vrfy.c        **** 	 2363,  7488,  6112,  5056,   824, 10204, 11690,  1113,
 100:vrfy.c        **** 	 2727,  9848,   896,  2028,  5075,  2654, 10464,  7884,
 101:vrfy.c        **** 	12169,  5434,  3070,  6400,  9132, 11672, 12153,  4520,
 102:vrfy.c        **** 	 1273,  9739, 11468,  9937, 10039,  9720,  2262,  9399,
 103:vrfy.c        **** 	11192,   315,  4511,  1158,  6061,  6751, 11865,   357,
 104:vrfy.c        **** 	 7367,  4550,   983,  8534,  8352, 10126,  7530,  9253,
 105:vrfy.c        **** 	 4367,  5221,  3999,  8777,  3161,  6990,  4130, 11652,
 106:vrfy.c        **** 	 3374, 11477,  1753,   292,  8681,  2806, 10378, 12188,
 107:vrfy.c        **** 	 5800, 11811,  3181,  1988,  1024,  9340,  2477, 10928,
 108:vrfy.c        **** 	 4582,  6750,  3619,  5503,  5233,  2463,  8470,  7650,
 109:vrfy.c        **** 	 7964,  6395,  1071,  1272,  3474, 11045,  3291, 11344,
 110:vrfy.c        **** 	 8502,  9478,  9837,  1253,  1857,  6233,  4720, 11561,
 111:vrfy.c        **** 	 6034,  9817,  3339,  1797,  2879,  6242,  5200,  2114,
 112:vrfy.c        **** 	 7962,  9353, 11363,  5475,  6084,  9601,  4108,  7323,
 113:vrfy.c        **** 	10438,  9471,  1271,   408,  6911,  3079,   360,  8276,
 114:vrfy.c        **** 	11535,  9156,  9049, 11539,   850,  8617,   784,  7919,
 115:vrfy.c        **** 	 8334, 12170,  1846, 10213, 12184,  7827, 11903,  5600,
 116:vrfy.c        **** 	 9779,  1012,   721,  2784,  6676,  6552,  5348,  4424,
 117:vrfy.c        **** 	 6816,  8405,  9959,  5150,  2356,  5552,  5267,  1333,
 118:vrfy.c        **** 	 8801,  9661,  7308,  5788,  4910,   909, 11613,  4395,
 119:vrfy.c        **** 	 8238,  6686,  4302,  3044,  2285, 12249,  1963,  9216,
 120:vrfy.c        **** 	 4296, 11918,   695,  4371,  9793,  4884,  2411, 10230,
 121:vrfy.c        **** 	 2650,   841,  3890, 10231,  7248,  8505, 11196,  6688,
 122:vrfy.c        **** 	 4059,  6060,  3686,  4722, 11853,  5816,  7058,  6868,
 123:vrfy.c        **** 	11137,  7926,  4894, 12284,  4102,  3908,  3610,  6525,
 124:vrfy.c        **** 	 7938,  7982, 11977,  6755,   537,  4562,  1623,  8227,
 125:vrfy.c        **** 	11453,  7544,   906, 11816,  9548, 10858,  9703,  2815,
 126:vrfy.c        **** 	11736,  6813,  6979,   819,  8903,  6271, 10843,   348,
 127:vrfy.c        **** 	 7514,  8339,  6439,   694,   852,  5659,  2781,  3716,
 128:vrfy.c        **** 	11589,  3024,  1523,  8659,  4114, 10738,  3303,  5885,
 129:vrfy.c        **** 	 2978,  7289, 11884,  9123,  9323, 11830,    98,  2526,
 130:vrfy.c        **** 	 2116,  4131, 11407,  1844,  3645,  3916,  8133,  2224,
 131:vrfy.c        **** 	10871,  8092,  9651,  5989,  7140,  8480,  1670,   159,
 132:vrfy.c        **** 	10923,  4918,   128,  7312,   725,  9157,  5006,  6393,
 133:vrfy.c        **** 	 3494,  6043, 10972,  6181, 11838,  3423, 10514,  7668,
 134:vrfy.c        **** 	 3693,  6658,  6905, 11953, 10212, 11922,  9101,  8365,
 135:vrfy.c        **** 	 5110,    45,  2400,  1921,  4377,  2720,  1695,    51,
 136:vrfy.c        **** 	 2808,   650,  1896,  9997,  9971, 11980,  8098,  4833,
 137:vrfy.c        **** 	 4135,  4257,  5838,  4765, 10985, 11532,   590, 12198,
 138:vrfy.c        **** 	  482, 12173,  2006,  7064, 10018,  3912, 12016, 10519,
 139:vrfy.c        **** 	11362,  6954,  2210,   284,  5413,  6601,  3865, 10339,
 140:vrfy.c        **** 	11188,  6231,   517,  9564, 11281,  3863,  1210,  4604,
 141:vrfy.c        **** 	 8160, 11447,   153,  7204,  5763,  5089,  9248, 12154,
 142:vrfy.c        **** 	11748,  1354,  6672,   179,  5532,  2646,  5941, 12185,
 143:vrfy.c        **** 	  862,  3158,   477,  7279,  5678,  7914,  4254,   302,
 144:vrfy.c        **** 	 2893, 10114,  6890,  9560,  9647, 11905,  4098,  9824,
 145:vrfy.c        **** 	10269,  1353, 10715,  5325,  6254,  3951,  1807,  6449,
 146:vrfy.c        **** 	 5159,  1308,  8315,  3404,  1877,  1231,   112,  6398,
 147:vrfy.c        **** 	11724, 12272,  7286,  1459, 12274,  9896,  3456,   800,
 148:vrfy.c        **** 	 1397, 10678,   103,  7420,  7976,   936,   764,   632,
 149:vrfy.c        **** 	 7996,  8223,  8445,  7758, 10870,  9571,  2508,  1946,
 150:vrfy.c        **** 	 6524, 10158,  1044,  4338,  2457,  3641,  1659,  4139,
 151:vrfy.c        **** 	 4688,  9733, 11148,  3946,  2082,  5261,  2036, 11850,
 152:vrfy.c        **** 	 7636, 12236,  5366,  2380,  1399,  7720,  2100,  3217,
 153:vrfy.c        **** 	10912,  8898,  7578, 11995,  2791,  1215,  3355,  2711,
 154:vrfy.c        **** 	 2267,  2004,  8568, 10176,  3214,  2337,  1750,  4729,
 155:vrfy.c        **** 	 4997,  7415,  6315, 12044,  4374,  7157,  4844,   211,
 156:vrfy.c        **** 	 8003, 10159,  9290, 11481,  1735,  2336,  5793,  9875,
 157:vrfy.c        **** 	 8192,   986,  7527,  1401,   870,  3615,  8465,  2756,
 158:vrfy.c        **** 	 9770,  2034, 10168,  3264,  6132,    54,  2880,  4763,
 159:vrfy.c        **** 	11805,  3074,  8286,  9428,  4881,  6933,  1090, 10038,
 160:vrfy.c        **** 	 2567,   708,   893,  6465,  4962, 10024,  2090,  5718,
 161:vrfy.c        **** 	10743,   780,  4733,  4623,  2134,  2087,  4802,   884,
 162:vrfy.c        **** 	 5372,  5795,  5938,  4333,  6559,  7549,  5269, 10664,
 163:vrfy.c        **** 	 4252,  3260,  5917, 10814,  5768,  9983,  8096,  7791,
 164:vrfy.c        **** 	 6800,  7491,  6272,  1907, 10947,  6289, 11803,  6032,
 165:vrfy.c        **** 	11449,  1171,  9201,  7933,  2479,  7970, 11337,  7062,
 166:vrfy.c        **** 	 8911,  6728,  6542,  8114,  8828,  6595,  3545,  4348,
 167:vrfy.c        **** 	 4610,  2205,  6999,  8106,  5560, 10390,  9321,  2499,
 168:vrfy.c        **** 	 2413,  7272,  6881, 10582,  9308,  9437,  3554,  3326,
 169:vrfy.c        **** 	 5991, 11969,  3415, 12283,  9838, 12063,  4332,  7830,
 170:vrfy.c        **** 	11329,  6605, 12271,  2044, 11611,  7353, 11201, 11582,
 171:vrfy.c        **** 	 3733,  8943,  9978,  1627,  7168,  3935,  5050,  2762,
 172:vrfy.c        **** 	 7496, 10383,   755,  1654, 12053,  4952, 10134,  4394,
 173:vrfy.c        **** 	 6592,  7898,  7497,  8904, 12029,  3581, 10748,  5674,
 174:vrfy.c        **** 	10358,  4901,  7414,  8771,   710,  6764,  8462,  7193,
 175:vrfy.c        **** 	 5371,  7274, 11084,   290,  7864,  6827, 11822,  2509,
 176:vrfy.c        **** 	 6578,  4026,  5807,  1458,  5721,  5762,  4178,  2105,
 177:vrfy.c        **** 	11621,  4852,  8897,  2856, 11510,  9264,  2520,  8776,
 178:vrfy.c        **** 	 7011,  2647,  1898,  7039,  5950, 11163,  5488,  6277,
 179:vrfy.c        **** 	 9182, 11456,   633, 10046, 11554,  5633,  9587,  2333,
 180:vrfy.c        **** 	 7008,  7084,  5047,  7199,  9865,  8997,   569,  6390,
 181:vrfy.c        **** 	10845,  9679,  8268, 11472,  4203,  1997,     2,  9331,
 182:vrfy.c        **** 	  162,  6182,  2000,  3649,  9792,  6363,  7557,  6187,
 183:vrfy.c        **** 	 8510,  9935,  5536,  9019,  3706, 12009,  1452,  3067,
 184:vrfy.c        **** 	 5494,  9692,  4865,  6019,  7106,  9610,  4588, 10165,
 185:vrfy.c        **** 	 6261,  5887,  2652, 10172,  1580, 10379,  4638,  9949
 186:vrfy.c        **** };
 187:vrfy.c        **** 
 188:vrfy.c        **** /*
 189:vrfy.c        ****  * Table for inverse NTT, binary case:
 190:vrfy.c        ****  *   iGMb[x] = R*((1/g)^rev(x)) mod q
 191:vrfy.c        ****  * Since g = 7, 1/g = 8778 mod 12289.
 192:vrfy.c        ****  */
 193:vrfy.c        **** static const uint16_t iGMb[] = {
 194:vrfy.c        **** 	 4091,  4401,  1081,  1229,  2530,  6014,  7947,  5329,
 195:vrfy.c        **** 	 2579,  4751,  6464, 11703,  7023,  2812,  5890, 10698,
 196:vrfy.c        **** 	 3109,  2125,  1960, 10925, 10601, 10404,  4189,  1875,
 197:vrfy.c        **** 	 5847,  8546,  4615,  5190, 11324, 10578,  5882, 11155,
 198:vrfy.c        **** 	 8417, 12275, 10599,  7446,  5719,  3569,  5981, 10108,
 199:vrfy.c        **** 	 4426,  8306, 10755,  4679, 11052,  1538, 11857,   100,
 200:vrfy.c        **** 	 8247,  6625,  9725,  5145,  3412,  7858,  5831,  9460,
 201:vrfy.c        **** 	 5217, 10740,  7882,  7506, 12172, 11292,  6049,    79,
 202:vrfy.c        **** 	   13,  6938,  8886,  5453,  4586, 11455,  2903,  4676,
 203:vrfy.c        **** 	 9843,  7621,  8822,  9109,  2083,  8507,  8685,  3110,
 204:vrfy.c        **** 	 7015,  3269,  1367,  6397, 10259,  8435, 10527, 11559,
 205:vrfy.c        **** 	11094,  2211,  1808,  7319,    48,  9547,  2560,  1228,
 206:vrfy.c        **** 	 9438, 10787, 11800,  1820, 11406,  8966,  6159,  3012,
 207:vrfy.c        **** 	 6109,  2796,  2203,  1652,   711,  7004,  1053,  8973,
 208:vrfy.c        **** 	 5244,  1517,  9322, 11269,   900,  3888, 11133, 10736,
 209:vrfy.c        **** 	 4949,  7616,  9974,  4746, 10270,   126,  2921,  6720,
 210:vrfy.c        **** 	 6635,  6543,  1582,  4868,    42,   673,  2240,  7219,
 211:vrfy.c        **** 	 1296, 11989,  7675,  8578, 11949,   989, 10541,  7687,
 212:vrfy.c        **** 	 7085,  8487,  1004, 10236,  4703,   163,  9143,  4597,
 213:vrfy.c        **** 	 6431, 12052,  2991, 11938,  4647,  3362,  2060, 11357,
 214:vrfy.c        **** 	12011,  6664,  5655,  7225,  5914,  9327,  4092,  5880,
 215:vrfy.c        **** 	 6932,  3402,  5133,  9394, 11229,  5252,  9008,  1556,
 216:vrfy.c        **** 	 6908,  4773,  3853,  8780, 10325,  7737,  1758,  7103,
 217:vrfy.c        **** 	11375, 12273,  8602,  3243,  6536,  7590,  8591, 11552,
 218:vrfy.c        **** 	 6101,  3253,  9969,  9640,  4506,  3736,  6829, 10822,
 219:vrfy.c        **** 	 9130,  9948,  3566,  2133,  3901,  6038,  7333,  6609,
 220:vrfy.c        **** 	 3468,  4659,   625,  2700,  7738,  3443,  3060,  3388,
 221:vrfy.c        **** 	 3526,  4418, 11911,  6232,  1730,  2558, 10340,  5344,
 222:vrfy.c        **** 	 5286,  2190, 11562,  6199,  2482,  8756,  5387,  4101,
 223:vrfy.c        **** 	 4609,  8605,  8226,   144,  5656,  8704,  2621,  5424,
 224:vrfy.c        **** 	10812,  2959, 11346,  6249,  1715,  4951,  9540,  1888,
 225:vrfy.c        **** 	 3764,    39,  8219,  2080,  2502,  1469, 10550,  8709,
 226:vrfy.c        **** 	 5601,  1093,  3784,  5041,  2058,  8399, 11448,  9639,
 227:vrfy.c        **** 	 2059,  9878,  7405,  2496,  7918, 11594,   371,  7993,
 228:vrfy.c        **** 	 3073, 10326,    40, 10004,  9245,  7987,  5603,  4051,
 229:vrfy.c        **** 	 7894,   676, 11380,  7379,  6501,  4981,  2628,  3488,
 230:vrfy.c        **** 	10956,  7022,  6737,  9933,  7139,  2330,  3884,  5473,
 231:vrfy.c        **** 	 7865,  6941,  5737,  5613,  9505, 11568, 11277,  2510,
 232:vrfy.c        **** 	 6689,   386,  4462,   105,  2076, 10443,   119,  3955,
 233:vrfy.c        **** 	 4370, 11505,  3672, 11439,   750,  3240,  3133,   754,
 234:vrfy.c        **** 	 4013, 11929,  9210,  5378, 11881, 11018,  2818,  1851,
 235:vrfy.c        **** 	 4966,  8181,  2688,  6205,  6814,   926,  2936,  4327,
 236:vrfy.c        **** 	10175,  7089,  6047,  9410, 10492,  8950,  2472,  6255,
 237:vrfy.c        **** 	  728,  7569,  6056, 10432, 11036,  2452,  2811,  3787,
 238:vrfy.c        **** 	  945,  8998,  1244,  8815, 11017, 11218,  5894,  4325,
 239:vrfy.c        **** 	 4639,  3819,  9826,  7056,  6786,  8670,  5539,  7707,
 240:vrfy.c        **** 	 1361,  9812,  2949, 11265, 10301,  9108,   478,  6489,
 241:vrfy.c        **** 	  101,  1911,  9483,  3608, 11997, 10536,   812,  8915,
 242:vrfy.c        **** 	  637,  8159,  5299,  9128,  3512,  8290,  7068,  7922,
 243:vrfy.c        **** 	 3036,  4759,  2163,  3937,  3755, 11306,  7739,  4922,
 244:vrfy.c        **** 	11932,   424,  5538,  6228, 11131,  7778, 11974,  1097,
 245:vrfy.c        **** 	 2890, 10027,  2569,  2250,  2352,   821,  2550, 11016,
 246:vrfy.c        **** 	 7769,   136,   617,  3157,  5889,  9219,  6855,   120,
 247:vrfy.c        **** 	 4405,  1825,  9635,  7214, 10261, 11393,  2441,  9562,
 248:vrfy.c        **** 	11176,   599,  2085, 11465,  7233,  6177,  4801,  9926,
 249:vrfy.c        **** 	 9010,  4514,  9455, 11352, 11670,  6174,  7950,  9766,
 250:vrfy.c        **** 	 6896, 11603,  3213,  8473,  9873,  2835, 10422,  3732,
 251:vrfy.c        **** 	 7961,  1457, 10857,  8069,   832,  1628,  3410,  4900,
 252:vrfy.c        **** 	10855,  5111,  9543,  6325,  7431,  4083,  3072,  8847,
 253:vrfy.c        **** 	 9853, 10122,  5259, 11413,  6556,   303,  1465,  3871,
 254:vrfy.c        **** 	 4873,  5813, 10017,  6898,  3311,  5947,  8637,  5852,
 255:vrfy.c        **** 	 3856,   928,  4933,  8530,  1871,  2184,  5571,  5879,
 256:vrfy.c        **** 	 3481, 11597,  9511,  8153,    35,  2609,  5963,  8064,
 257:vrfy.c        **** 	 1080, 12039,  8444,  3052,  3813, 11065,  6736,  8454,
 258:vrfy.c        **** 	 2340,  7651,  1910, 10709,  2117,  9637,  6402,  6028,
 259:vrfy.c        **** 	 2124,  7701,  2679,  5183,  6270,  7424,  2597,  6795,
 260:vrfy.c        **** 	 9222, 10837,   280,  8583,  3270,  6753,  2354,  3779,
 261:vrfy.c        **** 	 6102,  4732,  5926,  2497,  8640, 10289,  6107, 12127,
 262:vrfy.c        **** 	 2958, 12287, 10292,  8086,   817,  4021,  2610,  1444,
 263:vrfy.c        **** 	 5899, 11720,  3292,  2424,  5090,  7242,  5205,  5281,
 264:vrfy.c        **** 	 9956,  2702,  6656,   735,  2243, 11656,   833,  3107,
 265:vrfy.c        **** 	 6012,  6801,  1126,  6339,  5250, 10391,  9642,  5278,
 266:vrfy.c        **** 	 3513,  9769,  3025,   779,  9433,  3392,  7437,   668,
 267:vrfy.c        **** 	10184,  8111,  6527,  6568, 10831,  6482,  8263,  5711,
 268:vrfy.c        **** 	 9780,   467,  5462,  4425, 11999,  1205,  5015,  6918,
 269:vrfy.c        **** 	 5096,  3827,  5525, 11579,  3518,  4875,  7388,  1931,
 270:vrfy.c        **** 	 6615,  1541,  8708,   260,  3385,  4792,  4391,  5697,
 271:vrfy.c        **** 	 7895,  2155,  7337,   236, 10635, 11534,  1906,  4793,
 272:vrfy.c        **** 	 9527,  7239,  8354,  5121, 10662,  2311,  3346,  8556,
 273:vrfy.c        **** 	  707,  1088,  4936,   678, 10245,    18,  5684,   960,
 274:vrfy.c        **** 	 4459,  7957,   226,  2451,     6,  8874,   320,  6298,
 275:vrfy.c        **** 	 8963,  8735,  2852,  2981,  1707,  5408,  5017,  9876,
 276:vrfy.c        **** 	 9790,  2968,  1899,  6729,  4183,  5290, 10084,  7679,
 277:vrfy.c        **** 	 7941,  8744,  5694,  3461,  4175,  5747,  5561,  3378,
 278:vrfy.c        **** 	 5227,   952,  4319,  9810,  4356,  3088, 11118,   840,
 279:vrfy.c        **** 	 6257,   486,  6000,  1342, 10382,  6017,  4798,  5489,
 280:vrfy.c        **** 	 4498,  4193,  2306,  6521,  1475,  6372,  9029,  8037,
 281:vrfy.c        **** 	 1625,  7020,  4740,  5730,  7956,  6351,  6494,  6917,
 282:vrfy.c        **** 	11405,  7487, 10202, 10155,  7666,  7556, 11509,  1546,
 283:vrfy.c        **** 	 6571, 10199,  2265,  7327,  5824, 11396, 11581,  9722,
 284:vrfy.c        **** 	 2251, 11199,  5356,  7408,  2861,  4003,  9215,   484,
 285:vrfy.c        **** 	 7526,  9409, 12235,  6157,  9025,  2121, 10255,  2519,
 286:vrfy.c        **** 	 9533,  3824,  8674, 11419, 10888,  4762, 11303,  4097,
 287:vrfy.c        **** 	 2414,  6496,  9953, 10554,   808,  2999,  2130,  4286,
 288:vrfy.c        **** 	12078,  7445,  5132,  7915,   245,  5974,  4874,  7292,
 289:vrfy.c        **** 	 7560, 10539,  9952,  9075,  2113,  3721, 10285, 10022,
 290:vrfy.c        **** 	 9578,  8934, 11074,  9498,   294,  4711,  3391,  1377,
 291:vrfy.c        **** 	 9072, 10189,  4569, 10890,  9909,  6923,    53,  4653,
 292:vrfy.c        **** 	  439, 10253,  7028, 10207,  8343,  1141,  2556,  7601,
 293:vrfy.c        **** 	 8150, 10630,  8648,  9832,  7951, 11245,  2131,  5765,
 294:vrfy.c        **** 	10343,  9781,  2718,  1419,  4531,  3844,  4066,  4293,
 295:vrfy.c        **** 	11657, 11525, 11353,  4313,  4869, 12186,  1611, 10892,
 296:vrfy.c        **** 	11489,  8833,  2393,    15, 10830,  5003,    17,   565,
 297:vrfy.c        **** 	 5891, 12177, 11058, 10412,  8885,  3974, 10981,  7130,
 298:vrfy.c        **** 	 5840, 10482,  8338,  6035,  6964,  1574, 10936,  2020,
 299:vrfy.c        **** 	 2465,  8191,   384,  2642,  2729,  5399,  2175,  9396,
 300:vrfy.c        **** 	11987,  8035,  4375,  6611,  5010, 11812,  9131, 11427,
 301:vrfy.c        **** 	  104,  6348,  9643,  6757, 12110,  5617, 10935,   541,
 302:vrfy.c        **** 	  135,  3041,  7200,  6526,  5085, 12136,   842,  4129,
 303:vrfy.c        **** 	 7685, 11079,  8426,  1008,  2725, 11772,  6058,  1101,
 304:vrfy.c        **** 	 1950,  8424,  5688,  6876, 12005, 10079,  5335,   927,
 305:vrfy.c        **** 	 1770,   273,  8377,  2271,  5225, 10283,   116, 11807,
 306:vrfy.c        **** 	   91, 11699,   757,  1304,  7524,  6451,  8032,  8154,
 307:vrfy.c        **** 	 7456,  4191,   309,  2318,  2292, 10393, 11639,  9481,
 308:vrfy.c        **** 	12238, 10594,  9569,  7912, 10368,  9889, 12244,  7179,
 309:vrfy.c        **** 	 3924,  3188,   367,  2077,   336,  5384,  5631,  8596,
 310:vrfy.c        **** 	 4621,  1775,  8866,   451,  6108,  1317,  6246,  8795,
 311:vrfy.c        **** 	 5896,  7283,  3132, 11564,  4977, 12161,  7371,  1366,
 312:vrfy.c        **** 	12130, 10619,  3809,  5149,  6300,  2638,  4197,  1418,
 313:vrfy.c        **** 	10065,  4156,  8373,  8644, 10445,   882,  8158, 10173,
 314:vrfy.c        **** 	 9763, 12191,   459,  2966,  3166,   405,  5000,  9311,
 315:vrfy.c        **** 	 6404,  8986,  1551,  8175,  3630, 10766,  9265,   700,
 316:vrfy.c        **** 	 8573,  9508,  6630, 11437, 11595,  5850,  3950,  4775,
 317:vrfy.c        **** 	11941,  1446,  6018,  3386, 11470,  5310,  5476,   553,
 318:vrfy.c        **** 	 9474,  2586,  1431,  2741,   473, 11383,  4745,   836,
 319:vrfy.c        **** 	 4062, 10666,  7727, 11752,  5534,   312,  4307,  4351,
 320:vrfy.c        **** 	 5764,  8679,  8381,  8187,     5,  7395,  4363,  1152,
 321:vrfy.c        **** 	 5421,  5231,  6473,   436,  7567,  8603,  6229,  8230
 322:vrfy.c        **** };
 323:vrfy.c        **** 
 324:vrfy.c        **** /*
 325:vrfy.c        ****  * Reduce a small signed integer modulo q. The source integer MUST
 326:vrfy.c        ****  * be between -q/2 and +q/2.
 327:vrfy.c        ****  */
 328:vrfy.c        **** static inline uint32_t
 329:vrfy.c        **** mq_conv_small(int x)
 330:vrfy.c        **** {
 2242              		.loc 1 330 1
 2243              		.cfi_startproc
 2244              		@ args = 0, pretend = 0, frame = 16
 2245              		@ frame_needed = 1, uses_anonymous_args = 0
 2246              		@ link register save eliminated.
 2247 0000 80B4     		push	{r7}
 2248              	.LCFI0:
 2249              		.cfi_def_cfa_offset 4
 2250              		.cfi_offset 7, -4
 2251 0002 85B0     		sub	sp, sp, #20
 2252              	.LCFI1:
 2253              		.cfi_def_cfa_offset 24
 2254 0004 00AF     		add	r7, sp, #0
 2255              	.LCFI2:
 2256              		.cfi_def_cfa_register 7
 2257 0006 7860     		str	r0, [r7, #4]
 331:vrfy.c        **** 	/*
 332:vrfy.c        **** 	 * If x < 0, the cast to uint32_t will set the high bit to 1.
 333:vrfy.c        **** 	 */
 334:vrfy.c        **** 	uint32_t y;
 335:vrfy.c        **** 
 336:vrfy.c        **** 	y = (uint32_t)x;
 2258              		.loc 1 336 4
 2259 0008 7B68     		ldr	r3, [r7, #4]
 2260 000a FB60     		str	r3, [r7, #12]
 337:vrfy.c        **** 	y += Q & -(y >> 31);
 2261              		.loc 1 337 11
 2262 000c FB68     		ldr	r3, [r7, #12]
 2263 000e DB17     		asrs	r3, r3, #31
 2264 0010 1A46     		mov	r2, r3
 2265              		.loc 1 337 9
 2266 0012 43F20103 		movw	r3, #12289
 2267 0016 1340     		ands	r3, r3, r2
 2268              		.loc 1 337 4
 2269 0018 FA68     		ldr	r2, [r7, #12]
 2270 001a 1344     		add	r3, r3, r2
 2271 001c FB60     		str	r3, [r7, #12]
 338:vrfy.c        **** 	return y;
 2272              		.loc 1 338 9
 2273 001e FB68     		ldr	r3, [r7, #12]
 339:vrfy.c        **** }
 2274              		.loc 1 339 1
 2275 0020 1846     		mov	r0, r3
 2276 0022 1437     		adds	r7, r7, #20
 2277              	.LCFI3:
 2278              		.cfi_def_cfa_offset 4
 2279 0024 BD46     		mov	sp, r7
 2280              	.LCFI4:
 2281              		.cfi_def_cfa_register 13
 2282              		@ sp needed
 2283 0026 80BC     		pop	{r7}
 2284              	.LCFI5:
 2285              		.cfi_restore 7
 2286              		.cfi_def_cfa_offset 0
 2287 0028 7047     		bx	lr
 2288              		.cfi_endproc
 2289              	.LFE18:
 2291              		.section	.text.mq_add,"ax",%progbits
 2292              		.align	1
 2293              		.syntax unified
 2294              		.thumb
 2295              		.thumb_func
 2296              		.fpu softvfp
 2298              	mq_add:
 2299              	.LFB19:
 340:vrfy.c        **** 
 341:vrfy.c        **** /*
 342:vrfy.c        ****  * Addition modulo q. Operands must be in the 0..q-1 range.
 343:vrfy.c        ****  */
 344:vrfy.c        **** static inline uint32_t
 345:vrfy.c        **** mq_add(uint32_t x, uint32_t y)
 346:vrfy.c        **** {
 2300              		.loc 1 346 1
 2301              		.cfi_startproc
 2302              		@ args = 0, pretend = 0, frame = 16
 2303              		@ frame_needed = 1, uses_anonymous_args = 0
 2304              		@ link register save eliminated.
 2305 0000 80B4     		push	{r7}
 2306              	.LCFI6:
 2307              		.cfi_def_cfa_offset 4
 2308              		.cfi_offset 7, -4
 2309 0002 85B0     		sub	sp, sp, #20
 2310              	.LCFI7:
 2311              		.cfi_def_cfa_offset 24
 2312 0004 00AF     		add	r7, sp, #0
 2313              	.LCFI8:
 2314              		.cfi_def_cfa_register 7
 2315 0006 7860     		str	r0, [r7, #4]
 2316 0008 3960     		str	r1, [r7]
 347:vrfy.c        **** 	/*
 348:vrfy.c        **** 	 * We compute x + y - q. If the result is negative, then the
 349:vrfy.c        **** 	 * high bit will be set, and 'd >> 31' will be equal to 1;
 350:vrfy.c        **** 	 * thus '-(d >> 31)' will be an all-one pattern. Otherwise,
 351:vrfy.c        **** 	 * it will be an all-zero pattern. In other words, this
 352:vrfy.c        **** 	 * implements a conditional addition of q.
 353:vrfy.c        **** 	 */
 354:vrfy.c        **** 	uint32_t d;
 355:vrfy.c        **** 
 356:vrfy.c        **** 	d = x + y - Q;
 2317              		.loc 1 356 8
 2318 000a 7A68     		ldr	r2, [r7, #4]
 2319 000c 3B68     		ldr	r3, [r7]
 2320 000e 1344     		add	r3, r3, r2
 2321              		.loc 1 356 4
 2322 0010 A3F54053 		sub	r3, r3, #12288
 2323 0014 013B     		subs	r3, r3, #1
 2324 0016 FB60     		str	r3, [r7, #12]
 357:vrfy.c        **** 	d += Q & -(d >> 31);
 2325              		.loc 1 357 11
 2326 0018 FB68     		ldr	r3, [r7, #12]
 2327 001a DB17     		asrs	r3, r3, #31
 2328 001c 1A46     		mov	r2, r3
 2329              		.loc 1 357 9
 2330 001e 43F20103 		movw	r3, #12289
 2331 0022 1340     		ands	r3, r3, r2
 2332              		.loc 1 357 4
 2333 0024 FA68     		ldr	r2, [r7, #12]
 2334 0026 1344     		add	r3, r3, r2
 2335 0028 FB60     		str	r3, [r7, #12]
 358:vrfy.c        **** 	return d;
 2336              		.loc 1 358 9
 2337 002a FB68     		ldr	r3, [r7, #12]
 359:vrfy.c        **** }
 2338              		.loc 1 359 1
 2339 002c 1846     		mov	r0, r3
 2340 002e 1437     		adds	r7, r7, #20
 2341              	.LCFI9:
 2342              		.cfi_def_cfa_offset 4
 2343 0030 BD46     		mov	sp, r7
 2344              	.LCFI10:
 2345              		.cfi_def_cfa_register 13
 2346              		@ sp needed
 2347 0032 80BC     		pop	{r7}
 2348              	.LCFI11:
 2349              		.cfi_restore 7
 2350              		.cfi_def_cfa_offset 0
 2351 0034 7047     		bx	lr
 2352              		.cfi_endproc
 2353              	.LFE19:
 2355              		.section	.text.mq_sub,"ax",%progbits
 2356              		.align	1
 2357              		.syntax unified
 2358              		.thumb
 2359              		.thumb_func
 2360              		.fpu softvfp
 2362              	mq_sub:
 2363              	.LFB20:
 360:vrfy.c        **** 
 361:vrfy.c        **** /*
 362:vrfy.c        ****  * Subtraction modulo q. Operands must be in the 0..q-1 range.
 363:vrfy.c        ****  */
 364:vrfy.c        **** static inline uint32_t
 365:vrfy.c        **** mq_sub(uint32_t x, uint32_t y)
 366:vrfy.c        **** {
 2364              		.loc 1 366 1
 2365              		.cfi_startproc
 2366              		@ args = 0, pretend = 0, frame = 16
 2367              		@ frame_needed = 1, uses_anonymous_args = 0
 2368              		@ link register save eliminated.
 2369 0000 80B4     		push	{r7}
 2370              	.LCFI12:
 2371              		.cfi_def_cfa_offset 4
 2372              		.cfi_offset 7, -4
 2373 0002 85B0     		sub	sp, sp, #20
 2374              	.LCFI13:
 2375              		.cfi_def_cfa_offset 24
 2376 0004 00AF     		add	r7, sp, #0
 2377              	.LCFI14:
 2378              		.cfi_def_cfa_register 7
 2379 0006 7860     		str	r0, [r7, #4]
 2380 0008 3960     		str	r1, [r7]
 367:vrfy.c        **** 	/*
 368:vrfy.c        **** 	 * As in mq_add(), we use a conditional addition to ensure the
 369:vrfy.c        **** 	 * result is in the 0..q-1 range.
 370:vrfy.c        **** 	 */
 371:vrfy.c        **** 	uint32_t d;
 372:vrfy.c        **** 
 373:vrfy.c        **** 	d = x - y;
 2381              		.loc 1 373 4
 2382 000a 7A68     		ldr	r2, [r7, #4]
 2383 000c 3B68     		ldr	r3, [r7]
 2384 000e D31A     		subs	r3, r2, r3
 2385 0010 FB60     		str	r3, [r7, #12]
 374:vrfy.c        **** 	d += Q & -(d >> 31);
 2386              		.loc 1 374 11
 2387 0012 FB68     		ldr	r3, [r7, #12]
 2388 0014 DB17     		asrs	r3, r3, #31
 2389 0016 1A46     		mov	r2, r3
 2390              		.loc 1 374 9
 2391 0018 43F20103 		movw	r3, #12289
 2392 001c 1340     		ands	r3, r3, r2
 2393              		.loc 1 374 4
 2394 001e FA68     		ldr	r2, [r7, #12]
 2395 0020 1344     		add	r3, r3, r2
 2396 0022 FB60     		str	r3, [r7, #12]
 375:vrfy.c        **** 	return d;
 2397              		.loc 1 375 9
 2398 0024 FB68     		ldr	r3, [r7, #12]
 376:vrfy.c        **** }
 2399              		.loc 1 376 1
 2400 0026 1846     		mov	r0, r3
 2401 0028 1437     		adds	r7, r7, #20
 2402              	.LCFI15:
 2403              		.cfi_def_cfa_offset 4
 2404 002a BD46     		mov	sp, r7
 2405              	.LCFI16:
 2406              		.cfi_def_cfa_register 13
 2407              		@ sp needed
 2408 002c 80BC     		pop	{r7}
 2409              	.LCFI17:
 2410              		.cfi_restore 7
 2411              		.cfi_def_cfa_offset 0
 2412 002e 7047     		bx	lr
 2413              		.cfi_endproc
 2414              	.LFE20:
 2416              		.section	.text.mq_rshift1,"ax",%progbits
 2417              		.align	1
 2418              		.syntax unified
 2419              		.thumb
 2420              		.thumb_func
 2421              		.fpu softvfp
 2423              	mq_rshift1:
 2424              	.LFB21:
 377:vrfy.c        **** 
 378:vrfy.c        **** /*
 379:vrfy.c        ****  * Division by 2 modulo q. Operand must be in the 0..q-1 range.
 380:vrfy.c        ****  */
 381:vrfy.c        **** static inline uint32_t
 382:vrfy.c        **** mq_rshift1(uint32_t x)
 383:vrfy.c        **** {
 2425              		.loc 1 383 1
 2426              		.cfi_startproc
 2427              		@ args = 0, pretend = 0, frame = 8
 2428              		@ frame_needed = 1, uses_anonymous_args = 0
 2429              		@ link register save eliminated.
 2430 0000 80B4     		push	{r7}
 2431              	.LCFI18:
 2432              		.cfi_def_cfa_offset 4
 2433              		.cfi_offset 7, -4
 2434 0002 83B0     		sub	sp, sp, #12
 2435              	.LCFI19:
 2436              		.cfi_def_cfa_offset 16
 2437 0004 00AF     		add	r7, sp, #0
 2438              	.LCFI20:
 2439              		.cfi_def_cfa_register 7
 2440 0006 7860     		str	r0, [r7, #4]
 384:vrfy.c        **** 	x += Q & -(x & 1);
 2441              		.loc 1 384 15
 2442 0008 7B68     		ldr	r3, [r7, #4]
 2443 000a 03F00103 		and	r3, r3, #1
 2444              		.loc 1 384 11
 2445 000e 5A42     		rsbs	r2, r3, #0
 2446              		.loc 1 384 9
 2447 0010 43F20103 		movw	r3, #12289
 2448 0014 1340     		ands	r3, r3, r2
 2449              		.loc 1 384 4
 2450 0016 7A68     		ldr	r2, [r7, #4]
 2451 0018 1344     		add	r3, r3, r2
 2452 001a 7B60     		str	r3, [r7, #4]
 385:vrfy.c        **** 	return (x >> 1);
 2453              		.loc 1 385 12
 2454 001c 7B68     		ldr	r3, [r7, #4]
 2455 001e 5B08     		lsrs	r3, r3, #1
 386:vrfy.c        **** }
 2456              		.loc 1 386 1
 2457 0020 1846     		mov	r0, r3
 2458 0022 0C37     		adds	r7, r7, #12
 2459              	.LCFI21:
 2460              		.cfi_def_cfa_offset 4
 2461 0024 BD46     		mov	sp, r7
 2462              	.LCFI22:
 2463              		.cfi_def_cfa_register 13
 2464              		@ sp needed
 2465 0026 80BC     		pop	{r7}
 2466              	.LCFI23:
 2467              		.cfi_restore 7
 2468              		.cfi_def_cfa_offset 0
 2469 0028 7047     		bx	lr
 2470              		.cfi_endproc
 2471              	.LFE21:
 2473              		.section	.text.mq_montymul,"ax",%progbits
 2474              		.align	1
 2475              		.syntax unified
 2476              		.thumb
 2477              		.thumb_func
 2478              		.fpu softvfp
 2480              	mq_montymul:
 2481              	.LFB22:
 387:vrfy.c        **** 
 388:vrfy.c        **** /*
 389:vrfy.c        ****  * Montgomery multiplication modulo q. If we set R = 2^16 mod q, then
 390:vrfy.c        ****  * this function computes: x * y / R mod q
 391:vrfy.c        ****  * Operands must be in the 0..q-1 range.
 392:vrfy.c        ****  */
 393:vrfy.c        **** static inline uint32_t
 394:vrfy.c        **** mq_montymul(uint32_t x, uint32_t y)
 395:vrfy.c        **** {
 2482              		.loc 1 395 1
 2483              		.cfi_startproc
 2484              		@ args = 0, pretend = 0, frame = 16
 2485              		@ frame_needed = 1, uses_anonymous_args = 0
 2486              		@ link register save eliminated.
 2487 0000 80B4     		push	{r7}
 2488              	.LCFI24:
 2489              		.cfi_def_cfa_offset 4
 2490              		.cfi_offset 7, -4
 2491 0002 85B0     		sub	sp, sp, #20
 2492              	.LCFI25:
 2493              		.cfi_def_cfa_offset 24
 2494 0004 00AF     		add	r7, sp, #0
 2495              	.LCFI26:
 2496              		.cfi_def_cfa_register 7
 2497 0006 7860     		str	r0, [r7, #4]
 2498 0008 3960     		str	r1, [r7]
 396:vrfy.c        **** 	uint32_t z, w;
 397:vrfy.c        **** 
 398:vrfy.c        **** 	/*
 399:vrfy.c        **** 	 * We compute x*y + k*q with a value of k chosen so that the 16
 400:vrfy.c        **** 	 * low bits of the result are 0. We can then shift the value.
 401:vrfy.c        **** 	 * After the shift, result may still be larger than q, but it
 402:vrfy.c        **** 	 * will be lower than 2*q, so a conditional subtraction works.
 403:vrfy.c        **** 	 */
 404:vrfy.c        **** 
 405:vrfy.c        **** 	z = x * y;
 2499              		.loc 1 405 4
 2500 000a 7B68     		ldr	r3, [r7, #4]
 2501 000c 3A68     		ldr	r2, [r7]
 2502 000e 02FB03F3 		mul	r3, r2, r3
 2503 0012 FB60     		str	r3, [r7, #12]
 406:vrfy.c        **** 	w = ((z * Q0I) & 0xFFFF) * Q;
 2504              		.loc 1 406 10
 2505 0014 FA68     		ldr	r2, [r7, #12]
 2506 0016 1346     		mov	r3, r2
 2507 0018 5B00     		lsls	r3, r3, #1
 2508 001a 1344     		add	r3, r3, r2
 2509 001c 1B03     		lsls	r3, r3, #12
 2510 001e 9B1A     		subs	r3, r3, r2
 2511              		.loc 1 406 17
 2512 0020 9AB2     		uxth	r2, r3
 2513              		.loc 1 406 4
 2514 0022 1346     		mov	r3, r2
 2515 0024 5B00     		lsls	r3, r3, #1
 2516 0026 1344     		add	r3, r3, r2
 2517 0028 1B03     		lsls	r3, r3, #12
 2518 002a 1344     		add	r3, r3, r2
 2519 002c BB60     		str	r3, [r7, #8]
 407:vrfy.c        **** 
 408:vrfy.c        **** 	/*
 409:vrfy.c        **** 	 * When adding z and w, the result will have its low 16 bits
 410:vrfy.c        **** 	 * equal to 0. Since x, y and z are lower than q, the sum will
 411:vrfy.c        **** 	 * be no more than (2^15 - 1) * q + (q - 1)^2, which will
 412:vrfy.c        **** 	 * fit on 29 bits.
 413:vrfy.c        **** 	 */
 414:vrfy.c        **** 	z = (z + w) >> 16;
 2520              		.loc 1 414 9
 2521 002e FA68     		ldr	r2, [r7, #12]
 2522 0030 BB68     		ldr	r3, [r7, #8]
 2523 0032 1344     		add	r3, r3, r2
 2524              		.loc 1 414 4
 2525 0034 1B0C     		lsrs	r3, r3, #16
 2526 0036 FB60     		str	r3, [r7, #12]
 415:vrfy.c        **** 
 416:vrfy.c        **** 	/*
 417:vrfy.c        **** 	 * After the shift, analysis shows that the value will be less
 418:vrfy.c        **** 	 * than 2q. We do a subtraction then conditional subtraction to
 419:vrfy.c        **** 	 * ensure the result is in the expected range.
 420:vrfy.c        **** 	 */
 421:vrfy.c        **** 	z -= Q;
 2527              		.loc 1 421 4
 2528 0038 FB68     		ldr	r3, [r7, #12]
 2529 003a A3F54053 		sub	r3, r3, #12288
 2530 003e 013B     		subs	r3, r3, #1
 2531 0040 FB60     		str	r3, [r7, #12]
 422:vrfy.c        **** 	z += Q & -(z >> 31);
 2532              		.loc 1 422 11
 2533 0042 FB68     		ldr	r3, [r7, #12]
 2534 0044 DB17     		asrs	r3, r3, #31
 2535 0046 1A46     		mov	r2, r3
 2536              		.loc 1 422 9
 2537 0048 43F20103 		movw	r3, #12289
 2538 004c 1340     		ands	r3, r3, r2
 2539              		.loc 1 422 4
 2540 004e FA68     		ldr	r2, [r7, #12]
 2541 0050 1344     		add	r3, r3, r2
 2542 0052 FB60     		str	r3, [r7, #12]
 423:vrfy.c        **** 	return z;
 2543              		.loc 1 423 9
 2544 0054 FB68     		ldr	r3, [r7, #12]
 424:vrfy.c        **** }
 2545              		.loc 1 424 1
 2546 0056 1846     		mov	r0, r3
 2547 0058 1437     		adds	r7, r7, #20
 2548              	.LCFI27:
 2549              		.cfi_def_cfa_offset 4
 2550 005a BD46     		mov	sp, r7
 2551              	.LCFI28:
 2552              		.cfi_def_cfa_register 13
 2553              		@ sp needed
 2554 005c 80BC     		pop	{r7}
 2555              	.LCFI29:
 2556              		.cfi_restore 7
 2557              		.cfi_def_cfa_offset 0
 2558 005e 7047     		bx	lr
 2559              		.cfi_endproc
 2560              	.LFE22:
 2562              		.section	.text.mq_montysqr,"ax",%progbits
 2563              		.align	1
 2564              		.syntax unified
 2565              		.thumb
 2566              		.thumb_func
 2567              		.fpu softvfp
 2569              	mq_montysqr:
 2570              	.LFB23:
 425:vrfy.c        **** 
 426:vrfy.c        **** /*
 427:vrfy.c        ****  * Montgomery squaring (computes (x^2)/R).
 428:vrfy.c        ****  */
 429:vrfy.c        **** static inline uint32_t
 430:vrfy.c        **** mq_montysqr(uint32_t x)
 431:vrfy.c        **** {
 2571              		.loc 1 431 1
 2572              		.cfi_startproc
 2573              		@ args = 0, pretend = 0, frame = 8
 2574              		@ frame_needed = 1, uses_anonymous_args = 0
 2575 0000 80B5     		push	{r7, lr}
 2576              	.LCFI30:
 2577              		.cfi_def_cfa_offset 8
 2578              		.cfi_offset 7, -8
 2579              		.cfi_offset 14, -4
 2580 0002 82B0     		sub	sp, sp, #8
 2581              	.LCFI31:
 2582              		.cfi_def_cfa_offset 16
 2583 0004 00AF     		add	r7, sp, #0
 2584              	.LCFI32:
 2585              		.cfi_def_cfa_register 7
 2586 0006 7860     		str	r0, [r7, #4]
 432:vrfy.c        **** 	return mq_montymul(x, x);
 2587              		.loc 1 432 9
 2588 0008 7968     		ldr	r1, [r7, #4]
 2589 000a 7868     		ldr	r0, [r7, #4]
 2590 000c FFF7FEFF 		bl	mq_montymul
 2591 0010 0346     		mov	r3, r0
 433:vrfy.c        **** }
 2592              		.loc 1 433 1
 2593 0012 1846     		mov	r0, r3
 2594 0014 0837     		adds	r7, r7, #8
 2595              	.LCFI33:
 2596              		.cfi_def_cfa_offset 8
 2597 0016 BD46     		mov	sp, r7
 2598              	.LCFI34:
 2599              		.cfi_def_cfa_register 13
 2600              		@ sp needed
 2601 0018 80BD     		pop	{r7, pc}
 2602              		.cfi_endproc
 2603              	.LFE23:
 2605              		.section	.text.mq_div_12289,"ax",%progbits
 2606              		.align	1
 2607              		.syntax unified
 2608              		.thumb
 2609              		.thumb_func
 2610              		.fpu softvfp
 2612              	mq_div_12289:
 2613              	.LFB24:
 434:vrfy.c        **** 
 435:vrfy.c        **** /*
 436:vrfy.c        ****  * Divide x by y modulo q = 12289.
 437:vrfy.c        ****  */
 438:vrfy.c        **** static inline uint32_t
 439:vrfy.c        **** mq_div_12289(uint32_t x, uint32_t y)
 440:vrfy.c        **** {
 2614              		.loc 1 440 1
 2615              		.cfi_startproc
 2616              		@ args = 0, pretend = 0, frame = 88
 2617              		@ frame_needed = 1, uses_anonymous_args = 0
 2618 0000 80B5     		push	{r7, lr}
 2619              	.LCFI35:
 2620              		.cfi_def_cfa_offset 8
 2621              		.cfi_offset 7, -8
 2622              		.cfi_offset 14, -4
 2623 0002 96B0     		sub	sp, sp, #88
 2624              	.LCFI36:
 2625              		.cfi_def_cfa_offset 96
 2626 0004 00AF     		add	r7, sp, #0
 2627              	.LCFI37:
 2628              		.cfi_def_cfa_register 7
 2629 0006 7860     		str	r0, [r7, #4]
 2630 0008 3960     		str	r1, [r7]
 441:vrfy.c        **** 	/*
 442:vrfy.c        **** 	 * We invert y by computing y^(q-2) mod q.
 443:vrfy.c        **** 	 *
 444:vrfy.c        **** 	 * We use the following addition chain for exponent e = 12287:
 445:vrfy.c        **** 	 *
 446:vrfy.c        **** 	 *   e0 = 1
 447:vrfy.c        **** 	 *   e1 = 2 * e0 = 2
 448:vrfy.c        **** 	 *   e2 = e1 + e0 = 3
 449:vrfy.c        **** 	 *   e3 = e2 + e1 = 5
 450:vrfy.c        **** 	 *   e4 = 2 * e3 = 10
 451:vrfy.c        **** 	 *   e5 = 2 * e4 = 20
 452:vrfy.c        **** 	 *   e6 = 2 * e5 = 40
 453:vrfy.c        **** 	 *   e7 = 2 * e6 = 80
 454:vrfy.c        **** 	 *   e8 = 2 * e7 = 160
 455:vrfy.c        **** 	 *   e9 = e8 + e2 = 163
 456:vrfy.c        **** 	 *   e10 = e9 + e8 = 323
 457:vrfy.c        **** 	 *   e11 = 2 * e10 = 646
 458:vrfy.c        **** 	 *   e12 = 2 * e11 = 1292
 459:vrfy.c        **** 	 *   e13 = e12 + e9 = 1455
 460:vrfy.c        **** 	 *   e14 = 2 * e13 = 2910
 461:vrfy.c        **** 	 *   e15 = 2 * e14 = 5820
 462:vrfy.c        **** 	 *   e16 = e15 + e10 = 6143
 463:vrfy.c        **** 	 *   e17 = 2 * e16 = 12286
 464:vrfy.c        **** 	 *   e18 = e17 + e0 = 12287
 465:vrfy.c        **** 	 *
 466:vrfy.c        **** 	 * Additions on exponents are converted to Montgomery
 467:vrfy.c        **** 	 * multiplications. We define all intermediate results as so
 468:vrfy.c        **** 	 * many local variables, and let the C compiler work out which
 469:vrfy.c        **** 	 * must be kept around.
 470:vrfy.c        **** 	 */
 471:vrfy.c        **** 	uint32_t y0, y1, y2, y3, y4, y5, y6, y7, y8, y9;
 472:vrfy.c        **** 	uint32_t y10, y11, y12, y13, y14, y15, y16, y17, y18;
 473:vrfy.c        **** 
 474:vrfy.c        **** 	y0 = mq_montymul(y, R2);
 2631              		.loc 1 474 7
 2632 000a 42F6C821 		movw	r1, #10952
 2633 000e 3868     		ldr	r0, [r7]
 2634 0010 FFF7FEFF 		bl	mq_montymul
 2635 0014 7865     		str	r0, [r7, #84]
 475:vrfy.c        **** 	y1 = mq_montysqr(y0);
 2636              		.loc 1 475 7
 2637 0016 786D     		ldr	r0, [r7, #84]
 2638 0018 FFF7FEFF 		bl	mq_montysqr
 2639 001c 3865     		str	r0, [r7, #80]
 476:vrfy.c        **** 	y2 = mq_montymul(y1, y0);
 2640              		.loc 1 476 7
 2641 001e 796D     		ldr	r1, [r7, #84]
 2642 0020 386D     		ldr	r0, [r7, #80]
 2643 0022 FFF7FEFF 		bl	mq_montymul
 2644 0026 F864     		str	r0, [r7, #76]
 477:vrfy.c        **** 	y3 = mq_montymul(y2, y1);
 2645              		.loc 1 477 7
 2646 0028 396D     		ldr	r1, [r7, #80]
 2647 002a F86C     		ldr	r0, [r7, #76]
 2648 002c FFF7FEFF 		bl	mq_montymul
 2649 0030 B864     		str	r0, [r7, #72]
 478:vrfy.c        **** 	y4 = mq_montysqr(y3);
 2650              		.loc 1 478 7
 2651 0032 B86C     		ldr	r0, [r7, #72]
 2652 0034 FFF7FEFF 		bl	mq_montysqr
 2653 0038 7864     		str	r0, [r7, #68]
 479:vrfy.c        **** 	y5 = mq_montysqr(y4);
 2654              		.loc 1 479 7
 2655 003a 786C     		ldr	r0, [r7, #68]
 2656 003c FFF7FEFF 		bl	mq_montysqr
 2657 0040 3864     		str	r0, [r7, #64]
 480:vrfy.c        **** 	y6 = mq_montysqr(y5);
 2658              		.loc 1 480 7
 2659 0042 386C     		ldr	r0, [r7, #64]
 2660 0044 FFF7FEFF 		bl	mq_montysqr
 2661 0048 F863     		str	r0, [r7, #60]
 481:vrfy.c        **** 	y7 = mq_montysqr(y6);
 2662              		.loc 1 481 7
 2663 004a F86B     		ldr	r0, [r7, #60]
 2664 004c FFF7FEFF 		bl	mq_montysqr
 2665 0050 B863     		str	r0, [r7, #56]
 482:vrfy.c        **** 	y8 = mq_montysqr(y7);
 2666              		.loc 1 482 7
 2667 0052 B86B     		ldr	r0, [r7, #56]
 2668 0054 FFF7FEFF 		bl	mq_montysqr
 2669 0058 7863     		str	r0, [r7, #52]
 483:vrfy.c        **** 	y9 = mq_montymul(y8, y2);
 2670              		.loc 1 483 7
 2671 005a F96C     		ldr	r1, [r7, #76]
 2672 005c 786B     		ldr	r0, [r7, #52]
 2673 005e FFF7FEFF 		bl	mq_montymul
 2674 0062 3863     		str	r0, [r7, #48]
 484:vrfy.c        **** 	y10 = mq_montymul(y9, y8);
 2675              		.loc 1 484 8
 2676 0064 796B     		ldr	r1, [r7, #52]
 2677 0066 386B     		ldr	r0, [r7, #48]
 2678 0068 FFF7FEFF 		bl	mq_montymul
 2679 006c F862     		str	r0, [r7, #44]
 485:vrfy.c        **** 	y11 = mq_montysqr(y10);
 2680              		.loc 1 485 8
 2681 006e F86A     		ldr	r0, [r7, #44]
 2682 0070 FFF7FEFF 		bl	mq_montysqr
 2683 0074 B862     		str	r0, [r7, #40]
 486:vrfy.c        **** 	y12 = mq_montysqr(y11);
 2684              		.loc 1 486 8
 2685 0076 B86A     		ldr	r0, [r7, #40]
 2686 0078 FFF7FEFF 		bl	mq_montysqr
 2687 007c 7862     		str	r0, [r7, #36]
 487:vrfy.c        **** 	y13 = mq_montymul(y12, y9);
 2688              		.loc 1 487 8
 2689 007e 396B     		ldr	r1, [r7, #48]
 2690 0080 786A     		ldr	r0, [r7, #36]
 2691 0082 FFF7FEFF 		bl	mq_montymul
 2692 0086 3862     		str	r0, [r7, #32]
 488:vrfy.c        **** 	y14 = mq_montysqr(y13);
 2693              		.loc 1 488 8
 2694 0088 386A     		ldr	r0, [r7, #32]
 2695 008a FFF7FEFF 		bl	mq_montysqr
 2696 008e F861     		str	r0, [r7, #28]
 489:vrfy.c        **** 	y15 = mq_montysqr(y14);
 2697              		.loc 1 489 8
 2698 0090 F869     		ldr	r0, [r7, #28]
 2699 0092 FFF7FEFF 		bl	mq_montysqr
 2700 0096 B861     		str	r0, [r7, #24]
 490:vrfy.c        **** 	y16 = mq_montymul(y15, y10);
 2701              		.loc 1 490 8
 2702 0098 F96A     		ldr	r1, [r7, #44]
 2703 009a B869     		ldr	r0, [r7, #24]
 2704 009c FFF7FEFF 		bl	mq_montymul
 2705 00a0 7861     		str	r0, [r7, #20]
 491:vrfy.c        **** 	y17 = mq_montysqr(y16);
 2706              		.loc 1 491 8
 2707 00a2 7869     		ldr	r0, [r7, #20]
 2708 00a4 FFF7FEFF 		bl	mq_montysqr
 2709 00a8 3861     		str	r0, [r7, #16]
 492:vrfy.c        **** 	y18 = mq_montymul(y17, y0);
 2710              		.loc 1 492 8
 2711 00aa 796D     		ldr	r1, [r7, #84]
 2712 00ac 3869     		ldr	r0, [r7, #16]
 2713 00ae FFF7FEFF 		bl	mq_montymul
 2714 00b2 F860     		str	r0, [r7, #12]
 493:vrfy.c        **** 
 494:vrfy.c        **** 	/*
 495:vrfy.c        **** 	 * Final multiplication with x, which is not in Montgomery
 496:vrfy.c        **** 	 * representation, computes the correct division result.
 497:vrfy.c        **** 	 */
 498:vrfy.c        **** 	return mq_montymul(y18, x);
 2715              		.loc 1 498 9
 2716 00b4 7968     		ldr	r1, [r7, #4]
 2717 00b6 F868     		ldr	r0, [r7, #12]
 2718 00b8 FFF7FEFF 		bl	mq_montymul
 2719 00bc 0346     		mov	r3, r0
 499:vrfy.c        **** }
 2720              		.loc 1 499 1
 2721 00be 1846     		mov	r0, r3
 2722 00c0 5837     		adds	r7, r7, #88
 2723              	.LCFI38:
 2724              		.cfi_def_cfa_offset 8
 2725 00c2 BD46     		mov	sp, r7
 2726              	.LCFI39:
 2727              		.cfi_def_cfa_register 13
 2728              		@ sp needed
 2729 00c4 80BD     		pop	{r7, pc}
 2730              		.cfi_endproc
 2731              	.LFE24:
 2733              		.section	.text.mq_NTT,"ax",%progbits
 2734              		.align	1
 2735              		.syntax unified
 2736              		.thumb
 2737              		.thumb_func
 2738              		.fpu softvfp
 2740              	mq_NTT:
 2741              	.LFB25:
 500:vrfy.c        **** 
 501:vrfy.c        **** /*
 502:vrfy.c        ****  * Compute NTT on a ring element.
 503:vrfy.c        ****  */
 504:vrfy.c        **** static void
 505:vrfy.c        **** mq_NTT(uint16_t *a, unsigned logn)
 506:vrfy.c        **** {
 2742              		.loc 1 506 1
 2743              		.cfi_startproc
 2744              		@ args = 0, pretend = 0, frame = 56
 2745              		@ frame_needed = 1, uses_anonymous_args = 0
 2746 0000 80B5     		push	{r7, lr}
 2747              	.LCFI40:
 2748              		.cfi_def_cfa_offset 8
 2749              		.cfi_offset 7, -8
 2750              		.cfi_offset 14, -4
 2751 0002 8EB0     		sub	sp, sp, #56
 2752              	.LCFI41:
 2753              		.cfi_def_cfa_offset 64
 2754 0004 00AF     		add	r7, sp, #0
 2755              	.LCFI42:
 2756              		.cfi_def_cfa_register 7
 2757 0006 7860     		str	r0, [r7, #4]
 2758 0008 3960     		str	r1, [r7]
 507:vrfy.c        **** 	size_t n, t, m;
 508:vrfy.c        **** 
 509:vrfy.c        **** 	n = (size_t)1 << logn;
 2759              		.loc 1 509 4
 2760 000a 0122     		movs	r2, #1
 2761 000c 3B68     		ldr	r3, [r7]
 2762 000e 02FA03F3 		lsl	r3, r2, r3
 2763 0012 3B62     		str	r3, [r7, #32]
 510:vrfy.c        **** 	t = n;
 2764              		.loc 1 510 4
 2765 0014 3B6A     		ldr	r3, [r7, #32]
 2766 0016 7B63     		str	r3, [r7, #52]
 511:vrfy.c        **** 	for (m = 1; m < n; m <<= 1) {
 2767              		.loc 1 511 9
 2768 0018 0123     		movs	r3, #1
 2769 001a 3B63     		str	r3, [r7, #48]
 2770              		.loc 1 511 2
 2771 001c 56E0     		b	.L16
 2772              	.L21:
 2773              	.LBB2:
 512:vrfy.c        **** 		size_t ht, i, j1;
 513:vrfy.c        **** 
 514:vrfy.c        **** 		ht = t >> 1;
 2774              		.loc 1 514 6
 2775 001e 7B6B     		ldr	r3, [r7, #52]
 2776 0020 5B08     		lsrs	r3, r3, #1
 2777 0022 FB61     		str	r3, [r7, #28]
 515:vrfy.c        **** 		for (i = 0, j1 = 0; i < m; i ++, j1 += t) {
 2778              		.loc 1 515 10
 2779 0024 0023     		movs	r3, #0
 2780 0026 FB62     		str	r3, [r7, #44]
 2781              		.loc 1 515 18
 2782 0028 0023     		movs	r3, #0
 2783 002a BB62     		str	r3, [r7, #40]
 2784              		.loc 1 515 3
 2785 002c 45E0     		b	.L17
 2786              	.L20:
 2787              	.LBB3:
 516:vrfy.c        **** 			size_t j, j2;
 517:vrfy.c        **** 			uint32_t s;
 518:vrfy.c        **** 
 519:vrfy.c        **** 			s = GMb[m + i];
 2788              		.loc 1 519 14
 2789 002e 3A6B     		ldr	r2, [r7, #48]
 2790 0030 FB6A     		ldr	r3, [r7, #44]
 2791 0032 1344     		add	r3, r3, r2
 2792              		.loc 1 519 11
 2793 0034 2A4A     		ldr	r2, .L22
 2794 0036 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 2795              		.loc 1 519 6
 2796 003a BB61     		str	r3, [r7, #24]
 520:vrfy.c        **** 			j2 = j1 + ht;
 2797              		.loc 1 520 7
 2798 003c BA6A     		ldr	r2, [r7, #40]
 2799 003e FB69     		ldr	r3, [r7, #28]
 2800 0040 1344     		add	r3, r3, r2
 2801 0042 7B61     		str	r3, [r7, #20]
 521:vrfy.c        **** 			for (j = j1; j < j2; j ++) {
 2802              		.loc 1 521 11
 2803 0044 BB6A     		ldr	r3, [r7, #40]
 2804 0046 7B62     		str	r3, [r7, #36]
 2805              		.loc 1 521 4
 2806 0048 2CE0     		b	.L18
 2807              	.L19:
 2808              	.LBB4:
 522:vrfy.c        **** 				uint32_t u, v;
 523:vrfy.c        **** 
 524:vrfy.c        **** 				u = a[j];
 2809              		.loc 1 524 10 discriminator 3
 2810 004a 7B6A     		ldr	r3, [r7, #36]
 2811 004c 5B00     		lsls	r3, r3, #1
 2812 004e 7A68     		ldr	r2, [r7, #4]
 2813 0050 1344     		add	r3, r3, r2
 2814 0052 1B88     		ldrh	r3, [r3]
 2815              		.loc 1 524 7 discriminator 3
 2816 0054 3B61     		str	r3, [r7, #16]
 525:vrfy.c        **** 				v = mq_montymul(a[j + ht], s);
 2817              		.loc 1 525 25 discriminator 3
 2818 0056 7A6A     		ldr	r2, [r7, #36]
 2819 0058 FB69     		ldr	r3, [r7, #28]
 2820 005a 1344     		add	r3, r3, r2
 2821              		.loc 1 525 22 discriminator 3
 2822 005c 5B00     		lsls	r3, r3, #1
 2823 005e 7A68     		ldr	r2, [r7, #4]
 2824 0060 1344     		add	r3, r3, r2
 2825 0062 1B88     		ldrh	r3, [r3]
 2826              		.loc 1 525 9 discriminator 3
 2827 0064 B969     		ldr	r1, [r7, #24]
 2828 0066 1846     		mov	r0, r3
 2829 0068 FFF7FEFF 		bl	mq_montymul
 2830 006c F860     		str	r0, [r7, #12]
 526:vrfy.c        **** 				a[j] = (uint16_t)mq_add(u, v);
 2831              		.loc 1 526 22 discriminator 3
 2832 006e F968     		ldr	r1, [r7, #12]
 2833 0070 3869     		ldr	r0, [r7, #16]
 2834 0072 FFF7FEFF 		bl	mq_add
 2835 0076 0146     		mov	r1, r0
 2836              		.loc 1 526 6 discriminator 3
 2837 0078 7B6A     		ldr	r3, [r7, #36]
 2838 007a 5B00     		lsls	r3, r3, #1
 2839 007c 7A68     		ldr	r2, [r7, #4]
 2840 007e 1344     		add	r3, r3, r2
 2841              		.loc 1 526 12 discriminator 3
 2842 0080 8AB2     		uxth	r2, r1
 2843              		.loc 1 526 10 discriminator 3
 2844 0082 1A80     		strh	r2, [r3]	@ movhi
 527:vrfy.c        **** 				a[j + ht] = (uint16_t)mq_sub(u, v);
 2845              		.loc 1 527 27 discriminator 3
 2846 0084 F968     		ldr	r1, [r7, #12]
 2847 0086 3869     		ldr	r0, [r7, #16]
 2848 0088 FFF7FEFF 		bl	mq_sub
 2849 008c 0146     		mov	r1, r0
 2850              		.loc 1 527 9 discriminator 3
 2851 008e 7A6A     		ldr	r2, [r7, #36]
 2852 0090 FB69     		ldr	r3, [r7, #28]
 2853 0092 1344     		add	r3, r3, r2
 2854              		.loc 1 527 6 discriminator 3
 2855 0094 5B00     		lsls	r3, r3, #1
 2856 0096 7A68     		ldr	r2, [r7, #4]
 2857 0098 1344     		add	r3, r3, r2
 2858              		.loc 1 527 17 discriminator 3
 2859 009a 8AB2     		uxth	r2, r1
 2860              		.loc 1 527 15 discriminator 3
 2861 009c 1A80     		strh	r2, [r3]	@ movhi
 2862              	.LBE4:
 521:vrfy.c        **** 				uint32_t u, v;
 2863              		.loc 1 521 27 discriminator 3
 2864 009e 7B6A     		ldr	r3, [r7, #36]
 2865 00a0 0133     		adds	r3, r3, #1
 2866 00a2 7B62     		str	r3, [r7, #36]
 2867              	.L18:
 521:vrfy.c        **** 				uint32_t u, v;
 2868              		.loc 1 521 4 discriminator 1
 2869 00a4 7A6A     		ldr	r2, [r7, #36]
 2870 00a6 7B69     		ldr	r3, [r7, #20]
 2871 00a8 9A42     		cmp	r2, r3
 2872 00aa CED3     		bcc	.L19
 2873              	.LBE3:
 515:vrfy.c        **** 			size_t j, j2;
 2874              		.loc 1 515 32 discriminator 2
 2875 00ac FB6A     		ldr	r3, [r7, #44]
 2876 00ae 0133     		adds	r3, r3, #1
 2877 00b0 FB62     		str	r3, [r7, #44]
 515:vrfy.c        **** 			size_t j, j2;
 2878              		.loc 1 515 39 discriminator 2
 2879 00b2 BA6A     		ldr	r2, [r7, #40]
 2880 00b4 7B6B     		ldr	r3, [r7, #52]
 2881 00b6 1344     		add	r3, r3, r2
 2882 00b8 BB62     		str	r3, [r7, #40]
 2883              	.L17:
 515:vrfy.c        **** 			size_t j, j2;
 2884              		.loc 1 515 3 discriminator 1
 2885 00ba FA6A     		ldr	r2, [r7, #44]
 2886 00bc 3B6B     		ldr	r3, [r7, #48]
 2887 00be 9A42     		cmp	r2, r3
 2888 00c0 B5D3     		bcc	.L20
 528:vrfy.c        **** 			}
 529:vrfy.c        **** 		}
 530:vrfy.c        **** 		t = ht;
 2889              		.loc 1 530 5 discriminator 2
 2890 00c2 FB69     		ldr	r3, [r7, #28]
 2891 00c4 7B63     		str	r3, [r7, #52]
 2892              	.LBE2:
 511:vrfy.c        **** 		size_t ht, i, j1;
 2893              		.loc 1 511 23 discriminator 2
 2894 00c6 3B6B     		ldr	r3, [r7, #48]
 2895 00c8 5B00     		lsls	r3, r3, #1
 2896 00ca 3B63     		str	r3, [r7, #48]
 2897              	.L16:
 511:vrfy.c        **** 		size_t ht, i, j1;
 2898              		.loc 1 511 2 discriminator 1
 2899 00cc 3A6B     		ldr	r2, [r7, #48]
 2900 00ce 3B6A     		ldr	r3, [r7, #32]
 2901 00d0 9A42     		cmp	r2, r3
 2902 00d2 A4D3     		bcc	.L21
 531:vrfy.c        **** 	}
 532:vrfy.c        **** }
 2903              		.loc 1 532 1
 2904 00d4 00BF     		nop
 2905 00d6 00BF     		nop
 2906 00d8 3837     		adds	r7, r7, #56
 2907              	.LCFI43:
 2908              		.cfi_def_cfa_offset 8
 2909 00da BD46     		mov	sp, r7
 2910              	.LCFI44:
 2911              		.cfi_def_cfa_register 13
 2912              		@ sp needed
 2913 00dc 80BD     		pop	{r7, pc}
 2914              	.L23:
 2915 00de 00BF     		.align	2
 2916              	.L22:
 2917 00e0 40010000 		.word	GMb
 2918              		.cfi_endproc
 2919              	.LFE25:
 2921              		.section	.text.mq_iNTT,"ax",%progbits
 2922              		.align	1
 2923              		.syntax unified
 2924              		.thumb
 2925              		.thumb_func
 2926              		.fpu softvfp
 2928              	mq_iNTT:
 2929              	.LFB26:
 533:vrfy.c        **** 
 534:vrfy.c        **** /*
 535:vrfy.c        ****  * Compute the inverse NTT on a ring element, binary case.
 536:vrfy.c        ****  */
 537:vrfy.c        **** static void
 538:vrfy.c        **** mq_iNTT(uint16_t *a, unsigned logn)
 539:vrfy.c        **** {
 2930              		.loc 1 539 1
 2931              		.cfi_startproc
 2932              		@ args = 0, pretend = 0, frame = 64
 2933              		@ frame_needed = 1, uses_anonymous_args = 0
 2934 0000 80B5     		push	{r7, lr}
 2935              	.LCFI45:
 2936              		.cfi_def_cfa_offset 8
 2937              		.cfi_offset 7, -8
 2938              		.cfi_offset 14, -4
 2939 0002 90B0     		sub	sp, sp, #64
 2940              	.LCFI46:
 2941              		.cfi_def_cfa_offset 72
 2942 0004 00AF     		add	r7, sp, #0
 2943              	.LCFI47:
 2944              		.cfi_def_cfa_register 7
 2945 0006 7860     		str	r0, [r7, #4]
 2946 0008 3960     		str	r1, [r7]
 540:vrfy.c        **** 	size_t n, t, m;
 541:vrfy.c        **** 	uint32_t ni;
 542:vrfy.c        **** 
 543:vrfy.c        **** 	n = (size_t)1 << logn;
 2947              		.loc 1 543 4
 2948 000a 0122     		movs	r2, #1
 2949 000c 3B68     		ldr	r3, [r7]
 2950 000e 02FA03F3 		lsl	r3, r2, r3
 2951 0012 7B62     		str	r3, [r7, #36]
 544:vrfy.c        **** 	t = 1;
 2952              		.loc 1 544 4
 2953 0014 0123     		movs	r3, #1
 2954 0016 FB63     		str	r3, [r7, #60]
 545:vrfy.c        **** 	m = n;
 2955              		.loc 1 545 4
 2956 0018 7B6A     		ldr	r3, [r7, #36]
 2957 001a BB63     		str	r3, [r7, #56]
 546:vrfy.c        **** 	while (m > 1) {
 2958              		.loc 1 546 8
 2959 001c 59E0     		b	.L25
 2960              	.L30:
 2961              	.LBB5:
 547:vrfy.c        **** 		size_t hm, dt, i, j1;
 548:vrfy.c        **** 
 549:vrfy.c        **** 		hm = m >> 1;
 2962              		.loc 1 549 6
 2963 001e BB6B     		ldr	r3, [r7, #56]
 2964 0020 5B08     		lsrs	r3, r3, #1
 2965 0022 3B62     		str	r3, [r7, #32]
 550:vrfy.c        **** 		dt = t << 1;
 2966              		.loc 1 550 6
 2967 0024 FB6B     		ldr	r3, [r7, #60]
 2968 0026 5B00     		lsls	r3, r3, #1
 2969 0028 FB61     		str	r3, [r7, #28]
 551:vrfy.c        **** 		for (i = 0, j1 = 0; i < hm; i ++, j1 += dt) {
 2970              		.loc 1 551 10
 2971 002a 0023     		movs	r3, #0
 2972 002c 3B63     		str	r3, [r7, #48]
 2973              		.loc 1 551 18
 2974 002e 0023     		movs	r3, #0
 2975 0030 FB62     		str	r3, [r7, #44]
 2976              		.loc 1 551 3
 2977 0032 46E0     		b	.L26
 2978              	.L29:
 2979              	.LBB6:
 552:vrfy.c        **** 			size_t j, j2;
 553:vrfy.c        **** 			uint32_t s;
 554:vrfy.c        **** 
 555:vrfy.c        **** 			j2 = j1 + t;
 2980              		.loc 1 555 7
 2981 0034 FA6A     		ldr	r2, [r7, #44]
 2982 0036 FB6B     		ldr	r3, [r7, #60]
 2983 0038 1344     		add	r3, r3, r2
 2984 003a BB61     		str	r3, [r7, #24]
 556:vrfy.c        **** 			s = iGMb[hm + i];
 2985              		.loc 1 556 16
 2986 003c 3A6A     		ldr	r2, [r7, #32]
 2987 003e 3B6B     		ldr	r3, [r7, #48]
 2988 0040 1344     		add	r3, r3, r2
 2989              		.loc 1 556 12
 2990 0042 3D4A     		ldr	r2, .L35
 2991 0044 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 2992              		.loc 1 556 6
 2993 0048 7B61     		str	r3, [r7, #20]
 557:vrfy.c        **** 			for (j = j1; j < j2; j ++) {
 2994              		.loc 1 557 11
 2995 004a FB6A     		ldr	r3, [r7, #44]
 2996 004c BB62     		str	r3, [r7, #40]
 2997              		.loc 1 557 4
 2998 004e 2DE0     		b	.L27
 2999              	.L28:
 3000              	.LBB7:
 558:vrfy.c        **** 				uint32_t u, v, w;
 559:vrfy.c        **** 
 560:vrfy.c        **** 				u = a[j];
 3001              		.loc 1 560 10 discriminator 3
 3002 0050 BB6A     		ldr	r3, [r7, #40]
 3003 0052 5B00     		lsls	r3, r3, #1
 3004 0054 7A68     		ldr	r2, [r7, #4]
 3005 0056 1344     		add	r3, r3, r2
 3006 0058 1B88     		ldrh	r3, [r3]
 3007              		.loc 1 560 7 discriminator 3
 3008 005a 3B61     		str	r3, [r7, #16]
 561:vrfy.c        **** 				v = a[j + t];
 3009              		.loc 1 561 13 discriminator 3
 3010 005c BA6A     		ldr	r2, [r7, #40]
 3011 005e FB6B     		ldr	r3, [r7, #60]
 3012 0060 1344     		add	r3, r3, r2
 3013              		.loc 1 561 10 discriminator 3
 3014 0062 5B00     		lsls	r3, r3, #1
 3015 0064 7A68     		ldr	r2, [r7, #4]
 3016 0066 1344     		add	r3, r3, r2
 3017 0068 1B88     		ldrh	r3, [r3]
 3018              		.loc 1 561 7 discriminator 3
 3019 006a FB60     		str	r3, [r7, #12]
 562:vrfy.c        **** 				a[j] = (uint16_t)mq_add(u, v);
 3020              		.loc 1 562 22 discriminator 3
 3021 006c F968     		ldr	r1, [r7, #12]
 3022 006e 3869     		ldr	r0, [r7, #16]
 3023 0070 FFF7FEFF 		bl	mq_add
 3024 0074 0146     		mov	r1, r0
 3025              		.loc 1 562 6 discriminator 3
 3026 0076 BB6A     		ldr	r3, [r7, #40]
 3027 0078 5B00     		lsls	r3, r3, #1
 3028 007a 7A68     		ldr	r2, [r7, #4]
 3029 007c 1344     		add	r3, r3, r2
 3030              		.loc 1 562 12 discriminator 3
 3031 007e 8AB2     		uxth	r2, r1
 3032              		.loc 1 562 10 discriminator 3
 3033 0080 1A80     		strh	r2, [r3]	@ movhi
 563:vrfy.c        **** 				w = mq_sub(u, v);
 3034              		.loc 1 563 9 discriminator 3
 3035 0082 F968     		ldr	r1, [r7, #12]
 3036 0084 3869     		ldr	r0, [r7, #16]
 3037 0086 FFF7FEFF 		bl	mq_sub
 3038 008a B860     		str	r0, [r7, #8]
 564:vrfy.c        **** 				a[j + t] = (uint16_t)
 565:vrfy.c        **** 					mq_montymul(w, s);
 3039              		.loc 1 565 6 discriminator 3
 3040 008c 7969     		ldr	r1, [r7, #20]
 3041 008e B868     		ldr	r0, [r7, #8]
 3042 0090 FFF7FEFF 		bl	mq_montymul
 3043 0094 0146     		mov	r1, r0
 564:vrfy.c        **** 				a[j + t] = (uint16_t)
 3044              		.loc 1 564 9 discriminator 3
 3045 0096 BA6A     		ldr	r2, [r7, #40]
 3046 0098 FB6B     		ldr	r3, [r7, #60]
 3047 009a 1344     		add	r3, r3, r2
 564:vrfy.c        **** 				a[j + t] = (uint16_t)
 3048              		.loc 1 564 6 discriminator 3
 3049 009c 5B00     		lsls	r3, r3, #1
 3050 009e 7A68     		ldr	r2, [r7, #4]
 3051 00a0 1344     		add	r3, r3, r2
 564:vrfy.c        **** 				a[j + t] = (uint16_t)
 3052              		.loc 1 564 16 discriminator 3
 3053 00a2 8AB2     		uxth	r2, r1
 564:vrfy.c        **** 				a[j + t] = (uint16_t)
 3054              		.loc 1 564 14 discriminator 3
 3055 00a4 1A80     		strh	r2, [r3]	@ movhi
 3056              	.LBE7:
 557:vrfy.c        **** 				uint32_t u, v, w;
 3057              		.loc 1 557 27 discriminator 3
 3058 00a6 BB6A     		ldr	r3, [r7, #40]
 3059 00a8 0133     		adds	r3, r3, #1
 3060 00aa BB62     		str	r3, [r7, #40]
 3061              	.L27:
 557:vrfy.c        **** 				uint32_t u, v, w;
 3062              		.loc 1 557 4 discriminator 1
 3063 00ac BA6A     		ldr	r2, [r7, #40]
 3064 00ae BB69     		ldr	r3, [r7, #24]
 3065 00b0 9A42     		cmp	r2, r3
 3066 00b2 CDD3     		bcc	.L28
 3067              	.LBE6:
 551:vrfy.c        **** 			size_t j, j2;
 3068              		.loc 1 551 33 discriminator 2
 3069 00b4 3B6B     		ldr	r3, [r7, #48]
 3070 00b6 0133     		adds	r3, r3, #1
 3071 00b8 3B63     		str	r3, [r7, #48]
 551:vrfy.c        **** 			size_t j, j2;
 3072              		.loc 1 551 40 discriminator 2
 3073 00ba FA6A     		ldr	r2, [r7, #44]
 3074 00bc FB69     		ldr	r3, [r7, #28]
 3075 00be 1344     		add	r3, r3, r2
 3076 00c0 FB62     		str	r3, [r7, #44]
 3077              	.L26:
 551:vrfy.c        **** 			size_t j, j2;
 3078              		.loc 1 551 3 discriminator 1
 3079 00c2 3A6B     		ldr	r2, [r7, #48]
 3080 00c4 3B6A     		ldr	r3, [r7, #32]
 3081 00c6 9A42     		cmp	r2, r3
 3082 00c8 B4D3     		bcc	.L29
 566:vrfy.c        **** 			}
 567:vrfy.c        **** 		}
 568:vrfy.c        **** 		t = dt;
 3083              		.loc 1 568 5
 3084 00ca FB69     		ldr	r3, [r7, #28]
 3085 00cc FB63     		str	r3, [r7, #60]
 569:vrfy.c        **** 		m = hm;
 3086              		.loc 1 569 5
 3087 00ce 3B6A     		ldr	r3, [r7, #32]
 3088 00d0 BB63     		str	r3, [r7, #56]
 3089              	.L25:
 3090              	.LBE5:
 546:vrfy.c        **** 		size_t hm, dt, i, j1;
 3091              		.loc 1 546 8
 3092 00d2 BB6B     		ldr	r3, [r7, #56]
 3093 00d4 012B     		cmp	r3, #1
 3094 00d6 A2D8     		bhi	.L30
 570:vrfy.c        **** 	}
 571:vrfy.c        **** 
 572:vrfy.c        **** 	/*
 573:vrfy.c        **** 	 * To complete the inverse NTT, we must now divide all values by
 574:vrfy.c        **** 	 * n (the vector size). We thus need the inverse of n, i.e. we
 575:vrfy.c        **** 	 * need to divide 1 by 2 logn times. But we also want it in
 576:vrfy.c        **** 	 * Montgomery representation, i.e. we also want to multiply it
 577:vrfy.c        **** 	 * by R = 2^16. In the common case, this should be a simple right
 578:vrfy.c        **** 	 * shift. The loop below is generic and works also in corner cases;
 579:vrfy.c        **** 	 * its computation time is negligible.
 580:vrfy.c        **** 	 */
 581:vrfy.c        **** 	ni = R;
 3095              		.loc 1 581 5
 3096 00d8 40F6FB73 		movw	r3, #4091
 3097 00dc 7B63     		str	r3, [r7, #52]
 582:vrfy.c        **** 	for (m = n; m > 1; m >>= 1) {
 3098              		.loc 1 582 9
 3099 00de 7B6A     		ldr	r3, [r7, #36]
 3100 00e0 BB63     		str	r3, [r7, #56]
 3101              		.loc 1 582 2
 3102 00e2 06E0     		b	.L31
 3103              	.L32:
 583:vrfy.c        **** 		ni = mq_rshift1(ni);
 3104              		.loc 1 583 8 discriminator 3
 3105 00e4 786B     		ldr	r0, [r7, #52]
 3106 00e6 FFF7FEFF 		bl	mq_rshift1
 3107 00ea 7863     		str	r0, [r7, #52]
 582:vrfy.c        **** 	for (m = n; m > 1; m >>= 1) {
 3108              		.loc 1 582 23 discriminator 3
 3109 00ec BB6B     		ldr	r3, [r7, #56]
 3110 00ee 5B08     		lsrs	r3, r3, #1
 3111 00f0 BB63     		str	r3, [r7, #56]
 3112              	.L31:
 582:vrfy.c        **** 	for (m = n; m > 1; m >>= 1) {
 3113              		.loc 1 582 2 discriminator 1
 3114 00f2 BB6B     		ldr	r3, [r7, #56]
 3115 00f4 012B     		cmp	r3, #1
 3116 00f6 F5D8     		bhi	.L32
 584:vrfy.c        **** 	}
 585:vrfy.c        **** 	for (m = 0; m < n; m ++) {
 3117              		.loc 1 585 9
 3118 00f8 0023     		movs	r3, #0
 3119 00fa BB63     		str	r3, [r7, #56]
 3120              		.loc 1 585 2
 3121 00fc 12E0     		b	.L33
 3122              	.L34:
 586:vrfy.c        **** 		a[m] = (uint16_t)mq_montymul(a[m], ni);
 3123              		.loc 1 586 33 discriminator 3
 3124 00fe BB6B     		ldr	r3, [r7, #56]
 3125 0100 5B00     		lsls	r3, r3, #1
 3126 0102 7A68     		ldr	r2, [r7, #4]
 3127 0104 1344     		add	r3, r3, r2
 3128 0106 1B88     		ldrh	r3, [r3]
 3129              		.loc 1 586 20 discriminator 3
 3130 0108 796B     		ldr	r1, [r7, #52]
 3131 010a 1846     		mov	r0, r3
 3132 010c FFF7FEFF 		bl	mq_montymul
 3133 0110 0146     		mov	r1, r0
 3134              		.loc 1 586 4 discriminator 3
 3135 0112 BB6B     		ldr	r3, [r7, #56]
 3136 0114 5B00     		lsls	r3, r3, #1
 3137 0116 7A68     		ldr	r2, [r7, #4]
 3138 0118 1344     		add	r3, r3, r2
 3139              		.loc 1 586 10 discriminator 3
 3140 011a 8AB2     		uxth	r2, r1
 3141              		.loc 1 586 8 discriminator 3
 3142 011c 1A80     		strh	r2, [r3]	@ movhi
 585:vrfy.c        **** 		a[m] = (uint16_t)mq_montymul(a[m], ni);
 3143              		.loc 1 585 23 discriminator 3
 3144 011e BB6B     		ldr	r3, [r7, #56]
 3145 0120 0133     		adds	r3, r3, #1
 3146 0122 BB63     		str	r3, [r7, #56]
 3147              	.L33:
 585:vrfy.c        **** 		a[m] = (uint16_t)mq_montymul(a[m], ni);
 3148              		.loc 1 585 2 discriminator 1
 3149 0124 BA6B     		ldr	r2, [r7, #56]
 3150 0126 7B6A     		ldr	r3, [r7, #36]
 3151 0128 9A42     		cmp	r2, r3
 3152 012a E8D3     		bcc	.L34
 587:vrfy.c        **** 	}
 588:vrfy.c        **** }
 3153              		.loc 1 588 1
 3154 012c 00BF     		nop
 3155 012e 00BF     		nop
 3156 0130 4037     		adds	r7, r7, #64
 3157              	.LCFI48:
 3158              		.cfi_def_cfa_offset 8
 3159 0132 BD46     		mov	sp, r7
 3160              	.LCFI49:
 3161              		.cfi_def_cfa_register 13
 3162              		@ sp needed
 3163 0134 80BD     		pop	{r7, pc}
 3164              	.L36:
 3165 0136 00BF     		.align	2
 3166              	.L35:
 3167 0138 40090000 		.word	iGMb
 3168              		.cfi_endproc
 3169              	.LFE26:
 3171              		.section	.text.mq_poly_tomonty,"ax",%progbits
 3172              		.align	1
 3173              		.syntax unified
 3174              		.thumb
 3175              		.thumb_func
 3176              		.fpu softvfp
 3178              	mq_poly_tomonty:
 3179              	.LFB27:
 589:vrfy.c        **** 
 590:vrfy.c        **** /*
 591:vrfy.c        ****  * Convert a polynomial (mod q) to Montgomery representation.
 592:vrfy.c        ****  */
 593:vrfy.c        **** static void
 594:vrfy.c        **** mq_poly_tomonty(uint16_t *f, unsigned logn)
 595:vrfy.c        **** {
 3180              		.loc 1 595 1
 3181              		.cfi_startproc
 3182              		@ args = 0, pretend = 0, frame = 16
 3183              		@ frame_needed = 1, uses_anonymous_args = 0
 3184 0000 80B5     		push	{r7, lr}
 3185              	.LCFI50:
 3186              		.cfi_def_cfa_offset 8
 3187              		.cfi_offset 7, -8
 3188              		.cfi_offset 14, -4
 3189 0002 84B0     		sub	sp, sp, #16
 3190              	.LCFI51:
 3191              		.cfi_def_cfa_offset 24
 3192 0004 00AF     		add	r7, sp, #0
 3193              	.LCFI52:
 3194              		.cfi_def_cfa_register 7
 3195 0006 7860     		str	r0, [r7, #4]
 3196 0008 3960     		str	r1, [r7]
 596:vrfy.c        **** 	size_t u, n;
 597:vrfy.c        **** 
 598:vrfy.c        **** 	n = (size_t)1 << logn;
 3197              		.loc 1 598 4
 3198 000a 0122     		movs	r2, #1
 3199 000c 3B68     		ldr	r3, [r7]
 3200 000e 02FA03F3 		lsl	r3, r2, r3
 3201 0012 BB60     		str	r3, [r7, #8]
 599:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3202              		.loc 1 599 9
 3203 0014 0023     		movs	r3, #0
 3204 0016 FB60     		str	r3, [r7, #12]
 3205              		.loc 1 599 2
 3206 0018 13E0     		b	.L38
 3207              	.L39:
 600:vrfy.c        **** 		f[u] = (uint16_t)mq_montymul(f[u], R2);
 3208              		.loc 1 600 33 discriminator 3
 3209 001a FB68     		ldr	r3, [r7, #12]
 3210 001c 5B00     		lsls	r3, r3, #1
 3211 001e 7A68     		ldr	r2, [r7, #4]
 3212 0020 1344     		add	r3, r3, r2
 3213 0022 1B88     		ldrh	r3, [r3]
 3214              		.loc 1 600 20 discriminator 3
 3215 0024 42F6C821 		movw	r1, #10952
 3216 0028 1846     		mov	r0, r3
 3217 002a FFF7FEFF 		bl	mq_montymul
 3218 002e 0146     		mov	r1, r0
 3219              		.loc 1 600 4 discriminator 3
 3220 0030 FB68     		ldr	r3, [r7, #12]
 3221 0032 5B00     		lsls	r3, r3, #1
 3222 0034 7A68     		ldr	r2, [r7, #4]
 3223 0036 1344     		add	r3, r3, r2
 3224              		.loc 1 600 10 discriminator 3
 3225 0038 8AB2     		uxth	r2, r1
 3226              		.loc 1 600 8 discriminator 3
 3227 003a 1A80     		strh	r2, [r3]	@ movhi
 599:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3228              		.loc 1 599 23 discriminator 3
 3229 003c FB68     		ldr	r3, [r7, #12]
 3230 003e 0133     		adds	r3, r3, #1
 3231 0040 FB60     		str	r3, [r7, #12]
 3232              	.L38:
 599:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3233              		.loc 1 599 2 discriminator 1
 3234 0042 FA68     		ldr	r2, [r7, #12]
 3235 0044 BB68     		ldr	r3, [r7, #8]
 3236 0046 9A42     		cmp	r2, r3
 3237 0048 E7D3     		bcc	.L39
 601:vrfy.c        **** 	}
 602:vrfy.c        **** }
 3238              		.loc 1 602 1
 3239 004a 00BF     		nop
 3240 004c 00BF     		nop
 3241 004e 1037     		adds	r7, r7, #16
 3242              	.LCFI53:
 3243              		.cfi_def_cfa_offset 8
 3244 0050 BD46     		mov	sp, r7
 3245              	.LCFI54:
 3246              		.cfi_def_cfa_register 13
 3247              		@ sp needed
 3248 0052 80BD     		pop	{r7, pc}
 3249              		.cfi_endproc
 3250              	.LFE27:
 3252              		.section	.text.mq_poly_montymul_ntt,"ax",%progbits
 3253              		.align	1
 3254              		.syntax unified
 3255              		.thumb
 3256              		.thumb_func
 3257              		.fpu softvfp
 3259              	mq_poly_montymul_ntt:
 3260              	.LFB28:
 603:vrfy.c        **** 
 604:vrfy.c        **** /*
 605:vrfy.c        ****  * Multiply two polynomials together (NTT representation, and using
 606:vrfy.c        ****  * a Montgomery multiplication). Result f*g is written over f.
 607:vrfy.c        ****  */
 608:vrfy.c        **** static void
 609:vrfy.c        **** mq_poly_montymul_ntt(uint16_t *f, const uint16_t *g, unsigned logn)
 610:vrfy.c        **** {
 3261              		.loc 1 610 1
 3262              		.cfi_startproc
 3263              		@ args = 0, pretend = 0, frame = 24
 3264              		@ frame_needed = 1, uses_anonymous_args = 0
 3265 0000 80B5     		push	{r7, lr}
 3266              	.LCFI55:
 3267              		.cfi_def_cfa_offset 8
 3268              		.cfi_offset 7, -8
 3269              		.cfi_offset 14, -4
 3270 0002 86B0     		sub	sp, sp, #24
 3271              	.LCFI56:
 3272              		.cfi_def_cfa_offset 32
 3273 0004 00AF     		add	r7, sp, #0
 3274              	.LCFI57:
 3275              		.cfi_def_cfa_register 7
 3276 0006 F860     		str	r0, [r7, #12]
 3277 0008 B960     		str	r1, [r7, #8]
 3278 000a 7A60     		str	r2, [r7, #4]
 611:vrfy.c        **** 	size_t u, n;
 612:vrfy.c        **** 
 613:vrfy.c        **** 	n = (size_t)1 << logn;
 3279              		.loc 1 613 4
 3280 000c 0122     		movs	r2, #1
 3281 000e 7B68     		ldr	r3, [r7, #4]
 3282 0010 02FA03F3 		lsl	r3, r2, r3
 3283 0014 3B61     		str	r3, [r7, #16]
 614:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3284              		.loc 1 614 9
 3285 0016 0023     		movs	r3, #0
 3286 0018 7B61     		str	r3, [r7, #20]
 3287              		.loc 1 614 2
 3288 001a 17E0     		b	.L41
 3289              	.L42:
 615:vrfy.c        **** 		f[u] = (uint16_t)mq_montymul(f[u], g[u]);
 3290              		.loc 1 615 33 discriminator 3
 3291 001c 7B69     		ldr	r3, [r7, #20]
 3292 001e 5B00     		lsls	r3, r3, #1
 3293 0020 FA68     		ldr	r2, [r7, #12]
 3294 0022 1344     		add	r3, r3, r2
 3295 0024 1B88     		ldrh	r3, [r3]
 3296              		.loc 1 615 20 discriminator 3
 3297 0026 1846     		mov	r0, r3
 3298              		.loc 1 615 39 discriminator 3
 3299 0028 7B69     		ldr	r3, [r7, #20]
 3300 002a 5B00     		lsls	r3, r3, #1
 3301 002c BA68     		ldr	r2, [r7, #8]
 3302 002e 1344     		add	r3, r3, r2
 3303 0030 1B88     		ldrh	r3, [r3]
 3304              		.loc 1 615 20 discriminator 3
 3305 0032 1946     		mov	r1, r3
 3306 0034 FFF7FEFF 		bl	mq_montymul
 3307 0038 0146     		mov	r1, r0
 3308              		.loc 1 615 4 discriminator 3
 3309 003a 7B69     		ldr	r3, [r7, #20]
 3310 003c 5B00     		lsls	r3, r3, #1
 3311 003e FA68     		ldr	r2, [r7, #12]
 3312 0040 1344     		add	r3, r3, r2
 3313              		.loc 1 615 10 discriminator 3
 3314 0042 8AB2     		uxth	r2, r1
 3315              		.loc 1 615 8 discriminator 3
 3316 0044 1A80     		strh	r2, [r3]	@ movhi
 614:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3317              		.loc 1 614 23 discriminator 3
 3318 0046 7B69     		ldr	r3, [r7, #20]
 3319 0048 0133     		adds	r3, r3, #1
 3320 004a 7B61     		str	r3, [r7, #20]
 3321              	.L41:
 614:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3322              		.loc 1 614 2 discriminator 1
 3323 004c 7A69     		ldr	r2, [r7, #20]
 3324 004e 3B69     		ldr	r3, [r7, #16]
 3325 0050 9A42     		cmp	r2, r3
 3326 0052 E3D3     		bcc	.L42
 616:vrfy.c        **** 	}
 617:vrfy.c        **** }
 3327              		.loc 1 617 1
 3328 0054 00BF     		nop
 3329 0056 00BF     		nop
 3330 0058 1837     		adds	r7, r7, #24
 3331              	.LCFI58:
 3332              		.cfi_def_cfa_offset 8
 3333 005a BD46     		mov	sp, r7
 3334              	.LCFI59:
 3335              		.cfi_def_cfa_register 13
 3336              		@ sp needed
 3337 005c 80BD     		pop	{r7, pc}
 3338              		.cfi_endproc
 3339              	.LFE28:
 3341              		.section	.text.mq_poly_sub,"ax",%progbits
 3342              		.align	1
 3343              		.syntax unified
 3344              		.thumb
 3345              		.thumb_func
 3346              		.fpu softvfp
 3348              	mq_poly_sub:
 3349              	.LFB29:
 618:vrfy.c        **** 
 619:vrfy.c        **** /*
 620:vrfy.c        ****  * Subtract polynomial g from polynomial f.
 621:vrfy.c        ****  */
 622:vrfy.c        **** static void
 623:vrfy.c        **** mq_poly_sub(uint16_t *f, const uint16_t *g, unsigned logn)
 624:vrfy.c        **** {
 3350              		.loc 1 624 1
 3351              		.cfi_startproc
 3352              		@ args = 0, pretend = 0, frame = 24
 3353              		@ frame_needed = 1, uses_anonymous_args = 0
 3354 0000 80B5     		push	{r7, lr}
 3355              	.LCFI60:
 3356              		.cfi_def_cfa_offset 8
 3357              		.cfi_offset 7, -8
 3358              		.cfi_offset 14, -4
 3359 0002 86B0     		sub	sp, sp, #24
 3360              	.LCFI61:
 3361              		.cfi_def_cfa_offset 32
 3362 0004 00AF     		add	r7, sp, #0
 3363              	.LCFI62:
 3364              		.cfi_def_cfa_register 7
 3365 0006 F860     		str	r0, [r7, #12]
 3366 0008 B960     		str	r1, [r7, #8]
 3367 000a 7A60     		str	r2, [r7, #4]
 625:vrfy.c        **** 	size_t u, n;
 626:vrfy.c        **** 
 627:vrfy.c        **** 	n = (size_t)1 << logn;
 3368              		.loc 1 627 4
 3369 000c 0122     		movs	r2, #1
 3370 000e 7B68     		ldr	r3, [r7, #4]
 3371 0010 02FA03F3 		lsl	r3, r2, r3
 3372 0014 3B61     		str	r3, [r7, #16]
 628:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3373              		.loc 1 628 9
 3374 0016 0023     		movs	r3, #0
 3375 0018 7B61     		str	r3, [r7, #20]
 3376              		.loc 1 628 2
 3377 001a 17E0     		b	.L44
 3378              	.L45:
 629:vrfy.c        **** 		f[u] = (uint16_t)mq_sub(f[u], g[u]);
 3379              		.loc 1 629 28 discriminator 3
 3380 001c 7B69     		ldr	r3, [r7, #20]
 3381 001e 5B00     		lsls	r3, r3, #1
 3382 0020 FA68     		ldr	r2, [r7, #12]
 3383 0022 1344     		add	r3, r3, r2
 3384 0024 1B88     		ldrh	r3, [r3]
 3385              		.loc 1 629 20 discriminator 3
 3386 0026 1846     		mov	r0, r3
 3387              		.loc 1 629 34 discriminator 3
 3388 0028 7B69     		ldr	r3, [r7, #20]
 3389 002a 5B00     		lsls	r3, r3, #1
 3390 002c BA68     		ldr	r2, [r7, #8]
 3391 002e 1344     		add	r3, r3, r2
 3392 0030 1B88     		ldrh	r3, [r3]
 3393              		.loc 1 629 20 discriminator 3
 3394 0032 1946     		mov	r1, r3
 3395 0034 FFF7FEFF 		bl	mq_sub
 3396 0038 0146     		mov	r1, r0
 3397              		.loc 1 629 4 discriminator 3
 3398 003a 7B69     		ldr	r3, [r7, #20]
 3399 003c 5B00     		lsls	r3, r3, #1
 3400 003e FA68     		ldr	r2, [r7, #12]
 3401 0040 1344     		add	r3, r3, r2
 3402              		.loc 1 629 10 discriminator 3
 3403 0042 8AB2     		uxth	r2, r1
 3404              		.loc 1 629 8 discriminator 3
 3405 0044 1A80     		strh	r2, [r3]	@ movhi
 628:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3406              		.loc 1 628 23 discriminator 3
 3407 0046 7B69     		ldr	r3, [r7, #20]
 3408 0048 0133     		adds	r3, r3, #1
 3409 004a 7B61     		str	r3, [r7, #20]
 3410              	.L44:
 628:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3411              		.loc 1 628 2 discriminator 1
 3412 004c 7A69     		ldr	r2, [r7, #20]
 3413 004e 3B69     		ldr	r3, [r7, #16]
 3414 0050 9A42     		cmp	r2, r3
 3415 0052 E3D3     		bcc	.L45
 630:vrfy.c        **** 	}
 631:vrfy.c        **** }
 3416              		.loc 1 631 1
 3417 0054 00BF     		nop
 3418 0056 00BF     		nop
 3419 0058 1837     		adds	r7, r7, #24
 3420              	.LCFI63:
 3421              		.cfi_def_cfa_offset 8
 3422 005a BD46     		mov	sp, r7
 3423              	.LCFI64:
 3424              		.cfi_def_cfa_register 13
 3425              		@ sp needed
 3426 005c 80BD     		pop	{r7, pc}
 3427              		.cfi_endproc
 3428              	.LFE29:
 3430              		.section	.text.falcon_inner_to_ntt_monty,"ax",%progbits
 3431              		.align	1
 3432              		.global	falcon_inner_to_ntt_monty
 3433              		.syntax unified
 3434              		.thumb
 3435              		.thumb_func
 3436              		.fpu softvfp
 3438              	falcon_inner_to_ntt_monty:
 3439              	.LFB30:
 632:vrfy.c        **** 
 633:vrfy.c        **** /* ===================================================================== */
 634:vrfy.c        **** 
 635:vrfy.c        **** /* see inner.h */
 636:vrfy.c        **** void
 637:vrfy.c        **** Zf(to_ntt_monty)(uint16_t *h, unsigned logn)
 638:vrfy.c        **** {
 3440              		.loc 1 638 1
 3441              		.cfi_startproc
 3442              		@ args = 0, pretend = 0, frame = 8
 3443              		@ frame_needed = 1, uses_anonymous_args = 0
 3444 0000 80B5     		push	{r7, lr}
 3445              	.LCFI65:
 3446              		.cfi_def_cfa_offset 8
 3447              		.cfi_offset 7, -8
 3448              		.cfi_offset 14, -4
 3449 0002 82B0     		sub	sp, sp, #8
 3450              	.LCFI66:
 3451              		.cfi_def_cfa_offset 16
 3452 0004 00AF     		add	r7, sp, #0
 3453              	.LCFI67:
 3454              		.cfi_def_cfa_register 7
 3455 0006 7860     		str	r0, [r7, #4]
 3456 0008 3960     		str	r1, [r7]
 639:vrfy.c        **** 	mq_NTT(h, logn);
 3457              		.loc 1 639 2
 3458 000a 3968     		ldr	r1, [r7]
 3459 000c 7868     		ldr	r0, [r7, #4]
 3460 000e FFF7FEFF 		bl	mq_NTT
 640:vrfy.c        **** 	mq_poly_tomonty(h, logn);
 3461              		.loc 1 640 2
 3462 0012 3968     		ldr	r1, [r7]
 3463 0014 7868     		ldr	r0, [r7, #4]
 3464 0016 FFF7FEFF 		bl	mq_poly_tomonty
 641:vrfy.c        **** }
 3465              		.loc 1 641 1
 3466 001a 00BF     		nop
 3467 001c 0837     		adds	r7, r7, #8
 3468              	.LCFI68:
 3469              		.cfi_def_cfa_offset 8
 3470 001e BD46     		mov	sp, r7
 3471              	.LCFI69:
 3472              		.cfi_def_cfa_register 13
 3473              		@ sp needed
 3474 0020 80BD     		pop	{r7, pc}
 3475              		.cfi_endproc
 3476              	.LFE30:
 3478              		.section	.text.falcon_inner_verify_raw,"ax",%progbits
 3479              		.align	1
 3480              		.global	falcon_inner_verify_raw
 3481              		.syntax unified
 3482              		.thumb
 3483              		.thumb_func
 3484              		.fpu softvfp
 3486              	falcon_inner_verify_raw:
 3487              	.LFB31:
 642:vrfy.c        **** 
 643:vrfy.c        **** /* see inner.h */
 644:vrfy.c        **** int
 645:vrfy.c        **** Zf(verify_raw)(const uint16_t *c0, const int16_t *s2,
 646:vrfy.c        **** 	const uint16_t *h, unsigned logn, uint8_t *tmp)
 647:vrfy.c        **** {
 3488              		.loc 1 647 1
 3489              		.cfi_startproc
 3490              		@ args = 4, pretend = 0, frame = 40
 3491              		@ frame_needed = 1, uses_anonymous_args = 0
 3492 0000 80B5     		push	{r7, lr}
 3493              	.LCFI70:
 3494              		.cfi_def_cfa_offset 8
 3495              		.cfi_offset 7, -8
 3496              		.cfi_offset 14, -4
 3497 0002 8AB0     		sub	sp, sp, #40
 3498              	.LCFI71:
 3499              		.cfi_def_cfa_offset 48
 3500 0004 00AF     		add	r7, sp, #0
 3501              	.LCFI72:
 3502              		.cfi_def_cfa_register 7
 3503 0006 F860     		str	r0, [r7, #12]
 3504 0008 B960     		str	r1, [r7, #8]
 3505 000a 7A60     		str	r2, [r7, #4]
 3506 000c 3B60     		str	r3, [r7]
 648:vrfy.c        **** 	size_t u, n;
 649:vrfy.c        **** 	uint16_t *tt;
 650:vrfy.c        **** 
 651:vrfy.c        **** 	n = (size_t)1 << logn;
 3507              		.loc 1 651 4
 3508 000e 0122     		movs	r2, #1
 3509 0010 3B68     		ldr	r3, [r7]
 3510 0012 02FA03F3 		lsl	r3, r2, r3
 3511 0016 3B62     		str	r3, [r7, #32]
 652:vrfy.c        **** 	tt = (uint16_t *)tmp;
 3512              		.loc 1 652 5
 3513 0018 3B6B     		ldr	r3, [r7, #48]
 3514 001a FB61     		str	r3, [r7, #28]
 653:vrfy.c        **** 
 654:vrfy.c        **** 	/*
 655:vrfy.c        **** 	 * Reduce s2 elements modulo q ([0..q-1] range).
 656:vrfy.c        **** 	 */
 657:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3515              		.loc 1 657 9
 3516 001c 0023     		movs	r3, #0
 3517 001e 7B62     		str	r3, [r7, #36]
 3518              		.loc 1 657 2
 3519 0020 19E0     		b	.L48
 3520              	.L49:
 3521              	.LBB8:
 658:vrfy.c        **** 		uint32_t w;
 659:vrfy.c        **** 
 660:vrfy.c        **** 		w = (uint32_t)s2[u];
 3522              		.loc 1 660 19 discriminator 3
 3523 0022 7B6A     		ldr	r3, [r7, #36]
 3524 0024 5B00     		lsls	r3, r3, #1
 3525 0026 BA68     		ldr	r2, [r7, #8]
 3526 0028 1344     		add	r3, r3, r2
 3527 002a B3F90030 		ldrsh	r3, [r3]
 3528              		.loc 1 660 5 discriminator 3
 3529 002e 7B61     		str	r3, [r7, #20]
 661:vrfy.c        **** 		w += Q & -(w >> 31);
 3530              		.loc 1 661 12 discriminator 3
 3531 0030 7B69     		ldr	r3, [r7, #20]
 3532 0032 DB17     		asrs	r3, r3, #31
 3533 0034 1A46     		mov	r2, r3
 3534              		.loc 1 661 10 discriminator 3
 3535 0036 43F20103 		movw	r3, #12289
 3536 003a 1340     		ands	r3, r3, r2
 3537              		.loc 1 661 5 discriminator 3
 3538 003c 7A69     		ldr	r2, [r7, #20]
 3539 003e 1344     		add	r3, r3, r2
 3540 0040 7B61     		str	r3, [r7, #20]
 662:vrfy.c        **** 		tt[u] = (uint16_t)w;
 3541              		.loc 1 662 5 discriminator 3
 3542 0042 7B6A     		ldr	r3, [r7, #36]
 3543 0044 5B00     		lsls	r3, r3, #1
 3544 0046 FA69     		ldr	r2, [r7, #28]
 3545 0048 1344     		add	r3, r3, r2
 3546              		.loc 1 662 11 discriminator 3
 3547 004a 7A69     		ldr	r2, [r7, #20]
 3548 004c 92B2     		uxth	r2, r2
 3549              		.loc 1 662 9 discriminator 3
 3550 004e 1A80     		strh	r2, [r3]	@ movhi
 3551              	.LBE8:
 657:vrfy.c        **** 		uint32_t w;
 3552              		.loc 1 657 23 discriminator 3
 3553 0050 7B6A     		ldr	r3, [r7, #36]
 3554 0052 0133     		adds	r3, r3, #1
 3555 0054 7B62     		str	r3, [r7, #36]
 3556              	.L48:
 657:vrfy.c        **** 		uint32_t w;
 3557              		.loc 1 657 2 discriminator 1
 3558 0056 7A6A     		ldr	r2, [r7, #36]
 3559 0058 3B6A     		ldr	r3, [r7, #32]
 3560 005a 9A42     		cmp	r2, r3
 3561 005c E1D3     		bcc	.L49
 663:vrfy.c        **** 	}
 664:vrfy.c        **** 
 665:vrfy.c        **** 	/*
 666:vrfy.c        **** 	 * Compute -s1 = s2*h - c0 mod phi mod q (in tt[]).
 667:vrfy.c        **** 	 */
 668:vrfy.c        **** 	mq_NTT(tt, logn);
 3562              		.loc 1 668 2
 3563 005e 3968     		ldr	r1, [r7]
 3564 0060 F869     		ldr	r0, [r7, #28]
 3565 0062 FFF7FEFF 		bl	mq_NTT
 669:vrfy.c        **** 	mq_poly_montymul_ntt(tt, h, logn);
 3566              		.loc 1 669 2
 3567 0066 3A68     		ldr	r2, [r7]
 3568 0068 7968     		ldr	r1, [r7, #4]
 3569 006a F869     		ldr	r0, [r7, #28]
 3570 006c FFF7FEFF 		bl	mq_poly_montymul_ntt
 670:vrfy.c        **** 	mq_iNTT(tt, logn);
 3571              		.loc 1 670 2
 3572 0070 3968     		ldr	r1, [r7]
 3573 0072 F869     		ldr	r0, [r7, #28]
 3574 0074 FFF7FEFF 		bl	mq_iNTT
 671:vrfy.c        **** 	mq_poly_sub(tt, c0, logn);
 3575              		.loc 1 671 2
 3576 0078 3A68     		ldr	r2, [r7]
 3577 007a F968     		ldr	r1, [r7, #12]
 3578 007c F869     		ldr	r0, [r7, #28]
 3579 007e FFF7FEFF 		bl	mq_poly_sub
 672:vrfy.c        **** 
 673:vrfy.c        **** 	/*
 674:vrfy.c        **** 	 * Normalize -s1 elements into the [-q/2..q/2] range.
 675:vrfy.c        **** 	 */
 676:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3580              		.loc 1 676 9
 3581 0082 0023     		movs	r3, #0
 3582 0084 7B62     		str	r3, [r7, #36]
 3583              		.loc 1 676 2
 3584 0086 19E0     		b	.L50
 3585              	.L51:
 3586              	.LBB9:
 677:vrfy.c        **** 		int32_t w;
 678:vrfy.c        **** 
 679:vrfy.c        **** 		w = (int32_t)tt[u];
 3587              		.loc 1 679 18 discriminator 3
 3588 0088 7B6A     		ldr	r3, [r7, #36]
 3589 008a 5B00     		lsls	r3, r3, #1
 3590 008c FA69     		ldr	r2, [r7, #28]
 3591 008e 1344     		add	r3, r3, r2
 3592 0090 1B88     		ldrh	r3, [r3]
 3593              		.loc 1 679 5 discriminator 3
 3594 0092 BB61     		str	r3, [r7, #24]
 680:vrfy.c        **** 		w -= (int32_t)(Q & -(((Q >> 1) - (uint32_t)w) >> 31));
 3595              		.loc 1 680 36 discriminator 3
 3596 0094 BB69     		ldr	r3, [r7, #24]
 3597              		.loc 1 680 34 discriminator 3
 3598 0096 C3F5C053 		rsb	r3, r3, #6144
 3599              		.loc 1 680 22 discriminator 3
 3600 009a DA17     		asrs	r2, r3, #31
 3601              		.loc 1 680 8 discriminator 3
 3602 009c 43F20103 		movw	r3, #12289
 3603 00a0 1340     		ands	r3, r3, r2
 3604              		.loc 1 680 5 discriminator 3
 3605 00a2 BA69     		ldr	r2, [r7, #24]
 3606 00a4 D31A     		subs	r3, r2, r3
 3607 00a6 BB61     		str	r3, [r7, #24]
 681:vrfy.c        **** 		((int16_t *)tt)[u] = (int16_t)w;
 3608              		.loc 1 681 18 discriminator 3
 3609 00a8 7B6A     		ldr	r3, [r7, #36]
 3610 00aa 5B00     		lsls	r3, r3, #1
 3611 00ac FA69     		ldr	r2, [r7, #28]
 3612 00ae 1344     		add	r3, r3, r2
 3613              		.loc 1 681 24 discriminator 3
 3614 00b0 BA69     		ldr	r2, [r7, #24]
 3615 00b2 12B2     		sxth	r2, r2
 3616              		.loc 1 681 22 discriminator 3
 3617 00b4 1A80     		strh	r2, [r3]	@ movhi
 3618              	.LBE9:
 676:vrfy.c        **** 		int32_t w;
 3619              		.loc 1 676 23 discriminator 3
 3620 00b6 7B6A     		ldr	r3, [r7, #36]
 3621 00b8 0133     		adds	r3, r3, #1
 3622 00ba 7B62     		str	r3, [r7, #36]
 3623              	.L50:
 676:vrfy.c        **** 		int32_t w;
 3624              		.loc 1 676 2 discriminator 1
 3625 00bc 7A6A     		ldr	r2, [r7, #36]
 3626 00be 3B6A     		ldr	r3, [r7, #32]
 3627 00c0 9A42     		cmp	r2, r3
 3628 00c2 E1D3     		bcc	.L51
 682:vrfy.c        **** 	}
 683:vrfy.c        **** 
 684:vrfy.c        **** 	/*
 685:vrfy.c        **** 	 * Signature is valid if and only if the aggregate (-s1,s2) vector
 686:vrfy.c        **** 	 * is short enough.
 687:vrfy.c        **** 	 */
 688:vrfy.c        **** 	return Zf(is_short)((int16_t *)tt, s2, logn);
 3629              		.loc 1 688 9
 3630 00c4 3A68     		ldr	r2, [r7]
 3631 00c6 B968     		ldr	r1, [r7, #8]
 3632 00c8 F869     		ldr	r0, [r7, #28]
 3633 00ca FFF7FEFF 		bl	falcon_inner_is_short
 3634 00ce 0346     		mov	r3, r0
 689:vrfy.c        **** }
 3635              		.loc 1 689 1
 3636 00d0 1846     		mov	r0, r3
 3637 00d2 2837     		adds	r7, r7, #40
 3638              	.LCFI73:
 3639              		.cfi_def_cfa_offset 8
 3640 00d4 BD46     		mov	sp, r7
 3641              	.LCFI74:
 3642              		.cfi_def_cfa_register 13
 3643              		@ sp needed
 3644 00d6 80BD     		pop	{r7, pc}
 3645              		.cfi_endproc
 3646              	.LFE31:
 3648              		.section	.text.falcon_inner_compute_public,"ax",%progbits
 3649              		.align	1
 3650              		.global	falcon_inner_compute_public
 3651              		.syntax unified
 3652              		.thumb
 3653              		.thumb_func
 3654              		.fpu softvfp
 3656              	falcon_inner_compute_public:
 3657              	.LFB32:
 690:vrfy.c        **** 
 691:vrfy.c        **** /* see inner.h */
 692:vrfy.c        **** int
 693:vrfy.c        **** Zf(compute_public)(uint16_t *h,
 694:vrfy.c        **** 	const int8_t *f, const int8_t *g, unsigned logn, uint8_t *tmp)
 695:vrfy.c        **** {
 3658              		.loc 1 695 1
 3659              		.cfi_startproc
 3660              		@ args = 4, pretend = 0, frame = 32
 3661              		@ frame_needed = 1, uses_anonymous_args = 0
 3662 0000 80B5     		push	{r7, lr}
 3663              	.LCFI75:
 3664              		.cfi_def_cfa_offset 8
 3665              		.cfi_offset 7, -8
 3666              		.cfi_offset 14, -4
 3667 0002 88B0     		sub	sp, sp, #32
 3668              	.LCFI76:
 3669              		.cfi_def_cfa_offset 40
 3670 0004 00AF     		add	r7, sp, #0
 3671              	.LCFI77:
 3672              		.cfi_def_cfa_register 7
 3673 0006 F860     		str	r0, [r7, #12]
 3674 0008 B960     		str	r1, [r7, #8]
 3675 000a 7A60     		str	r2, [r7, #4]
 3676 000c 3B60     		str	r3, [r7]
 696:vrfy.c        **** 	size_t u, n;
 697:vrfy.c        **** 	uint16_t *tt;
 698:vrfy.c        **** 
 699:vrfy.c        **** 	n = (size_t)1 << logn;
 3677              		.loc 1 699 4
 3678 000e 0122     		movs	r2, #1
 3679 0010 3B68     		ldr	r3, [r7]
 3680 0012 02FA03F3 		lsl	r3, r2, r3
 3681 0016 BB61     		str	r3, [r7, #24]
 700:vrfy.c        **** 	tt = (uint16_t *)tmp;
 3682              		.loc 1 700 5
 3683 0018 BB6A     		ldr	r3, [r7, #40]
 3684 001a 7B61     		str	r3, [r7, #20]
 701:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3685              		.loc 1 701 9
 3686 001c 0023     		movs	r3, #0
 3687 001e FB61     		str	r3, [r7, #28]
 3688              		.loc 1 701 2
 3689 0020 20E0     		b	.L54
 3690              	.L55:
 702:vrfy.c        **** 		tt[u] = (uint16_t)mq_conv_small(f[u]);
 3691              		.loc 1 702 36 discriminator 3
 3692 0022 BA68     		ldr	r2, [r7, #8]
 3693 0024 FB69     		ldr	r3, [r7, #28]
 3694 0026 1344     		add	r3, r3, r2
 3695 0028 93F90030 		ldrsb	r3, [r3]
 3696              		.loc 1 702 21 discriminator 3
 3697 002c 1846     		mov	r0, r3
 3698 002e FFF7FEFF 		bl	mq_conv_small
 3699 0032 0146     		mov	r1, r0
 3700              		.loc 1 702 5 discriminator 3
 3701 0034 FB69     		ldr	r3, [r7, #28]
 3702 0036 5B00     		lsls	r3, r3, #1
 3703 0038 7A69     		ldr	r2, [r7, #20]
 3704 003a 1344     		add	r3, r3, r2
 3705              		.loc 1 702 11 discriminator 3
 3706 003c 8AB2     		uxth	r2, r1
 3707              		.loc 1 702 9 discriminator 3
 3708 003e 1A80     		strh	r2, [r3]	@ movhi
 703:vrfy.c        **** 		h[u] = (uint16_t)mq_conv_small(g[u]);
 3709              		.loc 1 703 35 discriminator 3
 3710 0040 7A68     		ldr	r2, [r7, #4]
 3711 0042 FB69     		ldr	r3, [r7, #28]
 3712 0044 1344     		add	r3, r3, r2
 3713 0046 93F90030 		ldrsb	r3, [r3]
 3714              		.loc 1 703 20 discriminator 3
 3715 004a 1846     		mov	r0, r3
 3716 004c FFF7FEFF 		bl	mq_conv_small
 3717 0050 0146     		mov	r1, r0
 3718              		.loc 1 703 4 discriminator 3
 3719 0052 FB69     		ldr	r3, [r7, #28]
 3720 0054 5B00     		lsls	r3, r3, #1
 3721 0056 FA68     		ldr	r2, [r7, #12]
 3722 0058 1344     		add	r3, r3, r2
 3723              		.loc 1 703 10 discriminator 3
 3724 005a 8AB2     		uxth	r2, r1
 3725              		.loc 1 703 8 discriminator 3
 3726 005c 1A80     		strh	r2, [r3]	@ movhi
 701:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3727              		.loc 1 701 23 discriminator 3
 3728 005e FB69     		ldr	r3, [r7, #28]
 3729 0060 0133     		adds	r3, r3, #1
 3730 0062 FB61     		str	r3, [r7, #28]
 3731              	.L54:
 701:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3732              		.loc 1 701 2 discriminator 1
 3733 0064 FA69     		ldr	r2, [r7, #28]
 3734 0066 BB69     		ldr	r3, [r7, #24]
 3735 0068 9A42     		cmp	r2, r3
 3736 006a DAD3     		bcc	.L55
 704:vrfy.c        **** 	}
 705:vrfy.c        **** 	mq_NTT(h, logn);
 3737              		.loc 1 705 2
 3738 006c 3968     		ldr	r1, [r7]
 3739 006e F868     		ldr	r0, [r7, #12]
 3740 0070 FFF7FEFF 		bl	mq_NTT
 706:vrfy.c        **** 	mq_NTT(tt, logn);
 3741              		.loc 1 706 2
 3742 0074 3968     		ldr	r1, [r7]
 3743 0076 7869     		ldr	r0, [r7, #20]
 3744 0078 FFF7FEFF 		bl	mq_NTT
 707:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3745              		.loc 1 707 9
 3746 007c 0023     		movs	r3, #0
 3747 007e FB61     		str	r3, [r7, #28]
 3748              		.loc 1 707 2
 3749 0080 20E0     		b	.L56
 3750              	.L59:
 708:vrfy.c        **** 		if (tt[u] == 0) {
 3751              		.loc 1 708 9
 3752 0082 FB69     		ldr	r3, [r7, #28]
 3753 0084 5B00     		lsls	r3, r3, #1
 3754 0086 7A69     		ldr	r2, [r7, #20]
 3755 0088 1344     		add	r3, r3, r2
 3756 008a 1B88     		ldrh	r3, [r3]
 3757              		.loc 1 708 6
 3758 008c 002B     		cmp	r3, #0
 3759 008e 01D1     		bne	.L57
 709:vrfy.c        **** 			return 0;
 3760              		.loc 1 709 11
 3761 0090 0023     		movs	r3, #0
 3762 0092 20E0     		b	.L58
 3763              	.L57:
 710:vrfy.c        **** 		}
 711:vrfy.c        **** 		h[u] = (uint16_t)mq_div_12289(h[u], tt[u]);
 3764              		.loc 1 711 34 discriminator 2
 3765 0094 FB69     		ldr	r3, [r7, #28]
 3766 0096 5B00     		lsls	r3, r3, #1
 3767 0098 FA68     		ldr	r2, [r7, #12]
 3768 009a 1344     		add	r3, r3, r2
 3769 009c 1B88     		ldrh	r3, [r3]
 3770              		.loc 1 711 20 discriminator 2
 3771 009e 1846     		mov	r0, r3
 3772              		.loc 1 711 41 discriminator 2
 3773 00a0 FB69     		ldr	r3, [r7, #28]
 3774 00a2 5B00     		lsls	r3, r3, #1
 3775 00a4 7A69     		ldr	r2, [r7, #20]
 3776 00a6 1344     		add	r3, r3, r2
 3777 00a8 1B88     		ldrh	r3, [r3]
 3778              		.loc 1 711 20 discriminator 2
 3779 00aa 1946     		mov	r1, r3
 3780 00ac FFF7FEFF 		bl	mq_div_12289
 3781 00b0 0146     		mov	r1, r0
 3782              		.loc 1 711 4 discriminator 2
 3783 00b2 FB69     		ldr	r3, [r7, #28]
 3784 00b4 5B00     		lsls	r3, r3, #1
 3785 00b6 FA68     		ldr	r2, [r7, #12]
 3786 00b8 1344     		add	r3, r3, r2
 3787              		.loc 1 711 10 discriminator 2
 3788 00ba 8AB2     		uxth	r2, r1
 3789              		.loc 1 711 8 discriminator 2
 3790 00bc 1A80     		strh	r2, [r3]	@ movhi
 707:vrfy.c        **** 		if (tt[u] == 0) {
 3791              		.loc 1 707 23 discriminator 2
 3792 00be FB69     		ldr	r3, [r7, #28]
 3793 00c0 0133     		adds	r3, r3, #1
 3794 00c2 FB61     		str	r3, [r7, #28]
 3795              	.L56:
 707:vrfy.c        **** 		if (tt[u] == 0) {
 3796              		.loc 1 707 2 discriminator 1
 3797 00c4 FA69     		ldr	r2, [r7, #28]
 3798 00c6 BB69     		ldr	r3, [r7, #24]
 3799 00c8 9A42     		cmp	r2, r3
 3800 00ca DAD3     		bcc	.L59
 712:vrfy.c        **** 	}
 713:vrfy.c        **** 	mq_iNTT(h, logn);
 3801              		.loc 1 713 2
 3802 00cc 3968     		ldr	r1, [r7]
 3803 00ce F868     		ldr	r0, [r7, #12]
 3804 00d0 FFF7FEFF 		bl	mq_iNTT
 714:vrfy.c        **** 	return 1;
 3805              		.loc 1 714 9
 3806 00d4 0123     		movs	r3, #1
 3807              	.L58:
 715:vrfy.c        **** }
 3808              		.loc 1 715 1
 3809 00d6 1846     		mov	r0, r3
 3810 00d8 2037     		adds	r7, r7, #32
 3811              	.LCFI78:
 3812              		.cfi_def_cfa_offset 8
 3813 00da BD46     		mov	sp, r7
 3814              	.LCFI79:
 3815              		.cfi_def_cfa_register 13
 3816              		@ sp needed
 3817 00dc 80BD     		pop	{r7, pc}
 3818              		.cfi_endproc
 3819              	.LFE32:
 3821              		.section	.text.falcon_inner_complete_private,"ax",%progbits
 3822              		.align	1
 3823              		.global	falcon_inner_complete_private
 3824              		.syntax unified
 3825              		.thumb
 3826              		.thumb_func
 3827              		.fpu softvfp
 3829              	falcon_inner_complete_private:
 3830              	.LFB33:
 716:vrfy.c        **** 
 717:vrfy.c        **** /* see inner.h */
 718:vrfy.c        **** int
 719:vrfy.c        **** Zf(complete_private)(int8_t *G,
 720:vrfy.c        **** 	const int8_t *f, const int8_t *g, const int8_t *F,
 721:vrfy.c        **** 	unsigned logn, uint8_t *tmp)
 722:vrfy.c        **** {
 3831              		.loc 1 722 1
 3832              		.cfi_startproc
 3833              		@ args = 8, pretend = 0, frame = 40
 3834              		@ frame_needed = 1, uses_anonymous_args = 0
 3835 0000 80B5     		push	{r7, lr}
 3836              	.LCFI80:
 3837              		.cfi_def_cfa_offset 8
 3838              		.cfi_offset 7, -8
 3839              		.cfi_offset 14, -4
 3840 0002 8AB0     		sub	sp, sp, #40
 3841              	.LCFI81:
 3842              		.cfi_def_cfa_offset 48
 3843 0004 00AF     		add	r7, sp, #0
 3844              	.LCFI82:
 3845              		.cfi_def_cfa_register 7
 3846 0006 F860     		str	r0, [r7, #12]
 3847 0008 B960     		str	r1, [r7, #8]
 3848 000a 7A60     		str	r2, [r7, #4]
 3849 000c 3B60     		str	r3, [r7]
 723:vrfy.c        **** 	size_t u, n;
 724:vrfy.c        **** 	uint16_t *t1, *t2;
 725:vrfy.c        **** 
 726:vrfy.c        **** 	n = (size_t)1 << logn;
 3850              		.loc 1 726 4
 3851 000e 0122     		movs	r2, #1
 3852 0010 3B6B     		ldr	r3, [r7, #48]
 3853 0012 02FA03F3 		lsl	r3, r2, r3
 3854 0016 3B62     		str	r3, [r7, #32]
 727:vrfy.c        **** 	t1 = (uint16_t *)tmp;
 3855              		.loc 1 727 5
 3856 0018 7B6B     		ldr	r3, [r7, #52]
 3857 001a FB61     		str	r3, [r7, #28]
 728:vrfy.c        **** 	t2 = t1 + n;
 3858              		.loc 1 728 10
 3859 001c 3B6A     		ldr	r3, [r7, #32]
 3860 001e 5B00     		lsls	r3, r3, #1
 3861              		.loc 1 728 5
 3862 0020 FA69     		ldr	r2, [r7, #28]
 3863 0022 1344     		add	r3, r3, r2
 3864 0024 BB61     		str	r3, [r7, #24]
 729:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3865              		.loc 1 729 9
 3866 0026 0023     		movs	r3, #0
 3867 0028 7B62     		str	r3, [r7, #36]
 3868              		.loc 1 729 2
 3869 002a 20E0     		b	.L61
 3870              	.L62:
 730:vrfy.c        **** 		t1[u] = (uint16_t)mq_conv_small(g[u]);
 3871              		.loc 1 730 36 discriminator 3
 3872 002c 7A68     		ldr	r2, [r7, #4]
 3873 002e 7B6A     		ldr	r3, [r7, #36]
 3874 0030 1344     		add	r3, r3, r2
 3875 0032 93F90030 		ldrsb	r3, [r3]
 3876              		.loc 1 730 21 discriminator 3
 3877 0036 1846     		mov	r0, r3
 3878 0038 FFF7FEFF 		bl	mq_conv_small
 3879 003c 0146     		mov	r1, r0
 3880              		.loc 1 730 5 discriminator 3
 3881 003e 7B6A     		ldr	r3, [r7, #36]
 3882 0040 5B00     		lsls	r3, r3, #1
 3883 0042 FA69     		ldr	r2, [r7, #28]
 3884 0044 1344     		add	r3, r3, r2
 3885              		.loc 1 730 11 discriminator 3
 3886 0046 8AB2     		uxth	r2, r1
 3887              		.loc 1 730 9 discriminator 3
 3888 0048 1A80     		strh	r2, [r3]	@ movhi
 731:vrfy.c        **** 		t2[u] = (uint16_t)mq_conv_small(F[u]);
 3889              		.loc 1 731 36 discriminator 3
 3890 004a 3A68     		ldr	r2, [r7]
 3891 004c 7B6A     		ldr	r3, [r7, #36]
 3892 004e 1344     		add	r3, r3, r2
 3893 0050 93F90030 		ldrsb	r3, [r3]
 3894              		.loc 1 731 21 discriminator 3
 3895 0054 1846     		mov	r0, r3
 3896 0056 FFF7FEFF 		bl	mq_conv_small
 3897 005a 0146     		mov	r1, r0
 3898              		.loc 1 731 5 discriminator 3
 3899 005c 7B6A     		ldr	r3, [r7, #36]
 3900 005e 5B00     		lsls	r3, r3, #1
 3901 0060 BA69     		ldr	r2, [r7, #24]
 3902 0062 1344     		add	r3, r3, r2
 3903              		.loc 1 731 11 discriminator 3
 3904 0064 8AB2     		uxth	r2, r1
 3905              		.loc 1 731 9 discriminator 3
 3906 0066 1A80     		strh	r2, [r3]	@ movhi
 729:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3907              		.loc 1 729 23 discriminator 3
 3908 0068 7B6A     		ldr	r3, [r7, #36]
 3909 006a 0133     		adds	r3, r3, #1
 3910 006c 7B62     		str	r3, [r7, #36]
 3911              	.L61:
 729:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3912              		.loc 1 729 2 discriminator 1
 3913 006e 7A6A     		ldr	r2, [r7, #36]
 3914 0070 3B6A     		ldr	r3, [r7, #32]
 3915 0072 9A42     		cmp	r2, r3
 3916 0074 DAD3     		bcc	.L62
 732:vrfy.c        **** 	}
 733:vrfy.c        **** 	mq_NTT(t1, logn);
 3917              		.loc 1 733 2
 3918 0076 396B     		ldr	r1, [r7, #48]
 3919 0078 F869     		ldr	r0, [r7, #28]
 3920 007a FFF7FEFF 		bl	mq_NTT
 734:vrfy.c        **** 	mq_NTT(t2, logn);
 3921              		.loc 1 734 2
 3922 007e 396B     		ldr	r1, [r7, #48]
 3923 0080 B869     		ldr	r0, [r7, #24]
 3924 0082 FFF7FEFF 		bl	mq_NTT
 735:vrfy.c        **** 	mq_poly_tomonty(t1, logn);
 3925              		.loc 1 735 2
 3926 0086 396B     		ldr	r1, [r7, #48]
 3927 0088 F869     		ldr	r0, [r7, #28]
 3928 008a FFF7FEFF 		bl	mq_poly_tomonty
 736:vrfy.c        **** 	mq_poly_montymul_ntt(t1, t2, logn);
 3929              		.loc 1 736 2
 3930 008e 3A6B     		ldr	r2, [r7, #48]
 3931 0090 B969     		ldr	r1, [r7, #24]
 3932 0092 F869     		ldr	r0, [r7, #28]
 3933 0094 FFF7FEFF 		bl	mq_poly_montymul_ntt
 737:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3934              		.loc 1 737 9
 3935 0098 0023     		movs	r3, #0
 3936 009a 7B62     		str	r3, [r7, #36]
 3937              		.loc 1 737 2
 3938 009c 11E0     		b	.L63
 3939              	.L64:
 738:vrfy.c        **** 		t2[u] = (uint16_t)mq_conv_small(f[u]);
 3940              		.loc 1 738 36 discriminator 3
 3941 009e BA68     		ldr	r2, [r7, #8]
 3942 00a0 7B6A     		ldr	r3, [r7, #36]
 3943 00a2 1344     		add	r3, r3, r2
 3944 00a4 93F90030 		ldrsb	r3, [r3]
 3945              		.loc 1 738 21 discriminator 3
 3946 00a8 1846     		mov	r0, r3
 3947 00aa FFF7FEFF 		bl	mq_conv_small
 3948 00ae 0146     		mov	r1, r0
 3949              		.loc 1 738 5 discriminator 3
 3950 00b0 7B6A     		ldr	r3, [r7, #36]
 3951 00b2 5B00     		lsls	r3, r3, #1
 3952 00b4 BA69     		ldr	r2, [r7, #24]
 3953 00b6 1344     		add	r3, r3, r2
 3954              		.loc 1 738 11 discriminator 3
 3955 00b8 8AB2     		uxth	r2, r1
 3956              		.loc 1 738 9 discriminator 3
 3957 00ba 1A80     		strh	r2, [r3]	@ movhi
 737:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3958              		.loc 1 737 23 discriminator 3
 3959 00bc 7B6A     		ldr	r3, [r7, #36]
 3960 00be 0133     		adds	r3, r3, #1
 3961 00c0 7B62     		str	r3, [r7, #36]
 3962              	.L63:
 737:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3963              		.loc 1 737 2 discriminator 1
 3964 00c2 7A6A     		ldr	r2, [r7, #36]
 3965 00c4 3B6A     		ldr	r3, [r7, #32]
 3966 00c6 9A42     		cmp	r2, r3
 3967 00c8 E9D3     		bcc	.L64
 739:vrfy.c        **** 	}
 740:vrfy.c        **** 	mq_NTT(t2, logn);
 3968              		.loc 1 740 2
 3969 00ca 396B     		ldr	r1, [r7, #48]
 3970 00cc B869     		ldr	r0, [r7, #24]
 3971 00ce FFF7FEFF 		bl	mq_NTT
 741:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 3972              		.loc 1 741 9
 3973 00d2 0023     		movs	r3, #0
 3974 00d4 7B62     		str	r3, [r7, #36]
 3975              		.loc 1 741 2
 3976 00d6 20E0     		b	.L65
 3977              	.L68:
 742:vrfy.c        **** 		if (t2[u] == 0) {
 3978              		.loc 1 742 9
 3979 00d8 7B6A     		ldr	r3, [r7, #36]
 3980 00da 5B00     		lsls	r3, r3, #1
 3981 00dc BA69     		ldr	r2, [r7, #24]
 3982 00de 1344     		add	r3, r3, r2
 3983 00e0 1B88     		ldrh	r3, [r3]
 3984              		.loc 1 742 6
 3985 00e2 002B     		cmp	r3, #0
 3986 00e4 01D1     		bne	.L66
 743:vrfy.c        **** 			return 0;
 3987              		.loc 1 743 11
 3988 00e6 0023     		movs	r3, #0
 3989 00e8 4EE0     		b	.L67
 3990              	.L66:
 744:vrfy.c        **** 		}
 745:vrfy.c        **** 		t1[u] = (uint16_t)mq_div_12289(t1[u], t2[u]);
 3991              		.loc 1 745 36 discriminator 2
 3992 00ea 7B6A     		ldr	r3, [r7, #36]
 3993 00ec 5B00     		lsls	r3, r3, #1
 3994 00ee FA69     		ldr	r2, [r7, #28]
 3995 00f0 1344     		add	r3, r3, r2
 3996 00f2 1B88     		ldrh	r3, [r3]
 3997              		.loc 1 745 21 discriminator 2
 3998 00f4 1846     		mov	r0, r3
 3999              		.loc 1 745 43 discriminator 2
 4000 00f6 7B6A     		ldr	r3, [r7, #36]
 4001 00f8 5B00     		lsls	r3, r3, #1
 4002 00fa BA69     		ldr	r2, [r7, #24]
 4003 00fc 1344     		add	r3, r3, r2
 4004 00fe 1B88     		ldrh	r3, [r3]
 4005              		.loc 1 745 21 discriminator 2
 4006 0100 1946     		mov	r1, r3
 4007 0102 FFF7FEFF 		bl	mq_div_12289
 4008 0106 0146     		mov	r1, r0
 4009              		.loc 1 745 5 discriminator 2
 4010 0108 7B6A     		ldr	r3, [r7, #36]
 4011 010a 5B00     		lsls	r3, r3, #1
 4012 010c FA69     		ldr	r2, [r7, #28]
 4013 010e 1344     		add	r3, r3, r2
 4014              		.loc 1 745 11 discriminator 2
 4015 0110 8AB2     		uxth	r2, r1
 4016              		.loc 1 745 9 discriminator 2
 4017 0112 1A80     		strh	r2, [r3]	@ movhi
 741:vrfy.c        **** 		if (t2[u] == 0) {
 4018              		.loc 1 741 23 discriminator 2
 4019 0114 7B6A     		ldr	r3, [r7, #36]
 4020 0116 0133     		adds	r3, r3, #1
 4021 0118 7B62     		str	r3, [r7, #36]
 4022              	.L65:
 741:vrfy.c        **** 		if (t2[u] == 0) {
 4023              		.loc 1 741 2 discriminator 1
 4024 011a 7A6A     		ldr	r2, [r7, #36]
 4025 011c 3B6A     		ldr	r3, [r7, #32]
 4026 011e 9A42     		cmp	r2, r3
 4027 0120 DAD3     		bcc	.L68
 746:vrfy.c        **** 	}
 747:vrfy.c        **** 	mq_iNTT(t1, logn);
 4028              		.loc 1 747 2
 4029 0122 396B     		ldr	r1, [r7, #48]
 4030 0124 F869     		ldr	r0, [r7, #28]
 4031 0126 FFF7FEFF 		bl	mq_iNTT
 748:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 4032              		.loc 1 748 9
 4033 012a 0023     		movs	r3, #0
 4034 012c 7B62     		str	r3, [r7, #36]
 4035              		.loc 1 748 2
 4036 012e 26E0     		b	.L69
 4037              	.L72:
 4038              	.LBB10:
 749:vrfy.c        **** 		uint32_t w;
 750:vrfy.c        **** 		int32_t gi;
 751:vrfy.c        **** 
 752:vrfy.c        **** 		w = t1[u];
 4039              		.loc 1 752 9
 4040 0130 7B6A     		ldr	r3, [r7, #36]
 4041 0132 5B00     		lsls	r3, r3, #1
 4042 0134 FA69     		ldr	r2, [r7, #28]
 4043 0136 1344     		add	r3, r3, r2
 4044 0138 1B88     		ldrh	r3, [r3]
 4045              		.loc 1 752 5
 4046 013a 3B61     		str	r3, [r7, #16]
 753:vrfy.c        **** 		w -= (Q & ~-((w - (Q >> 1)) >> 31));
 4047              		.loc 1 753 5
 4048 013c 3A69     		ldr	r2, [r7, #16]
 4049              		.loc 1 753 19
 4050 013e 3B69     		ldr	r3, [r7, #16]
 4051 0140 A3F5C053 		sub	r3, r3, #6144
 4052              		.loc 1 753 14
 4053 0144 DB17     		asrs	r3, r3, #31
 4054              		.loc 1 753 13
 4055 0146 D943     		mvns	r1, r3
 4056              		.loc 1 753 11
 4057 0148 43F20103 		movw	r3, #12289
 4058 014c 0B40     		ands	r3, r3, r1
 4059              		.loc 1 753 5
 4060 014e D31A     		subs	r3, r2, r3
 4061 0150 3B61     		str	r3, [r7, #16]
 754:vrfy.c        **** 		gi = *(int32_t *)&w;
 4062              		.loc 1 754 20
 4063 0152 07F11003 		add	r3, r7, #16
 4064              		.loc 1 754 6
 4065 0156 1B68     		ldr	r3, [r3]
 4066 0158 7B61     		str	r3, [r7, #20]
 755:vrfy.c        **** 		if (gi < -127 || gi > +127) {
 4067              		.loc 1 755 6
 4068 015a 7B69     		ldr	r3, [r7, #20]
 4069 015c 13F17F0F 		cmn	r3, #127
 4070 0160 02DB     		blt	.L70
 4071              		.loc 1 755 17 discriminator 1
 4072 0162 7B69     		ldr	r3, [r7, #20]
 4073 0164 7F2B     		cmp	r3, #127
 4074 0166 01DD     		ble	.L71
 4075              	.L70:
 756:vrfy.c        **** 			return 0;
 4076              		.loc 1 756 11
 4077 0168 0023     		movs	r3, #0
 4078 016a 0DE0     		b	.L67
 4079              	.L71:
 757:vrfy.c        **** 		}
 758:vrfy.c        **** 		G[u] = (int8_t)gi;
 4080              		.loc 1 758 4
 4081 016c FA68     		ldr	r2, [r7, #12]
 4082 016e 7B6A     		ldr	r3, [r7, #36]
 4083 0170 1344     		add	r3, r3, r2
 4084              		.loc 1 758 10
 4085 0172 7A69     		ldr	r2, [r7, #20]
 4086 0174 52B2     		sxtb	r2, r2
 4087              		.loc 1 758 8
 4088 0176 1A70     		strb	r2, [r3]
 4089              	.LBE10:
 748:vrfy.c        **** 		uint32_t w;
 4090              		.loc 1 748 23
 4091 0178 7B6A     		ldr	r3, [r7, #36]
 4092 017a 0133     		adds	r3, r3, #1
 4093 017c 7B62     		str	r3, [r7, #36]
 4094              	.L69:
 748:vrfy.c        **** 		uint32_t w;
 4095              		.loc 1 748 2 discriminator 1
 4096 017e 7A6A     		ldr	r2, [r7, #36]
 4097 0180 3B6A     		ldr	r3, [r7, #32]
 4098 0182 9A42     		cmp	r2, r3
 4099 0184 D4D3     		bcc	.L72
 759:vrfy.c        **** 	}
 760:vrfy.c        **** 	return 1;
 4100              		.loc 1 760 9
 4101 0186 0123     		movs	r3, #1
 4102              	.L67:
 761:vrfy.c        **** }
 4103              		.loc 1 761 1
 4104 0188 1846     		mov	r0, r3
 4105 018a 2837     		adds	r7, r7, #40
 4106              	.LCFI83:
 4107              		.cfi_def_cfa_offset 8
 4108 018c BD46     		mov	sp, r7
 4109              	.LCFI84:
 4110              		.cfi_def_cfa_register 13
 4111              		@ sp needed
 4112 018e 80BD     		pop	{r7, pc}
 4113              		.cfi_endproc
 4114              	.LFE33:
 4116              		.section	.text.falcon_inner_is_invertible,"ax",%progbits
 4117              		.align	1
 4118              		.global	falcon_inner_is_invertible
 4119              		.syntax unified
 4120              		.thumb
 4121              		.thumb_func
 4122              		.fpu softvfp
 4124              	falcon_inner_is_invertible:
 4125              	.LFB34:
 762:vrfy.c        **** 
 763:vrfy.c        **** /* see inner.h */
 764:vrfy.c        **** int
 765:vrfy.c        **** Zf(is_invertible)(
 766:vrfy.c        **** 	const int16_t *s2, unsigned logn, uint8_t *tmp)
 767:vrfy.c        **** {
 4126              		.loc 1 767 1
 4127              		.cfi_startproc
 4128              		@ args = 0, pretend = 0, frame = 40
 4129              		@ frame_needed = 1, uses_anonymous_args = 0
 4130 0000 80B5     		push	{r7, lr}
 4131              	.LCFI85:
 4132              		.cfi_def_cfa_offset 8
 4133              		.cfi_offset 7, -8
 4134              		.cfi_offset 14, -4
 4135 0002 8AB0     		sub	sp, sp, #40
 4136              	.LCFI86:
 4137              		.cfi_def_cfa_offset 48
 4138 0004 00AF     		add	r7, sp, #0
 4139              	.LCFI87:
 4140              		.cfi_def_cfa_register 7
 4141 0006 F860     		str	r0, [r7, #12]
 4142 0008 B960     		str	r1, [r7, #8]
 4143 000a 7A60     		str	r2, [r7, #4]
 768:vrfy.c        **** 	size_t u, n;
 769:vrfy.c        **** 	uint16_t *tt;
 770:vrfy.c        **** 	uint32_t r;
 771:vrfy.c        **** 
 772:vrfy.c        **** 	n = (size_t)1 << logn;
 4144              		.loc 1 772 4
 4145 000c 0122     		movs	r2, #1
 4146 000e BB68     		ldr	r3, [r7, #8]
 4147 0010 02FA03F3 		lsl	r3, r2, r3
 4148 0014 FB61     		str	r3, [r7, #28]
 773:vrfy.c        **** 	tt = (uint16_t *)tmp;
 4149              		.loc 1 773 5
 4150 0016 7B68     		ldr	r3, [r7, #4]
 4151 0018 BB61     		str	r3, [r7, #24]
 774:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 4152              		.loc 1 774 9
 4153 001a 0023     		movs	r3, #0
 4154 001c 7B62     		str	r3, [r7, #36]
 4155              		.loc 1 774 2
 4156 001e 19E0     		b	.L74
 4157              	.L75:
 4158              	.LBB11:
 775:vrfy.c        **** 		uint32_t w;
 776:vrfy.c        **** 
 777:vrfy.c        **** 		w = (uint32_t)s2[u];
 4159              		.loc 1 777 19 discriminator 3
 4160 0020 7B6A     		ldr	r3, [r7, #36]
 4161 0022 5B00     		lsls	r3, r3, #1
 4162 0024 FA68     		ldr	r2, [r7, #12]
 4163 0026 1344     		add	r3, r3, r2
 4164 0028 B3F90030 		ldrsh	r3, [r3]
 4165              		.loc 1 777 5 discriminator 3
 4166 002c 7B61     		str	r3, [r7, #20]
 778:vrfy.c        **** 		w += Q & -(w >> 31);
 4167              		.loc 1 778 12 discriminator 3
 4168 002e 7B69     		ldr	r3, [r7, #20]
 4169 0030 DB17     		asrs	r3, r3, #31
 4170 0032 1A46     		mov	r2, r3
 4171              		.loc 1 778 10 discriminator 3
 4172 0034 43F20103 		movw	r3, #12289
 4173 0038 1340     		ands	r3, r3, r2
 4174              		.loc 1 778 5 discriminator 3
 4175 003a 7A69     		ldr	r2, [r7, #20]
 4176 003c 1344     		add	r3, r3, r2
 4177 003e 7B61     		str	r3, [r7, #20]
 779:vrfy.c        **** 		tt[u] = (uint16_t)w;
 4178              		.loc 1 779 5 discriminator 3
 4179 0040 7B6A     		ldr	r3, [r7, #36]
 4180 0042 5B00     		lsls	r3, r3, #1
 4181 0044 BA69     		ldr	r2, [r7, #24]
 4182 0046 1344     		add	r3, r3, r2
 4183              		.loc 1 779 11 discriminator 3
 4184 0048 7A69     		ldr	r2, [r7, #20]
 4185 004a 92B2     		uxth	r2, r2
 4186              		.loc 1 779 9 discriminator 3
 4187 004c 1A80     		strh	r2, [r3]	@ movhi
 4188              	.LBE11:
 774:vrfy.c        **** 		uint32_t w;
 4189              		.loc 1 774 23 discriminator 3
 4190 004e 7B6A     		ldr	r3, [r7, #36]
 4191 0050 0133     		adds	r3, r3, #1
 4192 0052 7B62     		str	r3, [r7, #36]
 4193              	.L74:
 774:vrfy.c        **** 		uint32_t w;
 4194              		.loc 1 774 2 discriminator 1
 4195 0054 7A6A     		ldr	r2, [r7, #36]
 4196 0056 FB69     		ldr	r3, [r7, #28]
 4197 0058 9A42     		cmp	r2, r3
 4198 005a E1D3     		bcc	.L75
 780:vrfy.c        **** 	}
 781:vrfy.c        **** 	mq_NTT(tt, logn);
 4199              		.loc 1 781 2
 4200 005c B968     		ldr	r1, [r7, #8]
 4201 005e B869     		ldr	r0, [r7, #24]
 4202 0060 FFF7FEFF 		bl	mq_NTT
 782:vrfy.c        **** 	r = 0;
 4203              		.loc 1 782 4
 4204 0064 0023     		movs	r3, #0
 4205 0066 3B62     		str	r3, [r7, #32]
 783:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 4206              		.loc 1 783 9
 4207 0068 0023     		movs	r3, #0
 4208 006a 7B62     		str	r3, [r7, #36]
 4209              		.loc 1 783 2
 4210 006c 0CE0     		b	.L76
 4211              	.L77:
 784:vrfy.c        **** 		r |= (uint32_t)(tt[u] - 1);
 4212              		.loc 1 784 21 discriminator 3
 4213 006e 7B6A     		ldr	r3, [r7, #36]
 4214 0070 5B00     		lsls	r3, r3, #1
 4215 0072 BA69     		ldr	r2, [r7, #24]
 4216 0074 1344     		add	r3, r3, r2
 4217 0076 1B88     		ldrh	r3, [r3]
 4218              		.loc 1 784 25 discriminator 3
 4219 0078 013B     		subs	r3, r3, #1
 4220              		.loc 1 784 8 discriminator 3
 4221 007a 1A46     		mov	r2, r3
 4222              		.loc 1 784 5 discriminator 3
 4223 007c 3B6A     		ldr	r3, [r7, #32]
 4224 007e 1343     		orrs	r3, r3, r2
 4225 0080 3B62     		str	r3, [r7, #32]
 783:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 4226              		.loc 1 783 23 discriminator 3
 4227 0082 7B6A     		ldr	r3, [r7, #36]
 4228 0084 0133     		adds	r3, r3, #1
 4229 0086 7B62     		str	r3, [r7, #36]
 4230              	.L76:
 783:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 4231              		.loc 1 783 2 discriminator 1
 4232 0088 7A6A     		ldr	r2, [r7, #36]
 4233 008a FB69     		ldr	r3, [r7, #28]
 4234 008c 9A42     		cmp	r2, r3
 4235 008e EED3     		bcc	.L77
 785:vrfy.c        **** 	}
 786:vrfy.c        **** 	return (int)(1u - (r >> 31));
 4236              		.loc 1 786 23
 4237 0090 3B6A     		ldr	r3, [r7, #32]
 4238 0092 DB17     		asrs	r3, r3, #31
 4239              		.loc 1 786 18
 4240 0094 0133     		adds	r3, r3, #1
 787:vrfy.c        **** }
 4241              		.loc 1 787 1
 4242 0096 1846     		mov	r0, r3
 4243 0098 2837     		adds	r7, r7, #40
 4244              	.LCFI88:
 4245              		.cfi_def_cfa_offset 8
 4246 009a BD46     		mov	sp, r7
 4247              	.LCFI89:
 4248              		.cfi_def_cfa_register 13
 4249              		@ sp needed
 4250 009c 80BD     		pop	{r7, pc}
 4251              		.cfi_endproc
 4252              	.LFE34:
 4254              		.section	.text.falcon_inner_verify_recover,"ax",%progbits
 4255              		.align	1
 4256              		.global	falcon_inner_verify_recover
 4257              		.syntax unified
 4258              		.thumb
 4259              		.thumb_func
 4260              		.fpu softvfp
 4262              	falcon_inner_verify_recover:
 4263              	.LFB35:
 788:vrfy.c        **** 
 789:vrfy.c        **** /* see inner.h */
 790:vrfy.c        **** int
 791:vrfy.c        **** Zf(verify_recover)(uint16_t *h,
 792:vrfy.c        **** 	const uint16_t *c0, const int16_t *s1, const int16_t *s2,
 793:vrfy.c        **** 	unsigned logn, uint8_t *tmp)
 794:vrfy.c        **** {
 4264              		.loc 1 794 1
 4265              		.cfi_startproc
 4266              		@ args = 8, pretend = 0, frame = 40
 4267              		@ frame_needed = 1, uses_anonymous_args = 0
 4268 0000 90B5     		push	{r4, r7, lr}
 4269              	.LCFI90:
 4270              		.cfi_def_cfa_offset 12
 4271              		.cfi_offset 4, -12
 4272              		.cfi_offset 7, -8
 4273              		.cfi_offset 14, -4
 4274 0002 8BB0     		sub	sp, sp, #44
 4275              	.LCFI91:
 4276              		.cfi_def_cfa_offset 56
 4277 0004 00AF     		add	r7, sp, #0
 4278              	.LCFI92:
 4279              		.cfi_def_cfa_register 7
 4280 0006 F860     		str	r0, [r7, #12]
 4281 0008 B960     		str	r1, [r7, #8]
 4282 000a 7A60     		str	r2, [r7, #4]
 4283 000c 3B60     		str	r3, [r7]
 795:vrfy.c        **** 	size_t u, n;
 796:vrfy.c        **** 	uint16_t *tt;
 797:vrfy.c        **** 	uint32_t r;
 798:vrfy.c        **** 
 799:vrfy.c        **** 	n = (size_t)1 << logn;
 4284              		.loc 1 799 4
 4285 000e 0122     		movs	r2, #1
 4286 0010 BB6B     		ldr	r3, [r7, #56]
 4287 0012 02FA03F3 		lsl	r3, r2, r3
 4288 0016 FB61     		str	r3, [r7, #28]
 800:vrfy.c        **** 
 801:vrfy.c        **** 	/*
 802:vrfy.c        **** 	 * Reduce elements of s1 and s2 modulo q; then write s2 into tt[]
 803:vrfy.c        **** 	 * and c0 - s1 into h[].
 804:vrfy.c        **** 	 */
 805:vrfy.c        **** 	tt = (uint16_t *)tmp;
 4289              		.loc 1 805 5
 4290 0018 FB6B     		ldr	r3, [r7, #60]
 4291 001a BB61     		str	r3, [r7, #24]
 806:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 4292              		.loc 1 806 9
 4293 001c 0023     		movs	r3, #0
 4294 001e 7B62     		str	r3, [r7, #36]
 4295              		.loc 1 806 2
 4296 0020 3AE0     		b	.L80
 4297              	.L81:
 4298              	.LBB12:
 807:vrfy.c        **** 		uint32_t w;
 808:vrfy.c        **** 
 809:vrfy.c        **** 		w = (uint32_t)s2[u];
 4299              		.loc 1 809 19 discriminator 3
 4300 0022 7B6A     		ldr	r3, [r7, #36]
 4301 0024 5B00     		lsls	r3, r3, #1
 4302 0026 3A68     		ldr	r2, [r7]
 4303 0028 1344     		add	r3, r3, r2
 4304 002a B3F90030 		ldrsh	r3, [r3]
 4305              		.loc 1 809 5 discriminator 3
 4306 002e 7B61     		str	r3, [r7, #20]
 810:vrfy.c        **** 		w += Q & -(w >> 31);
 4307              		.loc 1 810 12 discriminator 3
 4308 0030 7B69     		ldr	r3, [r7, #20]
 4309 0032 DB17     		asrs	r3, r3, #31
 4310 0034 1A46     		mov	r2, r3
 4311              		.loc 1 810 10 discriminator 3
 4312 0036 43F20103 		movw	r3, #12289
 4313 003a 1340     		ands	r3, r3, r2
 4314              		.loc 1 810 5 discriminator 3
 4315 003c 7A69     		ldr	r2, [r7, #20]
 4316 003e 1344     		add	r3, r3, r2
 4317 0040 7B61     		str	r3, [r7, #20]
 811:vrfy.c        **** 		tt[u] = (uint16_t)w;
 4318              		.loc 1 811 5 discriminator 3
 4319 0042 7B6A     		ldr	r3, [r7, #36]
 4320 0044 5B00     		lsls	r3, r3, #1
 4321 0046 BA69     		ldr	r2, [r7, #24]
 4322 0048 1344     		add	r3, r3, r2
 4323              		.loc 1 811 11 discriminator 3
 4324 004a 7A69     		ldr	r2, [r7, #20]
 4325 004c 92B2     		uxth	r2, r2
 4326              		.loc 1 811 9 discriminator 3
 4327 004e 1A80     		strh	r2, [r3]	@ movhi
 812:vrfy.c        **** 
 813:vrfy.c        **** 		w = (uint32_t)s1[u];
 4328              		.loc 1 813 19 discriminator 3
 4329 0050 7B6A     		ldr	r3, [r7, #36]
 4330 0052 5B00     		lsls	r3, r3, #1
 4331 0054 7A68     		ldr	r2, [r7, #4]
 4332 0056 1344     		add	r3, r3, r2
 4333 0058 B3F90030 		ldrsh	r3, [r3]
 4334              		.loc 1 813 5 discriminator 3
 4335 005c 7B61     		str	r3, [r7, #20]
 814:vrfy.c        **** 		w += Q & -(w >> 31);
 4336              		.loc 1 814 12 discriminator 3
 4337 005e 7B69     		ldr	r3, [r7, #20]
 4338 0060 DB17     		asrs	r3, r3, #31
 4339 0062 1A46     		mov	r2, r3
 4340              		.loc 1 814 10 discriminator 3
 4341 0064 43F20103 		movw	r3, #12289
 4342 0068 1340     		ands	r3, r3, r2
 4343              		.loc 1 814 5 discriminator 3
 4344 006a 7A69     		ldr	r2, [r7, #20]
 4345 006c 1344     		add	r3, r3, r2
 4346 006e 7B61     		str	r3, [r7, #20]
 815:vrfy.c        **** 		w = mq_sub(c0[u], w);
 4347              		.loc 1 815 16 discriminator 3
 4348 0070 7B6A     		ldr	r3, [r7, #36]
 4349 0072 5B00     		lsls	r3, r3, #1
 4350 0074 BA68     		ldr	r2, [r7, #8]
 4351 0076 1344     		add	r3, r3, r2
 4352 0078 1B88     		ldrh	r3, [r3]
 4353              		.loc 1 815 7 discriminator 3
 4354 007a 7969     		ldr	r1, [r7, #20]
 4355 007c 1846     		mov	r0, r3
 4356 007e FFF7FEFF 		bl	mq_sub
 4357 0082 7861     		str	r0, [r7, #20]
 816:vrfy.c        **** 		h[u] = (uint16_t)w;
 4358              		.loc 1 816 4 discriminator 3
 4359 0084 7B6A     		ldr	r3, [r7, #36]
 4360 0086 5B00     		lsls	r3, r3, #1
 4361 0088 FA68     		ldr	r2, [r7, #12]
 4362 008a 1344     		add	r3, r3, r2
 4363              		.loc 1 816 10 discriminator 3
 4364 008c 7A69     		ldr	r2, [r7, #20]
 4365 008e 92B2     		uxth	r2, r2
 4366              		.loc 1 816 8 discriminator 3
 4367 0090 1A80     		strh	r2, [r3]	@ movhi
 4368              	.LBE12:
 806:vrfy.c        **** 		uint32_t w;
 4369              		.loc 1 806 23 discriminator 3
 4370 0092 7B6A     		ldr	r3, [r7, #36]
 4371 0094 0133     		adds	r3, r3, #1
 4372 0096 7B62     		str	r3, [r7, #36]
 4373              	.L80:
 806:vrfy.c        **** 		uint32_t w;
 4374              		.loc 1 806 2 discriminator 1
 4375 0098 7A6A     		ldr	r2, [r7, #36]
 4376 009a FB69     		ldr	r3, [r7, #28]
 4377 009c 9A42     		cmp	r2, r3
 4378 009e C0D3     		bcc	.L81
 817:vrfy.c        **** 	}
 818:vrfy.c        **** 
 819:vrfy.c        **** 	/*
 820:vrfy.c        **** 	 * Compute h = (c0 - s1) / s2. If one of the coefficients of s2
 821:vrfy.c        **** 	 * is zero (in NTT representation) then the operation fails. We
 822:vrfy.c        **** 	 * keep that information into a flag so that we do not deviate
 823:vrfy.c        **** 	 * from strict constant-time processing; if all coefficients of
 824:vrfy.c        **** 	 * s2 are non-zero, then the high bit of r will be zero.
 825:vrfy.c        **** 	 */
 826:vrfy.c        **** 	mq_NTT(tt, logn);
 4379              		.loc 1 826 2
 4380 00a0 B96B     		ldr	r1, [r7, #56]
 4381 00a2 B869     		ldr	r0, [r7, #24]
 4382 00a4 FFF7FEFF 		bl	mq_NTT
 827:vrfy.c        **** 	mq_NTT(h, logn);
 4383              		.loc 1 827 2
 4384 00a8 B96B     		ldr	r1, [r7, #56]
 4385 00aa F868     		ldr	r0, [r7, #12]
 4386 00ac FFF7FEFF 		bl	mq_NTT
 828:vrfy.c        **** 	r = 0;
 4387              		.loc 1 828 4
 4388 00b0 0023     		movs	r3, #0
 4389 00b2 3B62     		str	r3, [r7, #32]
 829:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 4390              		.loc 1 829 9
 4391 00b4 0023     		movs	r3, #0
 4392 00b6 7B62     		str	r3, [r7, #36]
 4393              		.loc 1 829 2
 4394 00b8 21E0     		b	.L82
 4395              	.L83:
 830:vrfy.c        **** 		r |= (uint32_t)(tt[u] - 1);
 4396              		.loc 1 830 21 discriminator 3
 4397 00ba 7B6A     		ldr	r3, [r7, #36]
 4398 00bc 5B00     		lsls	r3, r3, #1
 4399 00be BA69     		ldr	r2, [r7, #24]
 4400 00c0 1344     		add	r3, r3, r2
 4401 00c2 1B88     		ldrh	r3, [r3]
 4402              		.loc 1 830 25 discriminator 3
 4403 00c4 013B     		subs	r3, r3, #1
 4404              		.loc 1 830 8 discriminator 3
 4405 00c6 1A46     		mov	r2, r3
 4406              		.loc 1 830 5 discriminator 3
 4407 00c8 3B6A     		ldr	r3, [r7, #32]
 4408 00ca 1343     		orrs	r3, r3, r2
 4409 00cc 3B62     		str	r3, [r7, #32]
 831:vrfy.c        **** 		h[u] = (uint16_t)mq_div_12289(h[u], tt[u]);
 4410              		.loc 1 831 34 discriminator 3
 4411 00ce 7B6A     		ldr	r3, [r7, #36]
 4412 00d0 5B00     		lsls	r3, r3, #1
 4413 00d2 FA68     		ldr	r2, [r7, #12]
 4414 00d4 1344     		add	r3, r3, r2
 4415 00d6 1B88     		ldrh	r3, [r3]
 4416              		.loc 1 831 20 discriminator 3
 4417 00d8 1846     		mov	r0, r3
 4418              		.loc 1 831 41 discriminator 3
 4419 00da 7B6A     		ldr	r3, [r7, #36]
 4420 00dc 5B00     		lsls	r3, r3, #1
 4421 00de BA69     		ldr	r2, [r7, #24]
 4422 00e0 1344     		add	r3, r3, r2
 4423 00e2 1B88     		ldrh	r3, [r3]
 4424              		.loc 1 831 20 discriminator 3
 4425 00e4 1946     		mov	r1, r3
 4426 00e6 FFF7FEFF 		bl	mq_div_12289
 4427 00ea 0146     		mov	r1, r0
 4428              		.loc 1 831 4 discriminator 3
 4429 00ec 7B6A     		ldr	r3, [r7, #36]
 4430 00ee 5B00     		lsls	r3, r3, #1
 4431 00f0 FA68     		ldr	r2, [r7, #12]
 4432 00f2 1344     		add	r3, r3, r2
 4433              		.loc 1 831 10 discriminator 3
 4434 00f4 8AB2     		uxth	r2, r1
 4435              		.loc 1 831 8 discriminator 3
 4436 00f6 1A80     		strh	r2, [r3]	@ movhi
 829:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 4437              		.loc 1 829 23 discriminator 3
 4438 00f8 7B6A     		ldr	r3, [r7, #36]
 4439 00fa 0133     		adds	r3, r3, #1
 4440 00fc 7B62     		str	r3, [r7, #36]
 4441              	.L82:
 829:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 4442              		.loc 1 829 2 discriminator 1
 4443 00fe 7A6A     		ldr	r2, [r7, #36]
 4444 0100 FB69     		ldr	r3, [r7, #28]
 4445 0102 9A42     		cmp	r2, r3
 4446 0104 D9D3     		bcc	.L83
 832:vrfy.c        **** 	}
 833:vrfy.c        **** 	mq_iNTT(h, logn);
 4447              		.loc 1 833 2
 4448 0106 B96B     		ldr	r1, [r7, #56]
 4449 0108 F868     		ldr	r0, [r7, #12]
 4450 010a FFF7FEFF 		bl	mq_iNTT
 834:vrfy.c        **** 
 835:vrfy.c        **** 	/*
 836:vrfy.c        **** 	 * Signature is acceptable if and only if it is short enough,
 837:vrfy.c        **** 	 * and s2 was invertible mod phi mod q. The caller must still
 838:vrfy.c        **** 	 * check that the rebuilt public key matches the expected
 839:vrfy.c        **** 	 * value (e.g. through a hash).
 840:vrfy.c        **** 	 */
 841:vrfy.c        **** 	r = ~r & (uint32_t)-Zf(is_short)(s1, s2, logn);
 4451              		.loc 1 841 6
 4452 010e 3B6A     		ldr	r3, [r7, #32]
 4453 0110 DC43     		mvns	r4, r3
 4454              		.loc 1 841 22
 4455 0112 BA6B     		ldr	r2, [r7, #56]
 4456 0114 3968     		ldr	r1, [r7]
 4457 0116 7868     		ldr	r0, [r7, #4]
 4458 0118 FFF7FEFF 		bl	falcon_inner_is_short
 4459 011c 0346     		mov	r3, r0
 4460              		.loc 1 841 21
 4461 011e 5B42     		rsbs	r3, r3, #0
 4462              		.loc 1 841 4
 4463 0120 2340     		ands	r3, r3, r4
 4464 0122 3B62     		str	r3, [r7, #32]
 842:vrfy.c        **** 	return (int)(r >> 31);
 4465              		.loc 1 842 17
 4466 0124 3B6A     		ldr	r3, [r7, #32]
 4467 0126 DB0F     		lsrs	r3, r3, #31
 843:vrfy.c        **** }
 4468              		.loc 1 843 1
 4469 0128 1846     		mov	r0, r3
 4470 012a 2C37     		adds	r7, r7, #44
 4471              	.LCFI93:
 4472              		.cfi_def_cfa_offset 12
 4473 012c BD46     		mov	sp, r7
 4474              	.LCFI94:
 4475              		.cfi_def_cfa_register 13
 4476              		@ sp needed
 4477 012e 90BD     		pop	{r4, r7, pc}
 4478              		.cfi_endproc
 4479              	.LFE35:
 4481              		.section	.text.falcon_inner_count_nttzero,"ax",%progbits
 4482              		.align	1
 4483              		.global	falcon_inner_count_nttzero
 4484              		.syntax unified
 4485              		.thumb
 4486              		.thumb_func
 4487              		.fpu softvfp
 4489              	falcon_inner_count_nttzero:
 4490              	.LFB36:
 844:vrfy.c        **** 
 845:vrfy.c        **** /* see inner.h */
 846:vrfy.c        **** int
 847:vrfy.c        **** Zf(count_nttzero)(const int16_t *sig, unsigned logn, uint8_t *tmp)
 848:vrfy.c        **** {
 4491              		.loc 1 848 1
 4492              		.cfi_startproc
 4493              		@ args = 0, pretend = 0, frame = 40
 4494              		@ frame_needed = 1, uses_anonymous_args = 0
 4495 0000 80B5     		push	{r7, lr}
 4496              	.LCFI95:
 4497              		.cfi_def_cfa_offset 8
 4498              		.cfi_offset 7, -8
 4499              		.cfi_offset 14, -4
 4500 0002 8AB0     		sub	sp, sp, #40
 4501              	.LCFI96:
 4502              		.cfi_def_cfa_offset 48
 4503 0004 00AF     		add	r7, sp, #0
 4504              	.LCFI97:
 4505              		.cfi_def_cfa_register 7
 4506 0006 F860     		str	r0, [r7, #12]
 4507 0008 B960     		str	r1, [r7, #8]
 4508 000a 7A60     		str	r2, [r7, #4]
 849:vrfy.c        **** 	uint16_t *s2;
 850:vrfy.c        **** 	size_t u, n;
 851:vrfy.c        **** 	uint32_t r;
 852:vrfy.c        **** 
 853:vrfy.c        **** 	n = (size_t)1 << logn;
 4509              		.loc 1 853 4
 4510 000c 0122     		movs	r2, #1
 4511 000e BB68     		ldr	r3, [r7, #8]
 4512 0010 02FA03F3 		lsl	r3, r2, r3
 4513 0014 FB61     		str	r3, [r7, #28]
 854:vrfy.c        **** 	s2 = (uint16_t *)tmp;
 4514              		.loc 1 854 5
 4515 0016 7B68     		ldr	r3, [r7, #4]
 4516 0018 BB61     		str	r3, [r7, #24]
 855:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 4517              		.loc 1 855 9
 4518 001a 0023     		movs	r3, #0
 4519 001c 7B62     		str	r3, [r7, #36]
 4520              		.loc 1 855 2
 4521 001e 19E0     		b	.L86
 4522              	.L87:
 4523              	.LBB13:
 856:vrfy.c        **** 		uint32_t w;
 857:vrfy.c        **** 
 858:vrfy.c        **** 		w = (uint32_t)sig[u];
 4524              		.loc 1 858 20 discriminator 3
 4525 0020 7B6A     		ldr	r3, [r7, #36]
 4526 0022 5B00     		lsls	r3, r3, #1
 4527 0024 FA68     		ldr	r2, [r7, #12]
 4528 0026 1344     		add	r3, r3, r2
 4529 0028 B3F90030 		ldrsh	r3, [r3]
 4530              		.loc 1 858 5 discriminator 3
 4531 002c 3B61     		str	r3, [r7, #16]
 859:vrfy.c        **** 		w += Q & -(w >> 31);
 4532              		.loc 1 859 12 discriminator 3
 4533 002e 3B69     		ldr	r3, [r7, #16]
 4534 0030 DB17     		asrs	r3, r3, #31
 4535 0032 1A46     		mov	r2, r3
 4536              		.loc 1 859 10 discriminator 3
 4537 0034 43F20103 		movw	r3, #12289
 4538 0038 1340     		ands	r3, r3, r2
 4539              		.loc 1 859 5 discriminator 3
 4540 003a 3A69     		ldr	r2, [r7, #16]
 4541 003c 1344     		add	r3, r3, r2
 4542 003e 3B61     		str	r3, [r7, #16]
 860:vrfy.c        **** 		s2[u] = (uint16_t)w;
 4543              		.loc 1 860 5 discriminator 3
 4544 0040 7B6A     		ldr	r3, [r7, #36]
 4545 0042 5B00     		lsls	r3, r3, #1
 4546 0044 BA69     		ldr	r2, [r7, #24]
 4547 0046 1344     		add	r3, r3, r2
 4548              		.loc 1 860 11 discriminator 3
 4549 0048 3A69     		ldr	r2, [r7, #16]
 4550 004a 92B2     		uxth	r2, r2
 4551              		.loc 1 860 9 discriminator 3
 4552 004c 1A80     		strh	r2, [r3]	@ movhi
 4553              	.LBE13:
 855:vrfy.c        **** 		uint32_t w;
 4554              		.loc 1 855 23 discriminator 3
 4555 004e 7B6A     		ldr	r3, [r7, #36]
 4556 0050 0133     		adds	r3, r3, #1
 4557 0052 7B62     		str	r3, [r7, #36]
 4558              	.L86:
 855:vrfy.c        **** 		uint32_t w;
 4559              		.loc 1 855 2 discriminator 1
 4560 0054 7A6A     		ldr	r2, [r7, #36]
 4561 0056 FB69     		ldr	r3, [r7, #28]
 4562 0058 9A42     		cmp	r2, r3
 4563 005a E1D3     		bcc	.L87
 861:vrfy.c        **** 	}
 862:vrfy.c        **** 	mq_NTT(s2, logn);
 4564              		.loc 1 862 2
 4565 005c B968     		ldr	r1, [r7, #8]
 4566 005e B869     		ldr	r0, [r7, #24]
 4567 0060 FFF7FEFF 		bl	mq_NTT
 863:vrfy.c        **** 	r = 0;
 4568              		.loc 1 863 4
 4569 0064 0023     		movs	r3, #0
 4570 0066 3B62     		str	r3, [r7, #32]
 864:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 4571              		.loc 1 864 9
 4572 0068 0023     		movs	r3, #0
 4573 006a 7B62     		str	r3, [r7, #36]
 4574              		.loc 1 864 2
 4575 006c 0EE0     		b	.L88
 4576              	.L89:
 4577              	.LBB14:
 865:vrfy.c        **** 		uint32_t w;
 866:vrfy.c        **** 
 867:vrfy.c        **** 		w = (uint32_t)s2[u] - 1u;
 4578              		.loc 1 867 19 discriminator 3
 4579 006e 7B6A     		ldr	r3, [r7, #36]
 4580 0070 5B00     		lsls	r3, r3, #1
 4581 0072 BA69     		ldr	r2, [r7, #24]
 4582 0074 1344     		add	r3, r3, r2
 4583 0076 1B88     		ldrh	r3, [r3]
 4584              		.loc 1 867 5 discriminator 3
 4585 0078 013B     		subs	r3, r3, #1
 4586 007a 7B61     		str	r3, [r7, #20]
 868:vrfy.c        **** 		r += (w >> 31);
 4587              		.loc 1 868 11 discriminator 3
 4588 007c 7B69     		ldr	r3, [r7, #20]
 4589 007e DB0F     		lsrs	r3, r3, #31
 4590              		.loc 1 868 5 discriminator 3
 4591 0080 3A6A     		ldr	r2, [r7, #32]
 4592 0082 1344     		add	r3, r3, r2
 4593 0084 3B62     		str	r3, [r7, #32]
 4594              	.LBE14:
 864:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 4595              		.loc 1 864 23 discriminator 3
 4596 0086 7B6A     		ldr	r3, [r7, #36]
 4597 0088 0133     		adds	r3, r3, #1
 4598 008a 7B62     		str	r3, [r7, #36]
 4599              	.L88:
 864:vrfy.c        **** 	for (u = 0; u < n; u ++) {
 4600              		.loc 1 864 2 discriminator 1
 4601 008c 7A6A     		ldr	r2, [r7, #36]
 4602 008e FB69     		ldr	r3, [r7, #28]
 4603 0090 9A42     		cmp	r2, r3
 4604 0092 ECD3     		bcc	.L89
 869:vrfy.c        **** 	}
 870:vrfy.c        **** 	return (int)r;
 4605              		.loc 1 870 9
 4606 0094 3B6A     		ldr	r3, [r7, #32]
 871:vrfy.c        **** }
 4607              		.loc 1 871 1
 4608 0096 1846     		mov	r0, r3
 4609 0098 2837     		adds	r7, r7, #40
 4610              	.LCFI98:
 4611              		.cfi_def_cfa_offset 8
 4612 009a BD46     		mov	sp, r7
 4613              	.LCFI99:
 4614              		.cfi_def_cfa_register 13
 4615              		@ sp needed
 4616 009c 80BD     		pop	{r7, pc}
 4617              		.cfi_endproc
 4618              	.LFE36:
 4620              		.text
 4621              	.Letext0:
 4622              		.file 2 "c:\\users\\user\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\gcc-arm-none-eabi-10-2020
 4623              		.file 3 "c:\\users\\user\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\gcc-arm-none-eabi-10-2020
 4624              		.file 4 "c:\\users\\user\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\gcc-arm-none-eabi-10-2020
 4625              		.file 5 "fpr.h"
DEFINED SYMBOLS
                            *ABS*:00000000 vrfy.c
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:16     .rodata:00000000 $d
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:19     .rodata:00000000 fpr_q
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:25     .rodata:00000008 fpr_inverse_of_q
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:31     .rodata:00000010 fpr_inv_2sqrsigma0
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:37     .rodata:00000018 fpr_inv_sigma
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:63     .rodata:00000070 fpr_sigma_min
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:89     .rodata:000000c8 fpr_log2
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:95     .rodata:000000d0 fpr_inv_log2
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:101    .rodata:000000d8 fpr_bnorm_max
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:107    .rodata:000000e0 fpr_zero
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:112    .rodata:000000e8 fpr_one
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:118    .rodata:000000f0 fpr_two
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:124    .rodata:000000f8 fpr_onehalf
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:130    .rodata:00000100 fpr_invsqrt2
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:136    .rodata:00000108 fpr_invsqrt8
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:142    .rodata:00000110 fpr_ptwo31
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:148    .rodata:00000118 fpr_ptwo31m1
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:154    .rodata:00000120 fpr_mtwo31m1
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:160    .rodata:00000128 fpr_ptwo63m1
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:166    .rodata:00000130 fpr_mtwo63m1
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:172    .rodata:00000138 fpr_ptwo63
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:178    .rodata:00000140 GMb
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:1206   .rodata:00000940 iGMb
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:2232   .text.mq_conv_small:00000000 $t
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:2239   .text.mq_conv_small:00000000 mq_conv_small
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:2292   .text.mq_add:00000000 $t
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:2298   .text.mq_add:00000000 mq_add
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:2356   .text.mq_sub:00000000 $t
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:2362   .text.mq_sub:00000000 mq_sub
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:2417   .text.mq_rshift1:00000000 $t
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:2423   .text.mq_rshift1:00000000 mq_rshift1
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:2474   .text.mq_montymul:00000000 $t
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:2480   .text.mq_montymul:00000000 mq_montymul
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:2563   .text.mq_montysqr:00000000 $t
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:2569   .text.mq_montysqr:00000000 mq_montysqr
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:2606   .text.mq_div_12289:00000000 $t
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:2612   .text.mq_div_12289:00000000 mq_div_12289
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:2734   .text.mq_NTT:00000000 $t
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:2740   .text.mq_NTT:00000000 mq_NTT
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:2917   .text.mq_NTT:000000e0 $d
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:2922   .text.mq_iNTT:00000000 $t
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:2928   .text.mq_iNTT:00000000 mq_iNTT
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:3167   .text.mq_iNTT:00000138 $d
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:3172   .text.mq_poly_tomonty:00000000 $t
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:3178   .text.mq_poly_tomonty:00000000 mq_poly_tomonty
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:3253   .text.mq_poly_montymul_ntt:00000000 $t
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:3259   .text.mq_poly_montymul_ntt:00000000 mq_poly_montymul_ntt
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:3342   .text.mq_poly_sub:00000000 $t
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:3348   .text.mq_poly_sub:00000000 mq_poly_sub
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:3431   .text.falcon_inner_to_ntt_monty:00000000 $t
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:3438   .text.falcon_inner_to_ntt_monty:00000000 falcon_inner_to_ntt_monty
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:3479   .text.falcon_inner_verify_raw:00000000 $t
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:3486   .text.falcon_inner_verify_raw:00000000 falcon_inner_verify_raw
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:3649   .text.falcon_inner_compute_public:00000000 $t
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:3656   .text.falcon_inner_compute_public:00000000 falcon_inner_compute_public
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:3822   .text.falcon_inner_complete_private:00000000 $t
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:3829   .text.falcon_inner_complete_private:00000000 falcon_inner_complete_private
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:4117   .text.falcon_inner_is_invertible:00000000 $t
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:4124   .text.falcon_inner_is_invertible:00000000 falcon_inner_is_invertible
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:4255   .text.falcon_inner_verify_recover:00000000 $t
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:4262   .text.falcon_inner_verify_recover:00000000 falcon_inner_verify_recover
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:4482   .text.falcon_inner_count_nttzero:00000000 $t
C:\Users\user\AppData\Local\Temp\ccP7sDsl.s:4489   .text.falcon_inner_count_nttzero:00000000 falcon_inner_count_nttzero

UNDEFINED SYMBOLS
falcon_inner_is_short
