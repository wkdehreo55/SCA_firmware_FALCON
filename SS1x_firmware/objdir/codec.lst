   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"codec.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.rodata
  16              		.align	3
  19              	fpr_q:
  20 0000 00000000 		.word	0
  21 0004 8000C840 		.word	1086849152
  22              		.align	3
  25              	fpr_inverse_of_q:
  26 0008 82A79790 		.word	-1869109374
  27 000c E354153F 		.word	1058362595
  28              		.align	3
  31              	fpr_inv_2sqrsigma0:
  32 0010 C2BB83C1 		.word	-1048331326
  33 0014 8B4FC33F 		.word	1069764491
  34              		.align	3
  37              	fpr_inv_sigma:
  38 0018 00000000 		.word	0
  39 001c 00000000 		.word	0
  40 0020 9A16247E 		.word	2116294298
  41 0024 EB487C3F 		.word	1065109739
  42 0028 D9AE8C54 		.word	1418505945
  43 002c 0AE57B3F 		.word	1065084170
  44 0030 2C769EE0 		.word	-526485972
  45 0034 2E857B3F 		.word	1065059630
  46 0038 36DACAD3 		.word	-741680586
  47 003c 5EFC7A3F 		.word	1065024606
  48 0040 EDB37609 		.word	158774253
  49 0044 3B7B7A3F 		.word	1064991547
  50 0048 989CCA82 		.word	-2100650856
  51 004c 12017A3F 		.word	1064960274
  52 0050 36275FCE 		.word	-832624842
  53 0054 498D793F 		.word	1064930633
  54 0058 EED96EC5 		.word	-982590994
  55 005c 571F793F 		.word	1064902487
  56 0060 CAC764DE 		.word	-563820598
  57 0064 C2B6783F 		.word	1064875714
  58 0068 E31A31F6 		.word	-164554013
  59 006c 1E53783F 		.word	1064850206
  60              		.align	3
  63              	fpr_sigma_min:
  64 0070 00000000 		.word	0
  65 0074 00000000 		.word	0
  66 0078 8B564406 		.word	105141899
  67 007c 38DDF13F 		.word	1072815416
  68 0080 2686ADDC 		.word	-592607706
  69 0084 2E1DF23F 		.word	1072831790
  70 0088 7A7CAAE1 		.word	-508920710
  71 008c 465CF23F 		.word	1072847942
  72 0090 25FB4A57 		.word	1464531749
  73 0094 5CB9F23F 		.word	1072871772
  74 0098 B622FEC7 		.word	-939646282
  75 009c AB14F33F 		.word	1072895147
  76 00a0 C3D77534 		.word	880138179
  77 00a4 4E6EF33F 		.word	1072918094
  78 00a8 24C2A166 		.word	1721877028
  79 00ac 5AC6F33F 		.word	1072940634
  80 00b0 A0B38C35 		.word	898413472
  81 00b4 E51CF43F 		.word	1072962789
  82 00b8 757A1FBF 		.word	-1088456075
  83 00bc 0172F43F 		.word	1072984577
  84 00c0 64C79099 		.word	-1718565020
  85 00c4 C1C5F43F 		.word	1073006017
  86              		.align	3
  89              	fpr_log2:
  90 00c8 EF39FAFE 		.word	-17155601
  91 00cc 422EE63F 		.word	1072049730
  92              		.align	3
  95              	fpr_inv_log2:
  96 00d0 FE822B65 		.word	1697350398
  97 00d4 4715F73F 		.word	1073157447
  98              		.align	3
 101              	fpr_bnorm_max:
 102 00d8 ACADD85F 		.word	1608035756
 103 00dc 9A6DD040 		.word	1087401370
 104              		.align	3
 107              	fpr_zero:
 108 00e0 00000000 		.space	8
 108      00000000 
 109              		.align	3
 112              	fpr_one:
 113 00e8 00000000 		.word	0
 114 00ec 0000F03F 		.word	1072693248
 115              		.align	3
 118              	fpr_two:
 119 00f0 00000000 		.word	0
 120 00f4 00000040 		.word	1073741824
 121              		.align	3
 124              	fpr_onehalf:
 125 00f8 00000000 		.word	0
 126 00fc 0000E03F 		.word	1071644672
 127              		.align	3
 130              	fpr_invsqrt2:
 131 0100 CD3B7F66 		.word	1719614413
 132 0104 9EA0E63F 		.word	1072079006
 133              		.align	3
 136              	fpr_invsqrt8:
 137 0108 CD3B7F66 		.word	1719614413
 138 010c 9EA0D63F 		.word	1071030430
 139              		.align	3
 142              	fpr_ptwo31:
 143 0110 00000000 		.word	0
 144 0114 0000E041 		.word	1105199104
 145              		.align	3
 148              	fpr_ptwo31m1:
 149 0118 0000C0FF 		.word	-4194304
 150 011c FFFFDF41 		.word	1105199103
 151              		.align	3
 154              	fpr_mtwo31m1:
 155 0120 0000C0FF 		.word	-4194304
 156 0124 FFFFDFC1 		.word	-1042284545
 157              		.align	3
 160              	fpr_ptwo63m1:
 161 0128 00000000 		.word	0
 162 012c 0000E043 		.word	1138753536
 163              		.align	3
 166              	fpr_mtwo63m1:
 167 0130 00000000 		.word	0
 168 0134 0000E0C3 		.word	-1008730112
 169              		.align	3
 172              	fpr_ptwo63:
 173 0138 00000000 		.word	0
 174 013c 0000E043 		.word	1138753536
 175              		.section	.text.falcon_inner_modq_encode,"ax",%progbits
 176              		.align	1
 177              		.global	falcon_inner_modq_encode
 178              		.arch armv7e-m
 179              		.syntax unified
 180              		.thumb
 181              		.thumb_func
 182              		.fpu softvfp
 184              	falcon_inner_modq_encode:
 185              	.LFB18:
 186              		.file 1 "codec.c"
   1:codec.c       **** /*
   2:codec.c       ****  * Encoding/decoding of keys and signatures.
   3:codec.c       ****  *
   4:codec.c       ****  * ==========================(LICENSE BEGIN)============================
   5:codec.c       ****  *
   6:codec.c       ****  * Copyright (c) 2017-2019  Falcon Project
   7:codec.c       ****  *
   8:codec.c       ****  * Permission is hereby granted, free of charge, to any person obtaining
   9:codec.c       ****  * a copy of this software and associated documentation files (the
  10:codec.c       ****  * "Software"), to deal in the Software without restriction, including
  11:codec.c       ****  * without limitation the rights to use, copy, modify, merge, publish,
  12:codec.c       ****  * distribute, sublicense, and/or sell copies of the Software, and to
  13:codec.c       ****  * permit persons to whom the Software is furnished to do so, subject to
  14:codec.c       ****  * the following conditions:
  15:codec.c       ****  *
  16:codec.c       ****  * The above copyright notice and this permission notice shall be
  17:codec.c       ****  * included in all copies or substantial portions of the Software.
  18:codec.c       ****  *
  19:codec.c       ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  20:codec.c       ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  21:codec.c       ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  22:codec.c       ****  * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  23:codec.c       ****  * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  24:codec.c       ****  * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  25:codec.c       ****  * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  26:codec.c       ****  *
  27:codec.c       ****  * ===========================(LICENSE END)=============================
  28:codec.c       ****  *
  29:codec.c       ****  * @author   Thomas Pornin <thomas.pornin@nccgroup.com>
  30:codec.c       ****  */
  31:codec.c       **** 
  32:codec.c       **** #include "inner.h"
  33:codec.c       **** 
  34:codec.c       **** /* see inner.h */
  35:codec.c       **** size_t
  36:codec.c       **** Zf(modq_encode)(
  37:codec.c       **** 	void *out, size_t max_out_len,
  38:codec.c       **** 	const uint16_t *x, unsigned logn)
  39:codec.c       **** {
 187              		.loc 1 39 1
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 40
 190              		@ frame_needed = 1, uses_anonymous_args = 0
 191              		@ link register save eliminated.
 192 0000 80B4     		push	{r7}
 193              	.LCFI0:
 194              		.cfi_def_cfa_offset 4
 195              		.cfi_offset 7, -4
 196 0002 8BB0     		sub	sp, sp, #44
 197              	.LCFI1:
 198              		.cfi_def_cfa_offset 48
 199 0004 00AF     		add	r7, sp, #0
 200              	.LCFI2:
 201              		.cfi_def_cfa_register 7
 202 0006 F860     		str	r0, [r7, #12]
 203 0008 B960     		str	r1, [r7, #8]
 204 000a 7A60     		str	r2, [r7, #4]
 205 000c 3B60     		str	r3, [r7]
  40:codec.c       **** 	size_t n, out_len, u;
  41:codec.c       **** 	uint8_t *buf;
  42:codec.c       **** 	uint32_t acc;
  43:codec.c       **** 	int acc_len;
  44:codec.c       **** 
  45:codec.c       **** 	n = (size_t)1 << logn;
 206              		.loc 1 45 4
 207 000e 0122     		movs	r2, #1
 208 0010 3B68     		ldr	r3, [r7]
 209 0012 02FA03F3 		lsl	r3, r2, r3
 210 0016 7B61     		str	r3, [r7, #20]
  46:codec.c       **** 	for (u = 0; u < n; u ++) {
 211              		.loc 1 46 9
 212 0018 0023     		movs	r3, #0
 213 001a 7B62     		str	r3, [r7, #36]
 214              		.loc 1 46 2
 215 001c 0CE0     		b	.L2
 216              	.L5:
  47:codec.c       **** 		if (x[u] >= 12289) {
 217              		.loc 1 47 8
 218 001e 7B6A     		ldr	r3, [r7, #36]
 219 0020 5B00     		lsls	r3, r3, #1
 220 0022 7A68     		ldr	r2, [r7, #4]
 221 0024 1344     		add	r3, r3, r2
 222 0026 1B88     		ldrh	r3, [r3]
 223              		.loc 1 47 6
 224 0028 B3F5405F 		cmp	r3, #12288
 225 002c 01D9     		bls	.L3
  48:codec.c       **** 			return 0;
 226              		.loc 1 48 11
 227 002e 0023     		movs	r3, #0
 228 0030 52E0     		b	.L4
 229              	.L3:
  46:codec.c       **** 	for (u = 0; u < n; u ++) {
 230              		.loc 1 46 23 discriminator 2
 231 0032 7B6A     		ldr	r3, [r7, #36]
 232 0034 0133     		adds	r3, r3, #1
 233 0036 7B62     		str	r3, [r7, #36]
 234              	.L2:
  46:codec.c       **** 	for (u = 0; u < n; u ++) {
 235              		.loc 1 46 2 discriminator 1
 236 0038 7A6A     		ldr	r2, [r7, #36]
 237 003a 7B69     		ldr	r3, [r7, #20]
 238 003c 9A42     		cmp	r2, r3
 239 003e EED3     		bcc	.L5
  49:codec.c       **** 		}
  50:codec.c       **** 	}
  51:codec.c       **** 	out_len = ((n * 14) + 7) >> 3;
 240              		.loc 1 51 16
 241 0040 7A69     		ldr	r2, [r7, #20]
 242 0042 1346     		mov	r3, r2
 243 0044 DB00     		lsls	r3, r3, #3
 244 0046 9B1A     		subs	r3, r3, r2
 245 0048 5B00     		lsls	r3, r3, #1
 246              		.loc 1 51 22
 247 004a 0733     		adds	r3, r3, #7
 248              		.loc 1 51 10
 249 004c DB08     		lsrs	r3, r3, #3
 250 004e 3B61     		str	r3, [r7, #16]
  52:codec.c       **** 	if (out == NULL) {
 251              		.loc 1 52 5
 252 0050 FB68     		ldr	r3, [r7, #12]
 253 0052 002B     		cmp	r3, #0
 254 0054 01D1     		bne	.L6
  53:codec.c       **** 		return out_len;
 255              		.loc 1 53 10
 256 0056 3B69     		ldr	r3, [r7, #16]
 257 0058 3EE0     		b	.L4
 258              	.L6:
  54:codec.c       **** 	}
  55:codec.c       **** 	if (out_len > max_out_len) {
 259              		.loc 1 55 5
 260 005a 3A69     		ldr	r2, [r7, #16]
 261 005c BB68     		ldr	r3, [r7, #8]
 262 005e 9A42     		cmp	r2, r3
 263 0060 01D9     		bls	.L7
  56:codec.c       **** 		return 0;
 264              		.loc 1 56 10
 265 0062 0023     		movs	r3, #0
 266 0064 38E0     		b	.L4
 267              	.L7:
  57:codec.c       **** 	}
  58:codec.c       **** 	buf = out;
 268              		.loc 1 58 6
 269 0066 FB68     		ldr	r3, [r7, #12]
 270 0068 3B62     		str	r3, [r7, #32]
  59:codec.c       **** 	acc = 0;
 271              		.loc 1 59 6
 272 006a 0023     		movs	r3, #0
 273 006c FB61     		str	r3, [r7, #28]
  60:codec.c       **** 	acc_len = 0;
 274              		.loc 1 60 10
 275 006e 0023     		movs	r3, #0
 276 0070 BB61     		str	r3, [r7, #24]
  61:codec.c       **** 	for (u = 0; u < n; u ++) {
 277              		.loc 1 61 9
 278 0072 0023     		movs	r3, #0
 279 0074 7B62     		str	r3, [r7, #36]
 280              		.loc 1 61 2
 281 0076 1EE0     		b	.L8
 282              	.L11:
  62:codec.c       **** 		acc = (acc << 14) | x[u];
 283              		.loc 1 62 14
 284 0078 FB69     		ldr	r3, [r7, #28]
 285 007a 9B03     		lsls	r3, r3, #14
 286              		.loc 1 62 24
 287 007c 7A6A     		ldr	r2, [r7, #36]
 288 007e 5200     		lsls	r2, r2, #1
 289 0080 7968     		ldr	r1, [r7, #4]
 290 0082 0A44     		add	r2, r2, r1
 291 0084 1288     		ldrh	r2, [r2]
 292              		.loc 1 62 7
 293 0086 1343     		orrs	r3, r3, r2
 294 0088 FB61     		str	r3, [r7, #28]
  63:codec.c       **** 		acc_len += 14;
 295              		.loc 1 63 11
 296 008a BB69     		ldr	r3, [r7, #24]
 297 008c 0E33     		adds	r3, r3, #14
 298 008e BB61     		str	r3, [r7, #24]
  64:codec.c       **** 		while (acc_len >= 8) {
 299              		.loc 1 64 9
 300 0090 0BE0     		b	.L9
 301              	.L10:
  65:codec.c       **** 			acc_len -= 8;
 302              		.loc 1 65 12
 303 0092 BB69     		ldr	r3, [r7, #24]
 304 0094 083B     		subs	r3, r3, #8
 305 0096 BB61     		str	r3, [r7, #24]
  66:codec.c       **** 			*buf ++ = (uint8_t)(acc >> acc_len);
 306              		.loc 1 66 28
 307 0098 FA69     		ldr	r2, [r7, #28]
 308 009a BB69     		ldr	r3, [r7, #24]
 309 009c 22FA03F1 		lsr	r1, r2, r3
 310              		.loc 1 66 9
 311 00a0 3B6A     		ldr	r3, [r7, #32]
 312 00a2 5A1C     		adds	r2, r3, #1
 313 00a4 3A62     		str	r2, [r7, #32]
 314              		.loc 1 66 14
 315 00a6 CAB2     		uxtb	r2, r1
 316              		.loc 1 66 12
 317 00a8 1A70     		strb	r2, [r3]
 318              	.L9:
  64:codec.c       **** 		while (acc_len >= 8) {
 319              		.loc 1 64 9
 320 00aa BB69     		ldr	r3, [r7, #24]
 321 00ac 072B     		cmp	r3, #7
 322 00ae F0DC     		bgt	.L10
  61:codec.c       **** 		acc = (acc << 14) | x[u];
 323              		.loc 1 61 23 discriminator 2
 324 00b0 7B6A     		ldr	r3, [r7, #36]
 325 00b2 0133     		adds	r3, r3, #1
 326 00b4 7B62     		str	r3, [r7, #36]
 327              	.L8:
  61:codec.c       **** 		acc = (acc << 14) | x[u];
 328              		.loc 1 61 2 discriminator 1
 329 00b6 7A6A     		ldr	r2, [r7, #36]
 330 00b8 7B69     		ldr	r3, [r7, #20]
 331 00ba 9A42     		cmp	r2, r3
 332 00bc DCD3     		bcc	.L11
  67:codec.c       **** 		}
  68:codec.c       **** 	}
  69:codec.c       **** 	if (acc_len > 0) {
 333              		.loc 1 69 5
 334 00be BB69     		ldr	r3, [r7, #24]
 335 00c0 002B     		cmp	r3, #0
 336 00c2 08DD     		ble	.L12
  70:codec.c       **** 		*buf = (uint8_t)(acc << (8 - acc_len));
 337              		.loc 1 70 30
 338 00c4 BB69     		ldr	r3, [r7, #24]
 339 00c6 C3F10803 		rsb	r3, r3, #8
 340              		.loc 1 70 24
 341 00ca FA69     		ldr	r2, [r7, #28]
 342 00cc 02FA03F3 		lsl	r3, r2, r3
 343              		.loc 1 70 10
 344 00d0 DAB2     		uxtb	r2, r3
 345              		.loc 1 70 8
 346 00d2 3B6A     		ldr	r3, [r7, #32]
 347 00d4 1A70     		strb	r2, [r3]
 348              	.L12:
  71:codec.c       **** 	}
  72:codec.c       **** 	return out_len;
 349              		.loc 1 72 9
 350 00d6 3B69     		ldr	r3, [r7, #16]
 351              	.L4:
  73:codec.c       **** }
 352              		.loc 1 73 1
 353 00d8 1846     		mov	r0, r3
 354 00da 2C37     		adds	r7, r7, #44
 355              	.LCFI3:
 356              		.cfi_def_cfa_offset 4
 357 00dc BD46     		mov	sp, r7
 358              	.LCFI4:
 359              		.cfi_def_cfa_register 13
 360              		@ sp needed
 361 00de 80BC     		pop	{r7}
 362              	.LCFI5:
 363              		.cfi_restore 7
 364              		.cfi_def_cfa_offset 0
 365 00e0 7047     		bx	lr
 366              		.cfi_endproc
 367              	.LFE18:
 369              		.section	.text.falcon_inner_modq_decode,"ax",%progbits
 370              		.align	1
 371              		.global	falcon_inner_modq_decode
 372              		.syntax unified
 373              		.thumb
 374              		.thumb_func
 375              		.fpu softvfp
 377              	falcon_inner_modq_decode:
 378              	.LFB19:
  74:codec.c       **** 
  75:codec.c       **** /* see inner.h */
  76:codec.c       **** size_t
  77:codec.c       **** Zf(modq_decode)(
  78:codec.c       **** 	uint16_t *x, unsigned logn,
  79:codec.c       **** 	const void *in, size_t max_in_len)
  80:codec.c       **** {
 379              		.loc 1 80 1
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 48
 382              		@ frame_needed = 1, uses_anonymous_args = 0
 383              		@ link register save eliminated.
 384 0000 80B4     		push	{r7}
 385              	.LCFI6:
 386              		.cfi_def_cfa_offset 4
 387              		.cfi_offset 7, -4
 388 0002 8DB0     		sub	sp, sp, #52
 389              	.LCFI7:
 390              		.cfi_def_cfa_offset 56
 391 0004 00AF     		add	r7, sp, #0
 392              	.LCFI8:
 393              		.cfi_def_cfa_register 7
 394 0006 F860     		str	r0, [r7, #12]
 395 0008 B960     		str	r1, [r7, #8]
 396 000a 7A60     		str	r2, [r7, #4]
 397 000c 3B60     		str	r3, [r7]
  81:codec.c       **** 	size_t n, in_len, u;
  82:codec.c       **** 	const uint8_t *buf;
  83:codec.c       **** 	uint32_t acc;
  84:codec.c       **** 	int acc_len;
  85:codec.c       **** 
  86:codec.c       **** 	n = (size_t)1 << logn;
 398              		.loc 1 86 4
 399 000e 0122     		movs	r2, #1
 400 0010 BB68     		ldr	r3, [r7, #8]
 401 0012 02FA03F3 		lsl	r3, r2, r3
 402 0016 FB61     		str	r3, [r7, #28]
  87:codec.c       **** 	in_len = ((n * 14) + 7) >> 3;
 403              		.loc 1 87 15
 404 0018 FA69     		ldr	r2, [r7, #28]
 405 001a 1346     		mov	r3, r2
 406 001c DB00     		lsls	r3, r3, #3
 407 001e 9B1A     		subs	r3, r3, r2
 408 0020 5B00     		lsls	r3, r3, #1
 409              		.loc 1 87 21
 410 0022 0733     		adds	r3, r3, #7
 411              		.loc 1 87 9
 412 0024 DB08     		lsrs	r3, r3, #3
 413 0026 BB61     		str	r3, [r7, #24]
  88:codec.c       **** 	if (in_len > max_in_len) {
 414              		.loc 1 88 5
 415 0028 BA69     		ldr	r2, [r7, #24]
 416 002a 3B68     		ldr	r3, [r7]
 417 002c 9A42     		cmp	r2, r3
 418 002e 01D9     		bls	.L14
  89:codec.c       **** 		return 0;
 419              		.loc 1 89 10
 420 0030 0023     		movs	r3, #0
 421 0032 40E0     		b	.L15
 422              	.L14:
  90:codec.c       **** 	}
  91:codec.c       **** 	buf = in;
 423              		.loc 1 91 6
 424 0034 7B68     		ldr	r3, [r7, #4]
 425 0036 BB62     		str	r3, [r7, #40]
  92:codec.c       **** 	acc = 0;
 426              		.loc 1 92 6
 427 0038 0023     		movs	r3, #0
 428 003a 7B62     		str	r3, [r7, #36]
  93:codec.c       **** 	acc_len = 0;
 429              		.loc 1 93 10
 430 003c 0023     		movs	r3, #0
 431 003e 3B62     		str	r3, [r7, #32]
  94:codec.c       **** 	u = 0;
 432              		.loc 1 94 4
 433 0040 0023     		movs	r3, #0
 434 0042 FB62     		str	r3, [r7, #44]
  95:codec.c       **** 	while (u < n) {
 435              		.loc 1 95 8
 436 0044 26E0     		b	.L16
 437              	.L18:
  96:codec.c       **** 		acc = (acc << 8) | (*buf ++);
 438              		.loc 1 96 14
 439 0046 7B6A     		ldr	r3, [r7, #36]
 440 0048 1A02     		lsls	r2, r3, #8
 441              		.loc 1 96 28
 442 004a BB6A     		ldr	r3, [r7, #40]
 443 004c 591C     		adds	r1, r3, #1
 444 004e B962     		str	r1, [r7, #40]
 445              		.loc 1 96 23
 446 0050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 447              		.loc 1 96 7
 448 0052 1343     		orrs	r3, r3, r2
 449 0054 7B62     		str	r3, [r7, #36]
  97:codec.c       **** 		acc_len += 8;
 450              		.loc 1 97 11
 451 0056 3B6A     		ldr	r3, [r7, #32]
 452 0058 0833     		adds	r3, r3, #8
 453 005a 3B62     		str	r3, [r7, #32]
  98:codec.c       **** 		if (acc_len >= 14) {
 454              		.loc 1 98 6
 455 005c 3B6A     		ldr	r3, [r7, #32]
 456 005e 0D2B     		cmp	r3, #13
 457 0060 18DD     		ble	.L16
 458              	.LBB2:
  99:codec.c       **** 			unsigned w;
 100:codec.c       **** 
 101:codec.c       **** 			acc_len -= 14;
 459              		.loc 1 101 12
 460 0062 3B6A     		ldr	r3, [r7, #32]
 461 0064 0E3B     		subs	r3, r3, #14
 462 0066 3B62     		str	r3, [r7, #32]
 102:codec.c       **** 			w = (acc >> acc_len) & 0x3FFF;
 463              		.loc 1 102 13
 464 0068 7A6A     		ldr	r2, [r7, #36]
 465 006a 3B6A     		ldr	r3, [r7, #32]
 466 006c 22FA03F3 		lsr	r3, r2, r3
 467              		.loc 1 102 6
 468 0070 C3F30D03 		ubfx	r3, r3, #0, #14
 469 0074 7B61     		str	r3, [r7, #20]
 103:codec.c       **** 			if (w >= 12289) {
 470              		.loc 1 103 7
 471 0076 7B69     		ldr	r3, [r7, #20]
 472 0078 B3F5405F 		cmp	r3, #12288
 473 007c 01D9     		bls	.L17
 104:codec.c       **** 				return 0;
 474              		.loc 1 104 12
 475 007e 0023     		movs	r3, #0
 476 0080 19E0     		b	.L15
 477              	.L17:
 105:codec.c       **** 			}
 106:codec.c       **** 			x[u ++] = (uint16_t)w;
 478              		.loc 1 106 8
 479 0082 FB6A     		ldr	r3, [r7, #44]
 480 0084 5A1C     		adds	r2, r3, #1
 481 0086 FA62     		str	r2, [r7, #44]
 482              		.loc 1 106 5
 483 0088 5B00     		lsls	r3, r3, #1
 484 008a FA68     		ldr	r2, [r7, #12]
 485 008c 1344     		add	r3, r3, r2
 486              		.loc 1 106 14
 487 008e 7A69     		ldr	r2, [r7, #20]
 488 0090 92B2     		uxth	r2, r2
 489              		.loc 1 106 12
 490 0092 1A80     		strh	r2, [r3]	@ movhi
 491              	.L16:
 492              	.LBE2:
  95:codec.c       **** 		acc = (acc << 8) | (*buf ++);
 493              		.loc 1 95 8
 494 0094 FA6A     		ldr	r2, [r7, #44]
 495 0096 FB69     		ldr	r3, [r7, #28]
 496 0098 9A42     		cmp	r2, r3
 497 009a D4D3     		bcc	.L18
 107:codec.c       **** 		}
 108:codec.c       **** 	}
 109:codec.c       **** 	if ((acc & (((uint32_t)1 << acc_len) - 1)) != 0) {
 498              		.loc 1 109 11
 499 009c 4FF0FF32 		mov	r2, #-1
 500 00a0 3B6A     		ldr	r3, [r7, #32]
 501 00a2 02FA03F3 		lsl	r3, r2, r3
 502 00a6 DA43     		mvns	r2, r3
 503 00a8 7B6A     		ldr	r3, [r7, #36]
 504 00aa 1340     		ands	r3, r3, r2
 505              		.loc 1 109 5
 506 00ac 002B     		cmp	r3, #0
 507 00ae 01D0     		beq	.L19
 110:codec.c       **** 		return 0;
 508              		.loc 1 110 10
 509 00b0 0023     		movs	r3, #0
 510 00b2 00E0     		b	.L15
 511              	.L19:
 111:codec.c       **** 	}
 112:codec.c       **** 	return in_len;
 512              		.loc 1 112 9
 513 00b4 BB69     		ldr	r3, [r7, #24]
 514              	.L15:
 113:codec.c       **** }
 515              		.loc 1 113 1
 516 00b6 1846     		mov	r0, r3
 517 00b8 3437     		adds	r7, r7, #52
 518              	.LCFI9:
 519              		.cfi_def_cfa_offset 4
 520 00ba BD46     		mov	sp, r7
 521              	.LCFI10:
 522              		.cfi_def_cfa_register 13
 523              		@ sp needed
 524 00bc 80BC     		pop	{r7}
 525              	.LCFI11:
 526              		.cfi_restore 7
 527              		.cfi_def_cfa_offset 0
 528 00be 7047     		bx	lr
 529              		.cfi_endproc
 530              	.LFE19:
 532              		.section	.text.falcon_inner_trim_i16_encode,"ax",%progbits
 533              		.align	1
 534              		.global	falcon_inner_trim_i16_encode
 535              		.syntax unified
 536              		.thumb
 537              		.thumb_func
 538              		.fpu softvfp
 540              	falcon_inner_trim_i16_encode:
 541              	.LFB20:
 114:codec.c       **** 
 115:codec.c       **** /* see inner.h */
 116:codec.c       **** size_t
 117:codec.c       **** Zf(trim_i16_encode)(
 118:codec.c       **** 	void *out, size_t max_out_len,
 119:codec.c       **** 	const int16_t *x, unsigned logn, unsigned bits)
 120:codec.c       **** {
 542              		.loc 1 120 1
 543              		.cfi_startproc
 544              		@ args = 4, pretend = 0, frame = 56
 545              		@ frame_needed = 1, uses_anonymous_args = 0
 546              		@ link register save eliminated.
 547 0000 80B4     		push	{r7}
 548              	.LCFI12:
 549              		.cfi_def_cfa_offset 4
 550              		.cfi_offset 7, -4
 551 0002 8FB0     		sub	sp, sp, #60
 552              	.LCFI13:
 553              		.cfi_def_cfa_offset 64
 554 0004 00AF     		add	r7, sp, #0
 555              	.LCFI14:
 556              		.cfi_def_cfa_register 7
 557 0006 F860     		str	r0, [r7, #12]
 558 0008 B960     		str	r1, [r7, #8]
 559 000a 7A60     		str	r2, [r7, #4]
 560 000c 3B60     		str	r3, [r7]
 121:codec.c       **** 	size_t n, u, out_len;
 122:codec.c       **** 	int minv, maxv;
 123:codec.c       **** 	uint8_t *buf;
 124:codec.c       **** 	uint32_t acc, mask;
 125:codec.c       **** 	unsigned acc_len;
 126:codec.c       **** 
 127:codec.c       **** 	n = (size_t)1 << logn;
 561              		.loc 1 127 4
 562 000e 0122     		movs	r2, #1
 563 0010 3B68     		ldr	r3, [r7]
 564 0012 02FA03F3 		lsl	r3, r2, r3
 565 0016 7B62     		str	r3, [r7, #36]
 128:codec.c       **** 	maxv = (1 << (bits - 1)) - 1;
 566              		.loc 1 128 21
 567 0018 3B6C     		ldr	r3, [r7, #64]
 568 001a 013B     		subs	r3, r3, #1
 569              		.loc 1 128 12
 570 001c 0122     		movs	r2, #1
 571 001e 02FA03F3 		lsl	r3, r2, r3
 572              		.loc 1 128 7
 573 0022 013B     		subs	r3, r3, #1
 574 0024 3B62     		str	r3, [r7, #32]
 129:codec.c       **** 	minv = -maxv;
 575              		.loc 1 129 7
 576 0026 3B6A     		ldr	r3, [r7, #32]
 577 0028 5B42     		rsbs	r3, r3, #0
 578 002a FB61     		str	r3, [r7, #28]
 130:codec.c       **** 	for (u = 0; u < n; u ++) {
 579              		.loc 1 130 9
 580 002c 0023     		movs	r3, #0
 581 002e 7B63     		str	r3, [r7, #52]
 582              		.loc 1 130 2
 583 0030 18E0     		b	.L21
 584              	.L25:
 131:codec.c       **** 		if (x[u] < minv || x[u] > maxv) {
 585              		.loc 1 131 8
 586 0032 7B6B     		ldr	r3, [r7, #52]
 587 0034 5B00     		lsls	r3, r3, #1
 588 0036 7A68     		ldr	r2, [r7, #4]
 589 0038 1344     		add	r3, r3, r2
 590 003a B3F90030 		ldrsh	r3, [r3]
 591 003e 1A46     		mov	r2, r3
 592              		.loc 1 131 6
 593 0040 FB69     		ldr	r3, [r7, #28]
 594 0042 9342     		cmp	r3, r2
 595 0044 09DC     		bgt	.L22
 596              		.loc 1 131 23 discriminator 1
 597 0046 7B6B     		ldr	r3, [r7, #52]
 598 0048 5B00     		lsls	r3, r3, #1
 599 004a 7A68     		ldr	r2, [r7, #4]
 600 004c 1344     		add	r3, r3, r2
 601 004e B3F90030 		ldrsh	r3, [r3]
 602 0052 1A46     		mov	r2, r3
 603              		.loc 1 131 19 discriminator 1
 604 0054 3B6A     		ldr	r3, [r7, #32]
 605 0056 9342     		cmp	r3, r2
 606 0058 01DA     		bge	.L23
 607              	.L22:
 132:codec.c       **** 			return 0;
 608              		.loc 1 132 11
 609 005a 0023     		movs	r3, #0
 610 005c 60E0     		b	.L24
 611              	.L23:
 130:codec.c       **** 	for (u = 0; u < n; u ++) {
 612              		.loc 1 130 23 discriminator 2
 613 005e 7B6B     		ldr	r3, [r7, #52]
 614 0060 0133     		adds	r3, r3, #1
 615 0062 7B63     		str	r3, [r7, #52]
 616              	.L21:
 130:codec.c       **** 	for (u = 0; u < n; u ++) {
 617              		.loc 1 130 2 discriminator 1
 618 0064 7A6B     		ldr	r2, [r7, #52]
 619 0066 7B6A     		ldr	r3, [r7, #36]
 620 0068 9A42     		cmp	r2, r3
 621 006a E2D3     		bcc	.L25
 133:codec.c       **** 		}
 134:codec.c       **** 	}
 135:codec.c       **** 	out_len = ((n * bits) + 7) >> 3;
 622              		.loc 1 135 16
 623 006c 7B6A     		ldr	r3, [r7, #36]
 624 006e 3A6C     		ldr	r2, [r7, #64]
 625 0070 02FB03F3 		mul	r3, r2, r3
 626              		.loc 1 135 24
 627 0074 0733     		adds	r3, r3, #7
 628              		.loc 1 135 10
 629 0076 DB08     		lsrs	r3, r3, #3
 630 0078 BB61     		str	r3, [r7, #24]
 136:codec.c       **** 	if (out == NULL) {
 631              		.loc 1 136 5
 632 007a FB68     		ldr	r3, [r7, #12]
 633 007c 002B     		cmp	r3, #0
 634 007e 01D1     		bne	.L26
 137:codec.c       **** 		return out_len;
 635              		.loc 1 137 10
 636 0080 BB69     		ldr	r3, [r7, #24]
 637 0082 4DE0     		b	.L24
 638              	.L26:
 138:codec.c       **** 	}
 139:codec.c       **** 	if (out_len > max_out_len) {
 639              		.loc 1 139 5
 640 0084 BA69     		ldr	r2, [r7, #24]
 641 0086 BB68     		ldr	r3, [r7, #8]
 642 0088 9A42     		cmp	r2, r3
 643 008a 01D9     		bls	.L27
 140:codec.c       **** 		return 0;
 644              		.loc 1 140 10
 645 008c 0023     		movs	r3, #0
 646 008e 47E0     		b	.L24
 647              	.L27:
 141:codec.c       **** 	}
 142:codec.c       **** 	buf = out;
 648              		.loc 1 142 6
 649 0090 FB68     		ldr	r3, [r7, #12]
 650 0092 3B63     		str	r3, [r7, #48]
 143:codec.c       **** 	acc = 0;
 651              		.loc 1 143 6
 652 0094 0023     		movs	r3, #0
 653 0096 FB62     		str	r3, [r7, #44]
 144:codec.c       **** 	acc_len = 0;
 654              		.loc 1 144 10
 655 0098 0023     		movs	r3, #0
 656 009a BB62     		str	r3, [r7, #40]
 145:codec.c       **** 	mask = ((uint32_t)1 << bits) - 1;
 657              		.loc 1 145 22
 658 009c 0122     		movs	r2, #1
 659 009e 3B6C     		ldr	r3, [r7, #64]
 660 00a0 02FA03F3 		lsl	r3, r2, r3
 661              		.loc 1 145 7
 662 00a4 013B     		subs	r3, r3, #1
 663 00a6 7B61     		str	r3, [r7, #20]
 146:codec.c       **** 	for (u = 0; u < n; u ++) {
 664              		.loc 1 146 9
 665 00a8 0023     		movs	r3, #0
 666 00aa 7B63     		str	r3, [r7, #52]
 667              		.loc 1 146 2
 668 00ac 25E0     		b	.L28
 669              	.L31:
 147:codec.c       **** 		acc = (acc << bits) | ((uint16_t)x[u] & mask);
 670              		.loc 1 147 14
 671 00ae FA6A     		ldr	r2, [r7, #44]
 672 00b0 3B6C     		ldr	r3, [r7, #64]
 673 00b2 9A40     		lsls	r2, r2, r3
 674              		.loc 1 147 37
 675 00b4 7B6B     		ldr	r3, [r7, #52]
 676 00b6 5B00     		lsls	r3, r3, #1
 677 00b8 7968     		ldr	r1, [r7, #4]
 678 00ba 0B44     		add	r3, r3, r1
 679 00bc B3F90030 		ldrsh	r3, [r3]
 680              		.loc 1 147 26
 681 00c0 9BB2     		uxth	r3, r3
 682 00c2 1946     		mov	r1, r3
 683              		.loc 1 147 41
 684 00c4 7B69     		ldr	r3, [r7, #20]
 685 00c6 0B40     		ands	r3, r3, r1
 686              		.loc 1 147 7
 687 00c8 1343     		orrs	r3, r3, r2
 688 00ca FB62     		str	r3, [r7, #44]
 148:codec.c       **** 		acc_len += bits;
 689              		.loc 1 148 11
 690 00cc BA6A     		ldr	r2, [r7, #40]
 691 00ce 3B6C     		ldr	r3, [r7, #64]
 692 00d0 1344     		add	r3, r3, r2
 693 00d2 BB62     		str	r3, [r7, #40]
 149:codec.c       **** 		while (acc_len >= 8) {
 694              		.loc 1 149 9
 695 00d4 0BE0     		b	.L29
 696              	.L30:
 150:codec.c       **** 			acc_len -= 8;
 697              		.loc 1 150 12
 698 00d6 BB6A     		ldr	r3, [r7, #40]
 699 00d8 083B     		subs	r3, r3, #8
 700 00da BB62     		str	r3, [r7, #40]
 151:codec.c       **** 			*buf ++ = (uint8_t)(acc >> acc_len);
 701              		.loc 1 151 28
 702 00dc FA6A     		ldr	r2, [r7, #44]
 703 00de BB6A     		ldr	r3, [r7, #40]
 704 00e0 22FA03F1 		lsr	r1, r2, r3
 705              		.loc 1 151 9
 706 00e4 3B6B     		ldr	r3, [r7, #48]
 707 00e6 5A1C     		adds	r2, r3, #1
 708 00e8 3A63     		str	r2, [r7, #48]
 709              		.loc 1 151 14
 710 00ea CAB2     		uxtb	r2, r1
 711              		.loc 1 151 12
 712 00ec 1A70     		strb	r2, [r3]
 713              	.L29:
 149:codec.c       **** 		while (acc_len >= 8) {
 714              		.loc 1 149 9
 715 00ee BB6A     		ldr	r3, [r7, #40]
 716 00f0 072B     		cmp	r3, #7
 717 00f2 F0D8     		bhi	.L30
 146:codec.c       **** 		acc = (acc << bits) | ((uint16_t)x[u] & mask);
 718              		.loc 1 146 23 discriminator 2
 719 00f4 7B6B     		ldr	r3, [r7, #52]
 720 00f6 0133     		adds	r3, r3, #1
 721 00f8 7B63     		str	r3, [r7, #52]
 722              	.L28:
 146:codec.c       **** 		acc = (acc << bits) | ((uint16_t)x[u] & mask);
 723              		.loc 1 146 2 discriminator 1
 724 00fa 7A6B     		ldr	r2, [r7, #52]
 725 00fc 7B6A     		ldr	r3, [r7, #36]
 726 00fe 9A42     		cmp	r2, r3
 727 0100 D5D3     		bcc	.L31
 152:codec.c       **** 		}
 153:codec.c       **** 	}
 154:codec.c       **** 	if (acc_len > 0) {
 728              		.loc 1 154 5
 729 0102 BB6A     		ldr	r3, [r7, #40]
 730 0104 002B     		cmp	r3, #0
 731 0106 0AD0     		beq	.L32
 155:codec.c       **** 		*buf ++ = (uint8_t)(acc << (8 - acc_len));
 732              		.loc 1 155 33
 733 0108 BB6A     		ldr	r3, [r7, #40]
 734 010a C3F10803 		rsb	r3, r3, #8
 735              		.loc 1 155 27
 736 010e FA6A     		ldr	r2, [r7, #44]
 737 0110 02FA03F1 		lsl	r1, r2, r3
 738              		.loc 1 155 8
 739 0114 3B6B     		ldr	r3, [r7, #48]
 740 0116 5A1C     		adds	r2, r3, #1
 741 0118 3A63     		str	r2, [r7, #48]
 742              		.loc 1 155 13
 743 011a CAB2     		uxtb	r2, r1
 744              		.loc 1 155 11
 745 011c 1A70     		strb	r2, [r3]
 746              	.L32:
 156:codec.c       **** 	}
 157:codec.c       **** 	return out_len;
 747              		.loc 1 157 9
 748 011e BB69     		ldr	r3, [r7, #24]
 749              	.L24:
 158:codec.c       **** }
 750              		.loc 1 158 1
 751 0120 1846     		mov	r0, r3
 752 0122 3C37     		adds	r7, r7, #60
 753              	.LCFI15:
 754              		.cfi_def_cfa_offset 4
 755 0124 BD46     		mov	sp, r7
 756              	.LCFI16:
 757              		.cfi_def_cfa_register 13
 758              		@ sp needed
 759 0126 80BC     		pop	{r7}
 760              	.LCFI17:
 761              		.cfi_restore 7
 762              		.cfi_def_cfa_offset 0
 763 0128 7047     		bx	lr
 764              		.cfi_endproc
 765              	.LFE20:
 767              		.section	.text.falcon_inner_trim_i16_decode,"ax",%progbits
 768              		.align	1
 769              		.global	falcon_inner_trim_i16_decode
 770              		.syntax unified
 771              		.thumb
 772              		.thumb_func
 773              		.fpu softvfp
 775              	falcon_inner_trim_i16_decode:
 776              	.LFB21:
 159:codec.c       **** 
 160:codec.c       **** /* see inner.h */
 161:codec.c       **** size_t
 162:codec.c       **** Zf(trim_i16_decode)(
 163:codec.c       **** 	int16_t *x, unsigned logn, unsigned bits,
 164:codec.c       **** 	const void *in, size_t max_in_len)
 165:codec.c       **** {
 777              		.loc 1 165 1
 778              		.cfi_startproc
 779              		@ args = 4, pretend = 0, frame = 56
 780              		@ frame_needed = 1, uses_anonymous_args = 0
 781              		@ link register save eliminated.
 782 0000 80B4     		push	{r7}
 783              	.LCFI18:
 784              		.cfi_def_cfa_offset 4
 785              		.cfi_offset 7, -4
 786 0002 8FB0     		sub	sp, sp, #60
 787              	.LCFI19:
 788              		.cfi_def_cfa_offset 64
 789 0004 00AF     		add	r7, sp, #0
 790              	.LCFI20:
 791              		.cfi_def_cfa_register 7
 792 0006 F860     		str	r0, [r7, #12]
 793 0008 B960     		str	r1, [r7, #8]
 794 000a 7A60     		str	r2, [r7, #4]
 795 000c 3B60     		str	r3, [r7]
 166:codec.c       **** 	size_t n, in_len;
 167:codec.c       **** 	const uint8_t *buf;
 168:codec.c       **** 	size_t u;
 169:codec.c       **** 	uint32_t acc, mask1, mask2;
 170:codec.c       **** 	unsigned acc_len;
 171:codec.c       **** 
 172:codec.c       **** 	n = (size_t)1 << logn;
 796              		.loc 1 172 4
 797 000e 0122     		movs	r2, #1
 798 0010 BB68     		ldr	r3, [r7, #8]
 799 0012 02FA03F3 		lsl	r3, r2, r3
 800 0016 7B62     		str	r3, [r7, #36]
 173:codec.c       **** 	in_len = ((n * bits) + 7) >> 3;
 801              		.loc 1 173 15
 802 0018 7B6A     		ldr	r3, [r7, #36]
 803 001a 7A68     		ldr	r2, [r7, #4]
 804 001c 02FB03F3 		mul	r3, r2, r3
 805              		.loc 1 173 23
 806 0020 0733     		adds	r3, r3, #7
 807              		.loc 1 173 9
 808 0022 DB08     		lsrs	r3, r3, #3
 809 0024 3B62     		str	r3, [r7, #32]
 174:codec.c       **** 	if (in_len > max_in_len) {
 810              		.loc 1 174 5
 811 0026 3A6A     		ldr	r2, [r7, #32]
 812 0028 3B6C     		ldr	r3, [r7, #64]
 813 002a 9A42     		cmp	r2, r3
 814 002c 01D9     		bls	.L34
 175:codec.c       **** 		return 0;
 815              		.loc 1 175 10
 816 002e 0023     		movs	r3, #0
 817 0030 63E0     		b	.L35
 818              	.L34:
 176:codec.c       **** 	}
 177:codec.c       **** 	buf = in;
 819              		.loc 1 177 6
 820 0032 3B68     		ldr	r3, [r7]
 821 0034 7B63     		str	r3, [r7, #52]
 178:codec.c       **** 	u = 0;
 822              		.loc 1 178 4
 823 0036 0023     		movs	r3, #0
 824 0038 3B63     		str	r3, [r7, #48]
 179:codec.c       **** 	acc = 0;
 825              		.loc 1 179 6
 826 003a 0023     		movs	r3, #0
 827 003c FB62     		str	r3, [r7, #44]
 180:codec.c       **** 	acc_len = 0;
 828              		.loc 1 180 10
 829 003e 0023     		movs	r3, #0
 830 0040 BB62     		str	r3, [r7, #40]
 181:codec.c       **** 	mask1 = ((uint32_t)1 << bits) - 1;
 831              		.loc 1 181 23
 832 0042 0122     		movs	r2, #1
 833 0044 7B68     		ldr	r3, [r7, #4]
 834 0046 02FA03F3 		lsl	r3, r2, r3
 835              		.loc 1 181 8
 836 004a 013B     		subs	r3, r3, #1
 837 004c FB61     		str	r3, [r7, #28]
 182:codec.c       **** 	mask2 = (uint32_t)1 << (bits - 1);
 838              		.loc 1 182 31
 839 004e 7B68     		ldr	r3, [r7, #4]
 840 0050 013B     		subs	r3, r3, #1
 841              		.loc 1 182 8
 842 0052 0122     		movs	r2, #1
 843 0054 02FA03F3 		lsl	r3, r2, r3
 844 0058 BB61     		str	r3, [r7, #24]
 183:codec.c       **** 	while (u < n) {
 845              		.loc 1 183 8
 846 005a 3DE0     		b	.L36
 847              	.L40:
 184:codec.c       **** 		acc = (acc << 8) | *buf ++;
 848              		.loc 1 184 14
 849 005c FB6A     		ldr	r3, [r7, #44]
 850 005e 1A02     		lsls	r2, r3, #8
 851              		.loc 1 184 27
 852 0060 7B6B     		ldr	r3, [r7, #52]
 853 0062 591C     		adds	r1, r3, #1
 854 0064 7963     		str	r1, [r7, #52]
 855              		.loc 1 184 22
 856 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 857              		.loc 1 184 7
 858 0068 1343     		orrs	r3, r3, r2
 859 006a FB62     		str	r3, [r7, #44]
 185:codec.c       **** 		acc_len += 8;
 860              		.loc 1 185 11
 861 006c BB6A     		ldr	r3, [r7, #40]
 862 006e 0833     		adds	r3, r3, #8
 863 0070 BB62     		str	r3, [r7, #40]
 186:codec.c       **** 		while (acc_len >= bits && u < n) {
 864              		.loc 1 186 9
 865 0072 29E0     		b	.L37
 866              	.L39:
 867              	.LBB3:
 187:codec.c       **** 			uint32_t w;
 188:codec.c       **** 
 189:codec.c       **** 			acc_len -= bits;
 868              		.loc 1 189 12
 869 0074 BA6A     		ldr	r2, [r7, #40]
 870 0076 7B68     		ldr	r3, [r7, #4]
 871 0078 D31A     		subs	r3, r2, r3
 872 007a BB62     		str	r3, [r7, #40]
 190:codec.c       **** 			w = (acc >> acc_len) & mask1;
 873              		.loc 1 190 13
 874 007c FA6A     		ldr	r2, [r7, #44]
 875 007e BB6A     		ldr	r3, [r7, #40]
 876 0080 DA40     		lsrs	r2, r2, r3
 877              		.loc 1 190 25
 878 0082 FB69     		ldr	r3, [r7, #28]
 879 0084 1340     		ands	r3, r3, r2
 880              		.loc 1 190 6
 881 0086 7B61     		str	r3, [r7, #20]
 191:codec.c       **** 			w |= -(w & mask2);
 882              		.loc 1 191 13
 883 0088 7A69     		ldr	r2, [r7, #20]
 884 008a BB69     		ldr	r3, [r7, #24]
 885 008c 1340     		ands	r3, r3, r2
 886              		.loc 1 191 9
 887 008e 5A42     		rsbs	r2, r3, #0
 888              		.loc 1 191 6
 889 0090 7B69     		ldr	r3, [r7, #20]
 890 0092 1343     		orrs	r3, r3, r2
 891 0094 7B61     		str	r3, [r7, #20]
 192:codec.c       **** 			if (w == -mask2) {
 892              		.loc 1 192 13
 893 0096 BB69     		ldr	r3, [r7, #24]
 894 0098 5A42     		rsbs	r2, r3, #0
 895              		.loc 1 192 10
 896 009a 7B69     		ldr	r3, [r7, #20]
 897              		.loc 1 192 7
 898 009c 9A42     		cmp	r2, r3
 899 009e 01D1     		bne	.L38
 193:codec.c       **** 				/*
 194:codec.c       **** 				 * The -2^(bits-1) value is forbidden.
 195:codec.c       **** 				 */
 196:codec.c       **** 				return 0;
 900              		.loc 1 196 12
 901 00a0 0023     		movs	r3, #0
 902 00a2 2AE0     		b	.L35
 903              	.L38:
 197:codec.c       **** 			}
 198:codec.c       **** 			w |= -(w & mask2);
 904              		.loc 1 198 13
 905 00a4 7A69     		ldr	r2, [r7, #20]
 906 00a6 BB69     		ldr	r3, [r7, #24]
 907 00a8 1340     		ands	r3, r3, r2
 908              		.loc 1 198 9
 909 00aa 5A42     		rsbs	r2, r3, #0
 910              		.loc 1 198 6
 911 00ac 7B69     		ldr	r3, [r7, #20]
 912 00ae 1343     		orrs	r3, r3, r2
 913 00b0 7B61     		str	r3, [r7, #20]
 199:codec.c       **** 			x[u ++] = (int16_t)*(int32_t *)&w;
 914              		.loc 1 199 35
 915 00b2 07F11403 		add	r3, r7, #20
 916              		.loc 1 199 23
 917 00b6 1968     		ldr	r1, [r3]
 918              		.loc 1 199 8
 919 00b8 3B6B     		ldr	r3, [r7, #48]
 920 00ba 5A1C     		adds	r2, r3, #1
 921 00bc 3A63     		str	r2, [r7, #48]
 922              		.loc 1 199 5
 923 00be 5B00     		lsls	r3, r3, #1
 924 00c0 FA68     		ldr	r2, [r7, #12]
 925 00c2 1344     		add	r3, r3, r2
 926              		.loc 1 199 14
 927 00c4 0AB2     		sxth	r2, r1
 928              		.loc 1 199 12
 929 00c6 1A80     		strh	r2, [r3]	@ movhi
 930              	.L37:
 931              	.LBE3:
 186:codec.c       **** 			uint32_t w;
 932              		.loc 1 186 9
 933 00c8 BA6A     		ldr	r2, [r7, #40]
 934 00ca 7B68     		ldr	r3, [r7, #4]
 935 00cc 9A42     		cmp	r2, r3
 936 00ce 03D3     		bcc	.L36
 186:codec.c       **** 			uint32_t w;
 937              		.loc 1 186 26 discriminator 1
 938 00d0 3A6B     		ldr	r2, [r7, #48]
 939 00d2 7B6A     		ldr	r3, [r7, #36]
 940 00d4 9A42     		cmp	r2, r3
 941 00d6 CDD3     		bcc	.L39
 942              	.L36:
 183:codec.c       **** 		acc = (acc << 8) | *buf ++;
 943              		.loc 1 183 8
 944 00d8 3A6B     		ldr	r2, [r7, #48]
 945 00da 7B6A     		ldr	r3, [r7, #36]
 946 00dc 9A42     		cmp	r2, r3
 947 00de BDD3     		bcc	.L40
 200:codec.c       **** 		}
 201:codec.c       **** 	}
 202:codec.c       **** 	if ((acc & (((uint32_t)1 << acc_len) - 1)) != 0) {
 948              		.loc 1 202 11
 949 00e0 4FF0FF32 		mov	r2, #-1
 950 00e4 BB6A     		ldr	r3, [r7, #40]
 951 00e6 02FA03F3 		lsl	r3, r2, r3
 952 00ea DA43     		mvns	r2, r3
 953 00ec FB6A     		ldr	r3, [r7, #44]
 954 00ee 1340     		ands	r3, r3, r2
 955              		.loc 1 202 5
 956 00f0 002B     		cmp	r3, #0
 957 00f2 01D0     		beq	.L41
 203:codec.c       **** 		/*
 204:codec.c       **** 		 * Extra bits in the last byte must be zero.
 205:codec.c       **** 		 */
 206:codec.c       **** 		return 0;
 958              		.loc 1 206 10
 959 00f4 0023     		movs	r3, #0
 960 00f6 00E0     		b	.L35
 961              	.L41:
 207:codec.c       **** 	}
 208:codec.c       **** 	return in_len;
 962              		.loc 1 208 9
 963 00f8 3B6A     		ldr	r3, [r7, #32]
 964              	.L35:
 209:codec.c       **** }
 965              		.loc 1 209 1
 966 00fa 1846     		mov	r0, r3
 967 00fc 3C37     		adds	r7, r7, #60
 968              	.LCFI21:
 969              		.cfi_def_cfa_offset 4
 970 00fe BD46     		mov	sp, r7
 971              	.LCFI22:
 972              		.cfi_def_cfa_register 13
 973              		@ sp needed
 974 0100 80BC     		pop	{r7}
 975              	.LCFI23:
 976              		.cfi_restore 7
 977              		.cfi_def_cfa_offset 0
 978 0102 7047     		bx	lr
 979              		.cfi_endproc
 980              	.LFE21:
 982              		.section	.text.falcon_inner_trim_i8_encode,"ax",%progbits
 983              		.align	1
 984              		.global	falcon_inner_trim_i8_encode
 985              		.syntax unified
 986              		.thumb
 987              		.thumb_func
 988              		.fpu softvfp
 990              	falcon_inner_trim_i8_encode:
 991              	.LFB22:
 210:codec.c       **** 
 211:codec.c       **** /* see inner.h */
 212:codec.c       **** size_t
 213:codec.c       **** Zf(trim_i8_encode)(
 214:codec.c       **** 	void *out, size_t max_out_len,
 215:codec.c       **** 	const int8_t *x, unsigned logn, unsigned bits)
 216:codec.c       **** {
 992              		.loc 1 216 1
 993              		.cfi_startproc
 994              		@ args = 4, pretend = 0, frame = 56
 995              		@ frame_needed = 1, uses_anonymous_args = 0
 996              		@ link register save eliminated.
 997 0000 80B4     		push	{r7}
 998              	.LCFI24:
 999              		.cfi_def_cfa_offset 4
 1000              		.cfi_offset 7, -4
 1001 0002 8FB0     		sub	sp, sp, #60
 1002              	.LCFI25:
 1003              		.cfi_def_cfa_offset 64
 1004 0004 00AF     		add	r7, sp, #0
 1005              	.LCFI26:
 1006              		.cfi_def_cfa_register 7
 1007 0006 F860     		str	r0, [r7, #12]
 1008 0008 B960     		str	r1, [r7, #8]
 1009 000a 7A60     		str	r2, [r7, #4]
 1010 000c 3B60     		str	r3, [r7]
 217:codec.c       **** 	size_t n, u, out_len;
 218:codec.c       **** 	int minv, maxv;
 219:codec.c       **** 	uint8_t *buf;
 220:codec.c       **** 	uint32_t acc, mask;
 221:codec.c       **** 	unsigned acc_len;
 222:codec.c       **** 
 223:codec.c       **** 	n = (size_t)1 << logn;
 1011              		.loc 1 223 4
 1012 000e 0122     		movs	r2, #1
 1013 0010 3B68     		ldr	r3, [r7]
 1014 0012 02FA03F3 		lsl	r3, r2, r3
 1015 0016 7B62     		str	r3, [r7, #36]
 224:codec.c       **** 	maxv = (1 << (bits - 1)) - 1;
 1016              		.loc 1 224 21
 1017 0018 3B6C     		ldr	r3, [r7, #64]
 1018 001a 013B     		subs	r3, r3, #1
 1019              		.loc 1 224 12
 1020 001c 0122     		movs	r2, #1
 1021 001e 02FA03F3 		lsl	r3, r2, r3
 1022              		.loc 1 224 7
 1023 0022 013B     		subs	r3, r3, #1
 1024 0024 3B62     		str	r3, [r7, #32]
 225:codec.c       **** 	minv = -maxv;
 1025              		.loc 1 225 7
 1026 0026 3B6A     		ldr	r3, [r7, #32]
 1027 0028 5B42     		rsbs	r3, r3, #0
 1028 002a FB61     		str	r3, [r7, #28]
 226:codec.c       **** 	for (u = 0; u < n; u ++) {
 1029              		.loc 1 226 9
 1030 002c 0023     		movs	r3, #0
 1031 002e 7B63     		str	r3, [r7, #52]
 1032              		.loc 1 226 2
 1033 0030 16E0     		b	.L43
 1034              	.L47:
 227:codec.c       **** 		if (x[u] < minv || x[u] > maxv) {
 1035              		.loc 1 227 8
 1036 0032 7A68     		ldr	r2, [r7, #4]
 1037 0034 7B6B     		ldr	r3, [r7, #52]
 1038 0036 1344     		add	r3, r3, r2
 1039 0038 93F90030 		ldrsb	r3, [r3]
 1040 003c 1A46     		mov	r2, r3
 1041              		.loc 1 227 6
 1042 003e FB69     		ldr	r3, [r7, #28]
 1043 0040 9342     		cmp	r3, r2
 1044 0042 08DC     		bgt	.L44
 1045              		.loc 1 227 23 discriminator 1
 1046 0044 7A68     		ldr	r2, [r7, #4]
 1047 0046 7B6B     		ldr	r3, [r7, #52]
 1048 0048 1344     		add	r3, r3, r2
 1049 004a 93F90030 		ldrsb	r3, [r3]
 1050 004e 1A46     		mov	r2, r3
 1051              		.loc 1 227 19 discriminator 1
 1052 0050 3B6A     		ldr	r3, [r7, #32]
 1053 0052 9342     		cmp	r3, r2
 1054 0054 01DA     		bge	.L45
 1055              	.L44:
 228:codec.c       **** 			return 0;
 1056              		.loc 1 228 11
 1057 0056 0023     		movs	r3, #0
 1058 0058 5FE0     		b	.L46
 1059              	.L45:
 226:codec.c       **** 	for (u = 0; u < n; u ++) {
 1060              		.loc 1 226 23 discriminator 2
 1061 005a 7B6B     		ldr	r3, [r7, #52]
 1062 005c 0133     		adds	r3, r3, #1
 1063 005e 7B63     		str	r3, [r7, #52]
 1064              	.L43:
 226:codec.c       **** 	for (u = 0; u < n; u ++) {
 1065              		.loc 1 226 2 discriminator 1
 1066 0060 7A6B     		ldr	r2, [r7, #52]
 1067 0062 7B6A     		ldr	r3, [r7, #36]
 1068 0064 9A42     		cmp	r2, r3
 1069 0066 E4D3     		bcc	.L47
 229:codec.c       **** 		}
 230:codec.c       **** 	}
 231:codec.c       **** 	out_len = ((n * bits) + 7) >> 3;
 1070              		.loc 1 231 16
 1071 0068 7B6A     		ldr	r3, [r7, #36]
 1072 006a 3A6C     		ldr	r2, [r7, #64]
 1073 006c 02FB03F3 		mul	r3, r2, r3
 1074              		.loc 1 231 24
 1075 0070 0733     		adds	r3, r3, #7
 1076              		.loc 1 231 10
 1077 0072 DB08     		lsrs	r3, r3, #3
 1078 0074 BB61     		str	r3, [r7, #24]
 232:codec.c       **** 	if (out == NULL) {
 1079              		.loc 1 232 5
 1080 0076 FB68     		ldr	r3, [r7, #12]
 1081 0078 002B     		cmp	r3, #0
 1082 007a 01D1     		bne	.L48
 233:codec.c       **** 		return out_len;
 1083              		.loc 1 233 10
 1084 007c BB69     		ldr	r3, [r7, #24]
 1085 007e 4CE0     		b	.L46
 1086              	.L48:
 234:codec.c       **** 	}
 235:codec.c       **** 	if (out_len > max_out_len) {
 1087              		.loc 1 235 5
 1088 0080 BA69     		ldr	r2, [r7, #24]
 1089 0082 BB68     		ldr	r3, [r7, #8]
 1090 0084 9A42     		cmp	r2, r3
 1091 0086 01D9     		bls	.L49
 236:codec.c       **** 		return 0;
 1092              		.loc 1 236 10
 1093 0088 0023     		movs	r3, #0
 1094 008a 46E0     		b	.L46
 1095              	.L49:
 237:codec.c       **** 	}
 238:codec.c       **** 	buf = out;
 1096              		.loc 1 238 6
 1097 008c FB68     		ldr	r3, [r7, #12]
 1098 008e 3B63     		str	r3, [r7, #48]
 239:codec.c       **** 	acc = 0;
 1099              		.loc 1 239 6
 1100 0090 0023     		movs	r3, #0
 1101 0092 FB62     		str	r3, [r7, #44]
 240:codec.c       **** 	acc_len = 0;
 1102              		.loc 1 240 10
 1103 0094 0023     		movs	r3, #0
 1104 0096 BB62     		str	r3, [r7, #40]
 241:codec.c       **** 	mask = ((uint32_t)1 << bits) - 1;
 1105              		.loc 1 241 22
 1106 0098 0122     		movs	r2, #1
 1107 009a 3B6C     		ldr	r3, [r7, #64]
 1108 009c 02FA03F3 		lsl	r3, r2, r3
 1109              		.loc 1 241 7
 1110 00a0 013B     		subs	r3, r3, #1
 1111 00a2 7B61     		str	r3, [r7, #20]
 242:codec.c       **** 	for (u = 0; u < n; u ++) {
 1112              		.loc 1 242 9
 1113 00a4 0023     		movs	r3, #0
 1114 00a6 7B63     		str	r3, [r7, #52]
 1115              		.loc 1 242 2
 1116 00a8 24E0     		b	.L50
 1117              	.L53:
 243:codec.c       **** 		acc = (acc << bits) | ((uint8_t)x[u] & mask);
 1118              		.loc 1 243 14
 1119 00aa FA6A     		ldr	r2, [r7, #44]
 1120 00ac 3B6C     		ldr	r3, [r7, #64]
 1121 00ae 9A40     		lsls	r2, r2, r3
 1122              		.loc 1 243 36
 1123 00b0 7968     		ldr	r1, [r7, #4]
 1124 00b2 7B6B     		ldr	r3, [r7, #52]
 1125 00b4 0B44     		add	r3, r3, r1
 1126 00b6 93F90030 		ldrsb	r3, [r3]
 1127              		.loc 1 243 26
 1128 00ba DBB2     		uxtb	r3, r3
 1129 00bc 1946     		mov	r1, r3
 1130              		.loc 1 243 40
 1131 00be 7B69     		ldr	r3, [r7, #20]
 1132 00c0 0B40     		ands	r3, r3, r1
 1133              		.loc 1 243 7
 1134 00c2 1343     		orrs	r3, r3, r2
 1135 00c4 FB62     		str	r3, [r7, #44]
 244:codec.c       **** 		acc_len += bits;
 1136              		.loc 1 244 11
 1137 00c6 BA6A     		ldr	r2, [r7, #40]
 1138 00c8 3B6C     		ldr	r3, [r7, #64]
 1139 00ca 1344     		add	r3, r3, r2
 1140 00cc BB62     		str	r3, [r7, #40]
 245:codec.c       **** 		while (acc_len >= 8) {
 1141              		.loc 1 245 9
 1142 00ce 0BE0     		b	.L51
 1143              	.L52:
 246:codec.c       **** 			acc_len -= 8;
 1144              		.loc 1 246 12
 1145 00d0 BB6A     		ldr	r3, [r7, #40]
 1146 00d2 083B     		subs	r3, r3, #8
 1147 00d4 BB62     		str	r3, [r7, #40]
 247:codec.c       **** 			*buf ++ = (uint8_t)(acc >> acc_len);
 1148              		.loc 1 247 28
 1149 00d6 FA6A     		ldr	r2, [r7, #44]
 1150 00d8 BB6A     		ldr	r3, [r7, #40]
 1151 00da 22FA03F1 		lsr	r1, r2, r3
 1152              		.loc 1 247 9
 1153 00de 3B6B     		ldr	r3, [r7, #48]
 1154 00e0 5A1C     		adds	r2, r3, #1
 1155 00e2 3A63     		str	r2, [r7, #48]
 1156              		.loc 1 247 14
 1157 00e4 CAB2     		uxtb	r2, r1
 1158              		.loc 1 247 12
 1159 00e6 1A70     		strb	r2, [r3]
 1160              	.L51:
 245:codec.c       **** 		while (acc_len >= 8) {
 1161              		.loc 1 245 9
 1162 00e8 BB6A     		ldr	r3, [r7, #40]
 1163 00ea 072B     		cmp	r3, #7
 1164 00ec F0D8     		bhi	.L52
 242:codec.c       **** 		acc = (acc << bits) | ((uint8_t)x[u] & mask);
 1165              		.loc 1 242 23 discriminator 2
 1166 00ee 7B6B     		ldr	r3, [r7, #52]
 1167 00f0 0133     		adds	r3, r3, #1
 1168 00f2 7B63     		str	r3, [r7, #52]
 1169              	.L50:
 242:codec.c       **** 		acc = (acc << bits) | ((uint8_t)x[u] & mask);
 1170              		.loc 1 242 2 discriminator 1
 1171 00f4 7A6B     		ldr	r2, [r7, #52]
 1172 00f6 7B6A     		ldr	r3, [r7, #36]
 1173 00f8 9A42     		cmp	r2, r3
 1174 00fa D6D3     		bcc	.L53
 248:codec.c       **** 		}
 249:codec.c       **** 	}
 250:codec.c       **** 	if (acc_len > 0) {
 1175              		.loc 1 250 5
 1176 00fc BB6A     		ldr	r3, [r7, #40]
 1177 00fe 002B     		cmp	r3, #0
 1178 0100 0AD0     		beq	.L54
 251:codec.c       **** 		*buf ++ = (uint8_t)(acc << (8 - acc_len));
 1179              		.loc 1 251 33
 1180 0102 BB6A     		ldr	r3, [r7, #40]
 1181 0104 C3F10803 		rsb	r3, r3, #8
 1182              		.loc 1 251 27
 1183 0108 FA6A     		ldr	r2, [r7, #44]
 1184 010a 02FA03F1 		lsl	r1, r2, r3
 1185              		.loc 1 251 8
 1186 010e 3B6B     		ldr	r3, [r7, #48]
 1187 0110 5A1C     		adds	r2, r3, #1
 1188 0112 3A63     		str	r2, [r7, #48]
 1189              		.loc 1 251 13
 1190 0114 CAB2     		uxtb	r2, r1
 1191              		.loc 1 251 11
 1192 0116 1A70     		strb	r2, [r3]
 1193              	.L54:
 252:codec.c       **** 	}
 253:codec.c       **** 	return out_len;
 1194              		.loc 1 253 9
 1195 0118 BB69     		ldr	r3, [r7, #24]
 1196              	.L46:
 254:codec.c       **** }
 1197              		.loc 1 254 1
 1198 011a 1846     		mov	r0, r3
 1199 011c 3C37     		adds	r7, r7, #60
 1200              	.LCFI27:
 1201              		.cfi_def_cfa_offset 4
 1202 011e BD46     		mov	sp, r7
 1203              	.LCFI28:
 1204              		.cfi_def_cfa_register 13
 1205              		@ sp needed
 1206 0120 80BC     		pop	{r7}
 1207              	.LCFI29:
 1208              		.cfi_restore 7
 1209              		.cfi_def_cfa_offset 0
 1210 0122 7047     		bx	lr
 1211              		.cfi_endproc
 1212              	.LFE22:
 1214              		.section	.text.falcon_inner_trim_i8_decode,"ax",%progbits
 1215              		.align	1
 1216              		.global	falcon_inner_trim_i8_decode
 1217              		.syntax unified
 1218              		.thumb
 1219              		.thumb_func
 1220              		.fpu softvfp
 1222              	falcon_inner_trim_i8_decode:
 1223              	.LFB23:
 255:codec.c       **** 
 256:codec.c       **** /* see inner.h */
 257:codec.c       **** size_t
 258:codec.c       **** Zf(trim_i8_decode)(
 259:codec.c       **** 	int8_t *x, unsigned logn, unsigned bits,
 260:codec.c       **** 	const void *in, size_t max_in_len)
 261:codec.c       **** {
 1224              		.loc 1 261 1
 1225              		.cfi_startproc
 1226              		@ args = 4, pretend = 0, frame = 56
 1227              		@ frame_needed = 1, uses_anonymous_args = 0
 1228              		@ link register save eliminated.
 1229 0000 80B4     		push	{r7}
 1230              	.LCFI30:
 1231              		.cfi_def_cfa_offset 4
 1232              		.cfi_offset 7, -4
 1233 0002 8FB0     		sub	sp, sp, #60
 1234              	.LCFI31:
 1235              		.cfi_def_cfa_offset 64
 1236 0004 00AF     		add	r7, sp, #0
 1237              	.LCFI32:
 1238              		.cfi_def_cfa_register 7
 1239 0006 F860     		str	r0, [r7, #12]
 1240 0008 B960     		str	r1, [r7, #8]
 1241 000a 7A60     		str	r2, [r7, #4]
 1242 000c 3B60     		str	r3, [r7]
 262:codec.c       **** 	size_t n, in_len;
 263:codec.c       **** 	const uint8_t *buf;
 264:codec.c       **** 	size_t u;
 265:codec.c       **** 	uint32_t acc, mask1, mask2;
 266:codec.c       **** 	unsigned acc_len;
 267:codec.c       **** 
 268:codec.c       **** 	n = (size_t)1 << logn;
 1243              		.loc 1 268 4
 1244 000e 0122     		movs	r2, #1
 1245 0010 BB68     		ldr	r3, [r7, #8]
 1246 0012 02FA03F3 		lsl	r3, r2, r3
 1247 0016 7B62     		str	r3, [r7, #36]
 269:codec.c       **** 	in_len = ((n * bits) + 7) >> 3;
 1248              		.loc 1 269 15
 1249 0018 7B6A     		ldr	r3, [r7, #36]
 1250 001a 7A68     		ldr	r2, [r7, #4]
 1251 001c 02FB03F3 		mul	r3, r2, r3
 1252              		.loc 1 269 23
 1253 0020 0733     		adds	r3, r3, #7
 1254              		.loc 1 269 9
 1255 0022 DB08     		lsrs	r3, r3, #3
 1256 0024 3B62     		str	r3, [r7, #32]
 270:codec.c       **** 	if (in_len > max_in_len) {
 1257              		.loc 1 270 5
 1258 0026 3A6A     		ldr	r2, [r7, #32]
 1259 0028 3B6C     		ldr	r3, [r7, #64]
 1260 002a 9A42     		cmp	r2, r3
 1261 002c 01D9     		bls	.L56
 271:codec.c       **** 		return 0;
 1262              		.loc 1 271 10
 1263 002e 0023     		movs	r3, #0
 1264 0030 5BE0     		b	.L57
 1265              	.L56:
 272:codec.c       **** 	}
 273:codec.c       **** 	buf = in;
 1266              		.loc 1 273 6
 1267 0032 3B68     		ldr	r3, [r7]
 1268 0034 7B63     		str	r3, [r7, #52]
 274:codec.c       **** 	u = 0;
 1269              		.loc 1 274 4
 1270 0036 0023     		movs	r3, #0
 1271 0038 3B63     		str	r3, [r7, #48]
 275:codec.c       **** 	acc = 0;
 1272              		.loc 1 275 6
 1273 003a 0023     		movs	r3, #0
 1274 003c FB62     		str	r3, [r7, #44]
 276:codec.c       **** 	acc_len = 0;
 1275              		.loc 1 276 10
 1276 003e 0023     		movs	r3, #0
 1277 0040 BB62     		str	r3, [r7, #40]
 277:codec.c       **** 	mask1 = ((uint32_t)1 << bits) - 1;
 1278              		.loc 1 277 23
 1279 0042 0122     		movs	r2, #1
 1280 0044 7B68     		ldr	r3, [r7, #4]
 1281 0046 02FA03F3 		lsl	r3, r2, r3
 1282              		.loc 1 277 8
 1283 004a 013B     		subs	r3, r3, #1
 1284 004c FB61     		str	r3, [r7, #28]
 278:codec.c       **** 	mask2 = (uint32_t)1 << (bits - 1);
 1285              		.loc 1 278 31
 1286 004e 7B68     		ldr	r3, [r7, #4]
 1287 0050 013B     		subs	r3, r3, #1
 1288              		.loc 1 278 8
 1289 0052 0122     		movs	r2, #1
 1290 0054 02FA03F3 		lsl	r3, r2, r3
 1291 0058 BB61     		str	r3, [r7, #24]
 279:codec.c       **** 	while (u < n) {
 1292              		.loc 1 279 8
 1293 005a 35E0     		b	.L58
 1294              	.L62:
 280:codec.c       **** 		acc = (acc << 8) | *buf ++;
 1295              		.loc 1 280 14
 1296 005c FB6A     		ldr	r3, [r7, #44]
 1297 005e 1A02     		lsls	r2, r3, #8
 1298              		.loc 1 280 27
 1299 0060 7B6B     		ldr	r3, [r7, #52]
 1300 0062 591C     		adds	r1, r3, #1
 1301 0064 7963     		str	r1, [r7, #52]
 1302              		.loc 1 280 22
 1303 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1304              		.loc 1 280 7
 1305 0068 1343     		orrs	r3, r3, r2
 1306 006a FB62     		str	r3, [r7, #44]
 281:codec.c       **** 		acc_len += 8;
 1307              		.loc 1 281 11
 1308 006c BB6A     		ldr	r3, [r7, #40]
 1309 006e 0833     		adds	r3, r3, #8
 1310 0070 BB62     		str	r3, [r7, #40]
 282:codec.c       **** 		while (acc_len >= bits && u < n) {
 1311              		.loc 1 282 9
 1312 0072 21E0     		b	.L59
 1313              	.L61:
 1314              	.LBB4:
 283:codec.c       **** 			uint32_t w;
 284:codec.c       **** 
 285:codec.c       **** 			acc_len -= bits;
 1315              		.loc 1 285 12
 1316 0074 BA6A     		ldr	r2, [r7, #40]
 1317 0076 7B68     		ldr	r3, [r7, #4]
 1318 0078 D31A     		subs	r3, r2, r3
 1319 007a BB62     		str	r3, [r7, #40]
 286:codec.c       **** 			w = (acc >> acc_len) & mask1;
 1320              		.loc 1 286 13
 1321 007c FA6A     		ldr	r2, [r7, #44]
 1322 007e BB6A     		ldr	r3, [r7, #40]
 1323 0080 DA40     		lsrs	r2, r2, r3
 1324              		.loc 1 286 25
 1325 0082 FB69     		ldr	r3, [r7, #28]
 1326 0084 1340     		ands	r3, r3, r2
 1327              		.loc 1 286 6
 1328 0086 7B61     		str	r3, [r7, #20]
 287:codec.c       **** 			w |= -(w & mask2);
 1329              		.loc 1 287 13
 1330 0088 7A69     		ldr	r2, [r7, #20]
 1331 008a BB69     		ldr	r3, [r7, #24]
 1332 008c 1340     		ands	r3, r3, r2
 1333              		.loc 1 287 9
 1334 008e 5A42     		rsbs	r2, r3, #0
 1335              		.loc 1 287 6
 1336 0090 7B69     		ldr	r3, [r7, #20]
 1337 0092 1343     		orrs	r3, r3, r2
 1338 0094 7B61     		str	r3, [r7, #20]
 288:codec.c       **** 			if (w == -mask2) {
 1339              		.loc 1 288 13
 1340 0096 BB69     		ldr	r3, [r7, #24]
 1341 0098 5A42     		rsbs	r2, r3, #0
 1342              		.loc 1 288 10
 1343 009a 7B69     		ldr	r3, [r7, #20]
 1344              		.loc 1 288 7
 1345 009c 9A42     		cmp	r2, r3
 1346 009e 01D1     		bne	.L60
 289:codec.c       **** 				/*
 290:codec.c       **** 				 * The -2^(bits-1) value is forbidden.
 291:codec.c       **** 				 */
 292:codec.c       **** 				return 0;
 1347              		.loc 1 292 12
 1348 00a0 0023     		movs	r3, #0
 1349 00a2 22E0     		b	.L57
 1350              	.L60:
 293:codec.c       **** 			}
 294:codec.c       **** 			x[u ++] = (int8_t)*(int32_t *)&w;
 1351              		.loc 1 294 34
 1352 00a4 07F11403 		add	r3, r7, #20
 1353              		.loc 1 294 22
 1354 00a8 1968     		ldr	r1, [r3]
 1355              		.loc 1 294 8
 1356 00aa 3B6B     		ldr	r3, [r7, #48]
 1357 00ac 5A1C     		adds	r2, r3, #1
 1358 00ae 3A63     		str	r2, [r7, #48]
 1359              		.loc 1 294 5
 1360 00b0 FA68     		ldr	r2, [r7, #12]
 1361 00b2 1344     		add	r3, r3, r2
 1362              		.loc 1 294 14
 1363 00b4 4AB2     		sxtb	r2, r1
 1364              		.loc 1 294 12
 1365 00b6 1A70     		strb	r2, [r3]
 1366              	.L59:
 1367              	.LBE4:
 282:codec.c       **** 			uint32_t w;
 1368              		.loc 1 282 9
 1369 00b8 BA6A     		ldr	r2, [r7, #40]
 1370 00ba 7B68     		ldr	r3, [r7, #4]
 1371 00bc 9A42     		cmp	r2, r3
 1372 00be 03D3     		bcc	.L58
 282:codec.c       **** 			uint32_t w;
 1373              		.loc 1 282 26 discriminator 1
 1374 00c0 3A6B     		ldr	r2, [r7, #48]
 1375 00c2 7B6A     		ldr	r3, [r7, #36]
 1376 00c4 9A42     		cmp	r2, r3
 1377 00c6 D5D3     		bcc	.L61
 1378              	.L58:
 279:codec.c       **** 		acc = (acc << 8) | *buf ++;
 1379              		.loc 1 279 8
 1380 00c8 3A6B     		ldr	r2, [r7, #48]
 1381 00ca 7B6A     		ldr	r3, [r7, #36]
 1382 00cc 9A42     		cmp	r2, r3
 1383 00ce C5D3     		bcc	.L62
 295:codec.c       **** 		}
 296:codec.c       **** 	}
 297:codec.c       **** 	if ((acc & (((uint32_t)1 << acc_len) - 1)) != 0) {
 1384              		.loc 1 297 11
 1385 00d0 4FF0FF32 		mov	r2, #-1
 1386 00d4 BB6A     		ldr	r3, [r7, #40]
 1387 00d6 02FA03F3 		lsl	r3, r2, r3
 1388 00da DA43     		mvns	r2, r3
 1389 00dc FB6A     		ldr	r3, [r7, #44]
 1390 00de 1340     		ands	r3, r3, r2
 1391              		.loc 1 297 5
 1392 00e0 002B     		cmp	r3, #0
 1393 00e2 01D0     		beq	.L63
 298:codec.c       **** 		/*
 299:codec.c       **** 		 * Extra bits in the last byte must be zero.
 300:codec.c       **** 		 */
 301:codec.c       **** 		return 0;
 1394              		.loc 1 301 10
 1395 00e4 0023     		movs	r3, #0
 1396 00e6 00E0     		b	.L57
 1397              	.L63:
 302:codec.c       **** 	}
 303:codec.c       **** 	return in_len;
 1398              		.loc 1 303 9
 1399 00e8 3B6A     		ldr	r3, [r7, #32]
 1400              	.L57:
 304:codec.c       **** }
 1401              		.loc 1 304 1
 1402 00ea 1846     		mov	r0, r3
 1403 00ec 3C37     		adds	r7, r7, #60
 1404              	.LCFI33:
 1405              		.cfi_def_cfa_offset 4
 1406 00ee BD46     		mov	sp, r7
 1407              	.LCFI34:
 1408              		.cfi_def_cfa_register 13
 1409              		@ sp needed
 1410 00f0 80BC     		pop	{r7}
 1411              	.LCFI35:
 1412              		.cfi_restore 7
 1413              		.cfi_def_cfa_offset 0
 1414 00f2 7047     		bx	lr
 1415              		.cfi_endproc
 1416              	.LFE23:
 1418              		.section	.text.falcon_inner_comp_encode,"ax",%progbits
 1419              		.align	1
 1420              		.global	falcon_inner_comp_encode
 1421              		.syntax unified
 1422              		.thumb
 1423              		.thumb_func
 1424              		.fpu softvfp
 1426              	falcon_inner_comp_encode:
 1427              	.LFB24:
 305:codec.c       **** 
 306:codec.c       **** /* see inner.h */
 307:codec.c       **** size_t
 308:codec.c       **** Zf(comp_encode)(
 309:codec.c       **** 	void *out, size_t max_out_len,
 310:codec.c       **** 	const int16_t *x, unsigned logn)
 311:codec.c       **** {
 1428              		.loc 1 311 1
 1429              		.cfi_startproc
 1430              		@ args = 0, pretend = 0, frame = 48
 1431              		@ frame_needed = 1, uses_anonymous_args = 0
 1432              		@ link register save eliminated.
 1433 0000 80B4     		push	{r7}
 1434              	.LCFI36:
 1435              		.cfi_def_cfa_offset 4
 1436              		.cfi_offset 7, -4
 1437 0002 8DB0     		sub	sp, sp, #52
 1438              	.LCFI37:
 1439              		.cfi_def_cfa_offset 56
 1440 0004 00AF     		add	r7, sp, #0
 1441              	.LCFI38:
 1442              		.cfi_def_cfa_register 7
 1443 0006 F860     		str	r0, [r7, #12]
 1444 0008 B960     		str	r1, [r7, #8]
 1445 000a 7A60     		str	r2, [r7, #4]
 1446 000c 3B60     		str	r3, [r7]
 312:codec.c       **** 	uint8_t *buf;
 313:codec.c       **** 	size_t n, u, v;
 314:codec.c       **** 	uint32_t acc;
 315:codec.c       **** 	unsigned acc_len;
 316:codec.c       **** 
 317:codec.c       **** 	n = (size_t)1 << logn;
 1447              		.loc 1 317 4
 1448 000e 0122     		movs	r2, #1
 1449 0010 3B68     		ldr	r3, [r7]
 1450 0012 02FA03F3 		lsl	r3, r2, r3
 1451 0016 BB61     		str	r3, [r7, #24]
 318:codec.c       **** 	buf = out;
 1452              		.loc 1 318 6
 1453 0018 FB68     		ldr	r3, [r7, #12]
 1454 001a 7B61     		str	r3, [r7, #20]
 319:codec.c       **** 
 320:codec.c       **** 	/*
 321:codec.c       **** 	 * Make sure that all values are within the -2047..+2047 range.
 322:codec.c       **** 	 */
 323:codec.c       **** 	for (u = 0; u < n; u ++) {
 1455              		.loc 1 323 9
 1456 001c 0023     		movs	r3, #0
 1457 001e FB62     		str	r3, [r7, #44]
 1458              		.loc 1 323 2
 1459 0020 16E0     		b	.L65
 1460              	.L69:
 324:codec.c       **** 		if (x[u] < -2047 || x[u] > +2047) {
 1461              		.loc 1 324 8
 1462 0022 FB6A     		ldr	r3, [r7, #44]
 1463 0024 5B00     		lsls	r3, r3, #1
 1464 0026 7A68     		ldr	r2, [r7, #4]
 1465 0028 1344     		add	r3, r3, r2
 1466 002a B3F90030 		ldrsh	r3, [r3]
 1467              		.loc 1 324 6
 1468 002e 13F5006F 		cmn	r3, #2048
 1469 0032 08DD     		ble	.L66
 1470              		.loc 1 324 24 discriminator 1
 1471 0034 FB6A     		ldr	r3, [r7, #44]
 1472 0036 5B00     		lsls	r3, r3, #1
 1473 0038 7A68     		ldr	r2, [r7, #4]
 1474 003a 1344     		add	r3, r3, r2
 1475 003c B3F90030 		ldrsh	r3, [r3]
 1476              		.loc 1 324 20 discriminator 1
 1477 0040 B3F5006F 		cmp	r3, #2048
 1478 0044 01DB     		blt	.L67
 1479              	.L66:
 325:codec.c       **** 			return 0;
 1480              		.loc 1 325 11
 1481 0046 0023     		movs	r3, #0
 1482 0048 81E0     		b	.L68
 1483              	.L67:
 323:codec.c       **** 		if (x[u] < -2047 || x[u] > +2047) {
 1484              		.loc 1 323 23 discriminator 2
 1485 004a FB6A     		ldr	r3, [r7, #44]
 1486 004c 0133     		adds	r3, r3, #1
 1487 004e FB62     		str	r3, [r7, #44]
 1488              	.L65:
 323:codec.c       **** 		if (x[u] < -2047 || x[u] > +2047) {
 1489              		.loc 1 323 2 discriminator 1
 1490 0050 FA6A     		ldr	r2, [r7, #44]
 1491 0052 BB69     		ldr	r3, [r7, #24]
 1492 0054 9A42     		cmp	r2, r3
 1493 0056 E4D3     		bcc	.L69
 326:codec.c       **** 		}
 327:codec.c       **** 	}
 328:codec.c       **** 
 329:codec.c       **** 	acc = 0;
 1494              		.loc 1 329 6
 1495 0058 0023     		movs	r3, #0
 1496 005a 7B62     		str	r3, [r7, #36]
 330:codec.c       **** 	acc_len = 0;
 1497              		.loc 1 330 10
 1498 005c 0023     		movs	r3, #0
 1499 005e 3B62     		str	r3, [r7, #32]
 331:codec.c       **** 	v = 0;
 1500              		.loc 1 331 4
 1501 0060 0023     		movs	r3, #0
 1502 0062 BB62     		str	r3, [r7, #40]
 332:codec.c       **** 	for (u = 0; u < n; u ++) {
 1503              		.loc 1 332 9
 1504 0064 0023     		movs	r3, #0
 1505 0066 FB62     		str	r3, [r7, #44]
 1506              		.loc 1 332 2
 1507 0068 52E0     		b	.L70
 1508              	.L76:
 1509              	.LBB5:
 333:codec.c       **** 		int t;
 334:codec.c       **** 		unsigned w;
 335:codec.c       **** 
 336:codec.c       **** 		/*
 337:codec.c       **** 		 * Get sign and absolute value of next integer; push the
 338:codec.c       **** 		 * sign bit.
 339:codec.c       **** 		 */
 340:codec.c       **** 		acc <<= 1;
 1510              		.loc 1 340 7
 1511 006a 7B6A     		ldr	r3, [r7, #36]
 1512 006c 5B00     		lsls	r3, r3, #1
 1513 006e 7B62     		str	r3, [r7, #36]
 341:codec.c       **** 		t = x[u];
 1514              		.loc 1 341 8
 1515 0070 FB6A     		ldr	r3, [r7, #44]
 1516 0072 5B00     		lsls	r3, r3, #1
 1517 0074 7A68     		ldr	r2, [r7, #4]
 1518 0076 1344     		add	r3, r3, r2
 1519 0078 B3F90030 		ldrsh	r3, [r3]
 1520              		.loc 1 341 5
 1521 007c FB61     		str	r3, [r7, #28]
 342:codec.c       **** 		if (t < 0) {
 1522              		.loc 1 342 6
 1523 007e FB69     		ldr	r3, [r7, #28]
 1524 0080 002B     		cmp	r3, #0
 1525 0082 06DA     		bge	.L71
 343:codec.c       **** 			t = -t;
 1526              		.loc 1 343 6
 1527 0084 FB69     		ldr	r3, [r7, #28]
 1528 0086 5B42     		rsbs	r3, r3, #0
 1529 0088 FB61     		str	r3, [r7, #28]
 344:codec.c       **** 			acc |= 1;
 1530              		.loc 1 344 8
 1531 008a 7B6A     		ldr	r3, [r7, #36]
 1532 008c 43F00103 		orr	r3, r3, #1
 1533 0090 7B62     		str	r3, [r7, #36]
 1534              	.L71:
 345:codec.c       **** 		}
 346:codec.c       **** 		w = (unsigned)t;
 1535              		.loc 1 346 5
 1536 0092 FB69     		ldr	r3, [r7, #28]
 1537 0094 3B61     		str	r3, [r7, #16]
 347:codec.c       **** 
 348:codec.c       **** 		/*
 349:codec.c       **** 		 * Push the low 7 bits of the absolute value.
 350:codec.c       **** 		 */
 351:codec.c       **** 		acc <<= 7;
 1538              		.loc 1 351 7
 1539 0096 7B6A     		ldr	r3, [r7, #36]
 1540 0098 DB01     		lsls	r3, r3, #7
 1541 009a 7B62     		str	r3, [r7, #36]
 352:codec.c       **** 		acc |= w & 127u;
 1542              		.loc 1 352 12
 1543 009c 3B69     		ldr	r3, [r7, #16]
 1544 009e 03F07F03 		and	r3, r3, #127
 1545              		.loc 1 352 7
 1546 00a2 7A6A     		ldr	r2, [r7, #36]
 1547 00a4 1343     		orrs	r3, r3, r2
 1548 00a6 7B62     		str	r3, [r7, #36]
 353:codec.c       **** 		w >>= 7;
 1549              		.loc 1 353 5
 1550 00a8 3B69     		ldr	r3, [r7, #16]
 1551 00aa DB09     		lsrs	r3, r3, #7
 1552 00ac 3B61     		str	r3, [r7, #16]
 354:codec.c       **** 
 355:codec.c       **** 		/*
 356:codec.c       **** 		 * We pushed exactly 8 bits.
 357:codec.c       **** 		 */
 358:codec.c       **** 		acc_len += 8;
 1553              		.loc 1 358 11
 1554 00ae 3B6A     		ldr	r3, [r7, #32]
 1555 00b0 0833     		adds	r3, r3, #8
 1556 00b2 3B62     		str	r3, [r7, #32]
 359:codec.c       **** 
 360:codec.c       **** 		/*
 361:codec.c       **** 		 * Push as many zeros as necessary, then a one. Since the
 362:codec.c       **** 		 * absolute value is at most 2047, w can only range up to
 363:codec.c       **** 		 * 15 at this point, thus we will add at most 16 bits
 364:codec.c       **** 		 * here. With the 8 bits above and possibly up to 7 bits
 365:codec.c       **** 		 * from previous iterations, we may go up to 31 bits, which
 366:codec.c       **** 		 * will fit in the accumulator, which is an uint32_t.
 367:codec.c       **** 		 */
 368:codec.c       **** 		acc <<= (w + 1);
 1557              		.loc 1 368 14
 1558 00b4 3B69     		ldr	r3, [r7, #16]
 1559 00b6 0133     		adds	r3, r3, #1
 1560              		.loc 1 368 7
 1561 00b8 7A6A     		ldr	r2, [r7, #36]
 1562 00ba 02FA03F3 		lsl	r3, r2, r3
 1563 00be 7B62     		str	r3, [r7, #36]
 369:codec.c       **** 		acc |= 1;
 1564              		.loc 1 369 7
 1565 00c0 7B6A     		ldr	r3, [r7, #36]
 1566 00c2 43F00103 		orr	r3, r3, #1
 1567 00c6 7B62     		str	r3, [r7, #36]
 370:codec.c       **** 		acc_len += w + 1;
 1568              		.loc 1 370 11
 1569 00c8 3A69     		ldr	r2, [r7, #16]
 1570 00ca 3B6A     		ldr	r3, [r7, #32]
 1571 00cc 1344     		add	r3, r3, r2
 1572 00ce 0133     		adds	r3, r3, #1
 1573 00d0 3B62     		str	r3, [r7, #32]
 371:codec.c       **** 
 372:codec.c       **** 		/*
 373:codec.c       **** 		 * Produce all full bytes.
 374:codec.c       **** 		 */
 375:codec.c       **** 		while (acc_len >= 8) {
 1574              		.loc 1 375 9
 1575 00d2 17E0     		b	.L72
 1576              	.L75:
 376:codec.c       **** 			acc_len -= 8;
 1577              		.loc 1 376 12
 1578 00d4 3B6A     		ldr	r3, [r7, #32]
 1579 00d6 083B     		subs	r3, r3, #8
 1580 00d8 3B62     		str	r3, [r7, #32]
 377:codec.c       **** 			if (buf != NULL) {
 1581              		.loc 1 377 7
 1582 00da 7B69     		ldr	r3, [r7, #20]
 1583 00dc 002B     		cmp	r3, #0
 1584 00de 0ED0     		beq	.L73
 378:codec.c       **** 				if (v >= max_out_len) {
 1585              		.loc 1 378 8
 1586 00e0 BA6A     		ldr	r2, [r7, #40]
 1587 00e2 BB68     		ldr	r3, [r7, #8]
 1588 00e4 9A42     		cmp	r2, r3
 1589 00e6 01D3     		bcc	.L74
 379:codec.c       **** 					return 0;
 1590              		.loc 1 379 13
 1591 00e8 0023     		movs	r3, #0
 1592 00ea 30E0     		b	.L68
 1593              	.L74:
 380:codec.c       **** 				}
 381:codec.c       **** 				buf[v] = (uint8_t)(acc >> acc_len);
 1594              		.loc 1 381 28
 1595 00ec 7A6A     		ldr	r2, [r7, #36]
 1596 00ee 3B6A     		ldr	r3, [r7, #32]
 1597 00f0 22FA03F1 		lsr	r1, r2, r3
 1598              		.loc 1 381 8
 1599 00f4 7A69     		ldr	r2, [r7, #20]
 1600 00f6 BB6A     		ldr	r3, [r7, #40]
 1601 00f8 1344     		add	r3, r3, r2
 1602              		.loc 1 381 14
 1603 00fa CAB2     		uxtb	r2, r1
 1604              		.loc 1 381 12
 1605 00fc 1A70     		strb	r2, [r3]
 1606              	.L73:
 382:codec.c       **** 			}
 383:codec.c       **** 			v ++;
 1607              		.loc 1 383 6
 1608 00fe BB6A     		ldr	r3, [r7, #40]
 1609 0100 0133     		adds	r3, r3, #1
 1610 0102 BB62     		str	r3, [r7, #40]
 1611              	.L72:
 375:codec.c       **** 			acc_len -= 8;
 1612              		.loc 1 375 9
 1613 0104 3B6A     		ldr	r3, [r7, #32]
 1614 0106 072B     		cmp	r3, #7
 1615 0108 E4D8     		bhi	.L75
 1616              	.LBE5:
 332:codec.c       **** 		int t;
 1617              		.loc 1 332 23 discriminator 2
 1618 010a FB6A     		ldr	r3, [r7, #44]
 1619 010c 0133     		adds	r3, r3, #1
 1620 010e FB62     		str	r3, [r7, #44]
 1621              	.L70:
 332:codec.c       **** 		int t;
 1622              		.loc 1 332 2 discriminator 1
 1623 0110 FA6A     		ldr	r2, [r7, #44]
 1624 0112 BB69     		ldr	r3, [r7, #24]
 1625 0114 9A42     		cmp	r2, r3
 1626 0116 A8D3     		bcc	.L76
 384:codec.c       **** 		}
 385:codec.c       **** 	}
 386:codec.c       **** 
 387:codec.c       **** 	/*
 388:codec.c       **** 	 * Flush remaining bits (if any).
 389:codec.c       **** 	 */
 390:codec.c       **** 	if (acc_len > 0) {
 1627              		.loc 1 390 5
 1628 0118 3B6A     		ldr	r3, [r7, #32]
 1629 011a 002B     		cmp	r3, #0
 1630 011c 16D0     		beq	.L77
 391:codec.c       **** 		if (buf != NULL) {
 1631              		.loc 1 391 6
 1632 011e 7B69     		ldr	r3, [r7, #20]
 1633 0120 002B     		cmp	r3, #0
 1634 0122 10D0     		beq	.L78
 392:codec.c       **** 			if (v >= max_out_len) {
 1635              		.loc 1 392 7
 1636 0124 BA6A     		ldr	r2, [r7, #40]
 1637 0126 BB68     		ldr	r3, [r7, #8]
 1638 0128 9A42     		cmp	r2, r3
 1639 012a 01D3     		bcc	.L79
 393:codec.c       **** 				return 0;
 1640              		.loc 1 393 12
 1641 012c 0023     		movs	r3, #0
 1642 012e 0EE0     		b	.L68
 1643              	.L79:
 394:codec.c       **** 			}
 395:codec.c       **** 			buf[v] = (uint8_t)(acc << (8 - acc_len));
 1644              		.loc 1 395 33
 1645 0130 3B6A     		ldr	r3, [r7, #32]
 1646 0132 C3F10803 		rsb	r3, r3, #8
 1647              		.loc 1 395 27
 1648 0136 7A6A     		ldr	r2, [r7, #36]
 1649 0138 02FA03F1 		lsl	r1, r2, r3
 1650              		.loc 1 395 7
 1651 013c 7A69     		ldr	r2, [r7, #20]
 1652 013e BB6A     		ldr	r3, [r7, #40]
 1653 0140 1344     		add	r3, r3, r2
 1654              		.loc 1 395 13
 1655 0142 CAB2     		uxtb	r2, r1
 1656              		.loc 1 395 11
 1657 0144 1A70     		strb	r2, [r3]
 1658              	.L78:
 396:codec.c       **** 		}
 397:codec.c       **** 		v ++;
 1659              		.loc 1 397 5
 1660 0146 BB6A     		ldr	r3, [r7, #40]
 1661 0148 0133     		adds	r3, r3, #1
 1662 014a BB62     		str	r3, [r7, #40]
 1663              	.L77:
 398:codec.c       **** 	}
 399:codec.c       **** 
 400:codec.c       **** 	return v;
 1664              		.loc 1 400 9
 1665 014c BB6A     		ldr	r3, [r7, #40]
 1666              	.L68:
 401:codec.c       **** }
 1667              		.loc 1 401 1
 1668 014e 1846     		mov	r0, r3
 1669 0150 3437     		adds	r7, r7, #52
 1670              	.LCFI39:
 1671              		.cfi_def_cfa_offset 4
 1672 0152 BD46     		mov	sp, r7
 1673              	.LCFI40:
 1674              		.cfi_def_cfa_register 13
 1675              		@ sp needed
 1676 0154 80BC     		pop	{r7}
 1677              	.LCFI41:
 1678              		.cfi_restore 7
 1679              		.cfi_def_cfa_offset 0
 1680 0156 7047     		bx	lr
 1681              		.cfi_endproc
 1682              	.LFE24:
 1684              		.section	.text.falcon_inner_comp_decode,"ax",%progbits
 1685              		.align	1
 1686              		.global	falcon_inner_comp_decode
 1687              		.syntax unified
 1688              		.thumb
 1689              		.thumb_func
 1690              		.fpu softvfp
 1692              	falcon_inner_comp_decode:
 1693              	.LFB25:
 402:codec.c       **** 
 403:codec.c       **** /* see inner.h */
 404:codec.c       **** size_t
 405:codec.c       **** Zf(comp_decode)(
 406:codec.c       **** 	int16_t *x, unsigned logn,
 407:codec.c       **** 	const void *in, size_t max_in_len)
 408:codec.c       **** {
 1694              		.loc 1 408 1
 1695              		.cfi_startproc
 1696              		@ args = 0, pretend = 0, frame = 56
 1697              		@ frame_needed = 1, uses_anonymous_args = 0
 1698              		@ link register save eliminated.
 1699 0000 80B4     		push	{r7}
 1700              	.LCFI42:
 1701              		.cfi_def_cfa_offset 4
 1702              		.cfi_offset 7, -4
 1703 0002 8FB0     		sub	sp, sp, #60
 1704              	.LCFI43:
 1705              		.cfi_def_cfa_offset 64
 1706 0004 00AF     		add	r7, sp, #0
 1707              	.LCFI44:
 1708              		.cfi_def_cfa_register 7
 1709 0006 F860     		str	r0, [r7, #12]
 1710 0008 B960     		str	r1, [r7, #8]
 1711 000a 7A60     		str	r2, [r7, #4]
 1712 000c 3B60     		str	r3, [r7]
 409:codec.c       **** 	const uint8_t *buf;
 410:codec.c       **** 	size_t n, u, v;
 411:codec.c       **** 	uint32_t acc;
 412:codec.c       **** 	unsigned acc_len;
 413:codec.c       **** 
 414:codec.c       **** 	n = (size_t)1 << logn;
 1713              		.loc 1 414 4
 1714 000e 0122     		movs	r2, #1
 1715 0010 BB68     		ldr	r3, [r7, #8]
 1716 0012 02FA03F3 		lsl	r3, r2, r3
 1717 0016 3B62     		str	r3, [r7, #32]
 415:codec.c       **** 	buf = in;
 1718              		.loc 1 415 6
 1719 0018 7B68     		ldr	r3, [r7, #4]
 1720 001a FB61     		str	r3, [r7, #28]
 416:codec.c       **** 	acc = 0;
 1721              		.loc 1 416 6
 1722 001c 0023     		movs	r3, #0
 1723 001e FB62     		str	r3, [r7, #44]
 417:codec.c       **** 	acc_len = 0;
 1724              		.loc 1 417 10
 1725 0020 0023     		movs	r3, #0
 1726 0022 BB62     		str	r3, [r7, #40]
 418:codec.c       **** 	v = 0;
 1727              		.loc 1 418 4
 1728 0024 0023     		movs	r3, #0
 1729 0026 3B63     		str	r3, [r7, #48]
 419:codec.c       **** 	for (u = 0; u < n; u ++) {
 1730              		.loc 1 419 9
 1731 0028 0023     		movs	r3, #0
 1732 002a 7B63     		str	r3, [r7, #52]
 1733              		.loc 1 419 2
 1734 002c 61E0     		b	.L81
 1735              	.L93:
 1736              	.LBB6:
 420:codec.c       **** 		unsigned b, s, m;
 421:codec.c       **** 
 422:codec.c       **** 		/*
 423:codec.c       **** 		 * Get next eight bits: sign and low seven bits of the
 424:codec.c       **** 		 * absolute value.
 425:codec.c       **** 		 */
 426:codec.c       **** 		if (v >= max_in_len) {
 1737              		.loc 1 426 6
 1738 002e 3A6B     		ldr	r2, [r7, #48]
 1739 0030 3B68     		ldr	r3, [r7]
 1740 0032 9A42     		cmp	r2, r3
 1741 0034 01D3     		bcc	.L82
 427:codec.c       **** 			return 0;
 1742              		.loc 1 427 11
 1743 0036 0023     		movs	r3, #0
 1744 0038 6BE0     		b	.L83
 1745              	.L82:
 428:codec.c       **** 		}
 429:codec.c       **** 		acc = (acc << 8) | (uint32_t)buf[v ++];
 1746              		.loc 1 429 14
 1747 003a FB6A     		ldr	r3, [r7, #44]
 1748 003c 1A02     		lsls	r2, r3, #8
 1749              		.loc 1 429 38
 1750 003e 3B6B     		ldr	r3, [r7, #48]
 1751 0040 591C     		adds	r1, r3, #1
 1752 0042 3963     		str	r1, [r7, #48]
 1753              		.loc 1 429 35
 1754 0044 F969     		ldr	r1, [r7, #28]
 1755 0046 0B44     		add	r3, r3, r1
 1756 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1757              		.loc 1 429 7
 1758 004a 1343     		orrs	r3, r3, r2
 1759 004c FB62     		str	r3, [r7, #44]
 430:codec.c       **** 		b = acc >> acc_len;
 1760              		.loc 1 430 5
 1761 004e FA6A     		ldr	r2, [r7, #44]
 1762 0050 BB6A     		ldr	r3, [r7, #40]
 1763 0052 22FA03F3 		lsr	r3, r2, r3
 1764 0056 BB61     		str	r3, [r7, #24]
 431:codec.c       **** 		s = b & 128;
 1765              		.loc 1 431 5
 1766 0058 BB69     		ldr	r3, [r7, #24]
 1767 005a 03F08003 		and	r3, r3, #128
 1768 005e 7B61     		str	r3, [r7, #20]
 432:codec.c       **** 		m = b & 127;
 1769              		.loc 1 432 5
 1770 0060 BB69     		ldr	r3, [r7, #24]
 1771 0062 03F07F03 		and	r3, r3, #127
 1772 0066 7B62     		str	r3, [r7, #36]
 1773              	.L89:
 433:codec.c       **** 
 434:codec.c       **** 		/*
 435:codec.c       **** 		 * Get next bits until a 1 is reached.
 436:codec.c       **** 		 */
 437:codec.c       **** 		for (;;) {
 438:codec.c       **** 			if (acc_len == 0) {
 1774              		.loc 1 438 7
 1775 0068 BB6A     		ldr	r3, [r7, #40]
 1776 006a 002B     		cmp	r3, #0
 1777 006c 11D1     		bne	.L84
 439:codec.c       **** 				if (v >= max_in_len) {
 1778              		.loc 1 439 8
 1779 006e 3A6B     		ldr	r2, [r7, #48]
 1780 0070 3B68     		ldr	r3, [r7]
 1781 0072 9A42     		cmp	r2, r3
 1782 0074 01D3     		bcc	.L85
 440:codec.c       **** 					return 0;
 1783              		.loc 1 440 13
 1784 0076 0023     		movs	r3, #0
 1785 0078 4BE0     		b	.L83
 1786              	.L85:
 441:codec.c       **** 				}
 442:codec.c       **** 				acc = (acc << 8) | (uint32_t)buf[v ++];
 1787              		.loc 1 442 16
 1788 007a FB6A     		ldr	r3, [r7, #44]
 1789 007c 1A02     		lsls	r2, r3, #8
 1790              		.loc 1 442 40
 1791 007e 3B6B     		ldr	r3, [r7, #48]
 1792 0080 591C     		adds	r1, r3, #1
 1793 0082 3963     		str	r1, [r7, #48]
 1794              		.loc 1 442 37
 1795 0084 F969     		ldr	r1, [r7, #28]
 1796 0086 0B44     		add	r3, r3, r1
 1797 0088 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1798              		.loc 1 442 9
 1799 008a 1343     		orrs	r3, r3, r2
 1800 008c FB62     		str	r3, [r7, #44]
 443:codec.c       **** 				acc_len = 8;
 1801              		.loc 1 443 13
 1802 008e 0823     		movs	r3, #8
 1803 0090 BB62     		str	r3, [r7, #40]
 1804              	.L84:
 444:codec.c       **** 			}
 445:codec.c       **** 			acc_len --;
 1805              		.loc 1 445 12
 1806 0092 BB6A     		ldr	r3, [r7, #40]
 1807 0094 013B     		subs	r3, r3, #1
 1808 0096 BB62     		str	r3, [r7, #40]
 446:codec.c       **** 			if (((acc >> acc_len) & 1) != 0) {
 1809              		.loc 1 446 14
 1810 0098 FA6A     		ldr	r2, [r7, #44]
 1811 009a BB6A     		ldr	r3, [r7, #40]
 1812 009c 22FA03F3 		lsr	r3, r2, r3
 1813              		.loc 1 446 26
 1814 00a0 03F00103 		and	r3, r3, #1
 1815              		.loc 1 446 7
 1816 00a4 002B     		cmp	r3, #0
 1817 00a6 08D1     		bne	.L96
 447:codec.c       **** 				break;
 448:codec.c       **** 			}
 449:codec.c       **** 			m += 128;
 1818              		.loc 1 449 6
 1819 00a8 7B6A     		ldr	r3, [r7, #36]
 1820 00aa 8033     		adds	r3, r3, #128
 1821 00ac 7B62     		str	r3, [r7, #36]
 450:codec.c       **** 			if (m > 2047) {
 1822              		.loc 1 450 7
 1823 00ae 7B6A     		ldr	r3, [r7, #36]
 1824 00b0 B3F5006F 		cmp	r3, #2048
 1825 00b4 D8D3     		bcc	.L89
 451:codec.c       **** 				return 0;
 1826              		.loc 1 451 12
 1827 00b6 0023     		movs	r3, #0
 1828 00b8 2BE0     		b	.L83
 1829              	.L96:
 447:codec.c       **** 				break;
 1830              		.loc 1 447 5
 1831 00ba 00BF     		nop
 452:codec.c       **** 			}
 453:codec.c       **** 		}
 454:codec.c       **** 
 455:codec.c       **** 		/*
 456:codec.c       **** 		 * "-0" is forbidden.
 457:codec.c       **** 		 */
 458:codec.c       **** 		if (s && m == 0) {
 1832              		.loc 1 458 6
 1833 00bc 7B69     		ldr	r3, [r7, #20]
 1834 00be 002B     		cmp	r3, #0
 1835 00c0 04D0     		beq	.L90
 1836              		.loc 1 458 9 discriminator 1
 1837 00c2 7B6A     		ldr	r3, [r7, #36]
 1838 00c4 002B     		cmp	r3, #0
 1839 00c6 01D1     		bne	.L90
 459:codec.c       **** 			return 0;
 1840              		.loc 1 459 11
 1841 00c8 0023     		movs	r3, #0
 1842 00ca 22E0     		b	.L83
 1843              	.L90:
 460:codec.c       **** 		}
 461:codec.c       **** 
 462:codec.c       **** 		x[u] = (int16_t)(s ? -(int)m : (int)m);
 1844              		.loc 1 462 10
 1845 00cc 7B69     		ldr	r3, [r7, #20]
 1846 00ce 002B     		cmp	r3, #0
 1847 00d0 05D0     		beq	.L91
 1848              		.loc 1 462 10 is_stmt 0 discriminator 1
 1849 00d2 7B6A     		ldr	r3, [r7, #36]
 1850 00d4 9BB2     		uxth	r3, r3
 1851 00d6 5B42     		rsbs	r3, r3, #0
 1852 00d8 9BB2     		uxth	r3, r3
 1853 00da 1BB2     		sxth	r3, r3
 1854 00dc 01E0     		b	.L92
 1855              	.L91:
 1856              		.loc 1 462 10 discriminator 2
 1857 00de 7B6A     		ldr	r3, [r7, #36]
 1858 00e0 1BB2     		sxth	r3, r3
 1859              	.L92:
 1860              		.loc 1 462 4 is_stmt 1 discriminator 4
 1861 00e2 7A6B     		ldr	r2, [r7, #52]
 1862 00e4 5200     		lsls	r2, r2, #1
 1863 00e6 F968     		ldr	r1, [r7, #12]
 1864 00e8 0A44     		add	r2, r2, r1
 1865              		.loc 1 462 8 discriminator 4
 1866 00ea 1380     		strh	r3, [r2]	@ movhi
 1867              	.LBE6:
 419:codec.c       **** 		unsigned b, s, m;
 1868              		.loc 1 419 23 discriminator 4
 1869 00ec 7B6B     		ldr	r3, [r7, #52]
 1870 00ee 0133     		adds	r3, r3, #1
 1871 00f0 7B63     		str	r3, [r7, #52]
 1872              	.L81:
 419:codec.c       **** 		unsigned b, s, m;
 1873              		.loc 1 419 2 discriminator 2
 1874 00f2 7A6B     		ldr	r2, [r7, #52]
 1875 00f4 3B6A     		ldr	r3, [r7, #32]
 1876 00f6 9A42     		cmp	r2, r3
 1877 00f8 99D3     		bcc	.L93
 463:codec.c       **** 	}
 464:codec.c       **** 
 465:codec.c       **** 	/*
 466:codec.c       **** 	 * Unused bits in the last byte must be zero.
 467:codec.c       **** 	 */
 468:codec.c       **** 	if ((acc & ((1u << acc_len) - 1u)) != 0) {
 1878              		.loc 1 468 18
 1879 00fa 0122     		movs	r2, #1
 1880 00fc BB6A     		ldr	r3, [r7, #40]
 1881 00fe 02FA03F3 		lsl	r3, r2, r3
 1882              		.loc 1 468 30
 1883 0102 5A1E     		subs	r2, r3, #1
 1884              		.loc 1 468 11
 1885 0104 FB6A     		ldr	r3, [r7, #44]
 1886 0106 1340     		ands	r3, r3, r2
 1887              		.loc 1 468 5
 1888 0108 002B     		cmp	r3, #0
 1889 010a 01D0     		beq	.L94
 469:codec.c       **** 		return 0;
 1890              		.loc 1 469 10
 1891 010c 0023     		movs	r3, #0
 1892 010e 00E0     		b	.L83
 1893              	.L94:
 470:codec.c       **** 	}
 471:codec.c       **** 
 472:codec.c       **** 	return v;
 1894              		.loc 1 472 9
 1895 0110 3B6B     		ldr	r3, [r7, #48]
 1896              	.L83:
 473:codec.c       **** }
 1897              		.loc 1 473 1
 1898 0112 1846     		mov	r0, r3
 1899 0114 3C37     		adds	r7, r7, #60
 1900              	.LCFI45:
 1901              		.cfi_def_cfa_offset 4
 1902 0116 BD46     		mov	sp, r7
 1903              	.LCFI46:
 1904              		.cfi_def_cfa_register 13
 1905              		@ sp needed
 1906 0118 80BC     		pop	{r7}
 1907              	.LCFI47:
 1908              		.cfi_restore 7
 1909              		.cfi_def_cfa_offset 0
 1910 011a 7047     		bx	lr
 1911              		.cfi_endproc
 1912              	.LFE25:
 1914              		.global	falcon_inner_max_fg_bits
 1915              		.section	.rodata
 1916              		.align	2
 1919              	falcon_inner_max_fg_bits:
 1920 0140 00080808 		.ascii	"\000\010\010\010\010\010\007\007\006\006\005"
 1920      08080707 
 1920      060605
 1921              		.global	falcon_inner_max_FG_bits
 1922 014b 00       		.align	2
 1925              	falcon_inner_max_FG_bits:
 1926 014c 00080808 		.ascii	"\000\010\010\010\010\010\010\010\010\010\010"
 1926      08080808 
 1926      080808
 1927              		.global	falcon_inner_max_sig_bits
 1928 0157 00       		.align	2
 1931              	falcon_inner_max_sig_bits:
 1932 0158 000A0B0B 		.ascii	"\000\012\013\013\014\014\014\014\014\014\014"
 1932      0C0C0C0C 
 1932      0C0C0C
 1933              		.text
 1934              	.Letext0:
 1935              		.file 2 "c:\\users\\user\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\gcc-arm-none-eabi-10-2020
 1936              		.file 3 "c:\\users\\user\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\gcc-arm-none-eabi-10-2020
 1937              		.file 4 "c:\\users\\user\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\gcc-arm-none-eabi-10-2020
 1938              		.file 5 "inner.h"
 1939              		.file 6 "fpr.h"
DEFINED SYMBOLS
                            *ABS*:00000000 codec.c
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:16     .rodata:00000000 $d
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:19     .rodata:00000000 fpr_q
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:25     .rodata:00000008 fpr_inverse_of_q
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:31     .rodata:00000010 fpr_inv_2sqrsigma0
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:37     .rodata:00000018 fpr_inv_sigma
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:63     .rodata:00000070 fpr_sigma_min
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:89     .rodata:000000c8 fpr_log2
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:95     .rodata:000000d0 fpr_inv_log2
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:101    .rodata:000000d8 fpr_bnorm_max
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:107    .rodata:000000e0 fpr_zero
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:112    .rodata:000000e8 fpr_one
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:118    .rodata:000000f0 fpr_two
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:124    .rodata:000000f8 fpr_onehalf
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:130    .rodata:00000100 fpr_invsqrt2
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:136    .rodata:00000108 fpr_invsqrt8
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:142    .rodata:00000110 fpr_ptwo31
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:148    .rodata:00000118 fpr_ptwo31m1
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:154    .rodata:00000120 fpr_mtwo31m1
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:160    .rodata:00000128 fpr_ptwo63m1
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:166    .rodata:00000130 fpr_mtwo63m1
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:172    .rodata:00000138 fpr_ptwo63
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:176    .text.falcon_inner_modq_encode:00000000 $t
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:184    .text.falcon_inner_modq_encode:00000000 falcon_inner_modq_encode
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:370    .text.falcon_inner_modq_decode:00000000 $t
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:377    .text.falcon_inner_modq_decode:00000000 falcon_inner_modq_decode
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:533    .text.falcon_inner_trim_i16_encode:00000000 $t
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:540    .text.falcon_inner_trim_i16_encode:00000000 falcon_inner_trim_i16_encode
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:768    .text.falcon_inner_trim_i16_decode:00000000 $t
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:775    .text.falcon_inner_trim_i16_decode:00000000 falcon_inner_trim_i16_decode
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:983    .text.falcon_inner_trim_i8_encode:00000000 $t
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:990    .text.falcon_inner_trim_i8_encode:00000000 falcon_inner_trim_i8_encode
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:1215   .text.falcon_inner_trim_i8_decode:00000000 $t
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:1222   .text.falcon_inner_trim_i8_decode:00000000 falcon_inner_trim_i8_decode
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:1419   .text.falcon_inner_comp_encode:00000000 $t
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:1426   .text.falcon_inner_comp_encode:00000000 falcon_inner_comp_encode
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:1685   .text.falcon_inner_comp_decode:00000000 $t
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:1692   .text.falcon_inner_comp_decode:00000000 falcon_inner_comp_decode
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:1919   .rodata:00000140 falcon_inner_max_fg_bits
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:1925   .rodata:0000014c falcon_inner_max_FG_bits
C:\Users\user\AppData\Local\Temp\cc6OYRqA.s:1931   .rodata:00000158 falcon_inner_max_sig_bits

NO UNDEFINED SYMBOLS
