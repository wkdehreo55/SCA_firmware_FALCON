   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f3_hal_lowlevel.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NVIC_GetPriorityGrouping,"ax",%progbits
  16              		.align	1
  17              		.arch armv7e-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	NVIC_GetPriorityGrouping:
  24              	.LFB107:
  25              		.file 1 "../base/./hal/stm32f3/CMSIS/core/core_cm4.h"
   1:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**************************************************************************//**
   2:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  * @file     core_cm4.h
   3:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  * @version  V4.30
   5:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  * @date     20. October 2015
   6:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  ******************************************************************************/
   7:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
   9:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    All rights reserved.
  10:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    Redistribution and use in source and binary forms, with or without
  11:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    modification, are permitted provided that the following conditions are met:
  12:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    - Redistributions of source code must retain the above copyright
  13:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****      notice, this list of conditions and the following disclaimer.
  14:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    - Redistributions in binary form must reproduce the above copyright
  15:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****      notice, this list of conditions and the following disclaimer in the
  16:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****      documentation and/or other materials provided with the distribution.
  17:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****      to endorse or promote products derived from this software without
  19:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****      specific prior written permission.
  20:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    *
  21:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    ---------------------------------------------------------------------------*/
  33:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
  34:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
  35:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #if   defined ( __ICCARM__ )
  36:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  39:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
  40:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
  41:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  42:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  43:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
  44:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #include <stdint.h>
  45:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
  46:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #ifdef __cplusplus
  47:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  extern "C" {
  48:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
  49:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
  50:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
  51:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
  54:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  56:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
  57:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****      Unions are used for effective representation of core registers.
  59:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
  60:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  62:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
  63:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
  64:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
  65:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /*******************************************************************************
  66:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  *                 CMSIS definitions
  67:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  ******************************************************************************/
  68:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
  69:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup Cortex_M4
  70:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
  71:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
  72:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
  73:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /*  CMSIS CM4 definitions */
  74:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  77:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
  79:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define __CORTEX_M                (0x04U)                                      /*!< Cortex-M Core *
  80:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
  81:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
  82:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #if   defined ( __CC_ARM )
  83:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  86:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
  87:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  91:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
  92:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __GNUC__ )
  93:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __STATIC_INLINE  static inline
  96:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
  97:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __ICCARM__ )
  98:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __STATIC_INLINE  static inline
 101:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 102:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __TMS470__ )
 103:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __STATIC_INLINE  static inline
 105:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 106:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __TASKING__ )
 107:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __STATIC_INLINE  static inline
 110:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 111:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __CSMC__ )
 112:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __packed
 113:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __STATIC_INLINE  static inline
 116:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 117:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #else
 118:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #error Unknown compiler
 119:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
 120:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 121:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
 123:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** */
 124:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #if defined ( __CC_ARM )
 125:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #if defined __TARGET_FPU_VFP
 126:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 127:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       1U
 128:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #else
 129:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       0U
 131:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #endif
 132:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #else
 133:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_USED         0U
 134:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 135:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 136:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 137:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #if defined __ARM_PCS_VFP
 138:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 139:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       1U
 140:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #else
 141:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 142:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       0U
 143:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #endif
 144:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #else
 145:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_USED         0U
 146:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 147:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 148:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __GNUC__ )
 149:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 150:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 151:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       1U
 152:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #else
 153:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       0U
 155:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #endif
 156:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #else
 157:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_USED         0U
 158:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 159:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 160:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __ICCARM__ )
 161:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #if defined __ARMVFP__
 162:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 163:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       1U
 164:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #else
 165:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 166:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       0U
 167:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #endif
 168:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #else
 169:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_USED         0U
 170:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 171:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 172:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __TMS470__ )
 173:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 174:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 175:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       1U
 176:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #else
 177:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 178:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       0U
 179:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #endif
 180:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #else
 181:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_USED         0U
 182:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 183:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 184:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __TASKING__ )
 185:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #if defined __FPU_VFP__
 186:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 187:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       1U
 188:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #else
 189:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 190:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       0U
 191:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #endif
 192:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #else
 193:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_USED         0U
 194:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 195:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 196:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __CSMC__ )
 197:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 198:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 199:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       1U
 200:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #else
 201:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 202:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       0U
 203:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #endif
 204:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #else
 205:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_USED         0U
 206:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 207:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 208:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
 209:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 210:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 211:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 212:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #include "core_cmSimd.h"                 /* Compiler specific SIMD Intrinsics */
 213:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 214:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #ifdef __cplusplus
 215:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** }
 216:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
 217:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 218:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 219:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 220:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #ifndef __CMSIS_GENERIC
 221:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 222:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 223:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 224:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 225:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #ifdef __cplusplus
 226:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  extern "C" {
 227:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
 228:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 229:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* check device defines and use defaults */
 230:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 231:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #ifndef __CM4_REV
 232:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __CM4_REV               0x0000U
 233:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 234:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 235:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 236:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #ifndef __FPU_PRESENT
 237:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_PRESENT             0U
 238:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 239:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 240:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 241:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #ifndef __MPU_PRESENT
 242:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __MPU_PRESENT             0U
 243:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 244:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 245:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 246:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 247:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __NVIC_PRIO_BITS          4U
 248:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 249:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 250:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 251:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 252:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 253:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 254:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 255:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
 256:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 257:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 258:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 259:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 260:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 261:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 262:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     \li to specify the access to peripheral variables.
 263:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 264:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** */
 265:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #ifdef __cplusplus
 266:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 267:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #else
 268:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 269:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
 270:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 271:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 272:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 273:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* following defines should be used for structure members */
 274:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 275:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 276:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 277:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 278:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group Cortex_M4 */
 279:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 280:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 281:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 282:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /*******************************************************************************
 283:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  *                 Register Abstraction
 284:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   Core Register contain:
 285:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core Register
 286:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core NVIC Register
 287:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core SCB Register
 288:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core SysTick Register
 289:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core Debug Register
 290:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core MPU Register
 291:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core FPU Register
 292:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  ******************************************************************************/
 293:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 294:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 295:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 296:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** */
 297:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 298:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 299:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup    CMSIS_core_register
 300:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 301:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief      Core Register type definitions.
 302:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
 303:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 304:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 305:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 306:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 307:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 308:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** typedef union
 309:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
 310:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   struct
 311:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   {
 312:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 313:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 314:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 315:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 316:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 317:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 318:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 319:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 320:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 321:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 322:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** } APSR_Type;
 323:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 324:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* APSR Register Definitions */
 325:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 326:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 327:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 328:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 329:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 330:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 331:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 332:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 333:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 334:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 335:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 336:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 337:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 338:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 339:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 340:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 341:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 342:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 343:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 344:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 345:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 346:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 347:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** typedef union
 348:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
 349:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   struct
 350:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   {
 351:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 352:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 353:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 354:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 355:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** } IPSR_Type;
 356:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 357:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* IPSR Register Definitions */
 358:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 359:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 360:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 361:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 362:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 363:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 364:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 365:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** typedef union
 366:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
 367:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   struct
 368:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   {
 369:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 370:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved */
 371:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 372:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 373:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 374:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0) */
 375:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 376:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 377:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 378:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 379:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 380:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 381:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 382:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** } xPSR_Type;
 383:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 384:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* xPSR Register Definitions */
 385:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 386:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 387:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 388:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 389:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 390:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 391:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 392:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 393:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 394:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 395:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 396:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 397:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 398:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 399:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 400:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_IT_Pos                        25U                                            /*!< xPSR
 401:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR
 402:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 403:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 404:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 405:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 406:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 407:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 408:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 409:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 410:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 411:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 412:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 413:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 414:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 415:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 416:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** typedef union
 417:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
 418:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   struct
 419:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   {
 420:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 421:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 422:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 423:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 424:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 425:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 426:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** } CONTROL_Type;
 427:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 428:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* CONTROL Register Definitions */
 429:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 430:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 431:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 432:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 433:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 434:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 435:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 436:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 437:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 438:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_CORE */
 439:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 440:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 441:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 442:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup    CMSIS_core_register
 443:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 444:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 445:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
 446:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 447:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 448:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 449:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 450:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 451:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
 452:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
 453:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 454:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED0[24U];
 455:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 456:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RSERVED1[24U];
 457:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 458:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED2[24U];
 459:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 460:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED3[24U];
 461:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 462:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED4[56U];
 463:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 464:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED5[644U];
 465:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 466:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** }  NVIC_Type;
 467:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 468:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 469:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 470:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 471:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 472:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 473:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 474:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 475:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 476:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
 477:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 478:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 479:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
 480:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 481:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 482:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 483:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 484:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 485:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
 486:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
 487:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 488:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 489:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 490:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 491:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 492:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 493:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 494:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 495:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 496:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 497:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 498:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 499:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 500:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 501:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 502:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 503:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 504:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 505:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 506:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED0[5U];
 507:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 508:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** } SCB_Type;
 509:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 510:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB CPUID Register Definitions */
 511:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 512:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 513:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 514:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 515:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 516:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 517:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 518:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 519:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 520:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 521:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 522:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 523:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 524:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 525:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 526:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 527:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 528:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 529:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 530:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 531:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 532:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 533:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 534:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 535:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 536:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 537:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 538:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 539:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 540:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 541:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 542:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 543:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 544:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 545:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 546:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 547:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 548:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 549:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 550:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 551:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 552:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 553:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 554:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 555:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 556:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 557:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 558:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 559:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 560:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 561:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 562:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 563:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 564:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 565:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 566:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 567:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 568:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 569:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 570:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 571:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 572:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 573:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 574:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 575:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 576:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 577:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 578:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 579:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 580:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 581:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 582:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 583:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB System Control Register Definitions */
 584:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 585:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 586:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 587:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 588:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 589:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 590:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 591:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 592:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 593:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 594:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 595:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 596:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 597:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 598:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 599:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 600:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 601:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 602:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 603:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 604:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 605:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 606:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 607:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 608:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 609:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 610:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 611:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 612:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 613:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 614:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 615:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 616:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 617:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 618:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 619:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 620:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 621:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 622:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 623:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 624:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 625:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 626:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 627:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 628:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 629:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 630:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 631:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 632:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 633:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 634:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 635:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 636:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 637:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 638:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 639:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 640:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 641:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 642:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 643:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 644:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 645:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 646:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 647:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 648:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 649:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 650:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 651:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 652:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 653:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 654:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 655:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 656:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 657:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 658:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 659:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 660:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 661:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 662:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 663:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 664:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 665:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 666:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 667:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 668:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 669:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 670:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 671:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 672:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 673:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 674:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 675:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 676:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 677:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 678:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 679:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 680:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 681:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 682:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 683:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 684:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 685:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 686:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 687:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 688:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 689:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 690:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 691:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_SCB */
 692:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 693:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 694:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 695:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
 696:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 697:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 698:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
 699:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 700:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 701:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 702:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 703:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 704:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
 705:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
 706:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED0[1U];
 707:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 708:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 709:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** } SCnSCB_Type;
 710:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 711:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 712:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 713:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 714:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 715:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* Auxiliary Control Register Definitions */
 716:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 717:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 718:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 719:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 720:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 721:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 722:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 723:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 724:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 725:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 726:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 727:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 728:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 729:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 730:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 731:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 732:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 733:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 734:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 735:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
 736:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 737:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 738:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
 739:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 740:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 741:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 742:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 743:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 744:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
 745:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
 746:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 747:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 748:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 749:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 750:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** } SysTick_Type;
 751:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 752:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 753:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 754:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 755:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 756:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 757:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 758:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 759:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 760:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 761:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 762:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 763:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 764:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 765:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* SysTick Reload Register Definitions */
 766:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 767:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 768:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 769:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* SysTick Current Register Definitions */
 770:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 771:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 772:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 773:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* SysTick Calibration Register Definitions */
 774:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 775:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 776:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 777:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 778:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 779:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 780:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 781:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 782:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 783:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 784:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 785:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 786:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 787:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
 788:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 789:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 790:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
 791:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 792:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 793:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 794:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 795:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 796:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
 797:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
 798:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __OM  union
 799:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   {
 800:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 801:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 802:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 803:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 804:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED0[864U];
 805:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 806:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED1[15U];
 807:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 808:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED2[15U];
 809:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 810:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED3[29U];
 811:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 812:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 813:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 814:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED4[43U];
 815:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 816:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 817:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED5[6U];
 818:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 819:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 820:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 821:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 822:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 823:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 824:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 825:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 826:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 827:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 828:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 829:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 830:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** } ITM_Type;
 831:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 832:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 833:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 834:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 835:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 836:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* ITM Trace Control Register Definitions */
 837:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 838:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 839:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 840:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 841:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 842:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 843:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 844:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 845:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 846:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 847:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 848:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 849:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 850:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 851:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 852:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 853:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 854:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 855:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 856:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 857:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 858:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 859:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 860:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 861:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 862:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 863:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 864:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* ITM Integration Write Register Definitions */
 865:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 866:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 867:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 868:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* ITM Integration Read Register Definitions */
 869:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 870:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 871:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 872:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 873:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 874:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 875:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 876:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* ITM Lock Status Register Definitions */
 877:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 878:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 879:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 880:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 881:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 882:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 883:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 884:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 885:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 886:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 887:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 888:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 889:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 890:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
 891:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 892:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 893:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
 894:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 895:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 896:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 897:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 898:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 899:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
 900:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
 901:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 902:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 903:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 904:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 905:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 906:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 907:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 908:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 909:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 910:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 911:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 912:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED0[1U];
 913:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 914:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 915:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 916:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED1[1U];
 917:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 918:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 919:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 920:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED2[1U];
 921:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 922:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 923:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 924:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** } DWT_Type;
 925:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 926:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT Control Register Definitions */
 927:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 928:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 929:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 930:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 931:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 932:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 933:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 934:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 935:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 936:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 937:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 938:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 939:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 940:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 941:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 942:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 943:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 944:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 945:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 946:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 947:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 948:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 949:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 950:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 951:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 952:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 953:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 954:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 955:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 956:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 957:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 958:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 959:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 960:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 961:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 962:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 963:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 964:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 965:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 966:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 967:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 968:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 969:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 970:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 971:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 972:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 973:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 974:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 975:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 976:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 977:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 978:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 979:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 980:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 981:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT CPI Count Register Definitions */
 982:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 983:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 984:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 985:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
 986:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 987:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 988:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 989:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT Sleep Count Register Definitions */
 990:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 991:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 992:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 993:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT LSU Count Register Definitions */
 994:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 995:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 996:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
 997:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
 998:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 999:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1000:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1001:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1002:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1003:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1004:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1005:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1006:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1007:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1008:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1009:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1010:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1011:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1012:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1013:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1014:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1015:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1016:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1017:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1018:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1019:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1020:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1021:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1022:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1023:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1024:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1025:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1026:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1027:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1028:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1029:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1030:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1031:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1032:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1033:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1034:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1035:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1036:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1037:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
1038:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1039:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1040:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
1041:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1042:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1043:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1044:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1045:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1046:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
1047:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
1048:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1049:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1050:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED0[2U];
1051:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1052:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED1[55U];
1053:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1054:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED2[131U];
1055:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1056:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1057:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1058:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED3[759U];
1059:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1060:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1061:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1062:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED4[1U];
1063:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1064:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1065:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1066:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED5[39U];
1067:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1068:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1069:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED7[8U];
1070:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1071:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1072:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** } TPI_Type;
1073:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1074:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1075:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1076:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1077:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1078:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1079:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1080:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1081:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1082:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1083:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1084:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1085:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1086:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1087:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1088:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1089:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1090:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1091:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1092:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1093:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1094:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1095:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1096:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1097:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1098:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1099:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1100:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1101:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1102:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1103:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1104:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1105:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1106:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1107:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1108:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1109:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1110:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1111:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1112:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1113:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1114:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1115:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1116:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1117:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1118:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1119:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1120:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1121:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1122:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1123:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1124:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1125:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1126:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1127:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1128:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1129:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1130:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1131:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1132:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1133:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1134:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1135:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1136:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1137:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1138:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1139:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1140:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1141:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1142:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1143:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1144:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1145:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1146:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1147:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1148:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1149:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1150:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1151:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1152:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1153:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1154:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1155:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1156:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1157:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1158:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1159:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1160:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1161:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1162:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI DEVID Register Definitions */
1163:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1164:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1165:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1166:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1167:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1168:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1169:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1170:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1171:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1172:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1173:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1174:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1175:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1176:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1177:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1178:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1179:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1180:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1181:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1182:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1183:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1184:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1185:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1186:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1187:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1188:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1189:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1190:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1191:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #if (__MPU_PRESENT == 1U)
1192:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1193:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
1194:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1195:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1196:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
1197:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1198:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1199:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1200:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1201:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1202:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
1203:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
1204:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1205:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1206:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1207:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1208:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1209:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1210:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1211:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1212:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1213:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1214:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1215:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** } MPU_Type;
1216:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1217:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* MPU Type Register Definitions */
1218:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1219:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1220:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1221:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1222:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1223:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1224:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1225:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1226:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1227:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* MPU Control Register Definitions */
1228:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1229:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1230:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1231:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1232:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1233:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1234:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1235:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1236:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1237:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* MPU Region Number Register Definitions */
1238:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1239:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1240:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1241:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1242:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1243:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1244:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1245:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1246:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1247:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1248:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1249:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1250:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1251:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1252:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1253:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1254:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1255:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1256:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1257:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1258:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1259:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1260:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1261:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1262:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1263:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1264:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1265:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1266:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1267:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1268:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1269:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1270:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1271:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1272:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1273:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1274:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1275:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1276:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1277:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1278:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1279:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1280:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1281:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1282:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_MPU */
1283:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
1284:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1285:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1286:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #if (__FPU_PRESENT == 1U)
1287:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1288:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
1289:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1290:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1291:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
1292:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1293:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1294:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1295:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1296:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1297:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
1298:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
1299:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED0[1U];
1300:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1301:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1302:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1303:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1304:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1305:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** } FPU_Type;
1306:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1307:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1308:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1309:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1310:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1311:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1312:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1313:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1314:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1315:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1316:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1317:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1318:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1319:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1320:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1321:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1322:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1323:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1324:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1325:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1326:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1327:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1328:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1329:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1330:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1331:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1332:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1333:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1334:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1335:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1336:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1337:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1338:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1339:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1340:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1341:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1342:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1343:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1344:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1345:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1346:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1347:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1348:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1349:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1350:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1351:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1352:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1353:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1354:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1355:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1356:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1357:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1358:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1359:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1360:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1361:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1362:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1363:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1364:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1365:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1366:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1367:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1368:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1369:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1370:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1371:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1372:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1373:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1374:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1375:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1376:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1377:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1378:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1379:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1380:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1381:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1382:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1383:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1384:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1385:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1386:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1387:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1388:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1389:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1390:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_FPU */
1391:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
1392:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1393:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1394:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1395:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
1396:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1397:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1398:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
1399:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1400:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1401:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1402:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1403:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1404:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
1405:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
1406:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1407:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1408:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1409:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1410:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** } CoreDebug_Type;
1411:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1412:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1413:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1414:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1415:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1416:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1417:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1418:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1419:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1420:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1421:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1422:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1423:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1424:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1425:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1426:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1427:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1428:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1429:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1430:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1431:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1432:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1433:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1434:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1435:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1436:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1437:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1438:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1439:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1440:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1441:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1442:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1443:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1444:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1445:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1446:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1447:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1448:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1449:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1450:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1451:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1452:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1453:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1454:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1455:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1456:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1457:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1458:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1459:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1460:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1461:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1462:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1463:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1464:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1465:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1466:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1467:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1468:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1469:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1470:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1471:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1472:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1473:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1474:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1475:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1476:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1477:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1478:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1479:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1480:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1481:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1482:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1483:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1484:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1485:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1486:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1487:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1488:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1489:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1490:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1491:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1492:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1493:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1494:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1495:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1496:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1497:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1498:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1499:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1500:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup    CMSIS_core_register
1501:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1502:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1503:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
1504:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1505:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1506:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1507:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1508:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \param[in] field  Name of the register bit field.
1509:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \param[in] value  Value of the bit field.
1510:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \return           Masked and shifted value.
1511:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** */
1512:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
1513:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1514:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1515:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1516:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \param[in] field  Name of the register bit field.
1517:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \param[in] value  Value of register.
1518:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \return           Masked and shifted bit field value.
1519:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** */
1520:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
1521:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1522:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1523:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1524:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1525:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1526:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup    CMSIS_core_register
1527:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1528:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1529:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
1530:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1531:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1532:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
1533:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1534:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1535:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1536:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1537:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1538:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1539:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1540:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1541:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1542:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1543:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1544:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1545:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1546:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1547:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1548:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1549:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1550:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1551:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #if (__MPU_PRESENT == 1U)
1552:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1553:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1554:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
1555:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1556:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #if (__FPU_PRESENT == 1U)
1557:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1558:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1559:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
1560:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1561:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} */
1562:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1563:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1564:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1565:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /*******************************************************************************
1566:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  *                Hardware Abstraction Layer
1567:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   Core Function Interface contains:
1568:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core NVIC Functions
1569:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core SysTick Functions
1570:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core Debug Functions
1571:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core Register Access Functions
1572:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  ******************************************************************************/
1573:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1574:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1575:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** */
1576:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1577:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1578:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1579:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1580:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1581:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1582:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1583:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1584:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
1585:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1586:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1587:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1588:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Set Priority Grouping
1589:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1590:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1591:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****            Only values from 0..7 are used.
1592:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****            In case of a conflict between priority grouping and available
1593:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1594:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1595:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1596:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1597:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
1598:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t reg_value;
1599:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1600:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1601:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1602:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1603:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   reg_value  =  (reg_value                                   |
1604:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1605:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1606:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   SCB->AIRCR =  reg_value;
1607:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** }
1608:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1609:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1610:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1611:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Get Priority Grouping
1612:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1613:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1614:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1615:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1616:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
  26              		.loc 1 1616 1
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 00AF     		add	r7, sp, #0
  36              	.LCFI1:
  37              		.cfi_def_cfa_register 7
1617:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
  38              		.loc 1 1617 26
  39 0004 044B     		ldr	r3, .L3
  40 0006 DB68     		ldr	r3, [r3, #12]
  41              		.loc 1 1617 11
  42 0008 1B0A     		lsrs	r3, r3, #8
  43 000a 03F00703 		and	r3, r3, #7
1618:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** }
  44              		.loc 1 1618 1
  45 000e 1846     		mov	r0, r3
  46 0010 BD46     		mov	sp, r7
  47              	.LCFI2:
  48              		.cfi_def_cfa_register 13
  49              		@ sp needed
  50 0012 80BC     		pop	{r7}
  51              	.LCFI3:
  52              		.cfi_restore 7
  53              		.cfi_def_cfa_offset 0
  54 0014 7047     		bx	lr
  55              	.L4:
  56 0016 00BF     		.align	2
  57              	.L3:
  58 0018 00ED00E0 		.word	-536810240
  59              		.cfi_endproc
  60              	.LFE107:
  62              		.section	.text.NVIC_SetPriority,"ax",%progbits
  63              		.align	1
  64              		.syntax unified
  65              		.thumb
  66              		.thumb_func
  67              		.fpu softvfp
  69              	NVIC_SetPriority:
  70              	.LFB114:
1619:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1620:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1621:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1622:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Enable External Interrupt
1623:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
1624:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1625:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1626:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1627:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
1628:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1629:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** }
1630:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1631:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1632:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1633:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Disable External Interrupt
1634:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
1635:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1636:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1637:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1638:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
1639:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1640:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** }
1641:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1642:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1643:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1644:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Get Pending Interrupt
1645:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
1646:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1647:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \return             0  Interrupt status is not pending.
1648:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \return             1  Interrupt status is pending.
1649:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1650:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1651:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
1652:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1653:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** }
1654:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1655:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1656:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1657:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Set Pending Interrupt
1658:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Sets the pending bit of an external interrupt.
1659:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
1660:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1661:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1662:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
1663:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1664:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** }
1665:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1666:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1667:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1668:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Clear Pending Interrupt
1669:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Clears the pending bit of an external interrupt.
1670:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1671:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1672:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1673:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
1674:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1675:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** }
1676:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1677:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1678:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1679:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Get Active Interrupt
1680:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Reads the active register in NVIC and returns the active bit.
1681:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1682:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \return             0  Interrupt status is not active.
1683:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \return             1  Interrupt status is active.
1684:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1685:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1686:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
1687:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1688:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** }
1689:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1690:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1691:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1692:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Set Interrupt Priority
1693:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Sets the priority of an interrupt.
1694:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \note    The priority cannot be set for every core interrupt.
1695:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1696:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]  priority  Priority to set.
1697:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1698:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1699:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
  71              		.loc 1 1699 1
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 8
  74              		@ frame_needed = 1, uses_anonymous_args = 0
  75              		@ link register save eliminated.
  76 0000 80B4     		push	{r7}
  77              	.LCFI4:
  78              		.cfi_def_cfa_offset 4
  79              		.cfi_offset 7, -4
  80 0002 83B0     		sub	sp, sp, #12
  81              	.LCFI5:
  82              		.cfi_def_cfa_offset 16
  83 0004 00AF     		add	r7, sp, #0
  84              	.LCFI6:
  85              		.cfi_def_cfa_register 7
  86 0006 0346     		mov	r3, r0
  87 0008 3960     		str	r1, [r7]
  88 000a FB71     		strb	r3, [r7, #7]
1700:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   if ((int32_t)(IRQn) < 0)
  89              		.loc 1 1700 6
  90 000c 97F90730 		ldrsb	r3, [r7, #7]
  91 0010 002B     		cmp	r3, #0
  92 0012 0BDA     		bge	.L6
1701:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   {
1702:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
  93              		.loc 1 1702 57
  94 0014 3B68     		ldr	r3, [r7]
  95 0016 DAB2     		uxtb	r2, r3
  96              		.loc 1 1702 8
  97 0018 0C49     		ldr	r1, .L9
  98              		.loc 1 1702 41
  99 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 100 001c 03F00F03 		and	r3, r3, #15
 101              		.loc 1 1702 49
 102 0020 043B     		subs	r3, r3, #4
 103              		.loc 1 1702 57
 104 0022 1201     		lsls	r2, r2, #4
 105 0024 D2B2     		uxtb	r2, r2
 106              		.loc 1 1702 55
 107 0026 0B44     		add	r3, r3, r1
 108 0028 1A76     		strb	r2, [r3, #24]
1703:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   }
1704:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   else
1705:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   {
1706:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
1707:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   }
1708:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** }
 109              		.loc 1 1708 1
 110 002a 09E0     		b	.L8
 111              	.L6:
1706:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   }
 112              		.loc 1 1706 57
 113 002c 3B68     		ldr	r3, [r7]
 114 002e DAB2     		uxtb	r2, r3
1706:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   }
 115              		.loc 1 1706 9
 116 0030 0749     		ldr	r1, .L9+4
1706:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   }
 117              		.loc 1 1706 15
 118 0032 97F90730 		ldrsb	r3, [r7, #7]
1706:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   }
 119              		.loc 1 1706 57
 120 0036 1201     		lsls	r2, r2, #4
 121 0038 D2B2     		uxtb	r2, r2
1706:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   }
 122              		.loc 1 1706 55
 123 003a 0B44     		add	r3, r3, r1
 124 003c 83F80023 		strb	r2, [r3, #768]
 125              	.L8:
 126              		.loc 1 1708 1
 127 0040 00BF     		nop
 128 0042 0C37     		adds	r7, r7, #12
 129              	.LCFI7:
 130              		.cfi_def_cfa_offset 4
 131 0044 BD46     		mov	sp, r7
 132              	.LCFI8:
 133              		.cfi_def_cfa_register 13
 134              		@ sp needed
 135 0046 80BC     		pop	{r7}
 136              	.LCFI9:
 137              		.cfi_restore 7
 138              		.cfi_def_cfa_offset 0
 139 0048 7047     		bx	lr
 140              	.L10:
 141 004a 00BF     		.align	2
 142              	.L9:
 143 004c 00ED00E0 		.word	-536810240
 144 0050 00E100E0 		.word	-536813312
 145              		.cfi_endproc
 146              	.LFE114:
 148              		.section	.text.NVIC_EncodePriority,"ax",%progbits
 149              		.align	1
 150              		.syntax unified
 151              		.thumb
 152              		.thumb_func
 153              		.fpu softvfp
 155              	NVIC_EncodePriority:
 156              	.LFB116:
1709:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1710:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1711:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1712:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Get Interrupt Priority
1713:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Reads the priority of an interrupt.
1714:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
1715:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****            or negative to specify an internal (core) interrupt.
1716:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]   IRQn  Interrupt number.
1717:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \return             Interrupt Priority.
1718:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1719:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1720:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1721:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
1722:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1723:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   if ((int32_t)(IRQn) < 0)
1724:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   {
1725:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS))
1726:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   }
1727:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   else
1728:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   {
1729:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****     return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS))
1730:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   }
1731:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** }
1732:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1733:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1734:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1735:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Encode Priority
1736:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Encodes the priority for an interrupt with the given priority group,
1737:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****            preemptive priority value, and subpriority value.
1738:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****            In case of a conflict between priority grouping and available
1739:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1740:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]     PriorityGroup  Used priority group.
1741:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1742:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1743:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1744:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1745:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1746:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** {
 157              		.loc 1 1746 1
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 32
 160              		@ frame_needed = 1, uses_anonymous_args = 0
 161              		@ link register save eliminated.
 162 0000 80B4     		push	{r7}
 163              	.LCFI10:
 164              		.cfi_def_cfa_offset 4
 165              		.cfi_offset 7, -4
 166 0002 89B0     		sub	sp, sp, #36
 167              	.LCFI11:
 168              		.cfi_def_cfa_offset 40
 169 0004 00AF     		add	r7, sp, #0
 170              	.LCFI12:
 171              		.cfi_def_cfa_register 7
 172 0006 F860     		str	r0, [r7, #12]
 173 0008 B960     		str	r1, [r7, #8]
 174 000a 7A60     		str	r2, [r7, #4]
1747:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 175              		.loc 1 1747 12
 176 000c FB68     		ldr	r3, [r7, #12]
 177 000e 03F00703 		and	r3, r3, #7
 178 0012 FB61     		str	r3, [r7, #28]
1748:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t PreemptPriorityBits;
1749:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t SubPriorityBits;
1750:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1751:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 179              		.loc 1 1751 31
 180 0014 FB69     		ldr	r3, [r7, #28]
 181 0016 C3F10703 		rsb	r3, r3, #7
 182              		.loc 1 1751 23
 183 001a 042B     		cmp	r3, #4
 184 001c 28BF     		it	cs
 185 001e 0423     		movcs	r3, #4
 186 0020 BB61     		str	r3, [r7, #24]
1752:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 187              		.loc 1 1752 44
 188 0022 FB69     		ldr	r3, [r7, #28]
 189 0024 0433     		adds	r3, r3, #4
 190              		.loc 1 1752 109
 191 0026 062B     		cmp	r3, #6
 192 0028 02D9     		bls	.L12
 193              		.loc 1 1752 109 is_stmt 0 discriminator 1
 194 002a FB69     		ldr	r3, [r7, #28]
 195 002c 033B     		subs	r3, r3, #3
 196 002e 00E0     		b	.L13
 197              	.L12:
 198              		.loc 1 1752 109 discriminator 2
 199 0030 0023     		movs	r3, #0
 200              	.L13:
 201              		.loc 1 1752 23 is_stmt 1 discriminator 4
 202 0032 7B61     		str	r3, [r7, #20]
1753:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** 
1754:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****   return (
1755:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 203              		.loc 1 1755 30 discriminator 4
 204 0034 4FF0FF32 		mov	r2, #-1
 205 0038 BB69     		ldr	r3, [r7, #24]
 206 003a 02FA03F3 		lsl	r3, r2, r3
 207 003e DA43     		mvns	r2, r3
 208 0040 BB68     		ldr	r3, [r7, #8]
 209 0042 1A40     		ands	r2, r2, r3
 210              		.loc 1 1755 82 discriminator 4
 211 0044 7B69     		ldr	r3, [r7, #20]
 212 0046 9A40     		lsls	r2, r2, r3
1756:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 213              		.loc 1 1756 30 discriminator 4
 214 0048 4FF0FF31 		mov	r1, #-1
 215 004c 7B69     		ldr	r3, [r7, #20]
 216 004e 01FA03F3 		lsl	r3, r1, r3
 217 0052 D943     		mvns	r1, r3
 218 0054 7B68     		ldr	r3, [r7, #4]
 219 0056 0B40     		ands	r3, r3, r1
1755:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 220              		.loc 1 1755 102 discriminator 4
 221 0058 1343     		orrs	r3, r3, r2
1757:../base/./hal/stm32f3/CMSIS/core/core_cm4.h ****          );
1758:../base/./hal/stm32f3/CMSIS/core/core_cm4.h **** }
 222              		.loc 1 1758 1 discriminator 4
 223 005a 1846     		mov	r0, r3
 224 005c 2437     		adds	r7, r7, #36
 225              	.LCFI13:
 226              		.cfi_def_cfa_offset 4
 227 005e BD46     		mov	sp, r7
 228              	.LCFI14:
 229              		.cfi_def_cfa_register 13
 230              		@ sp needed
 231 0060 80BC     		pop	{r7}
 232              	.LCFI15:
 233              		.cfi_restore 7
 234              		.cfi_def_cfa_offset 0
 235 0062 7047     		bx	lr
 236              		.cfi_endproc
 237              	.LFE116:
 239              		.global	hal_sys_tick
 240              		.bss
 241              		.align	2
 244              	hal_sys_tick:
 245 0000 00000000 		.space	4
 246              		.global	uwTick
 247              		.align	2
 250              	uwTick:
 251 0004 00000000 		.space	4
 252              		.global	SystemCoreClock
 253              		.data
 254              		.align	2
 257              	SystemCoreClock:
 258 0000 00127A00 		.word	8000000
 259              		.section	.text.HAL_NVIC_SetPriority,"ax",%progbits
 260              		.align	1
 261              		.global	HAL_NVIC_SetPriority
 262              		.syntax unified
 263              		.thumb
 264              		.thumb_func
 265              		.fpu softvfp
 267              	HAL_NVIC_SetPriority:
 268              	.LFB126:
 269              		.file 2 "../base/./hal/stm32f3/stm32f3_hal_lowlevel.c"
   1:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** /* This file combines several STM32F4 HAL Functions into one file. This was done
   2:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****    for space reasons, to avoid having several MB of HAL functions that most people
   3:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****    will not use. In addition this HAL is slightly less demanding (no interrupts),
   4:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****    but less robust as doesn't implement the timeouts.
   5:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****    
   6:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****    The original HAL files are COPYRIGHT STMicroelectronics, as shown below:
   7:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** */
   8:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
   9:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** /*
  10:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * COPYRIGHT(c) 2017 STMicroelectronics
  11:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
  12:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * Redistribution and use in source and binary forms, with or without modification,
  13:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * are permitted provided that the following conditions are met:
  14:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  15:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *      this list of conditions and the following disclaimer.
  16:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  17:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *      this list of conditions and the following disclaimer in the documentation
  18:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *      and/or other materials provided with the distribution.
  19:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  20:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *      may be used to endorse or promote products derived from this software
  21:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *      without specific prior written permission.
  22:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
  23:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  24:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  25:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  27:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  28:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  29:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  30:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  31:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  32:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
  34:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   ******************************************************************************
  35:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** */ 
  36:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  37:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  38:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3_hal.h"
  39:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3_hal_lowlevel.h"
  40:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_rcc.h"
  41:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_gpio.h"
  42:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_dma.h"
  43:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_uart.h"
  44:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_flash.h"
  45:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_cortex.h"
  46:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  47:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #define assert_param(expr) ((void)0U)
  48:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t hal_sys_tick = 0;
  49:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t uwTick = 0;
  50:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t SystemCoreClock = 8000000U;
  51:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  52:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
  53:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 270              		.loc 2 53 1
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 24
 273              		@ frame_needed = 1, uses_anonymous_args = 0
 274 0000 80B5     		push	{r7, lr}
 275              	.LCFI16:
 276              		.cfi_def_cfa_offset 8
 277              		.cfi_offset 7, -8
 278              		.cfi_offset 14, -4
 279 0002 86B0     		sub	sp, sp, #24
 280              	.LCFI17:
 281              		.cfi_def_cfa_offset 32
 282 0004 00AF     		add	r7, sp, #0
 283              	.LCFI18:
 284              		.cfi_def_cfa_register 7
 285 0006 0346     		mov	r3, r0
 286 0008 B960     		str	r1, [r7, #8]
 287 000a 7A60     		str	r2, [r7, #4]
 288 000c FB73     		strb	r3, [r7, #15]
  54:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t prioritygroup = 0x00U;
 289              		.loc 2 54 12
 290 000e 0023     		movs	r3, #0
 291 0010 7B61     		str	r3, [r7, #20]
  55:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   
  56:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
  57:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  58:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  59:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   
  60:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   prioritygroup = NVIC_GetPriorityGrouping();
 292              		.loc 2 60 19
 293 0012 FFF7FEFF 		bl	NVIC_GetPriorityGrouping
 294 0016 7861     		str	r0, [r7, #20]
  61:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   
  62:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 295              		.loc 2 62 3
 296 0018 7A68     		ldr	r2, [r7, #4]
 297 001a B968     		ldr	r1, [r7, #8]
 298 001c 7869     		ldr	r0, [r7, #20]
 299 001e FFF7FEFF 		bl	NVIC_EncodePriority
 300 0022 0246     		mov	r2, r0
 301 0024 97F90F30 		ldrsb	r3, [r7, #15]
 302 0028 1146     		mov	r1, r2
 303 002a 1846     		mov	r0, r3
 304 002c FFF7FEFF 		bl	NVIC_SetPriority
  63:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 305              		.loc 2 63 1
 306 0030 00BF     		nop
 307 0032 1837     		adds	r7, r7, #24
 308              	.LCFI19:
 309              		.cfi_def_cfa_offset 8
 310 0034 BD46     		mov	sp, r7
 311              	.LCFI20:
 312              		.cfi_def_cfa_register 13
 313              		@ sp needed
 314 0036 80BD     		pop	{r7, pc}
 315              		.cfi_endproc
 316              	.LFE126:
 318              		.section	.text.HAL_InitTick,"ax",%progbits
 319              		.align	1
 320              		.global	HAL_InitTick
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 324              		.fpu softvfp
 326              	HAL_InitTick:
 327              	.LFB127:
  64:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  65:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #ifndef ENABLE_TICK_TIMING
  66:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
  67:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 328              		.loc 2 67 1
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 8
 331              		@ frame_needed = 1, uses_anonymous_args = 0
 332              		@ link register save eliminated.
 333 0000 80B4     		push	{r7}
 334              	.LCFI21:
 335              		.cfi_def_cfa_offset 4
 336              		.cfi_offset 7, -4
 337 0002 83B0     		sub	sp, sp, #12
 338              	.LCFI22:
 339              		.cfi_def_cfa_offset 16
 340 0004 00AF     		add	r7, sp, #0
 341              	.LCFI23:
 342              		.cfi_def_cfa_register 7
 343 0006 7860     		str	r0, [r7, #4]
  68:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 	hal_sys_tick = 0;
 344              		.loc 2 68 15
 345 0008 044B     		ldr	r3, .L18
 346 000a 0022     		movs	r2, #0
 347 000c 1A60     		str	r2, [r3]
  69:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 	return HAL_OK;
 348              		.loc 2 69 9
 349 000e 0023     		movs	r3, #0
  70:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 350              		.loc 2 70 1
 351 0010 1846     		mov	r0, r3
 352 0012 0C37     		adds	r7, r7, #12
 353              	.LCFI24:
 354              		.cfi_def_cfa_offset 4
 355 0014 BD46     		mov	sp, r7
 356              	.LCFI25:
 357              		.cfi_def_cfa_register 13
 358              		@ sp needed
 359 0016 80BC     		pop	{r7}
 360              	.LCFI26:
 361              		.cfi_restore 7
 362              		.cfi_def_cfa_offset 0
 363 0018 7047     		bx	lr
 364              	.L19:
 365 001a 00BF     		.align	2
 366              	.L18:
 367 001c 00000000 		.word	hal_sys_tick
 368              		.cfi_endproc
 369              	.LFE127:
 371              		.section	.text.HAL_GetTick,"ax",%progbits
 372              		.align	1
 373              		.global	HAL_GetTick
 374              		.syntax unified
 375              		.thumb
 376              		.thumb_func
 377              		.fpu softvfp
 379              	HAL_GetTick:
 380              	.LFB128:
  71:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t HAL_GetTick(void)
  72:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 381              		.loc 2 72 1
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 1, uses_anonymous_args = 0
 385              		@ link register save eliminated.
 386 0000 80B4     		push	{r7}
 387              	.LCFI27:
 388              		.cfi_def_cfa_offset 4
 389              		.cfi_offset 7, -4
 390 0002 00AF     		add	r7, sp, #0
 391              	.LCFI28:
 392              		.cfi_def_cfa_register 7
  73:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 	return hal_sys_tick++;
 393              		.loc 2 73 21
 394 0004 044B     		ldr	r3, .L22
 395 0006 1B68     		ldr	r3, [r3]
 396 0008 5A1C     		adds	r2, r3, #1
 397 000a 0349     		ldr	r1, .L22
 398 000c 0A60     		str	r2, [r1]
  74:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 399              		.loc 2 74 1
 400 000e 1846     		mov	r0, r3
 401 0010 BD46     		mov	sp, r7
 402              	.LCFI29:
 403              		.cfi_def_cfa_register 13
 404              		@ sp needed
 405 0012 80BC     		pop	{r7}
 406              	.LCFI30:
 407              		.cfi_restore 7
 408              		.cfi_def_cfa_offset 0
 409 0014 7047     		bx	lr
 410              	.L23:
 411 0016 00BF     		.align	2
 412              	.L22:
 413 0018 00000000 		.word	hal_sys_tick
 414              		.cfi_endproc
 415              	.LFE128:
 417              		.section	.text.HAL_IncTick,"ax",%progbits
 418              		.align	1
 419              		.global	HAL_IncTick
 420              		.syntax unified
 421              		.thumb
 422              		.thumb_func
 423              		.fpu softvfp
 425              	HAL_IncTick:
 426              	.LFB129:
  75:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** void HAL_IncTick(void)
  76:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 427              		.loc 2 76 1
 428              		.cfi_startproc
 429              		@ args = 0, pretend = 0, frame = 0
 430              		@ frame_needed = 1, uses_anonymous_args = 0
 431              		@ link register save eliminated.
 432 0000 80B4     		push	{r7}
 433              	.LCFI31:
 434              		.cfi_def_cfa_offset 4
 435              		.cfi_offset 7, -4
 436 0002 00AF     		add	r7, sp, #0
 437              	.LCFI32:
 438              		.cfi_def_cfa_register 7
  77:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 439              		.loc 2 77 1
 440 0004 00BF     		nop
 441 0006 BD46     		mov	sp, r7
 442              	.LCFI33:
 443              		.cfi_def_cfa_register 13
 444              		@ sp needed
 445 0008 80BC     		pop	{r7}
 446              	.LCFI34:
 447              		.cfi_restore 7
 448              		.cfi_def_cfa_offset 0
 449 000a 7047     		bx	lr
 450              		.cfi_endproc
 451              	.LFE129:
 453              		.section	.text.HAL_RCC_GetSysClockFreq,"ax",%progbits
 454              		.align	1
 455              		.global	HAL_RCC_GetSysClockFreq
 456              		.syntax unified
 457              		.thumb
 458              		.thumb_func
 459              		.fpu softvfp
 461              	HAL_RCC_GetSysClockFreq:
 462              	.LFB130:
  78:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #else
  79:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
  80:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** {
  81:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*Configure the SysTick to have interrupt in 1ms time basis*/
  82:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   HAL_SYSTICK_Config(SystemCoreClock / 1000U);
  83:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  84:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*Configure the SysTick IRQ priority */
  85:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
  86:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  87:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****    /* Return function status */
  88:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   return HAL_OK;
  89:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** }
  90:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** __weak uint32_t HAL_GetTick(void)
  91:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** {
  92:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   return uwTick;
  93:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** }
  94:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  95:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** __weak void HAL_IncTick(void)
  96:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** {
  97:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   uwTick++;
  98:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** }
  99:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #endif
 100:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 101:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #define RCC_CFGR_HPRE_BITNUMBER           POSITION_VAL(RCC_CFGR_HPRE)
 102:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 103:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #define UART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
 104:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****                                      USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8)) /*!< UART or U
 105:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 106:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t HAL_RCC_GetSysClockFreq(void)
 107:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 463              		.loc 2 107 1
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 0
 466              		@ frame_needed = 1, uses_anonymous_args = 0
 467              		@ link register save eliminated.
 468 0000 80B4     		push	{r7}
 469              	.LCFI35:
 470              		.cfi_def_cfa_offset 4
 471              		.cfi_offset 7, -4
 472 0002 00AF     		add	r7, sp, #0
 473              	.LCFI36:
 474              		.cfi_def_cfa_register 7
 108:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 	return F_CPU;
 475              		.loc 2 108 9
 476 0004 4FF4E103 		mov	r3, #7372800
 109:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 477              		.loc 2 109 1
 478 0008 1846     		mov	r0, r3
 479 000a BD46     		mov	sp, r7
 480              	.LCFI37:
 481              		.cfi_def_cfa_register 13
 482              		@ sp needed
 483 000c 80BC     		pop	{r7}
 484              	.LCFI38:
 485              		.cfi_restore 7
 486              		.cfi_def_cfa_offset 0
 487 000e 7047     		bx	lr
 488              		.cfi_endproc
 489              	.LFE130:
 491              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
 492              		.align	1
 493              		.global	HAL_RCC_GetPCLK1Freq
 494              		.syntax unified
 495              		.thumb
 496              		.thumb_func
 497              		.fpu softvfp
 499              	HAL_RCC_GetPCLK1Freq:
 500              	.LFB131:
 110:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 111:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
 112:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 501              		.loc 2 112 1
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 0
 504              		@ frame_needed = 1, uses_anonymous_args = 0
 505              		@ link register save eliminated.
 506 0000 80B4     		push	{r7}
 507              	.LCFI39:
 508              		.cfi_def_cfa_offset 4
 509              		.cfi_offset 7, -4
 510 0002 00AF     		add	r7, sp, #0
 511              	.LCFI40:
 512              		.cfi_def_cfa_register 7
 113:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 	return F_CPU;
 513              		.loc 2 113 9
 514 0004 4FF4E103 		mov	r3, #7372800
 114:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 515              		.loc 2 114 1
 516 0008 1846     		mov	r0, r3
 517 000a BD46     		mov	sp, r7
 518              	.LCFI41:
 519              		.cfi_def_cfa_register 13
 520              		@ sp needed
 521 000c 80BC     		pop	{r7}
 522              	.LCFI42:
 523              		.cfi_restore 7
 524              		.cfi_def_cfa_offset 0
 525 000e 7047     		bx	lr
 526              		.cfi_endproc
 527              	.LFE131:
 529              		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
 530              		.align	1
 531              		.global	HAL_RCC_OscConfig
 532              		.syntax unified
 533              		.thumb
 534              		.thumb_func
 535              		.fpu softvfp
 537              	HAL_RCC_OscConfig:
 538              	.LFB132:
 115:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 116:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 117:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
 118:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         RCC_OscInitTypeDef.
 119:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
 120:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         contains the configuration information for the RCC Oscillators.
 121:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   The PLL is not disabled when used as system clock.
 122:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not
 123:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         supported by this macro. User should request a transition to LSE Off
 124:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         first and then LSE On or LSE Bypass.
 125:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 126:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         supported by this macro. User should request a transition to HSE Off
 127:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         first and then HSE On or HSE Bypass.
 128:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
 129:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 130:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 131:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 539              		.loc 2 131 1
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 512
 542              		@ frame_needed = 1, uses_anonymous_args = 0
 543 0000 80B5     		push	{r7, lr}
 544              	.LCFI43:
 545              		.cfi_def_cfa_offset 8
 546              		.cfi_offset 7, -8
 547              		.cfi_offset 14, -4
 548 0002 ADF5007D 		sub	sp, sp, #512
 549              	.LCFI44:
 550              		.cfi_def_cfa_offset 520
 551 0006 00AF     		add	r7, sp, #0
 552              	.LCFI45:
 553              		.cfi_def_cfa_register 7
 554 0008 07F50073 		add	r3, r7, #512
 555 000c A3F5FE73 		sub	r3, r3, #508
 556 0010 1860     		str	r0, [r3]
 132:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****    uint32_t tickstart = 0U;
 557              		.loc 2 132 13
 558 0012 0023     		movs	r3, #0
 559 0014 C7F8F831 		str	r3, [r7, #504]
 133:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 134:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 135:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(RCC_OscInitStruct != NULL);
 136:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 137:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 138:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*------------------------------- HSE Configuration ------------------------*/ 
 139:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 560              		.loc 2 139 25
 561 0018 07F50073 		add	r3, r7, #512
 562 001c A3F5FE73 		sub	r3, r3, #508
 563 0020 1B68     		ldr	r3, [r3]
 564 0022 1B68     		ldr	r3, [r3]
 565              		.loc 2 139 43
 566 0024 03F00103 		and	r3, r3, #1
 567              		.loc 2 139 5
 568 0028 002B     		cmp	r3, #0
 569 002a 00F08081 		beq	.L30
 140:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 141:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 142:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 143:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 144:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowe
 145:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 570              		.loc 2 145 9
 571 002e BE4B     		ldr	r3, .L167
 572 0030 5B68     		ldr	r3, [r3, #4]
 573 0032 03F00C03 		and	r3, r3, #12
 574              		.loc 2 145 7
 575 0036 042B     		cmp	r3, #4
 576 0038 0CD0     		beq	.L31
 146:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 577              		.loc 2 146 13
 578 003a BB4B     		ldr	r3, .L167
 579 003c 5B68     		ldr	r3, [r3, #4]
 580 003e 03F00C03 		and	r3, r3, #12
 581              		.loc 2 146 8
 582 0042 082B     		cmp	r3, #8
 583 0044 5DD1     		bne	.L32
 584              		.loc 2 146 82 discriminator 1
 585 0046 B84B     		ldr	r3, .L167
 586 0048 5B68     		ldr	r3, [r3, #4]
 587 004a 03F48033 		and	r3, r3, #65536
 588              		.loc 2 146 78 discriminator 1
 589 004e B3F5803F 		cmp	r3, #65536
 590 0052 56D1     		bne	.L32
 591              	.L31:
 592 0054 4FF40033 		mov	r3, #131072
 593 0058 C7F8F431 		str	r3, [r7, #500]
 594              	.LBB150:
 595              	.LBB151:
 596              		.file 3 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h"
   1:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**************************************************************************//**
   2:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * @version  V4.30
   5:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * @date     20. October 2015
   6:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  ******************************************************************************/
   7:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
   9:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    All rights reserved.
  10:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****      specific prior written permission.
  20:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    *
  21:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  34:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  35:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  38:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
  45:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  46:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  47:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   @{
  51:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
  52:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  53:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
  54:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
  58:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
  60:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
  62:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  63:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  64:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
  65:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
  69:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
  71:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
  73:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  74:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  75:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
  76:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Control Register
  77:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Control Register value
  79:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
  80:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
  82:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
  83:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  84:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
  86:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
  87:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  88:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  89:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
  90:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Control Register
  91:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
  94:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
  96:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
  98:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  99:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 100:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 101:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               IPSR Register value
 104:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 105:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 107:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 108:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 109:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 111:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 112:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 113:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 114:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 115:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get APSR Register
 116:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               APSR Register value
 118:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 119:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 121:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 122:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 123:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 125:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 126:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 127:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 128:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 129:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 132:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     \return               xPSR Register value
 133:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 134:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 136:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 137:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 138:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 140:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 141:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 142:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 143:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 144:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               PSP Register value
 147:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 148:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 150:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   register uint32_t result;
 151:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 152:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 154:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 155:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 156:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 157:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 158:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 162:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 164:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 166:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 167:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 168:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 169:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               MSP Register value
 172:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 173:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 175:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   register uint32_t result;
 176:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 177:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 179:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 180:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 181:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 182:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 183:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 186:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 188:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 190:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 192:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 193:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 194:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 195:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Priority Mask value
 198:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 199:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 201:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 202:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 203:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 205:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 206:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 207:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 208:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 209:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 213:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 215:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 217:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 218:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 219:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 221:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 222:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Enable FIQ
 223:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 226:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 228:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 230:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 231:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 232:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 233:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Disable FIQ
 234:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 237:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 239:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 241:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 242:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 243:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 244:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Base Priority
 245:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Base Priority register value
 247:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 248:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 250:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 251:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 252:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 254:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 255:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 256:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 257:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 258:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Base Priority
 259:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 262:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 264:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 266:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 267:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 268:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 269:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 274:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 276:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 278:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 279:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 280:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 281:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Fault Mask register value
 284:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 285:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 287:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 288:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 289:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 291:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 292:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 293:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 294:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 295:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 299:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 301:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 303:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 304:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 306:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 307:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 309:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 310:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get FPSCR
 311:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 314:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 316:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 318:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 319:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("");
 321:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("");
 323:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 324:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 325:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    return(0);
 326:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 327:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 328:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 329:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 330:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 331:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set FPSCR
 332:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 335:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 337:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("");
 340:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("");
 342:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 343:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 344:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 345:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 347:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 348:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 349:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 351:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 352:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   Access to dedicated instructions
 355:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   @{
 356:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** */
 357:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 358:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 365:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 368:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 369:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 370:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   No Operation
 371:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 373:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 375:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 377:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 378:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 379:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 380:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 383:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 385:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 387:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 388:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 389:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 390:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Wait For Event
 391:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 394:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 396:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 398:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 399:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 400:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 401:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Send Event
 402:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 404:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 406:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 408:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 409:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 410:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 411:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            after the instruction has been completed.
 415:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 416:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 418:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 420:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 421:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 422:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 423:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 427:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 429:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 431:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 432:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 433:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 434:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 438:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 440:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 442:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 443:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 444:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 445:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Reversed value
 449:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 450:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 452:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 455:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 456:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 457:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 459:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 460:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 461:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 462:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 463:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 464:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Reversed value
 468:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 469:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 471:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 472:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 473:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 475:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 476:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 477:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 478:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 479:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Reversed value
 483:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 484:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 486:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 489:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   int32_t result;
 490:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 491:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 493:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 494:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 495:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 496:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 497:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 498:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Rotated value
 503:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 504:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 506:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 508:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 509:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 510:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 511:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Breakpoint
 512:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 517:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 519:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 520:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 521:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Reversed value
 525:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 526:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 528:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 529:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 530:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 597              		.loc 3 531 4
 598 005c D7F8F431 		ldr	r3, [r7, #500]
 599              		.syntax unified
 600              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 601 0060 93FAA3F3 		rbit r3, r3
 602              	@ 0 "" 2
 603              		.thumb
 604              		.syntax unified
 605 0064 C7F8F031 		str	r3, [r7, #496]
 532:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 533:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; /* extra shift needed at end */
 534:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 535:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 536:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   for (value >>= 1U; value; value >>= 1U)
 537:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   {
 538:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     result <<= 1U;
 539:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     result |= value & 1U;
 540:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     s--;
 541:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   }
 542:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 543:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 544:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 606              		.loc 3 544 9
 607 0068 D7F8F031 		ldr	r3, [r7, #496]
 608              	.LBE151:
 609              	.LBE150:
 147:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 148:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_
 610              		.loc 2 148 11
 611 006c B3FA83F3 		clz	r3, r3
 612 0070 DBB2     		uxtb	r3, r3
 613 0072 5B09     		lsrs	r3, r3, #5
 614 0074 DBB2     		uxtb	r3, r3
 615 0076 43F00103 		orr	r3, r3, #1
 616 007a DBB2     		uxtb	r3, r3
 617 007c 012B     		cmp	r3, #1
 618 007e 02D1     		bne	.L34
 619              		.loc 2 148 11 is_stmt 0 discriminator 1
 620 0080 A94B     		ldr	r3, .L167
 621 0082 1B68     		ldr	r3, [r3]
 622 0084 15E0     		b	.L35
 623              	.L34:
 624 0086 4FF40033 		mov	r3, #131072
 625 008a C7F8EC31 		str	r3, [r7, #492]
 626              	.LBB152:
 627              	.LBB153:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 628              		.loc 3 531 4 is_stmt 1 discriminator 2
 629 008e D7F8EC31 		ldr	r3, [r7, #492]
 630              		.syntax unified
 631              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 632 0092 93FAA3F3 		rbit r3, r3
 633              	@ 0 "" 2
 634              		.thumb
 635              		.syntax unified
 636 0096 C7F8E831 		str	r3, [r7, #488]
 637 009a 4FF40033 		mov	r3, #131072
 638 009e C7F8E431 		str	r3, [r7, #484]
 639              	.LBE153:
 640              	.LBE152:
 641              	.LBB154:
 642              	.LBB155:
 643 00a2 D7F8E431 		ldr	r3, [r7, #484]
 644              		.syntax unified
 645              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 646 00a6 93FAA3F3 		rbit r3, r3
 647              	@ 0 "" 2
 648              		.thumb
 649              		.syntax unified
 650 00aa C7F8E031 		str	r3, [r7, #480]
 651              	.LBE155:
 652              	.LBE154:
 653              		.loc 2 148 11 discriminator 2
 654 00ae 9E4B     		ldr	r3, .L167
 655 00b0 5B6A     		ldr	r3, [r3, #36]
 656              	.L35:
 657 00b2 4FF40032 		mov	r2, #131072
 658 00b6 C7F8DC21 		str	r2, [r7, #476]
 659              	.LBB156:
 660              	.LBB157:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 661              		.loc 3 531 4 discriminator 12
 662 00ba D7F8DC21 		ldr	r2, [r7, #476]
 663              		.syntax unified
 664              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 665 00be 92FAA2F2 		rbit r2, r2
 666              	@ 0 "" 2
 667              		.thumb
 668              		.syntax unified
 669 00c2 C7F8D821 		str	r2, [r7, #472]
 670              		.loc 3 544 9 discriminator 12
 671 00c6 D7F8D821 		ldr	r2, [r7, #472]
 672              	.LBE157:
 673              	.LBE156:
 674              		.loc 2 148 11 discriminator 12
 675 00ca B2FA82F2 		clz	r2, r2
 676 00ce 52B2     		sxtb	r2, r2
 677 00d0 42F02002 		orr	r2, r2, #32
 678 00d4 52B2     		sxtb	r2, r2
 679 00d6 D2B2     		uxtb	r2, r2
 680 00d8 02F01F02 		and	r2, r2, #31
 681 00dc 0121     		movs	r1, #1
 682 00de 01FA02F2 		lsl	r2, r1, r2
 683 00e2 1340     		ands	r3, r3, r2
 684              		.loc 2 148 9 discriminator 12
 685 00e4 002B     		cmp	r3, #0
 686 00e6 00F02181 		beq	.L166
 687              		.loc 2 148 78 discriminator 13
 688 00ea 07F50073 		add	r3, r7, #512
 689 00ee A3F5FE73 		sub	r3, r3, #508
 690 00f2 1B68     		ldr	r3, [r3]
 691 00f4 5B68     		ldr	r3, [r3, #4]
 692              		.loc 2 148 57 discriminator 13
 693 00f6 002B     		cmp	r3, #0
 694 00f8 40F01881 		bne	.L166
 149:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 150:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_ERROR;
 695              		.loc 2 150 16
 696 00fc 0123     		movs	r3, #1
 697 00fe 00F087BF 		b	.L40
 698              	.L32:
 151:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 152:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 153:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 154:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 155:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Set the new HSE configuration ---------------------------------------*/
 156:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 699              		.loc 2 156 7
 700 0102 07F50073 		add	r3, r7, #512
 701 0106 A3F5FE73 		sub	r3, r3, #508
 702 010a 1B68     		ldr	r3, [r3]
 703 010c 5B68     		ldr	r3, [r3, #4]
 704 010e B3F5803F 		cmp	r3, #65536
 705 0112 06D1     		bne	.L41
 706              		.loc 2 156 7 is_stmt 0 discriminator 1
 707 0114 844B     		ldr	r3, .L167
 708 0116 1B68     		ldr	r3, [r3]
 709 0118 834A     		ldr	r2, .L167
 710 011a 43F48033 		orr	r3, r3, #65536
 711 011e 1360     		str	r3, [r2]
 712 0120 36E0     		b	.L42
 713              	.L41:
 714              		.loc 2 156 7 discriminator 2
 715 0122 07F50073 		add	r3, r7, #512
 716 0126 A3F5FE73 		sub	r3, r3, #508
 717 012a 1B68     		ldr	r3, [r3]
 718 012c 5B68     		ldr	r3, [r3, #4]
 719 012e 002B     		cmp	r3, #0
 720 0130 0CD1     		bne	.L43
 721              		.loc 2 156 7 discriminator 3
 722 0132 7D4B     		ldr	r3, .L167
 723 0134 1B68     		ldr	r3, [r3]
 724 0136 7C4A     		ldr	r2, .L167
 725 0138 23F48033 		bic	r3, r3, #65536
 726 013c 1360     		str	r3, [r2]
 727 013e 7A4B     		ldr	r3, .L167
 728 0140 1B68     		ldr	r3, [r3]
 729 0142 794A     		ldr	r2, .L167
 730 0144 23F48023 		bic	r3, r3, #262144
 731 0148 1360     		str	r3, [r2]
 732 014a 21E0     		b	.L42
 733              	.L43:
 734              		.loc 2 156 7 discriminator 4
 735 014c 07F50073 		add	r3, r7, #512
 736 0150 A3F5FE73 		sub	r3, r3, #508
 737 0154 1B68     		ldr	r3, [r3]
 738 0156 5B68     		ldr	r3, [r3, #4]
 739 0158 B3F5A02F 		cmp	r3, #327680
 740 015c 0CD1     		bne	.L44
 741              		.loc 2 156 7 discriminator 5
 742 015e 724B     		ldr	r3, .L167
 743 0160 1B68     		ldr	r3, [r3]
 744 0162 714A     		ldr	r2, .L167
 745 0164 43F48023 		orr	r3, r3, #262144
 746 0168 1360     		str	r3, [r2]
 747 016a 6F4B     		ldr	r3, .L167
 748 016c 1B68     		ldr	r3, [r3]
 749 016e 6E4A     		ldr	r2, .L167
 750 0170 43F48033 		orr	r3, r3, #65536
 751 0174 1360     		str	r3, [r2]
 752 0176 0BE0     		b	.L42
 753              	.L44:
 754              		.loc 2 156 7 discriminator 6
 755 0178 6B4B     		ldr	r3, .L167
 756 017a 1B68     		ldr	r3, [r3]
 757 017c 6A4A     		ldr	r2, .L167
 758 017e 23F48033 		bic	r3, r3, #65536
 759 0182 1360     		str	r3, [r2]
 760 0184 684B     		ldr	r3, .L167
 761 0186 1B68     		ldr	r3, [r3]
 762 0188 674A     		ldr	r2, .L167
 763 018a 23F48023 		bic	r3, r3, #262144
 764 018e 1360     		str	r3, [r2]
 765              	.L42:
 157:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 158:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
 159:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Configure the HSE predivision factor --------------------------------*/
 160:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 766              		.loc 2 160 7 is_stmt 1
 767 0190 654B     		ldr	r3, .L167
 768 0192 DB6A     		ldr	r3, [r3, #44]
 769 0194 23F00F02 		bic	r2, r3, #15
 770 0198 07F50073 		add	r3, r7, #512
 771 019c A3F5FE73 		sub	r3, r3, #508
 772 01a0 1B68     		ldr	r3, [r3]
 773 01a2 9B68     		ldr	r3, [r3, #8]
 774 01a4 6049     		ldr	r1, .L167
 775 01a6 1343     		orrs	r3, r3, r2
 776 01a8 CB62     		str	r3, [r1, #44]
 161:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
 162:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 163:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****        /* Check the HSE State */
 164:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 777              		.loc 2 164 27
 778 01aa 07F50073 		add	r3, r7, #512
 779 01ae A3F5FE73 		sub	r3, r3, #508
 780 01b2 1B68     		ldr	r3, [r3]
 781 01b4 5B68     		ldr	r3, [r3, #4]
 782              		.loc 2 164 9
 783 01b6 002B     		cmp	r3, #0
 784 01b8 5AD0     		beq	.L45
 165:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 166:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 167:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 785              		.loc 2 167 21
 786 01ba FFF7FEFF 		bl	HAL_GetTick
 787 01be C7F8F801 		str	r0, [r7, #504]
 168:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 169:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till HSE is ready */
 170:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 788              		.loc 2 170 14
 789 01c2 0AE0     		b	.L46
 790              	.L53:
 171:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 172:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 791              		.loc 2 172 15
 792 01c4 FFF7FEFF 		bl	HAL_GetTick
 793 01c8 0246     		mov	r2, r0
 794              		.loc 2 172 29
 795 01ca D7F8F831 		ldr	r3, [r7, #504]
 796 01ce D31A     		subs	r3, r2, r3
 797              		.loc 2 172 13
 798 01d0 642B     		cmp	r3, #100
 799 01d2 02D9     		bls	.L46
 173:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 174:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 800              		.loc 2 174 20
 801 01d4 0323     		movs	r3, #3
 802 01d6 00F01BBF 		b	.L40
 803              	.L46:
 804 01da 4FF40033 		mov	r3, #131072
 805 01de C7F8D431 		str	r3, [r7, #468]
 806              	.LBB158:
 807              	.LBB159:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 808              		.loc 3 531 4
 809 01e2 D7F8D431 		ldr	r3, [r7, #468]
 810              		.syntax unified
 811              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 812 01e6 93FAA3F3 		rbit r3, r3
 813              	@ 0 "" 2
 814              		.thumb
 815              		.syntax unified
 816 01ea C7F8D031 		str	r3, [r7, #464]
 817              		.loc 3 544 9
 818 01ee D7F8D031 		ldr	r3, [r7, #464]
 819              	.LBE159:
 820              	.LBE158:
 170:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 821              		.loc 2 170 15
 822 01f2 B3FA83F3 		clz	r3, r3
 823 01f6 DBB2     		uxtb	r3, r3
 824 01f8 5B09     		lsrs	r3, r3, #5
 825 01fa DBB2     		uxtb	r3, r3
 826 01fc 43F00103 		orr	r3, r3, #1
 827 0200 DBB2     		uxtb	r3, r3
 828 0202 012B     		cmp	r3, #1
 829 0204 02D1     		bne	.L48
 170:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 830              		.loc 2 170 15 is_stmt 0 discriminator 1
 831 0206 484B     		ldr	r3, .L167
 832 0208 1B68     		ldr	r3, [r3]
 833 020a 15E0     		b	.L49
 834              	.L48:
 835 020c 4FF40033 		mov	r3, #131072
 836 0210 C7F8CC31 		str	r3, [r7, #460]
 837              	.LBB160:
 838              	.LBB161:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 839              		.loc 3 531 4 is_stmt 1 discriminator 2
 840 0214 D7F8CC31 		ldr	r3, [r7, #460]
 841              		.syntax unified
 842              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 843 0218 93FAA3F3 		rbit r3, r3
 844              	@ 0 "" 2
 845              		.thumb
 846              		.syntax unified
 847 021c C7F8C831 		str	r3, [r7, #456]
 848 0220 4FF40033 		mov	r3, #131072
 849 0224 C7F8C431 		str	r3, [r7, #452]
 850              	.LBE161:
 851              	.LBE160:
 852              	.LBB162:
 853              	.LBB163:
 854 0228 D7F8C431 		ldr	r3, [r7, #452]
 855              		.syntax unified
 856              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 857 022c 93FAA3F3 		rbit r3, r3
 858              	@ 0 "" 2
 859              		.thumb
 860              		.syntax unified
 861 0230 C7F8C031 		str	r3, [r7, #448]
 862              	.LBE163:
 863              	.LBE162:
 170:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 864              		.loc 2 170 15 discriminator 2
 865 0234 3C4B     		ldr	r3, .L167
 866 0236 5B6A     		ldr	r3, [r3, #36]
 867              	.L49:
 868 0238 4FF40032 		mov	r2, #131072
 869 023c C7F8BC21 		str	r2, [r7, #444]
 870              	.LBB164:
 871              	.LBB165:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 872              		.loc 3 531 4 discriminator 12
 873 0240 D7F8BC21 		ldr	r2, [r7, #444]
 874              		.syntax unified
 875              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 876 0244 92FAA2F2 		rbit r2, r2
 877              	@ 0 "" 2
 878              		.thumb
 879              		.syntax unified
 880 0248 C7F8B821 		str	r2, [r7, #440]
 881              		.loc 3 544 9 discriminator 12
 882 024c D7F8B821 		ldr	r2, [r7, #440]
 883              	.LBE165:
 884              	.LBE164:
 170:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 885              		.loc 2 170 15 discriminator 12
 886 0250 B2FA82F2 		clz	r2, r2
 887 0254 52B2     		sxtb	r2, r2
 888 0256 42F02002 		orr	r2, r2, #32
 889 025a 52B2     		sxtb	r2, r2
 890 025c D2B2     		uxtb	r2, r2
 891 025e 02F01F02 		and	r2, r2, #31
 892 0262 0121     		movs	r1, #1
 893 0264 01FA02F2 		lsl	r2, r1, r2
 894 0268 1340     		ands	r3, r3, r2
 170:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 895              		.loc 2 170 14 discriminator 12
 896 026a 002B     		cmp	r3, #0
 897 026c AAD0     		beq	.L53
 898 026e 5EE0     		b	.L30
 899              	.L45:
 175:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 176:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 177:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 178:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
 179:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 180:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 181:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 900              		.loc 2 181 21
 901 0270 FFF7FEFF 		bl	HAL_GetTick
 902 0274 C7F8F801 		str	r0, [r7, #504]
 182:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 183:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till HSE is disabled */
 184:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 903              		.loc 2 184 14
 904 0278 0AE0     		b	.L54
 905              	.L61:
 185:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 186:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****            if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 906              		.loc 2 186 16
 907 027a FFF7FEFF 		bl	HAL_GetTick
 908 027e 0246     		mov	r2, r0
 909              		.loc 2 186 30
 910 0280 D7F8F831 		ldr	r3, [r7, #504]
 911 0284 D31A     		subs	r3, r2, r3
 912              		.loc 2 186 14
 913 0286 642B     		cmp	r3, #100
 914 0288 02D9     		bls	.L54
 187:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 188:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 915              		.loc 2 188 20
 916 028a 0323     		movs	r3, #3
 917 028c 00F0C0BE 		b	.L40
 918              	.L54:
 919 0290 4FF40033 		mov	r3, #131072
 920 0294 C7F8B431 		str	r3, [r7, #436]
 921              	.LBB166:
 922              	.LBB167:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 923              		.loc 3 531 4
 924 0298 D7F8B431 		ldr	r3, [r7, #436]
 925              		.syntax unified
 926              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 927 029c 93FAA3F3 		rbit r3, r3
 928              	@ 0 "" 2
 929              		.thumb
 930              		.syntax unified
 931 02a0 C7F8B031 		str	r3, [r7, #432]
 932              		.loc 3 544 9
 933 02a4 D7F8B031 		ldr	r3, [r7, #432]
 934              	.LBE167:
 935              	.LBE166:
 184:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 936              		.loc 2 184 15
 937 02a8 B3FA83F3 		clz	r3, r3
 938 02ac DBB2     		uxtb	r3, r3
 939 02ae 5B09     		lsrs	r3, r3, #5
 940 02b0 DBB2     		uxtb	r3, r3
 941 02b2 43F00103 		orr	r3, r3, #1
 942 02b6 DBB2     		uxtb	r3, r3
 943 02b8 012B     		cmp	r3, #1
 944 02ba 02D1     		bne	.L56
 184:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 945              		.loc 2 184 15 is_stmt 0 discriminator 1
 946 02bc 1A4B     		ldr	r3, .L167
 947 02be 1B68     		ldr	r3, [r3]
 948 02c0 15E0     		b	.L57
 949              	.L56:
 950 02c2 4FF40033 		mov	r3, #131072
 951 02c6 C7F8AC31 		str	r3, [r7, #428]
 952              	.LBB168:
 953              	.LBB169:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 954              		.loc 3 531 4 is_stmt 1 discriminator 2
 955 02ca D7F8AC31 		ldr	r3, [r7, #428]
 956              		.syntax unified
 957              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 958 02ce 93FAA3F3 		rbit r3, r3
 959              	@ 0 "" 2
 960              		.thumb
 961              		.syntax unified
 962 02d2 C7F8A831 		str	r3, [r7, #424]
 963 02d6 4FF40033 		mov	r3, #131072
 964 02da C7F8A431 		str	r3, [r7, #420]
 965              	.LBE169:
 966              	.LBE168:
 967              	.LBB170:
 968              	.LBB171:
 969 02de D7F8A431 		ldr	r3, [r7, #420]
 970              		.syntax unified
 971              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 972 02e2 93FAA3F3 		rbit r3, r3
 973              	@ 0 "" 2
 974              		.thumb
 975              		.syntax unified
 976 02e6 C7F8A031 		str	r3, [r7, #416]
 977              	.LBE171:
 978              	.LBE170:
 184:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 979              		.loc 2 184 15 discriminator 2
 980 02ea 0F4B     		ldr	r3, .L167
 981 02ec 5B6A     		ldr	r3, [r3, #36]
 982              	.L57:
 983 02ee 4FF40032 		mov	r2, #131072
 984 02f2 C7F89C21 		str	r2, [r7, #412]
 985              	.LBB172:
 986              	.LBB173:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 987              		.loc 3 531 4 discriminator 12
 988 02f6 D7F89C21 		ldr	r2, [r7, #412]
 989              		.syntax unified
 990              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 991 02fa 92FAA2F2 		rbit r2, r2
 992              	@ 0 "" 2
 993              		.thumb
 994              		.syntax unified
 995 02fe C7F89821 		str	r2, [r7, #408]
 996              		.loc 3 544 9 discriminator 12
 997 0302 D7F89821 		ldr	r2, [r7, #408]
 998              	.LBE173:
 999              	.LBE172:
 184:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1000              		.loc 2 184 15 discriminator 12
 1001 0306 B2FA82F2 		clz	r2, r2
 1002 030a 52B2     		sxtb	r2, r2
 1003 030c 42F02002 		orr	r2, r2, #32
 1004 0310 52B2     		sxtb	r2, r2
 1005 0312 D2B2     		uxtb	r2, r2
 1006 0314 02F01F02 		and	r2, r2, #31
 1007 0318 0121     		movs	r1, #1
 1008 031a 01FA02F2 		lsl	r2, r1, r2
 1009 031e 1340     		ands	r3, r3, r2
 184:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1010              		.loc 2 184 14 discriminator 12
 1011 0320 002B     		cmp	r3, #0
 1012 0322 AAD1     		bne	.L61
 1013 0324 03E0     		b	.L30
 1014              	.L168:
 1015 0326 00BF     		.align	2
 1016              	.L167:
 1017 0328 00100240 		.word	1073876992
 1018              	.L166:
 148:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1019              		.loc 2 148 9
 1020 032c 00BF     		nop
 1021              	.L30:
 189:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 190:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 191:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 192:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 193:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 194:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*----------------------------- HSI Configuration --------------------------*/ 
 195:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 1022              		.loc 2 195 25
 1023 032e 07F50073 		add	r3, r7, #512
 1024 0332 A3F5FE73 		sub	r3, r3, #508
 1025 0336 1B68     		ldr	r3, [r3]
 1026 0338 1B68     		ldr	r3, [r3]
 1027              		.loc 2 195 43
 1028 033a 03F00203 		and	r3, r3, #2
 1029              		.loc 2 195 5
 1030 033e 002B     		cmp	r3, #0
 1031 0340 00F07E81 		beq	.L62
 196:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 197:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 198:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 199:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 200:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 201:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock *
 202:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 1032              		.loc 2 202 9
 1033 0344 A64B     		ldr	r3, .L169
 1034 0346 5B68     		ldr	r3, [r3, #4]
 1035 0348 03F00C03 		and	r3, r3, #12
 1036              		.loc 2 202 7
 1037 034c 002B     		cmp	r3, #0
 1038 034e 0BD0     		beq	.L63
 203:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 1039              		.loc 2 203 13
 1040 0350 A34B     		ldr	r3, .L169
 1041 0352 5B68     		ldr	r3, [r3, #4]
 1042 0354 03F00C03 		and	r3, r3, #12
 1043              		.loc 2 203 8
 1044 0358 082B     		cmp	r3, #8
 1045 035a 73D1     		bne	.L64
 1046              		.loc 2 203 82 discriminator 1
 1047 035c A04B     		ldr	r3, .L169
 1048 035e 5B68     		ldr	r3, [r3, #4]
 1049 0360 03F48033 		and	r3, r3, #65536
 1050              		.loc 2 203 78 discriminator 1
 1051 0364 002B     		cmp	r3, #0
 1052 0366 6DD1     		bne	.L64
 1053              	.L63:
 1054 0368 0223     		movs	r3, #2
 1055 036a C7F89431 		str	r3, [r7, #404]
 1056              	.LBB174:
 1057              	.LBB175:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1058              		.loc 3 531 4
 1059 036e D7F89431 		ldr	r3, [r7, #404]
 1060              		.syntax unified
 1061              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1062 0372 93FAA3F3 		rbit r3, r3
 1063              	@ 0 "" 2
 1064              		.thumb
 1065              		.syntax unified
 1066 0376 C7F89031 		str	r3, [r7, #400]
 1067              		.loc 3 544 9
 1068 037a D7F89031 		ldr	r3, [r7, #400]
 1069              	.LBE175:
 1070              	.LBE174:
 204:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 205:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* When HSI is used as system clock it will not disabled */
 206:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_
 1071              		.loc 2 206 11
 1072 037e B3FA83F3 		clz	r3, r3
 1073 0382 DBB2     		uxtb	r3, r3
 1074 0384 5B09     		lsrs	r3, r3, #5
 1075 0386 DBB2     		uxtb	r3, r3
 1076 0388 43F00103 		orr	r3, r3, #1
 1077 038c DBB2     		uxtb	r3, r3
 1078 038e 012B     		cmp	r3, #1
 1079 0390 02D1     		bne	.L66
 1080              		.loc 2 206 11 is_stmt 0 discriminator 1
 1081 0392 934B     		ldr	r3, .L169
 1082 0394 1B68     		ldr	r3, [r3]
 1083 0396 13E0     		b	.L67
 1084              	.L66:
 1085 0398 0223     		movs	r3, #2
 1086 039a C7F88C31 		str	r3, [r7, #396]
 1087              	.LBB176:
 1088              	.LBB177:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1089              		.loc 3 531 4 is_stmt 1 discriminator 2
 1090 039e D7F88C31 		ldr	r3, [r7, #396]
 1091              		.syntax unified
 1092              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1093 03a2 93FAA3F3 		rbit r3, r3
 1094              	@ 0 "" 2
 1095              		.thumb
 1096              		.syntax unified
 1097 03a6 C7F88831 		str	r3, [r7, #392]
 1098 03aa 0223     		movs	r3, #2
 1099 03ac C7F88431 		str	r3, [r7, #388]
 1100              	.LBE177:
 1101              	.LBE176:
 1102              	.LBB178:
 1103              	.LBB179:
 1104 03b0 D7F88431 		ldr	r3, [r7, #388]
 1105              		.syntax unified
 1106              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1107 03b4 93FAA3F3 		rbit r3, r3
 1108              	@ 0 "" 2
 1109              		.thumb
 1110              		.syntax unified
 1111 03b8 C7F88031 		str	r3, [r7, #384]
 1112              	.LBE179:
 1113              	.LBE178:
 1114              		.loc 2 206 11 discriminator 2
 1115 03bc 884B     		ldr	r3, .L169
 1116 03be 5B6A     		ldr	r3, [r3, #36]
 1117              	.L67:
 1118 03c0 0222     		movs	r2, #2
 1119 03c2 C7F87C21 		str	r2, [r7, #380]
 1120              	.LBB180:
 1121              	.LBB181:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1122              		.loc 3 531 4 discriminator 12
 1123 03c6 D7F87C21 		ldr	r2, [r7, #380]
 1124              		.syntax unified
 1125              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1126 03ca 92FAA2F2 		rbit r2, r2
 1127              	@ 0 "" 2
 1128              		.thumb
 1129              		.syntax unified
 1130 03ce C7F87821 		str	r2, [r7, #376]
 1131              		.loc 3 544 9 discriminator 12
 1132 03d2 D7F87821 		ldr	r2, [r7, #376]
 1133              	.LBE181:
 1134              	.LBE180:
 1135              		.loc 2 206 11 discriminator 12
 1136 03d6 B2FA82F2 		clz	r2, r2
 1137 03da 52B2     		sxtb	r2, r2
 1138 03dc 42F02002 		orr	r2, r2, #32
 1139 03e0 52B2     		sxtb	r2, r2
 1140 03e2 D2B2     		uxtb	r2, r2
 1141 03e4 02F01F02 		and	r2, r2, #31
 1142 03e8 0121     		movs	r1, #1
 1143 03ea 01FA02F2 		lsl	r2, r1, r2
 1144 03ee 1340     		ands	r3, r3, r2
 1145              		.loc 2 206 9 discriminator 12
 1146 03f0 002B     		cmp	r3, #0
 1147 03f2 0AD0     		beq	.L71
 1148              		.loc 2 206 78 discriminator 13
 1149 03f4 07F50073 		add	r3, r7, #512
 1150 03f8 A3F5FE73 		sub	r3, r3, #508
 1151 03fc 1B68     		ldr	r3, [r3]
 1152 03fe 1B69     		ldr	r3, [r3, #16]
 1153              		.loc 2 206 57 discriminator 13
 1154 0400 012B     		cmp	r3, #1
 1155 0402 02D0     		beq	.L71
 207:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 208:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_ERROR;
 1156              		.loc 2 208 16
 1157 0404 0123     		movs	r3, #1
 1158 0406 00F003BE 		b	.L40
 1159              	.L71:
 209:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 210:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Otherwise, just the calibration is allowed */
 211:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
 212:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 213:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 214:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 1160              		.loc 2 214 9
 1161 040a 754B     		ldr	r3, .L169
 1162 040c 1B68     		ldr	r3, [r3]
 1163 040e 23F0F802 		bic	r2, r3, #248
 1164 0412 07F50073 		add	r3, r7, #512
 1165 0416 A3F5FE73 		sub	r3, r3, #508
 1166 041a 1B68     		ldr	r3, [r3]
 1167 041c 5969     		ldr	r1, [r3, #20]
 1168 041e F823     		movs	r3, #248
 1169 0420 C7F87431 		str	r3, [r7, #372]
 1170              	.LBB182:
 1171              	.LBB183:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1172              		.loc 3 531 4
 1173 0424 D7F87431 		ldr	r3, [r7, #372]
 1174              		.syntax unified
 1175              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1176 0428 93FAA3F3 		rbit r3, r3
 1177              	@ 0 "" 2
 1178              		.thumb
 1179              		.syntax unified
 1180 042c C7F87031 		str	r3, [r7, #368]
 1181              		.loc 3 544 9
 1182 0430 D7F87031 		ldr	r3, [r7, #368]
 1183              	.LBE183:
 1184              	.LBE182:
 1185              		.loc 2 214 9
 1186 0434 B3FA83F3 		clz	r3, r3
 1187 0438 01FA03F3 		lsl	r3, r1, r3
 1188 043c 6849     		ldr	r1, .L169
 1189 043e 1343     		orrs	r3, r3, r2
 1190 0440 0B60     		str	r3, [r1]
 206:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1191              		.loc 2 206 9
 1192 0442 FDE0     		b	.L62
 1193              	.L64:
 215:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 216:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 217:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 218:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 219:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Check the HSI State */
 220:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 1194              		.loc 2 220 27
 1195 0444 07F50073 		add	r3, r7, #512
 1196 0448 A3F5FE73 		sub	r3, r3, #508
 1197 044c 1B68     		ldr	r3, [r3]
 1198 044e 1B69     		ldr	r3, [r3, #16]
 1199              		.loc 2 220 9
 1200 0450 002B     		cmp	r3, #0
 1201 0452 00F08880 		beq	.L73
 1202 0456 0123     		movs	r3, #1
 1203 0458 C7F86C31 		str	r3, [r7, #364]
 1204              	.LBB184:
 1205              	.LBB185:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1206              		.loc 3 531 4
 1207 045c D7F86C31 		ldr	r3, [r7, #364]
 1208              		.syntax unified
 1209              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1210 0460 93FAA3F3 		rbit r3, r3
 1211              	@ 0 "" 2
 1212              		.thumb
 1213              		.syntax unified
 1214 0464 C7F86831 		str	r3, [r7, #360]
 1215              		.loc 3 544 9
 1216 0468 D7F86831 		ldr	r3, [r7, #360]
 1217              	.LBE185:
 1218              	.LBE184:
 221:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 222:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****        /* Enable the Internal High Speed oscillator (HSI). */
 223:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_HSI_ENABLE();
 1219              		.loc 2 223 9
 1220 046c B3FA83F3 		clz	r3, r3
 1221 0470 03F18453 		add	r3, r3, #276824064
 1222 0474 03F58413 		add	r3, r3, #1081344
 1223 0478 9B00     		lsls	r3, r3, #2
 1224 047a 1A46     		mov	r2, r3
 1225 047c 0123     		movs	r3, #1
 1226 047e 1360     		str	r3, [r2]
 224:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 225:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 226:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 1227              		.loc 2 226 21
 1228 0480 FFF7FEFF 		bl	HAL_GetTick
 1229 0484 C7F8F801 		str	r0, [r7, #504]
 227:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 228:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till HSI is ready */
 229:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 1230              		.loc 2 229 14
 1231 0488 0AE0     		b	.L75
 1232              	.L82:
 230:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 231:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 1233              		.loc 2 231 15
 1234 048a FFF7FEFF 		bl	HAL_GetTick
 1235 048e 0246     		mov	r2, r0
 1236              		.loc 2 231 29
 1237 0490 D7F8F831 		ldr	r3, [r7, #504]
 1238 0494 D31A     		subs	r3, r2, r3
 1239              		.loc 2 231 13
 1240 0496 022B     		cmp	r3, #2
 1241 0498 02D9     		bls	.L75
 232:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 233:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 1242              		.loc 2 233 20
 1243 049a 0323     		movs	r3, #3
 1244 049c 00F0B8BD 		b	.L40
 1245              	.L75:
 1246 04a0 0223     		movs	r3, #2
 1247 04a2 C7F86431 		str	r3, [r7, #356]
 1248              	.LBB186:
 1249              	.LBB187:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1250              		.loc 3 531 4
 1251 04a6 D7F86431 		ldr	r3, [r7, #356]
 1252              		.syntax unified
 1253              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1254 04aa 93FAA3F3 		rbit r3, r3
 1255              	@ 0 "" 2
 1256              		.thumb
 1257              		.syntax unified
 1258 04ae C7F86031 		str	r3, [r7, #352]
 1259              		.loc 3 544 9
 1260 04b2 D7F86031 		ldr	r3, [r7, #352]
 1261              	.LBE187:
 1262              	.LBE186:
 229:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1263              		.loc 2 229 15
 1264 04b6 B3FA83F3 		clz	r3, r3
 1265 04ba DBB2     		uxtb	r3, r3
 1266 04bc 5B09     		lsrs	r3, r3, #5
 1267 04be DBB2     		uxtb	r3, r3
 1268 04c0 43F00103 		orr	r3, r3, #1
 1269 04c4 DBB2     		uxtb	r3, r3
 1270 04c6 012B     		cmp	r3, #1
 1271 04c8 02D1     		bne	.L77
 229:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1272              		.loc 2 229 15 is_stmt 0 discriminator 1
 1273 04ca 454B     		ldr	r3, .L169
 1274 04cc 1B68     		ldr	r3, [r3]
 1275 04ce 13E0     		b	.L78
 1276              	.L77:
 1277 04d0 0223     		movs	r3, #2
 1278 04d2 C7F85C31 		str	r3, [r7, #348]
 1279              	.LBB188:
 1280              	.LBB189:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1281              		.loc 3 531 4 is_stmt 1 discriminator 2
 1282 04d6 D7F85C31 		ldr	r3, [r7, #348]
 1283              		.syntax unified
 1284              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1285 04da 93FAA3F3 		rbit r3, r3
 1286              	@ 0 "" 2
 1287              		.thumb
 1288              		.syntax unified
 1289 04de C7F85831 		str	r3, [r7, #344]
 1290 04e2 0223     		movs	r3, #2
 1291 04e4 C7F85431 		str	r3, [r7, #340]
 1292              	.LBE189:
 1293              	.LBE188:
 1294              	.LBB190:
 1295              	.LBB191:
 1296 04e8 D7F85431 		ldr	r3, [r7, #340]
 1297              		.syntax unified
 1298              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1299 04ec 93FAA3F3 		rbit r3, r3
 1300              	@ 0 "" 2
 1301              		.thumb
 1302              		.syntax unified
 1303 04f0 C7F85031 		str	r3, [r7, #336]
 1304              	.LBE191:
 1305              	.LBE190:
 229:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1306              		.loc 2 229 15 discriminator 2
 1307 04f4 3A4B     		ldr	r3, .L169
 1308 04f6 5B6A     		ldr	r3, [r3, #36]
 1309              	.L78:
 1310 04f8 0222     		movs	r2, #2
 1311 04fa C7F84C21 		str	r2, [r7, #332]
 1312              	.LBB192:
 1313              	.LBB193:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1314              		.loc 3 531 4 discriminator 12
 1315 04fe D7F84C21 		ldr	r2, [r7, #332]
 1316              		.syntax unified
 1317              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1318 0502 92FAA2F2 		rbit r2, r2
 1319              	@ 0 "" 2
 1320              		.thumb
 1321              		.syntax unified
 1322 0506 C7F84821 		str	r2, [r7, #328]
 1323              		.loc 3 544 9 discriminator 12
 1324 050a D7F84821 		ldr	r2, [r7, #328]
 1325              	.LBE193:
 1326              	.LBE192:
 229:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1327              		.loc 2 229 15 discriminator 12
 1328 050e B2FA82F2 		clz	r2, r2
 1329 0512 52B2     		sxtb	r2, r2
 1330 0514 42F02002 		orr	r2, r2, #32
 1331 0518 52B2     		sxtb	r2, r2
 1332 051a D2B2     		uxtb	r2, r2
 1333 051c 02F01F02 		and	r2, r2, #31
 1334 0520 0121     		movs	r1, #1
 1335 0522 01FA02F2 		lsl	r2, r1, r2
 1336 0526 1340     		ands	r3, r3, r2
 229:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1337              		.loc 2 229 14 discriminator 12
 1338 0528 002B     		cmp	r3, #0
 1339 052a AED0     		beq	.L82
 234:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 235:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 236:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****                 
 237:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 238:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 1340              		.loc 2 238 9
 1341 052c 2C4B     		ldr	r3, .L169
 1342 052e 1B68     		ldr	r3, [r3]
 1343 0530 23F0F802 		bic	r2, r3, #248
 1344 0534 07F50073 		add	r3, r7, #512
 1345 0538 A3F5FE73 		sub	r3, r3, #508
 1346 053c 1B68     		ldr	r3, [r3]
 1347 053e 5969     		ldr	r1, [r3, #20]
 1348 0540 F823     		movs	r3, #248
 1349 0542 C7F84431 		str	r3, [r7, #324]
 1350              	.LBB194:
 1351              	.LBB195:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1352              		.loc 3 531 4
 1353 0546 D7F84431 		ldr	r3, [r7, #324]
 1354              		.syntax unified
 1355              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1356 054a 93FAA3F3 		rbit r3, r3
 1357              	@ 0 "" 2
 1358              		.thumb
 1359              		.syntax unified
 1360 054e C7F84031 		str	r3, [r7, #320]
 1361              		.loc 3 544 9
 1362 0552 D7F84031 		ldr	r3, [r7, #320]
 1363              	.LBE195:
 1364              	.LBE194:
 1365              		.loc 2 238 9
 1366 0556 B3FA83F3 		clz	r3, r3
 1367 055a 01FA03F3 		lsl	r3, r1, r3
 1368 055e 2049     		ldr	r1, .L169
 1369 0560 1343     		orrs	r3, r3, r2
 1370 0562 0B60     		str	r3, [r1]
 1371 0564 6CE0     		b	.L62
 1372              	.L73:
 1373 0566 0123     		movs	r3, #1
 1374 0568 C7F83C31 		str	r3, [r7, #316]
 1375              	.LBB196:
 1376              	.LBB197:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1377              		.loc 3 531 4
 1378 056c D7F83C31 		ldr	r3, [r7, #316]
 1379              		.syntax unified
 1380              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1381 0570 93FAA3F3 		rbit r3, r3
 1382              	@ 0 "" 2
 1383              		.thumb
 1384              		.syntax unified
 1385 0574 C7F83831 		str	r3, [r7, #312]
 1386              		.loc 3 544 9
 1387 0578 D7F83831 		ldr	r3, [r7, #312]
 1388              	.LBE197:
 1389              	.LBE196:
 239:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 240:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
 241:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 242:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 243:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_HSI_DISABLE();
 1390              		.loc 2 243 9
 1391 057c B3FA83F3 		clz	r3, r3
 1392 0580 03F18453 		add	r3, r3, #276824064
 1393 0584 03F58413 		add	r3, r3, #1081344
 1394 0588 9B00     		lsls	r3, r3, #2
 1395 058a 1A46     		mov	r2, r3
 1396 058c 0023     		movs	r3, #0
 1397 058e 1360     		str	r3, [r2]
 244:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 245:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 246:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 1398              		.loc 2 246 21
 1399 0590 FFF7FEFF 		bl	HAL_GetTick
 1400 0594 C7F8F801 		str	r0, [r7, #504]
 247:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 248:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till HSI is disabled */
 249:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 1401              		.loc 2 249 14
 1402 0598 0AE0     		b	.L85
 1403              	.L92:
 250:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 251:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 1404              		.loc 2 251 15
 1405 059a FFF7FEFF 		bl	HAL_GetTick
 1406 059e 0246     		mov	r2, r0
 1407              		.loc 2 251 29
 1408 05a0 D7F8F831 		ldr	r3, [r7, #504]
 1409 05a4 D31A     		subs	r3, r2, r3
 1410              		.loc 2 251 13
 1411 05a6 022B     		cmp	r3, #2
 1412 05a8 02D9     		bls	.L85
 252:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 253:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 1413              		.loc 2 253 20
 1414 05aa 0323     		movs	r3, #3
 1415 05ac 00F030BD 		b	.L40
 1416              	.L85:
 1417 05b0 0223     		movs	r3, #2
 1418 05b2 C7F83431 		str	r3, [r7, #308]
 1419              	.LBB198:
 1420              	.LBB199:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1421              		.loc 3 531 4
 1422 05b6 D7F83431 		ldr	r3, [r7, #308]
 1423              		.syntax unified
 1424              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1425 05ba 93FAA3F3 		rbit r3, r3
 1426              	@ 0 "" 2
 1427              		.thumb
 1428              		.syntax unified
 1429 05be C7F83031 		str	r3, [r7, #304]
 1430              		.loc 3 544 9
 1431 05c2 D7F83031 		ldr	r3, [r7, #304]
 1432              	.LBE199:
 1433              	.LBE198:
 249:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1434              		.loc 2 249 15
 1435 05c6 B3FA83F3 		clz	r3, r3
 1436 05ca DBB2     		uxtb	r3, r3
 1437 05cc 5B09     		lsrs	r3, r3, #5
 1438 05ce DBB2     		uxtb	r3, r3
 1439 05d0 43F00103 		orr	r3, r3, #1
 1440 05d4 DBB2     		uxtb	r3, r3
 1441 05d6 012B     		cmp	r3, #1
 1442 05d8 04D1     		bne	.L87
 249:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1443              		.loc 2 249 15 is_stmt 0 discriminator 1
 1444 05da 014B     		ldr	r3, .L169
 1445 05dc 1B68     		ldr	r3, [r3]
 1446 05de 15E0     		b	.L88
 1447              	.L170:
 1448              		.align	2
 1449              	.L169:
 1450 05e0 00100240 		.word	1073876992
 1451              	.L87:
 1452 05e4 0223     		movs	r3, #2
 1453 05e6 C7F82C31 		str	r3, [r7, #300]
 1454              	.LBB200:
 1455              	.LBB201:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1456              		.loc 3 531 4 is_stmt 1 discriminator 2
 1457 05ea D7F82C31 		ldr	r3, [r7, #300]
 1458              		.syntax unified
 1459              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1460 05ee 93FAA3F3 		rbit r3, r3
 1461              	@ 0 "" 2
 1462              		.thumb
 1463              		.syntax unified
 1464 05f2 C7F82831 		str	r3, [r7, #296]
 1465 05f6 0223     		movs	r3, #2
 1466 05f8 C7F82431 		str	r3, [r7, #292]
 1467              	.LBE201:
 1468              	.LBE200:
 1469              	.LBB202:
 1470              	.LBB203:
 1471 05fc D7F82431 		ldr	r3, [r7, #292]
 1472              		.syntax unified
 1473              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1474 0600 93FAA3F3 		rbit r3, r3
 1475              	@ 0 "" 2
 1476              		.thumb
 1477              		.syntax unified
 1478 0604 C7F82031 		str	r3, [r7, #288]
 1479              	.LBE203:
 1480              	.LBE202:
 249:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1481              		.loc 2 249 15 discriminator 2
 1482 0608 C54B     		ldr	r3, .L171
 1483 060a 5B6A     		ldr	r3, [r3, #36]
 1484              	.L88:
 1485 060c 0222     		movs	r2, #2
 1486 060e C7F81C21 		str	r2, [r7, #284]
 1487              	.LBB204:
 1488              	.LBB205:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1489              		.loc 3 531 4 discriminator 12
 1490 0612 D7F81C21 		ldr	r2, [r7, #284]
 1491              		.syntax unified
 1492              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1493 0616 92FAA2F2 		rbit r2, r2
 1494              	@ 0 "" 2
 1495              		.thumb
 1496              		.syntax unified
 1497 061a C7F81821 		str	r2, [r7, #280]
 1498              		.loc 3 544 9 discriminator 12
 1499 061e D7F81821 		ldr	r2, [r7, #280]
 1500              	.LBE205:
 1501              	.LBE204:
 249:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1502              		.loc 2 249 15 discriminator 12
 1503 0622 B2FA82F2 		clz	r2, r2
 1504 0626 52B2     		sxtb	r2, r2
 1505 0628 42F02002 		orr	r2, r2, #32
 1506 062c 52B2     		sxtb	r2, r2
 1507 062e D2B2     		uxtb	r2, r2
 1508 0630 02F01F02 		and	r2, r2, #31
 1509 0634 0121     		movs	r1, #1
 1510 0636 01FA02F2 		lsl	r2, r1, r2
 1511 063a 1340     		ands	r3, r3, r2
 249:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1512              		.loc 2 249 14 discriminator 12
 1513 063c 002B     		cmp	r3, #0
 1514 063e ACD1     		bne	.L92
 1515              	.L62:
 254:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 255:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 256:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 257:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 258:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 259:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*------------------------------ LSI Configuration -------------------------*/ 
 260:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 1516              		.loc 2 260 25
 1517 0640 07F50073 		add	r3, r7, #512
 1518 0644 A3F5FE73 		sub	r3, r3, #508
 1519 0648 1B68     		ldr	r3, [r3]
 1520 064a 1B68     		ldr	r3, [r3]
 1521              		.loc 2 260 43
 1522 064c 03F00803 		and	r3, r3, #8
 1523              		.loc 2 260 5
 1524 0650 002B     		cmp	r3, #0
 1525 0652 00F00A81 		beq	.L93
 261:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 262:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 263:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 264:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 265:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the LSI State */
 266:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 1526              		.loc 2 266 25
 1527 0656 07F50073 		add	r3, r7, #512
 1528 065a A3F5FE73 		sub	r3, r3, #508
 1529 065e 1B68     		ldr	r3, [r3]
 1530 0660 9B69     		ldr	r3, [r3, #24]
 1531              		.loc 2 266 7
 1532 0662 002B     		cmp	r3, #0
 1533 0664 73D0     		beq	.L94
 1534 0666 0123     		movs	r3, #1
 1535 0668 C7F81431 		str	r3, [r7, #276]
 1536              	.LBB206:
 1537              	.LBB207:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1538              		.loc 3 531 4
 1539 066c D7F81431 		ldr	r3, [r7, #276]
 1540              		.syntax unified
 1541              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1542 0670 93FAA3F3 		rbit r3, r3
 1543              	@ 0 "" 2
 1544              		.thumb
 1545              		.syntax unified
 1546 0674 C7F81031 		str	r3, [r7, #272]
 1547              		.loc 3 544 9
 1548 0678 D7F81031 		ldr	r3, [r7, #272]
 1549              	.LBE207:
 1550              	.LBE206:
 267:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 268:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 269:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_LSI_ENABLE();
 1551              		.loc 2 269 7
 1552 067c B3FA83F3 		clz	r3, r3
 1553 0680 1A46     		mov	r2, r3
 1554 0682 A84B     		ldr	r3, .L171+4
 1555 0684 1344     		add	r3, r3, r2
 1556 0686 9B00     		lsls	r3, r3, #2
 1557 0688 1A46     		mov	r2, r3
 1558 068a 0123     		movs	r3, #1
 1559 068c 1360     		str	r3, [r2]
 270:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 271:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Get Start Tick */
 272:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 1560              		.loc 2 272 19
 1561 068e FFF7FEFF 		bl	HAL_GetTick
 1562 0692 C7F8F801 		str	r0, [r7, #504]
 273:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 274:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Wait till LSI is ready */  
 275:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 1563              		.loc 2 275 12
 1564 0696 0AE0     		b	.L96
 1565              	.L101:
 276:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 277:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 1566              		.loc 2 277 13
 1567 0698 FFF7FEFF 		bl	HAL_GetTick
 1568 069c 0246     		mov	r2, r0
 1569              		.loc 2 277 27
 1570 069e D7F8F831 		ldr	r3, [r7, #504]
 1571 06a2 D31A     		subs	r3, r2, r3
 1572              		.loc 2 277 11
 1573 06a4 022B     		cmp	r3, #2
 1574 06a6 02D9     		bls	.L96
 278:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 279:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 1575              		.loc 2 279 18
 1576 06a8 0323     		movs	r3, #3
 1577 06aa 00F0B1BC 		b	.L40
 1578              	.L96:
 1579 06ae 0223     		movs	r3, #2
 1580 06b0 C7F80C31 		str	r3, [r7, #268]
 1581              	.LBB208:
 1582              	.LBB209:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1583              		.loc 3 531 4
 1584 06b4 D7F80C31 		ldr	r3, [r7, #268]
 1585              		.syntax unified
 1586              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1587 06b8 93FAA3F3 		rbit r3, r3
 1588              	@ 0 "" 2
 1589              		.thumb
 1590              		.syntax unified
 1591 06bc C7F80831 		str	r3, [r7, #264]
 1592 06c0 0223     		movs	r3, #2
 1593 06c2 C7F80431 		str	r3, [r7, #260]
 1594              	.LBE209:
 1595              	.LBE208:
 1596              	.LBB210:
 1597              	.LBB211:
 1598 06c6 D7F80431 		ldr	r3, [r7, #260]
 1599              		.syntax unified
 1600              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1601 06ca 93FAA3F2 		rbit r2, r3
 1602              	@ 0 "" 2
 1603              		.thumb
 1604              		.syntax unified
 1605 06ce 07F50073 		add	r3, r7, #512
 1606 06d2 A3F58073 		sub	r3, r3, #256
 1607 06d6 1A60     		str	r2, [r3]
 1608 06d8 07F50073 		add	r3, r7, #512
 1609 06dc A3F58273 		sub	r3, r3, #260
 1610 06e0 0222     		movs	r2, #2
 1611 06e2 1A60     		str	r2, [r3]
 1612              	.LBE211:
 1613              	.LBE210:
 1614              	.LBB212:
 1615              	.LBB213:
 1616 06e4 07F50073 		add	r3, r7, #512
 1617 06e8 A3F58273 		sub	r3, r3, #260
 1618 06ec 1B68     		ldr	r3, [r3]
 1619              		.syntax unified
 1620              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1621 06ee 93FAA3F2 		rbit r2, r3
 1622              	@ 0 "" 2
 1623              		.thumb
 1624              		.syntax unified
 1625 06f2 07F50073 		add	r3, r7, #512
 1626 06f6 A3F58473 		sub	r3, r3, #264
 1627 06fa 1A60     		str	r2, [r3]
 1628              	.LBE213:
 1629              	.LBE212:
 275:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1630              		.loc 2 275 13
 1631 06fc 884B     		ldr	r3, .L171
 1632 06fe 5A6A     		ldr	r2, [r3, #36]
 1633 0700 07F50073 		add	r3, r7, #512
 1634 0704 A3F58673 		sub	r3, r3, #268
 1635 0708 0221     		movs	r1, #2
 1636 070a 1960     		str	r1, [r3]
 1637              	.LBB214:
 1638              	.LBB215:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1639              		.loc 3 531 4
 1640 070c 07F50073 		add	r3, r7, #512
 1641 0710 A3F58673 		sub	r3, r3, #268
 1642 0714 1B68     		ldr	r3, [r3]
 1643              		.syntax unified
 1644              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1645 0716 93FAA3F1 		rbit r1, r3
 1646              	@ 0 "" 2
 1647              		.thumb
 1648              		.syntax unified
 1649 071a 07F50073 		add	r3, r7, #512
 1650 071e A3F58873 		sub	r3, r3, #272
 1651 0722 1960     		str	r1, [r3]
 1652              		.loc 3 544 9
 1653 0724 07F50073 		add	r3, r7, #512
 1654 0728 A3F58873 		sub	r3, r3, #272
 1655 072c 1B68     		ldr	r3, [r3]
 1656              	.LBE215:
 1657              	.LBE214:
 275:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1658              		.loc 2 275 13
 1659 072e B3FA83F3 		clz	r3, r3
 1660 0732 5BB2     		sxtb	r3, r3
 1661 0734 43F06003 		orr	r3, r3, #96
 1662 0738 5BB2     		sxtb	r3, r3
 1663 073a DBB2     		uxtb	r3, r3
 1664 073c 03F01F03 		and	r3, r3, #31
 1665 0740 0121     		movs	r1, #1
 1666 0742 01FA03F3 		lsl	r3, r1, r3
 1667 0746 1340     		ands	r3, r3, r2
 275:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1668              		.loc 2 275 12
 1669 0748 002B     		cmp	r3, #0
 1670 074a A5D0     		beq	.L101
 1671 074c 8DE0     		b	.L93
 1672              	.L94:
 1673 074e 07F50073 		add	r3, r7, #512
 1674 0752 A3F58A73 		sub	r3, r3, #276
 1675 0756 0122     		movs	r2, #1
 1676 0758 1A60     		str	r2, [r3]
 1677              	.LBB216:
 1678              	.LBB217:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1679              		.loc 3 531 4
 1680 075a 07F50073 		add	r3, r7, #512
 1681 075e A3F58A73 		sub	r3, r3, #276
 1682 0762 1B68     		ldr	r3, [r3]
 1683              		.syntax unified
 1684              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1685 0764 93FAA3F2 		rbit r2, r3
 1686              	@ 0 "" 2
 1687              		.thumb
 1688              		.syntax unified
 1689 0768 07F50073 		add	r3, r7, #512
 1690 076c A3F58C73 		sub	r3, r3, #280
 1691 0770 1A60     		str	r2, [r3]
 1692              		.loc 3 544 9
 1693 0772 07F50073 		add	r3, r7, #512
 1694 0776 A3F58C73 		sub	r3, r3, #280
 1695 077a 1B68     		ldr	r3, [r3]
 1696              	.LBE217:
 1697              	.LBE216:
 280:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 281:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 282:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 283:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 284:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 285:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 286:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_LSI_DISABLE();
 1698              		.loc 2 286 7
 1699 077c B3FA83F3 		clz	r3, r3
 1700 0780 1A46     		mov	r2, r3
 1701 0782 684B     		ldr	r3, .L171+4
 1702 0784 1344     		add	r3, r3, r2
 1703 0786 9B00     		lsls	r3, r3, #2
 1704 0788 1A46     		mov	r2, r3
 1705 078a 0023     		movs	r3, #0
 1706 078c 1360     		str	r3, [r2]
 287:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 288:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Get Start Tick */
 289:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 1707              		.loc 2 289 19
 1708 078e FFF7FEFF 		bl	HAL_GetTick
 1709 0792 C7F8F801 		str	r0, [r7, #504]
 290:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 291:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Wait till LSI is disabled */  
 292:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 1710              		.loc 2 292 12
 1711 0796 0AE0     		b	.L103
 1712              	.L108:
 293:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 294:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 1713              		.loc 2 294 13
 1714 0798 FFF7FEFF 		bl	HAL_GetTick
 1715 079c 0246     		mov	r2, r0
 1716              		.loc 2 294 27
 1717 079e D7F8F831 		ldr	r3, [r7, #504]
 1718 07a2 D31A     		subs	r3, r2, r3
 1719              		.loc 2 294 11
 1720 07a4 022B     		cmp	r3, #2
 1721 07a6 02D9     		bls	.L103
 295:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 296:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 1722              		.loc 2 296 18
 1723 07a8 0323     		movs	r3, #3
 1724 07aa 00F031BC 		b	.L40
 1725              	.L103:
 1726 07ae 07F50073 		add	r3, r7, #512
 1727 07b2 A3F58E73 		sub	r3, r3, #284
 1728 07b6 0222     		movs	r2, #2
 1729 07b8 1A60     		str	r2, [r3]
 1730              	.LBB218:
 1731              	.LBB219:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1732              		.loc 3 531 4
 1733 07ba 07F50073 		add	r3, r7, #512
 1734 07be A3F58E73 		sub	r3, r3, #284
 1735 07c2 1B68     		ldr	r3, [r3]
 1736              		.syntax unified
 1737              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1738 07c4 93FAA3F2 		rbit r2, r3
 1739              	@ 0 "" 2
 1740              		.thumb
 1741              		.syntax unified
 1742 07c8 07F50073 		add	r3, r7, #512
 1743 07cc A3F59073 		sub	r3, r3, #288
 1744 07d0 1A60     		str	r2, [r3]
 1745 07d2 07F50073 		add	r3, r7, #512
 1746 07d6 A3F59273 		sub	r3, r3, #292
 1747 07da 0222     		movs	r2, #2
 1748 07dc 1A60     		str	r2, [r3]
 1749              	.LBE219:
 1750              	.LBE218:
 1751              	.LBB220:
 1752              	.LBB221:
 1753 07de 07F50073 		add	r3, r7, #512
 1754 07e2 A3F59273 		sub	r3, r3, #292
 1755 07e6 1B68     		ldr	r3, [r3]
 1756              		.syntax unified
 1757              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1758 07e8 93FAA3F2 		rbit r2, r3
 1759              	@ 0 "" 2
 1760              		.thumb
 1761              		.syntax unified
 1762 07ec 07F50073 		add	r3, r7, #512
 1763 07f0 A3F59473 		sub	r3, r3, #296
 1764 07f4 1A60     		str	r2, [r3]
 1765 07f6 07F50073 		add	r3, r7, #512
 1766 07fa A3F59673 		sub	r3, r3, #300
 1767 07fe 0222     		movs	r2, #2
 1768 0800 1A60     		str	r2, [r3]
 1769              	.LBE221:
 1770              	.LBE220:
 1771              	.LBB222:
 1772              	.LBB223:
 1773 0802 07F50073 		add	r3, r7, #512
 1774 0806 A3F59673 		sub	r3, r3, #300
 1775 080a 1B68     		ldr	r3, [r3]
 1776              		.syntax unified
 1777              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1778 080c 93FAA3F2 		rbit r2, r3
 1779              	@ 0 "" 2
 1780              		.thumb
 1781              		.syntax unified
 1782 0810 07F50073 		add	r3, r7, #512
 1783 0814 A3F59873 		sub	r3, r3, #304
 1784 0818 1A60     		str	r2, [r3]
 1785              	.LBE223:
 1786              	.LBE222:
 292:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1787              		.loc 2 292 13
 1788 081a 414B     		ldr	r3, .L171
 1789 081c 5A6A     		ldr	r2, [r3, #36]
 1790 081e 07F50073 		add	r3, r7, #512
 1791 0822 A3F59A73 		sub	r3, r3, #308
 1792 0826 0221     		movs	r1, #2
 1793 0828 1960     		str	r1, [r3]
 1794              	.LBB224:
 1795              	.LBB225:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1796              		.loc 3 531 4
 1797 082a 07F50073 		add	r3, r7, #512
 1798 082e A3F59A73 		sub	r3, r3, #308
 1799 0832 1B68     		ldr	r3, [r3]
 1800              		.syntax unified
 1801              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1802 0834 93FAA3F1 		rbit r1, r3
 1803              	@ 0 "" 2
 1804              		.thumb
 1805              		.syntax unified
 1806 0838 07F50073 		add	r3, r7, #512
 1807 083c A3F59C73 		sub	r3, r3, #312
 1808 0840 1960     		str	r1, [r3]
 1809              		.loc 3 544 9
 1810 0842 07F50073 		add	r3, r7, #512
 1811 0846 A3F59C73 		sub	r3, r3, #312
 1812 084a 1B68     		ldr	r3, [r3]
 1813              	.LBE225:
 1814              	.LBE224:
 292:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1815              		.loc 2 292 13
 1816 084c B3FA83F3 		clz	r3, r3
 1817 0850 5BB2     		sxtb	r3, r3
 1818 0852 43F06003 		orr	r3, r3, #96
 1819 0856 5BB2     		sxtb	r3, r3
 1820 0858 DBB2     		uxtb	r3, r3
 1821 085a 03F01F03 		and	r3, r3, #31
 1822 085e 0121     		movs	r1, #1
 1823 0860 01FA03F3 		lsl	r3, r1, r3
 1824 0864 1340     		ands	r3, r3, r2
 292:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1825              		.loc 2 292 12
 1826 0866 002B     		cmp	r3, #0
 1827 0868 96D1     		bne	.L108
 1828              	.L93:
 297:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 298:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 299:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 300:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 301:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*------------------------------ LSE Configuration -------------------------*/ 
 302:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 1829              		.loc 2 302 25
 1830 086a 07F50073 		add	r3, r7, #512
 1831 086e A3F5FE73 		sub	r3, r3, #508
 1832 0872 1B68     		ldr	r3, [r3]
 1833 0874 1B68     		ldr	r3, [r3]
 1834              		.loc 2 302 43
 1835 0876 03F00403 		and	r3, r3, #4
 1836              		.loc 2 302 5
 1837 087a 002B     		cmp	r3, #0
 1838 087c 00F0A481 		beq	.L109
 1839              	.LBB226:
 303:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 304:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     FlagStatus       pwrclkchanged = RESET;
 1840              		.loc 2 304 22
 1841 0880 0023     		movs	r3, #0
 1842 0882 87F8FF31 		strb	r3, [r7, #511]
 305:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 306:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 307:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 308:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 309:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Update LSE configuration in Backup Domain control register    */
 310:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Requires to enable write access to Backup Domain of necessary */
 311:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 1843              		.loc 2 311 8
 1844 0886 264B     		ldr	r3, .L171
 1845 0888 DB69     		ldr	r3, [r3, #28]
 1846 088a 03F08053 		and	r3, r3, #268435456
 1847              		.loc 2 311 7
 1848 088e 002B     		cmp	r3, #0
 1849 0890 16D1     		bne	.L110
 1850              	.LBB227:
 312:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 313:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_PWR_CLK_ENABLE();
 1851              		.loc 2 313 7
 1852 0892 234B     		ldr	r3, .L171
 1853 0894 DB69     		ldr	r3, [r3, #28]
 1854 0896 224A     		ldr	r2, .L171
 1855 0898 43F08053 		orr	r3, r3, #268435456
 1856 089c D361     		str	r3, [r2, #28]
 1857 089e 204B     		ldr	r3, .L171
 1858 08a0 DB69     		ldr	r3, [r3, #28]
 1859 08a2 03F08052 		and	r2, r3, #268435456
 1860 08a6 07F50073 		add	r3, r7, #512
 1861 08aa A3F5FA73 		sub	r3, r3, #500
 1862 08ae 1A60     		str	r2, [r3]
 1863 08b0 07F50073 		add	r3, r7, #512
 1864 08b4 A3F5FA73 		sub	r3, r3, #500
 1865 08b8 1B68     		ldr	r3, [r3]
 1866              	.LBE227:
 314:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       pwrclkchanged = SET;
 1867              		.loc 2 314 21
 1868 08ba 0123     		movs	r3, #1
 1869 08bc 87F8FF31 		strb	r3, [r7, #511]
 1870              	.L110:
 315:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 316:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 317:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 1871              		.loc 2 317 8
 1872 08c0 194B     		ldr	r3, .L171+8
 1873 08c2 1B68     		ldr	r3, [r3]
 1874 08c4 03F48073 		and	r3, r3, #256
 1875              		.loc 2 317 7
 1876 08c8 002B     		cmp	r3, #0
 1877 08ca 1AD1     		bne	.L111
 318:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 319:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Enable write access to Backup domain */
 320:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       SET_BIT(PWR->CR, PWR_CR_DBP);
 1878              		.loc 2 320 7
 1879 08cc 164B     		ldr	r3, .L171+8
 1880 08ce 1B68     		ldr	r3, [r3]
 1881 08d0 154A     		ldr	r2, .L171+8
 1882 08d2 43F48073 		orr	r3, r3, #256
 1883 08d6 1360     		str	r3, [r2]
 321:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 322:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Wait for Backup domain Write protection disable */
 323:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 1884              		.loc 2 323 19
 1885 08d8 FFF7FEFF 		bl	HAL_GetTick
 1886 08dc C7F8F801 		str	r0, [r7, #504]
 324:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 325:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 1887              		.loc 2 325 12
 1888 08e0 09E0     		b	.L112
 1889              	.L113:
 326:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 327:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 1890              		.loc 2 327 13
 1891 08e2 FFF7FEFF 		bl	HAL_GetTick
 1892 08e6 0246     		mov	r2, r0
 1893              		.loc 2 327 27
 1894 08e8 D7F8F831 		ldr	r3, [r7, #504]
 1895 08ec D31A     		subs	r3, r2, r3
 1896              		.loc 2 327 11
 1897 08ee 642B     		cmp	r3, #100
 1898 08f0 01D9     		bls	.L112
 328:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 329:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 1899              		.loc 2 329 18
 1900 08f2 0323     		movs	r3, #3
 1901 08f4 8CE3     		b	.L40
 1902              	.L112:
 325:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1903              		.loc 2 325 13
 1904 08f6 0C4B     		ldr	r3, .L171+8
 1905 08f8 1B68     		ldr	r3, [r3]
 1906 08fa 03F48073 		and	r3, r3, #256
 325:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1907              		.loc 2 325 12
 1908 08fe 002B     		cmp	r3, #0
 1909 0900 EFD0     		beq	.L113
 1910              	.L111:
 330:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 331:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 332:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 333:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 334:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Set the new LSE configuration -----------------------------------------*/
 335:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 1911              		.loc 2 335 5
 1912 0902 07F50073 		add	r3, r7, #512
 1913 0906 A3F5FE73 		sub	r3, r3, #508
 1914 090a 1B68     		ldr	r3, [r3]
 1915 090c DB68     		ldr	r3, [r3, #12]
 1916 090e 012B     		cmp	r3, #1
 1917 0910 0CD1     		bne	.L114
 1918              		.loc 2 335 5 is_stmt 0 discriminator 1
 1919 0912 034B     		ldr	r3, .L171
 1920 0914 1B6A     		ldr	r3, [r3, #32]
 1921 0916 024A     		ldr	r2, .L171
 1922 0918 43F00103 		orr	r3, r3, #1
 1923 091c 1362     		str	r3, [r2, #32]
 1924 091e 3BE0     		b	.L115
 1925              	.L172:
 1926              		.align	2
 1927              	.L171:
 1928 0920 00100240 		.word	1073876992
 1929 0924 20819010 		.word	277905696
 1930 0928 00700040 		.word	1073770496
 1931              	.L114:
 1932              		.loc 2 335 5 discriminator 2
 1933 092c 07F50073 		add	r3, r7, #512
 1934 0930 A3F5FE73 		sub	r3, r3, #508
 1935 0934 1B68     		ldr	r3, [r3]
 1936 0936 DB68     		ldr	r3, [r3, #12]
 1937 0938 002B     		cmp	r3, #0
 1938 093a 0CD1     		bne	.L116
 1939              		.loc 2 335 5 discriminator 3
 1940 093c 7F4B     		ldr	r3, .L173
 1941 093e 1B6A     		ldr	r3, [r3, #32]
 1942 0940 7E4A     		ldr	r2, .L173
 1943 0942 23F00103 		bic	r3, r3, #1
 1944 0946 1362     		str	r3, [r2, #32]
 1945 0948 7C4B     		ldr	r3, .L173
 1946 094a 1B6A     		ldr	r3, [r3, #32]
 1947 094c 7B4A     		ldr	r2, .L173
 1948 094e 23F00403 		bic	r3, r3, #4
 1949 0952 1362     		str	r3, [r2, #32]
 1950 0954 20E0     		b	.L115
 1951              	.L116:
 1952              		.loc 2 335 5 discriminator 4
 1953 0956 07F50073 		add	r3, r7, #512
 1954 095a A3F5FE73 		sub	r3, r3, #508
 1955 095e 1B68     		ldr	r3, [r3]
 1956 0960 DB68     		ldr	r3, [r3, #12]
 1957 0962 052B     		cmp	r3, #5
 1958 0964 0CD1     		bne	.L117
 1959              		.loc 2 335 5 discriminator 5
 1960 0966 754B     		ldr	r3, .L173
 1961 0968 1B6A     		ldr	r3, [r3, #32]
 1962 096a 744A     		ldr	r2, .L173
 1963 096c 43F00403 		orr	r3, r3, #4
 1964 0970 1362     		str	r3, [r2, #32]
 1965 0972 724B     		ldr	r3, .L173
 1966 0974 1B6A     		ldr	r3, [r3, #32]
 1967 0976 714A     		ldr	r2, .L173
 1968 0978 43F00103 		orr	r3, r3, #1
 1969 097c 1362     		str	r3, [r2, #32]
 1970 097e 0BE0     		b	.L115
 1971              	.L117:
 1972              		.loc 2 335 5 discriminator 6
 1973 0980 6E4B     		ldr	r3, .L173
 1974 0982 1B6A     		ldr	r3, [r3, #32]
 1975 0984 6D4A     		ldr	r2, .L173
 1976 0986 23F00103 		bic	r3, r3, #1
 1977 098a 1362     		str	r3, [r2, #32]
 1978 098c 6B4B     		ldr	r3, .L173
 1979 098e 1B6A     		ldr	r3, [r3, #32]
 1980 0990 6A4A     		ldr	r2, .L173
 1981 0992 23F00403 		bic	r3, r3, #4
 1982 0996 1362     		str	r3, [r2, #32]
 1983              	.L115:
 336:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the LSE State */
 337:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 1984              		.loc 2 337 25 is_stmt 1
 1985 0998 07F50073 		add	r3, r7, #512
 1986 099c A3F5FE73 		sub	r3, r3, #508
 1987 09a0 1B68     		ldr	r3, [r3]
 1988 09a2 DB68     		ldr	r3, [r3, #12]
 1989              		.loc 2 337 7
 1990 09a4 002B     		cmp	r3, #0
 1991 09a6 00F08280 		beq	.L118
 338:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 339:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Get Start Tick */
 340:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 1992              		.loc 2 340 19
 1993 09aa FFF7FEFF 		bl	HAL_GetTick
 1994 09ae C7F8F801 		str	r0, [r7, #504]
 341:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 342:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Wait till LSE is ready */  
 343:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 1995              		.loc 2 343 12
 1996 09b2 0BE0     		b	.L119
 1997              	.L126:
 344:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 345:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 1998              		.loc 2 345 13
 1999 09b4 FFF7FEFF 		bl	HAL_GetTick
 2000 09b8 0246     		mov	r2, r0
 2001              		.loc 2 345 27
 2002 09ba D7F8F831 		ldr	r3, [r7, #504]
 2003 09be D31A     		subs	r3, r2, r3
 2004              		.loc 2 345 11
 2005 09c0 41F28832 		movw	r2, #5000
 2006 09c4 9342     		cmp	r3, r2
 2007 09c6 01D9     		bls	.L119
 346:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 347:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 2008              		.loc 2 347 18
 2009 09c8 0323     		movs	r3, #3
 2010 09ca 21E3     		b	.L40
 2011              	.L119:
 2012 09cc 07F50073 		add	r3, r7, #512
 2013 09d0 A3F59E73 		sub	r3, r3, #316
 2014 09d4 0222     		movs	r2, #2
 2015 09d6 1A60     		str	r2, [r3]
 2016              	.LBB228:
 2017              	.LBB229:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2018              		.loc 3 531 4
 2019 09d8 07F50073 		add	r3, r7, #512
 2020 09dc A3F59E73 		sub	r3, r3, #316
 2021 09e0 1B68     		ldr	r3, [r3]
 2022              		.syntax unified
 2023              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2024 09e2 93FAA3F2 		rbit r2, r3
 2025              	@ 0 "" 2
 2026              		.thumb
 2027              		.syntax unified
 2028 09e6 07F50073 		add	r3, r7, #512
 2029 09ea A3F5A073 		sub	r3, r3, #320
 2030 09ee 1A60     		str	r2, [r3]
 2031 09f0 07F50073 		add	r3, r7, #512
 2032 09f4 A3F5A273 		sub	r3, r3, #324
 2033 09f8 0222     		movs	r2, #2
 2034 09fa 1A60     		str	r2, [r3]
 2035              	.LBE229:
 2036              	.LBE228:
 2037              	.LBB230:
 2038              	.LBB231:
 2039 09fc 07F50073 		add	r3, r7, #512
 2040 0a00 A3F5A273 		sub	r3, r3, #324
 2041 0a04 1B68     		ldr	r3, [r3]
 2042              		.syntax unified
 2043              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2044 0a06 93FAA3F2 		rbit r2, r3
 2045              	@ 0 "" 2
 2046              		.thumb
 2047              		.syntax unified
 2048 0a0a 07F50073 		add	r3, r7, #512
 2049 0a0e A3F5A473 		sub	r3, r3, #328
 2050 0a12 1A60     		str	r2, [r3]
 2051              		.loc 3 544 9
 2052 0a14 07F50073 		add	r3, r7, #512
 2053 0a18 A3F5A473 		sub	r3, r3, #328
 2054 0a1c 1B68     		ldr	r3, [r3]
 2055              	.LBE231:
 2056              	.LBE230:
 343:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2057              		.loc 2 343 13
 2058 0a1e B3FA83F3 		clz	r3, r3
 2059 0a22 DBB2     		uxtb	r3, r3
 2060 0a24 5B09     		lsrs	r3, r3, #5
 2061 0a26 DBB2     		uxtb	r3, r3
 2062 0a28 43F00203 		orr	r3, r3, #2
 2063 0a2c DBB2     		uxtb	r3, r3
 2064 0a2e 022B     		cmp	r3, #2
 2065 0a30 02D1     		bne	.L122
 343:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2066              		.loc 2 343 13 is_stmt 0 discriminator 4
 2067 0a32 424B     		ldr	r3, .L173
 2068 0a34 1B6A     		ldr	r3, [r3, #32]
 2069 0a36 13E0     		b	.L123
 2070              	.L122:
 2071 0a38 07F50073 		add	r3, r7, #512
 2072 0a3c A3F5A673 		sub	r3, r3, #332
 2073 0a40 0222     		movs	r2, #2
 2074 0a42 1A60     		str	r2, [r3]
 2075              	.LBB232:
 2076              	.LBB233:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2077              		.loc 3 531 4 is_stmt 1 discriminator 5
 2078 0a44 07F50073 		add	r3, r7, #512
 2079 0a48 A3F5A673 		sub	r3, r3, #332
 2080 0a4c 1B68     		ldr	r3, [r3]
 2081              		.syntax unified
 2082              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2083 0a4e 93FAA3F2 		rbit r2, r3
 2084              	@ 0 "" 2
 2085              		.thumb
 2086              		.syntax unified
 2087 0a52 07F50073 		add	r3, r7, #512
 2088 0a56 A3F5A873 		sub	r3, r3, #336
 2089 0a5a 1A60     		str	r2, [r3]
 2090              	.LBE233:
 2091              	.LBE232:
 343:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2092              		.loc 2 343 13 discriminator 5
 2093 0a5c 374B     		ldr	r3, .L173
 2094 0a5e 5B6A     		ldr	r3, [r3, #36]
 2095              	.L123:
 2096 0a60 07F50072 		add	r2, r7, #512
 2097 0a64 A2F5AA72 		sub	r2, r2, #340
 2098 0a68 0221     		movs	r1, #2
 2099 0a6a 1160     		str	r1, [r2]
 2100              	.LBB234:
 2101              	.LBB235:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2102              		.loc 3 531 4 discriminator 11
 2103 0a6c 07F50072 		add	r2, r7, #512
 2104 0a70 A2F5AA72 		sub	r2, r2, #340
 2105 0a74 1268     		ldr	r2, [r2]
 2106              		.syntax unified
 2107              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2108 0a76 92FAA2F1 		rbit r1, r2
 2109              	@ 0 "" 2
 2110              		.thumb
 2111              		.syntax unified
 2112 0a7a 07F50072 		add	r2, r7, #512
 2113 0a7e A2F5AC72 		sub	r2, r2, #344
 2114 0a82 1160     		str	r1, [r2]
 2115              		.loc 3 544 9 discriminator 11
 2116 0a84 07F50072 		add	r2, r7, #512
 2117 0a88 A2F5AC72 		sub	r2, r2, #344
 2118 0a8c 1268     		ldr	r2, [r2]
 2119              	.LBE235:
 2120              	.LBE234:
 343:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2121              		.loc 2 343 13 discriminator 11
 2122 0a8e B2FA82F2 		clz	r2, r2
 2123 0a92 52B2     		sxtb	r2, r2
 2124 0a94 42F04002 		orr	r2, r2, #64
 2125 0a98 52B2     		sxtb	r2, r2
 2126 0a9a D2B2     		uxtb	r2, r2
 2127 0a9c 02F01F02 		and	r2, r2, #31
 2128 0aa0 0121     		movs	r1, #1
 2129 0aa2 01FA02F2 		lsl	r2, r1, r2
 2130 0aa6 1340     		ands	r3, r3, r2
 343:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2131              		.loc 2 343 12 discriminator 11
 2132 0aa8 002B     		cmp	r3, #0
 2133 0aaa 83D0     		beq	.L126
 2134 0aac 82E0     		b	.L127
 2135              	.L118:
 348:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 349:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 350:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 351:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 352:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 353:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Get Start Tick */
 354:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 2136              		.loc 2 354 19
 2137 0aae FFF7FEFF 		bl	HAL_GetTick
 2138 0ab2 C7F8F801 		str	r0, [r7, #504]
 355:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 356:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Wait till LSE is disabled */  
 357:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 2139              		.loc 2 357 12
 2140 0ab6 0BE0     		b	.L128
 2141              	.L135:
 358:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 359:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 2142              		.loc 2 359 13
 2143 0ab8 FFF7FEFF 		bl	HAL_GetTick
 2144 0abc 0246     		mov	r2, r0
 2145              		.loc 2 359 27
 2146 0abe D7F8F831 		ldr	r3, [r7, #504]
 2147 0ac2 D31A     		subs	r3, r2, r3
 2148              		.loc 2 359 11
 2149 0ac4 41F28832 		movw	r2, #5000
 2150 0ac8 9342     		cmp	r3, r2
 2151 0aca 01D9     		bls	.L128
 360:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 361:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 2152              		.loc 2 361 18
 2153 0acc 0323     		movs	r3, #3
 2154 0ace 9FE2     		b	.L40
 2155              	.L128:
 2156 0ad0 07F50073 		add	r3, r7, #512
 2157 0ad4 A3F5AE73 		sub	r3, r3, #348
 2158 0ad8 0222     		movs	r2, #2
 2159 0ada 1A60     		str	r2, [r3]
 2160              	.LBB236:
 2161              	.LBB237:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2162              		.loc 3 531 4
 2163 0adc 07F50073 		add	r3, r7, #512
 2164 0ae0 A3F5AE73 		sub	r3, r3, #348
 2165 0ae4 1B68     		ldr	r3, [r3]
 2166              		.syntax unified
 2167              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2168 0ae6 93FAA3F2 		rbit r2, r3
 2169              	@ 0 "" 2
 2170              		.thumb
 2171              		.syntax unified
 2172 0aea 07F50073 		add	r3, r7, #512
 2173 0aee A3F5B073 		sub	r3, r3, #352
 2174 0af2 1A60     		str	r2, [r3]
 2175 0af4 07F50073 		add	r3, r7, #512
 2176 0af8 A3F5B273 		sub	r3, r3, #356
 2177 0afc 0222     		movs	r2, #2
 2178 0afe 1A60     		str	r2, [r3]
 2179              	.LBE237:
 2180              	.LBE236:
 2181              	.LBB238:
 2182              	.LBB239:
 2183 0b00 07F50073 		add	r3, r7, #512
 2184 0b04 A3F5B273 		sub	r3, r3, #356
 2185 0b08 1B68     		ldr	r3, [r3]
 2186              		.syntax unified
 2187              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2188 0b0a 93FAA3F2 		rbit r2, r3
 2189              	@ 0 "" 2
 2190              		.thumb
 2191              		.syntax unified
 2192 0b0e 07F50073 		add	r3, r7, #512
 2193 0b12 A3F5B473 		sub	r3, r3, #360
 2194 0b16 1A60     		str	r2, [r3]
 2195              		.loc 3 544 9
 2196 0b18 07F50073 		add	r3, r7, #512
 2197 0b1c A3F5B473 		sub	r3, r3, #360
 2198 0b20 1B68     		ldr	r3, [r3]
 2199              	.LBE239:
 2200              	.LBE238:
 357:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2201              		.loc 2 357 13
 2202 0b22 B3FA83F3 		clz	r3, r3
 2203 0b26 DBB2     		uxtb	r3, r3
 2204 0b28 5B09     		lsrs	r3, r3, #5
 2205 0b2a DBB2     		uxtb	r3, r3
 2206 0b2c 43F00203 		orr	r3, r3, #2
 2207 0b30 DBB2     		uxtb	r3, r3
 2208 0b32 022B     		cmp	r3, #2
 2209 0b34 04D1     		bne	.L131
 357:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2210              		.loc 2 357 13 is_stmt 0 discriminator 4
 2211 0b36 014B     		ldr	r3, .L173
 2212 0b38 1B6A     		ldr	r3, [r3, #32]
 2213 0b3a 15E0     		b	.L132
 2214              	.L174:
 2215              		.align	2
 2216              	.L173:
 2217 0b3c 00100240 		.word	1073876992
 2218              	.L131:
 2219 0b40 07F50073 		add	r3, r7, #512
 2220 0b44 A3F5B673 		sub	r3, r3, #364
 2221 0b48 0222     		movs	r2, #2
 2222 0b4a 1A60     		str	r2, [r3]
 2223              	.LBB240:
 2224              	.LBB241:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2225              		.loc 3 531 4 is_stmt 1 discriminator 5
 2226 0b4c 07F50073 		add	r3, r7, #512
 2227 0b50 A3F5B673 		sub	r3, r3, #364
 2228 0b54 1B68     		ldr	r3, [r3]
 2229              		.syntax unified
 2230              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2231 0b56 93FAA3F2 		rbit r2, r3
 2232              	@ 0 "" 2
 2233              		.thumb
 2234              		.syntax unified
 2235 0b5a 07F50073 		add	r3, r7, #512
 2236 0b5e A3F5B873 		sub	r3, r3, #368
 2237 0b62 1A60     		str	r2, [r3]
 2238              	.LBE241:
 2239              	.LBE240:
 357:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2240              		.loc 2 357 13 discriminator 5
 2241 0b64 AC4B     		ldr	r3, .L175
 2242 0b66 5B6A     		ldr	r3, [r3, #36]
 2243              	.L132:
 2244 0b68 07F50072 		add	r2, r7, #512
 2245 0b6c A2F5BA72 		sub	r2, r2, #372
 2246 0b70 0221     		movs	r1, #2
 2247 0b72 1160     		str	r1, [r2]
 2248              	.LBB242:
 2249              	.LBB243:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2250              		.loc 3 531 4 discriminator 11
 2251 0b74 07F50072 		add	r2, r7, #512
 2252 0b78 A2F5BA72 		sub	r2, r2, #372
 2253 0b7c 1268     		ldr	r2, [r2]
 2254              		.syntax unified
 2255              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2256 0b7e 92FAA2F1 		rbit r1, r2
 2257              	@ 0 "" 2
 2258              		.thumb
 2259              		.syntax unified
 2260 0b82 07F50072 		add	r2, r7, #512
 2261 0b86 A2F5BC72 		sub	r2, r2, #376
 2262 0b8a 1160     		str	r1, [r2]
 2263              		.loc 3 544 9 discriminator 11
 2264 0b8c 07F50072 		add	r2, r7, #512
 2265 0b90 A2F5BC72 		sub	r2, r2, #376
 2266 0b94 1268     		ldr	r2, [r2]
 2267              	.LBE243:
 2268              	.LBE242:
 357:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2269              		.loc 2 357 13 discriminator 11
 2270 0b96 B2FA82F2 		clz	r2, r2
 2271 0b9a 52B2     		sxtb	r2, r2
 2272 0b9c 42F04002 		orr	r2, r2, #64
 2273 0ba0 52B2     		sxtb	r2, r2
 2274 0ba2 D2B2     		uxtb	r2, r2
 2275 0ba4 02F01F02 		and	r2, r2, #31
 2276 0ba8 0121     		movs	r1, #1
 2277 0baa 01FA02F2 		lsl	r2, r1, r2
 2278 0bae 1340     		ands	r3, r3, r2
 357:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2279              		.loc 2 357 12 discriminator 11
 2280 0bb0 002B     		cmp	r3, #0
 2281 0bb2 81D1     		bne	.L135
 2282              	.L127:
 362:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 363:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 364:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 365:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 366:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Require to disable power clock if necessary */
 367:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(pwrclkchanged == SET)
 2283              		.loc 2 367 7
 2284 0bb4 97F8FF31 		ldrb	r3, [r7, #511]	@ zero_extendqisi2
 2285 0bb8 012B     		cmp	r3, #1
 2286 0bba 05D1     		bne	.L109
 368:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 369:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_PWR_CLK_DISABLE();
 2287              		.loc 2 369 7
 2288 0bbc 964B     		ldr	r3, .L175
 2289 0bbe DB69     		ldr	r3, [r3, #28]
 2290 0bc0 954A     		ldr	r2, .L175
 2291 0bc2 23F08053 		bic	r3, r3, #268435456
 2292 0bc6 D361     		str	r3, [r2, #28]
 2293              	.L109:
 2294              	.LBE226:
 370:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 371:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 372:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 373:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 374:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 375:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 376:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 2295              		.loc 2 376 30
 2296 0bc8 07F50073 		add	r3, r7, #512
 2297 0bcc A3F5FE73 		sub	r3, r3, #508
 2298 0bd0 1B68     		ldr	r3, [r3]
 2299 0bd2 DB69     		ldr	r3, [r3, #28]
 2300              		.loc 2 376 6
 2301 0bd4 002B     		cmp	r3, #0
 2302 0bd6 00F01A82 		beq	.L136
 377:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 378:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check if the PLL is used as system clock or not */
 379:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 2303              		.loc 2 379 8
 2304 0bda 8F4B     		ldr	r3, .L175
 2305 0bdc 5B68     		ldr	r3, [r3, #4]
 2306 0bde 03F00C03 		and	r3, r3, #12
 2307              		.loc 2 379 7
 2308 0be2 082B     		cmp	r3, #8
 2309 0be4 00F01182 		beq	.L137
 380:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     { 
 381:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 2310              		.loc 2 381 33
 2311 0be8 07F50073 		add	r3, r7, #512
 2312 0bec A3F5FE73 		sub	r3, r3, #508
 2313 0bf0 1B68     		ldr	r3, [r3]
 2314 0bf2 DB69     		ldr	r3, [r3, #28]
 2315              		.loc 2 381 9
 2316 0bf4 022B     		cmp	r3, #2
 2317 0bf6 40F06281 		bne	.L138
 2318 0bfa 07F50073 		add	r3, r7, #512
 2319 0bfe A3F5BE73 		sub	r3, r3, #380
 2320 0c02 4FF08072 		mov	r2, #16777216
 2321 0c06 1A60     		str	r2, [r3]
 2322              	.LBB244:
 2323              	.LBB245:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2324              		.loc 3 531 4
 2325 0c08 07F50073 		add	r3, r7, #512
 2326 0c0c A3F5BE73 		sub	r3, r3, #380
 2327 0c10 1B68     		ldr	r3, [r3]
 2328              		.syntax unified
 2329              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2330 0c12 93FAA3F2 		rbit r2, r3
 2331              	@ 0 "" 2
 2332              		.thumb
 2333              		.syntax unified
 2334 0c16 07F50073 		add	r3, r7, #512
 2335 0c1a A3F5C073 		sub	r3, r3, #384
 2336 0c1e 1A60     		str	r2, [r3]
 2337              		.loc 3 544 9
 2338 0c20 07F50073 		add	r3, r7, #512
 2339 0c24 A3F5C073 		sub	r3, r3, #384
 2340 0c28 1B68     		ldr	r3, [r3]
 2341              	.LBE245:
 2342              	.LBE244:
 382:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 383:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Check the parameters */
 384:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 385:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 386:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
 387:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 388:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #endif
 389:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 390:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Disable the main PLL. */
 391:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_PLL_DISABLE();
 2343              		.loc 2 391 9
 2344 0c2a B3FA83F3 		clz	r3, r3
 2345 0c2e 03F18453 		add	r3, r3, #276824064
 2346 0c32 03F58413 		add	r3, r3, #1081344
 2347 0c36 9B00     		lsls	r3, r3, #2
 2348 0c38 1A46     		mov	r2, r3
 2349 0c3a 0023     		movs	r3, #0
 2350 0c3c 1360     		str	r3, [r2]
 392:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 393:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 394:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 2351              		.loc 2 394 21
 2352 0c3e FFF7FEFF 		bl	HAL_GetTick
 2353 0c42 C7F8F801 		str	r0, [r7, #504]
 395:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 396:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till PLL is disabled */
 397:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 2354              		.loc 2 397 14
 2355 0c46 09E0     		b	.L140
 2356              	.L147:
 398:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 399:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 2357              		.loc 2 399 15
 2358 0c48 FFF7FEFF 		bl	HAL_GetTick
 2359 0c4c 0246     		mov	r2, r0
 2360              		.loc 2 399 29
 2361 0c4e D7F8F831 		ldr	r3, [r7, #504]
 2362 0c52 D31A     		subs	r3, r2, r3
 2363              		.loc 2 399 13
 2364 0c54 022B     		cmp	r3, #2
 2365 0c56 01D9     		bls	.L140
 400:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 401:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 2366              		.loc 2 401 20
 2367 0c58 0323     		movs	r3, #3
 2368 0c5a D9E1     		b	.L40
 2369              	.L140:
 2370 0c5c 07F50073 		add	r3, r7, #512
 2371 0c60 A3F5C273 		sub	r3, r3, #388
 2372 0c64 4FF00072 		mov	r2, #33554432
 2373 0c68 1A60     		str	r2, [r3]
 2374              	.LBB246:
 2375              	.LBB247:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2376              		.loc 3 531 4
 2377 0c6a 07F50073 		add	r3, r7, #512
 2378 0c6e A3F5C273 		sub	r3, r3, #388
 2379 0c72 1B68     		ldr	r3, [r3]
 2380              		.syntax unified
 2381              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2382 0c74 93FAA3F2 		rbit r2, r3
 2383              	@ 0 "" 2
 2384              		.thumb
 2385              		.syntax unified
 2386 0c78 07F50073 		add	r3, r7, #512
 2387 0c7c A3F5C473 		sub	r3, r3, #392
 2388 0c80 1A60     		str	r2, [r3]
 2389              		.loc 3 544 9
 2390 0c82 07F50073 		add	r3, r7, #512
 2391 0c86 A3F5C473 		sub	r3, r3, #392
 2392 0c8a 1B68     		ldr	r3, [r3]
 2393              	.LBE247:
 2394              	.LBE246:
 397:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2395              		.loc 2 397 15
 2396 0c8c B3FA83F3 		clz	r3, r3
 2397 0c90 DBB2     		uxtb	r3, r3
 2398 0c92 5B09     		lsrs	r3, r3, #5
 2399 0c94 DBB2     		uxtb	r3, r3
 2400 0c96 43F00103 		orr	r3, r3, #1
 2401 0c9a DBB2     		uxtb	r3, r3
 2402 0c9c 012B     		cmp	r3, #1
 2403 0c9e 02D1     		bne	.L142
 397:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2404              		.loc 2 397 15 is_stmt 0 discriminator 1
 2405 0ca0 5D4B     		ldr	r3, .L175
 2406 0ca2 1B68     		ldr	r3, [r3]
 2407 0ca4 27E0     		b	.L143
 2408              	.L142:
 2409 0ca6 07F50073 		add	r3, r7, #512
 2410 0caa A3F5C673 		sub	r3, r3, #396
 2411 0cae 4FF00072 		mov	r2, #33554432
 2412 0cb2 1A60     		str	r2, [r3]
 2413              	.LBB248:
 2414              	.LBB249:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2415              		.loc 3 531 4 is_stmt 1 discriminator 2
 2416 0cb4 07F50073 		add	r3, r7, #512
 2417 0cb8 A3F5C673 		sub	r3, r3, #396
 2418 0cbc 1B68     		ldr	r3, [r3]
 2419              		.syntax unified
 2420              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2421 0cbe 93FAA3F2 		rbit r2, r3
 2422              	@ 0 "" 2
 2423              		.thumb
 2424              		.syntax unified
 2425 0cc2 07F50073 		add	r3, r7, #512
 2426 0cc6 A3F5C873 		sub	r3, r3, #400
 2427 0cca 1A60     		str	r2, [r3]
 2428 0ccc 07F50073 		add	r3, r7, #512
 2429 0cd0 A3F5CA73 		sub	r3, r3, #404
 2430 0cd4 4FF00072 		mov	r2, #33554432
 2431 0cd8 1A60     		str	r2, [r3]
 2432              	.LBE249:
 2433              	.LBE248:
 2434              	.LBB250:
 2435              	.LBB251:
 2436 0cda 07F50073 		add	r3, r7, #512
 2437 0cde A3F5CA73 		sub	r3, r3, #404
 2438 0ce2 1B68     		ldr	r3, [r3]
 2439              		.syntax unified
 2440              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2441 0ce4 93FAA3F2 		rbit r2, r3
 2442              	@ 0 "" 2
 2443              		.thumb
 2444              		.syntax unified
 2445 0ce8 07F50073 		add	r3, r7, #512
 2446 0cec A3F5CC73 		sub	r3, r3, #408
 2447 0cf0 1A60     		str	r2, [r3]
 2448              	.LBE251:
 2449              	.LBE250:
 397:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2450              		.loc 2 397 15 discriminator 2
 2451 0cf2 494B     		ldr	r3, .L175
 2452 0cf4 5B6A     		ldr	r3, [r3, #36]
 2453              	.L143:
 2454 0cf6 07F50072 		add	r2, r7, #512
 2455 0cfa A2F5CE72 		sub	r2, r2, #412
 2456 0cfe 4FF00071 		mov	r1, #33554432
 2457 0d02 1160     		str	r1, [r2]
 2458              	.LBB252:
 2459              	.LBB253:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2460              		.loc 3 531 4 discriminator 12
 2461 0d04 07F50072 		add	r2, r7, #512
 2462 0d08 A2F5CE72 		sub	r2, r2, #412
 2463 0d0c 1268     		ldr	r2, [r2]
 2464              		.syntax unified
 2465              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2466 0d0e 92FAA2F1 		rbit r1, r2
 2467              	@ 0 "" 2
 2468              		.thumb
 2469              		.syntax unified
 2470 0d12 07F50072 		add	r2, r7, #512
 2471 0d16 A2F5D072 		sub	r2, r2, #416
 2472 0d1a 1160     		str	r1, [r2]
 2473              		.loc 3 544 9 discriminator 12
 2474 0d1c 07F50072 		add	r2, r7, #512
 2475 0d20 A2F5D072 		sub	r2, r2, #416
 2476 0d24 1268     		ldr	r2, [r2]
 2477              	.LBE253:
 2478              	.LBE252:
 397:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2479              		.loc 2 397 15 discriminator 12
 2480 0d26 B2FA82F2 		clz	r2, r2
 2481 0d2a 52B2     		sxtb	r2, r2
 2482 0d2c 42F02002 		orr	r2, r2, #32
 2483 0d30 52B2     		sxtb	r2, r2
 2484 0d32 D2B2     		uxtb	r2, r2
 2485 0d34 02F01F02 		and	r2, r2, #31
 2486 0d38 0121     		movs	r1, #1
 2487 0d3a 01FA02F2 		lsl	r2, r1, r2
 2488 0d3e 1340     		ands	r3, r3, r2
 397:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2489              		.loc 2 397 14 discriminator 12
 2490 0d40 002B     		cmp	r3, #0
 2491 0d42 81D1     		bne	.L147
 402:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 403:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 404:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 405:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
 406:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Configure the main PLL clock source, predivider and multiplication factor. */
 407:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 408:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****                              RCC_OscInitStruct->PLL.PREDIV,
 409:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****                              RCC_OscInitStruct->PLL.PLLMUL);
 410:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #else
 411:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Configure the main PLL clock source and multiplication factor. */
 412:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 2492              		.loc 2 412 7
 2493 0d44 344B     		ldr	r3, .L175
 2494 0d46 5B68     		ldr	r3, [r3, #4]
 2495 0d48 23F47412 		bic	r2, r3, #3997696
 2496 0d4c 07F50073 		add	r3, r7, #512
 2497 0d50 A3F5FE73 		sub	r3, r3, #508
 2498 0d54 1B68     		ldr	r3, [r3]
 2499 0d56 596A     		ldr	r1, [r3, #36]
 2500 0d58 07F50073 		add	r3, r7, #512
 2501 0d5c A3F5FE73 		sub	r3, r3, #508
 2502 0d60 1B68     		ldr	r3, [r3]
 2503 0d62 1B6A     		ldr	r3, [r3, #32]
 2504 0d64 0B43     		orrs	r3, r3, r1
 2505 0d66 2C49     		ldr	r1, .L175
 2506 0d68 1343     		orrs	r3, r3, r2
 2507 0d6a 4B60     		str	r3, [r1, #4]
 2508 0d6c 07F50073 		add	r3, r7, #512
 2509 0d70 A3F5D273 		sub	r3, r3, #420
 2510 0d74 4FF08072 		mov	r2, #16777216
 2511 0d78 1A60     		str	r2, [r3]
 2512              	.LBB254:
 2513              	.LBB255:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2514              		.loc 3 531 4
 2515 0d7a 07F50073 		add	r3, r7, #512
 2516 0d7e A3F5D273 		sub	r3, r3, #420
 2517 0d82 1B68     		ldr	r3, [r3]
 2518              		.syntax unified
 2519              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2520 0d84 93FAA3F2 		rbit r2, r3
 2521              	@ 0 "" 2
 2522              		.thumb
 2523              		.syntax unified
 2524 0d88 07F50073 		add	r3, r7, #512
 2525 0d8c A3F5D473 		sub	r3, r3, #424
 2526 0d90 1A60     		str	r2, [r3]
 2527              		.loc 3 544 9
 2528 0d92 07F50073 		add	r3, r7, #512
 2529 0d96 A3F5D473 		sub	r3, r3, #424
 2530 0d9a 1B68     		ldr	r3, [r3]
 2531              	.LBE255:
 2532              	.LBE254:
 413:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****                            RCC_OscInitStruct->PLL.PLLMUL);
 414:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
 415:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Enable the main PLL. */
 416:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_PLL_ENABLE();
 2533              		.loc 2 416 9
 2534 0d9c B3FA83F3 		clz	r3, r3
 2535 0da0 03F18453 		add	r3, r3, #276824064
 2536 0da4 03F58413 		add	r3, r3, #1081344
 2537 0da8 9B00     		lsls	r3, r3, #2
 2538 0daa 1A46     		mov	r2, r3
 2539 0dac 0123     		movs	r3, #1
 2540 0dae 1360     		str	r3, [r2]
 417:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 418:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 419:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 2541              		.loc 2 419 21
 2542 0db0 FFF7FEFF 		bl	HAL_GetTick
 2543 0db4 C7F8F801 		str	r0, [r7, #504]
 420:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 421:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till PLL is ready */
 422:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 2544              		.loc 2 422 14
 2545 0db8 09E0     		b	.L149
 2546              	.L156:
 423:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 424:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 2547              		.loc 2 424 15
 2548 0dba FFF7FEFF 		bl	HAL_GetTick
 2549 0dbe 0246     		mov	r2, r0
 2550              		.loc 2 424 29
 2551 0dc0 D7F8F831 		ldr	r3, [r7, #504]
 2552 0dc4 D31A     		subs	r3, r2, r3
 2553              		.loc 2 424 13
 2554 0dc6 022B     		cmp	r3, #2
 2555 0dc8 01D9     		bls	.L149
 425:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 426:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 2556              		.loc 2 426 20
 2557 0dca 0323     		movs	r3, #3
 2558 0dcc 20E1     		b	.L40
 2559              	.L149:
 2560 0dce 07F50073 		add	r3, r7, #512
 2561 0dd2 A3F5D673 		sub	r3, r3, #428
 2562 0dd6 4FF00072 		mov	r2, #33554432
 2563 0dda 1A60     		str	r2, [r3]
 2564              	.LBB256:
 2565              	.LBB257:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2566              		.loc 3 531 4
 2567 0ddc 07F50073 		add	r3, r7, #512
 2568 0de0 A3F5D673 		sub	r3, r3, #428
 2569 0de4 1B68     		ldr	r3, [r3]
 2570              		.syntax unified
 2571              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2572 0de6 93FAA3F2 		rbit r2, r3
 2573              	@ 0 "" 2
 2574              		.thumb
 2575              		.syntax unified
 2576 0dea 07F50073 		add	r3, r7, #512
 2577 0dee A3F5D873 		sub	r3, r3, #432
 2578 0df2 1A60     		str	r2, [r3]
 2579              		.loc 3 544 9
 2580 0df4 07F50073 		add	r3, r7, #512
 2581 0df8 A3F5D873 		sub	r3, r3, #432
 2582 0dfc 1B68     		ldr	r3, [r3]
 2583              	.LBE257:
 2584              	.LBE256:
 422:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2585              		.loc 2 422 15
 2586 0dfe B3FA83F3 		clz	r3, r3
 2587 0e02 DBB2     		uxtb	r3, r3
 2588 0e04 5B09     		lsrs	r3, r3, #5
 2589 0e06 DBB2     		uxtb	r3, r3
 2590 0e08 43F00103 		orr	r3, r3, #1
 2591 0e0c DBB2     		uxtb	r3, r3
 2592 0e0e 012B     		cmp	r3, #1
 2593 0e10 04D1     		bne	.L151
 422:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2594              		.loc 2 422 15 is_stmt 0 discriminator 1
 2595 0e12 014B     		ldr	r3, .L175
 2596 0e14 1B68     		ldr	r3, [r3]
 2597 0e16 29E0     		b	.L152
 2598              	.L176:
 2599              		.align	2
 2600              	.L175:
 2601 0e18 00100240 		.word	1073876992
 2602              	.L151:
 2603 0e1c 07F50073 		add	r3, r7, #512
 2604 0e20 A3F5DA73 		sub	r3, r3, #436
 2605 0e24 4FF00072 		mov	r2, #33554432
 2606 0e28 1A60     		str	r2, [r3]
 2607              	.LBB258:
 2608              	.LBB259:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2609              		.loc 3 531 4 is_stmt 1 discriminator 2
 2610 0e2a 07F50073 		add	r3, r7, #512
 2611 0e2e A3F5DA73 		sub	r3, r3, #436
 2612 0e32 1B68     		ldr	r3, [r3]
 2613              		.syntax unified
 2614              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2615 0e34 93FAA3F2 		rbit r2, r3
 2616              	@ 0 "" 2
 2617              		.thumb
 2618              		.syntax unified
 2619 0e38 07F50073 		add	r3, r7, #512
 2620 0e3c A3F5DC73 		sub	r3, r3, #440
 2621 0e40 1A60     		str	r2, [r3]
 2622 0e42 07F50073 		add	r3, r7, #512
 2623 0e46 A3F5DE73 		sub	r3, r3, #444
 2624 0e4a 4FF00072 		mov	r2, #33554432
 2625 0e4e 1A60     		str	r2, [r3]
 2626              	.LBE259:
 2627              	.LBE258:
 2628              	.LBB260:
 2629              	.LBB261:
 2630 0e50 07F50073 		add	r3, r7, #512
 2631 0e54 A3F5DE73 		sub	r3, r3, #444
 2632 0e58 1B68     		ldr	r3, [r3]
 2633              		.syntax unified
 2634              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2635 0e5a 93FAA3F2 		rbit r2, r3
 2636              	@ 0 "" 2
 2637              		.thumb
 2638              		.syntax unified
 2639 0e5e 07F50073 		add	r3, r7, #512
 2640 0e62 A3F5E073 		sub	r3, r3, #448
 2641 0e66 1A60     		str	r2, [r3]
 2642              	.LBE261:
 2643              	.LBE260:
 422:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2644              		.loc 2 422 15 discriminator 2
 2645 0e68 6C4B     		ldr	r3, .L177
 2646 0e6a 5B6A     		ldr	r3, [r3, #36]
 2647              	.L152:
 2648 0e6c 07F50072 		add	r2, r7, #512
 2649 0e70 A2F5E272 		sub	r2, r2, #452
 2650 0e74 4FF00071 		mov	r1, #33554432
 2651 0e78 1160     		str	r1, [r2]
 2652              	.LBB262:
 2653              	.LBB263:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2654              		.loc 3 531 4 discriminator 12
 2655 0e7a 07F50072 		add	r2, r7, #512
 2656 0e7e A2F5E272 		sub	r2, r2, #452
 2657 0e82 1268     		ldr	r2, [r2]
 2658              		.syntax unified
 2659              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2660 0e84 92FAA2F1 		rbit r1, r2
 2661              	@ 0 "" 2
 2662              		.thumb
 2663              		.syntax unified
 2664 0e88 07F50072 		add	r2, r7, #512
 2665 0e8c A2F5E472 		sub	r2, r2, #456
 2666 0e90 1160     		str	r1, [r2]
 2667              		.loc 3 544 9 discriminator 12
 2668 0e92 07F50072 		add	r2, r7, #512
 2669 0e96 A2F5E472 		sub	r2, r2, #456
 2670 0e9a 1268     		ldr	r2, [r2]
 2671              	.LBE263:
 2672              	.LBE262:
 422:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2673              		.loc 2 422 15 discriminator 12
 2674 0e9c B2FA82F2 		clz	r2, r2
 2675 0ea0 52B2     		sxtb	r2, r2
 2676 0ea2 42F02002 		orr	r2, r2, #32
 2677 0ea6 52B2     		sxtb	r2, r2
 2678 0ea8 D2B2     		uxtb	r2, r2
 2679 0eaa 02F01F02 		and	r2, r2, #31
 2680 0eae 0121     		movs	r1, #1
 2681 0eb0 01FA02F2 		lsl	r2, r1, r2
 2682 0eb4 1340     		ands	r3, r3, r2
 422:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2683              		.loc 2 422 14 discriminator 12
 2684 0eb6 002B     		cmp	r3, #0
 2685 0eb8 3FF47FAF 		beq	.L156
 2686 0ebc A7E0     		b	.L136
 2687              	.L138:
 2688 0ebe 07F50073 		add	r3, r7, #512
 2689 0ec2 A3F5E673 		sub	r3, r3, #460
 2690 0ec6 4FF08072 		mov	r2, #16777216
 2691 0eca 1A60     		str	r2, [r3]
 2692              	.LBB264:
 2693              	.LBB265:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2694              		.loc 3 531 4
 2695 0ecc 07F50073 		add	r3, r7, #512
 2696 0ed0 A3F5E673 		sub	r3, r3, #460
 2697 0ed4 1B68     		ldr	r3, [r3]
 2698              		.syntax unified
 2699              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2700 0ed6 93FAA3F2 		rbit r2, r3
 2701              	@ 0 "" 2
 2702              		.thumb
 2703              		.syntax unified
 2704 0eda 07F50073 		add	r3, r7, #512
 2705 0ede A3F5E873 		sub	r3, r3, #464
 2706 0ee2 1A60     		str	r2, [r3]
 2707              		.loc 3 544 9
 2708 0ee4 07F50073 		add	r3, r7, #512
 2709 0ee8 A3F5E873 		sub	r3, r3, #464
 2710 0eec 1B68     		ldr	r3, [r3]
 2711              	.LBE265:
 2712              	.LBE264:
 427:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 428:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 429:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 430:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
 431:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 432:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Disable the main PLL. */
 433:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_PLL_DISABLE();
 2713              		.loc 2 433 9
 2714 0eee B3FA83F3 		clz	r3, r3
 2715 0ef2 03F18453 		add	r3, r3, #276824064
 2716 0ef6 03F58413 		add	r3, r3, #1081344
 2717 0efa 9B00     		lsls	r3, r3, #2
 2718 0efc 1A46     		mov	r2, r3
 2719 0efe 0023     		movs	r3, #0
 2720 0f00 1360     		str	r3, [r2]
 434:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****  
 435:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 436:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 2721              		.loc 2 436 21
 2722 0f02 FFF7FEFF 		bl	HAL_GetTick
 2723 0f06 C7F8F801 		str	r0, [r7, #504]
 437:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 438:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till PLL is disabled */  
 439:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 2724              		.loc 2 439 14
 2725 0f0a 09E0     		b	.L158
 2726              	.L165:
 440:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 441:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 2727              		.loc 2 441 15
 2728 0f0c FFF7FEFF 		bl	HAL_GetTick
 2729 0f10 0246     		mov	r2, r0
 2730              		.loc 2 441 29
 2731 0f12 D7F8F831 		ldr	r3, [r7, #504]
 2732 0f16 D31A     		subs	r3, r2, r3
 2733              		.loc 2 441 13
 2734 0f18 022B     		cmp	r3, #2
 2735 0f1a 01D9     		bls	.L158
 442:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 443:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 2736              		.loc 2 443 20
 2737 0f1c 0323     		movs	r3, #3
 2738 0f1e 77E0     		b	.L40
 2739              	.L158:
 2740 0f20 07F50073 		add	r3, r7, #512
 2741 0f24 A3F5EA73 		sub	r3, r3, #468
 2742 0f28 4FF00072 		mov	r2, #33554432
 2743 0f2c 1A60     		str	r2, [r3]
 2744              	.LBB266:
 2745              	.LBB267:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2746              		.loc 3 531 4
 2747 0f2e 07F50073 		add	r3, r7, #512
 2748 0f32 A3F5EA73 		sub	r3, r3, #468
 2749 0f36 1B68     		ldr	r3, [r3]
 2750              		.syntax unified
 2751              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2752 0f38 93FAA3F2 		rbit r2, r3
 2753              	@ 0 "" 2
 2754              		.thumb
 2755              		.syntax unified
 2756 0f3c 07F50073 		add	r3, r7, #512
 2757 0f40 A3F5EC73 		sub	r3, r3, #472
 2758 0f44 1A60     		str	r2, [r3]
 2759              		.loc 3 544 9
 2760 0f46 07F50073 		add	r3, r7, #512
 2761 0f4a A3F5EC73 		sub	r3, r3, #472
 2762 0f4e 1B68     		ldr	r3, [r3]
 2763              	.LBE267:
 2764              	.LBE266:
 439:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2765              		.loc 2 439 15
 2766 0f50 B3FA83F3 		clz	r3, r3
 2767 0f54 DBB2     		uxtb	r3, r3
 2768 0f56 5B09     		lsrs	r3, r3, #5
 2769 0f58 DBB2     		uxtb	r3, r3
 2770 0f5a 43F00103 		orr	r3, r3, #1
 2771 0f5e DBB2     		uxtb	r3, r3
 2772 0f60 012B     		cmp	r3, #1
 2773 0f62 02D1     		bne	.L160
 439:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2774              		.loc 2 439 15 is_stmt 0 discriminator 1
 2775 0f64 2D4B     		ldr	r3, .L177
 2776 0f66 1B68     		ldr	r3, [r3]
 2777 0f68 27E0     		b	.L161
 2778              	.L160:
 2779 0f6a 07F50073 		add	r3, r7, #512
 2780 0f6e A3F5EE73 		sub	r3, r3, #476
 2781 0f72 4FF00072 		mov	r2, #33554432
 2782 0f76 1A60     		str	r2, [r3]
 2783              	.LBB268:
 2784              	.LBB269:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2785              		.loc 3 531 4 is_stmt 1 discriminator 2
 2786 0f78 07F50073 		add	r3, r7, #512
 2787 0f7c A3F5EE73 		sub	r3, r3, #476
 2788 0f80 1B68     		ldr	r3, [r3]
 2789              		.syntax unified
 2790              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2791 0f82 93FAA3F2 		rbit r2, r3
 2792              	@ 0 "" 2
 2793              		.thumb
 2794              		.syntax unified
 2795 0f86 07F50073 		add	r3, r7, #512
 2796 0f8a A3F5F073 		sub	r3, r3, #480
 2797 0f8e 1A60     		str	r2, [r3]
 2798 0f90 07F50073 		add	r3, r7, #512
 2799 0f94 A3F5F273 		sub	r3, r3, #484
 2800 0f98 4FF00072 		mov	r2, #33554432
 2801 0f9c 1A60     		str	r2, [r3]
 2802              	.LBE269:
 2803              	.LBE268:
 2804              	.LBB270:
 2805              	.LBB271:
 2806 0f9e 07F50073 		add	r3, r7, #512
 2807 0fa2 A3F5F273 		sub	r3, r3, #484
 2808 0fa6 1B68     		ldr	r3, [r3]
 2809              		.syntax unified
 2810              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2811 0fa8 93FAA3F2 		rbit r2, r3
 2812              	@ 0 "" 2
 2813              		.thumb
 2814              		.syntax unified
 2815 0fac 07F50073 		add	r3, r7, #512
 2816 0fb0 A3F5F473 		sub	r3, r3, #488
 2817 0fb4 1A60     		str	r2, [r3]
 2818              	.LBE271:
 2819              	.LBE270:
 439:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2820              		.loc 2 439 15 discriminator 2
 2821 0fb6 194B     		ldr	r3, .L177
 2822 0fb8 5B6A     		ldr	r3, [r3, #36]
 2823              	.L161:
 2824 0fba 07F50072 		add	r2, r7, #512
 2825 0fbe A2F5F672 		sub	r2, r2, #492
 2826 0fc2 4FF00071 		mov	r1, #33554432
 2827 0fc6 1160     		str	r1, [r2]
 2828              	.LBB272:
 2829              	.LBB273:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2830              		.loc 3 531 4 discriminator 12
 2831 0fc8 07F50072 		add	r2, r7, #512
 2832 0fcc A2F5F672 		sub	r2, r2, #492
 2833 0fd0 1268     		ldr	r2, [r2]
 2834              		.syntax unified
 2835              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2836 0fd2 92FAA2F1 		rbit r1, r2
 2837              	@ 0 "" 2
 2838              		.thumb
 2839              		.syntax unified
 2840 0fd6 07F50072 		add	r2, r7, #512
 2841 0fda A2F5F872 		sub	r2, r2, #496
 2842 0fde 1160     		str	r1, [r2]
 2843              		.loc 3 544 9 discriminator 12
 2844 0fe0 07F50072 		add	r2, r7, #512
 2845 0fe4 A2F5F872 		sub	r2, r2, #496
 2846 0fe8 1268     		ldr	r2, [r2]
 2847              	.LBE273:
 2848              	.LBE272:
 439:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2849              		.loc 2 439 15 discriminator 12
 2850 0fea B2FA82F2 		clz	r2, r2
 2851 0fee 52B2     		sxtb	r2, r2
 2852 0ff0 42F02002 		orr	r2, r2, #32
 2853 0ff4 52B2     		sxtb	r2, r2
 2854 0ff6 D2B2     		uxtb	r2, r2
 2855 0ff8 02F01F02 		and	r2, r2, #31
 2856 0ffc 0121     		movs	r1, #1
 2857 0ffe 01FA02F2 		lsl	r2, r1, r2
 2858 1002 1340     		ands	r3, r3, r2
 439:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2859              		.loc 2 439 14 discriminator 12
 2860 1004 002B     		cmp	r3, #0
 2861 1006 81D1     		bne	.L165
 2862 1008 01E0     		b	.L136
 2863              	.L137:
 444:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 445:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 446:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 447:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 448:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 449:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 450:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_ERROR;
 2864              		.loc 2 450 14
 2865 100a 0123     		movs	r3, #1
 2866 100c 00E0     		b	.L40
 2867              	.L136:
 451:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 452:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 453:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 454:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   return HAL_OK;
 2868              		.loc 2 454 10
 2869 100e 0023     		movs	r3, #0
 2870              	.L40:
 455:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 2871              		.loc 2 455 1
 2872 1010 1846     		mov	r0, r3
 2873 1012 07F50077 		add	r7, r7, #512
 2874              	.LCFI46:
 2875              		.cfi_def_cfa_offset 8
 2876 1016 BD46     		mov	sp, r7
 2877              	.LCFI47:
 2878              		.cfi_def_cfa_register 13
 2879              		@ sp needed
 2880 1018 80BD     		pop	{r7, pc}
 2881              	.L178:
 2882 101a 00BF     		.align	2
 2883              	.L177:
 2884 101c 00100240 		.word	1073876992
 2885              		.cfi_endproc
 2886              	.LFE132:
 2888              		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 2889              		.align	1
 2890              		.global	HAL_RCC_ClockConfig
 2891              		.syntax unified
 2892              		.thumb
 2893              		.thumb_func
 2894              		.fpu softvfp
 2896              	HAL_RCC_ClockConfig:
 2897              	.LFB133:
 456:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 457:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 458:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 459:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Initializes the CPU, AHB and APB buses clocks according to the specified 
 460:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         parameters in the RCC_ClkInitStruct.
 461:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_OscInitTypeDef structure that
 462:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         contains the configuration information for the RCC peripheral.
 463:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  FLatency FLASH Latency                   
 464:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *          The value of this parameter depend on device used within the same series
 465:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 466:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         and updated by @ref HAL_RCC_GetHCLKFreq() function called within this function
 467:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
 468:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 469:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         start-up from Reset, wake-up from STOP and STANDBY mode, or in case
 470:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         of failure of the HSE used directly or indirectly as system clock
 471:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         (if the Clock Security System CSS is enabled).
 472:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *           
 473:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   A switch from one clock source to another occurs only if the target
 474:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         clock source is ready (clock stable after start-up delay or PLL locked). 
 475:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         If a clock source which is not yet ready is selected, the switch will
 476:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         occur when the clock source will be ready. 
 477:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
 478:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         currently used as system clock source.
 479:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
 480:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 481:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 482:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 2898              		.loc 2 482 1
 2899              		.cfi_startproc
 2900              		@ args = 0, pretend = 0, frame = 112
 2901              		@ frame_needed = 1, uses_anonymous_args = 0
 2902 0000 80B5     		push	{r7, lr}
 2903              	.LCFI48:
 2904              		.cfi_def_cfa_offset 8
 2905              		.cfi_offset 7, -8
 2906              		.cfi_offset 14, -4
 2907 0002 9CB0     		sub	sp, sp, #112
 2908              	.LCFI49:
 2909              		.cfi_def_cfa_offset 120
 2910 0004 00AF     		add	r7, sp, #0
 2911              	.LCFI50:
 2912              		.cfi_def_cfa_register 7
 2913 0006 7860     		str	r0, [r7, #4]
 2914 0008 3960     		str	r1, [r7]
 483:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 2915              		.loc 2 483 12
 2916 000a 0023     		movs	r3, #0
 2917 000c FB66     		str	r3, [r7, #108]
 484:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 485:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 486:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(RCC_ClkInitStruct != NULL);
 487:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 488:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 489:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 490:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 491:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   must be correctly programmed according to the frequency of the CPU clock 
 492:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     (HCLK) of the device. */
 493:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 494:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Increasing the number of wait states because of higher CPU frequency */
 495:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 2918              		.loc 2 495 23
 2919 000e 984B     		ldr	r3, .L216
 2920 0010 1B68     		ldr	r3, [r3]
 2921              		.loc 2 495 29
 2922 0012 03F00703 		and	r3, r3, #7
 2923              		.loc 2 495 5
 2924 0016 3A68     		ldr	r2, [r7]
 2925 0018 9A42     		cmp	r2, r3
 2926 001a 10D9     		bls	.L180
 496:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {    
 497:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 498:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 2927              		.loc 2 498 5
 2928 001c 944B     		ldr	r3, .L216
 2929 001e 1B68     		ldr	r3, [r3]
 2930 0020 23F00702 		bic	r2, r3, #7
 2931 0024 9249     		ldr	r1, .L216
 2932 0026 3B68     		ldr	r3, [r7]
 2933 0028 1343     		orrs	r3, r3, r2
 2934 002a 0B60     		str	r3, [r1]
 499:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 500:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 501:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     memory by reading the FLASH_ACR register */
 502:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 2935              		.loc 2 502 14
 2936 002c 904B     		ldr	r3, .L216
 2937 002e 1B68     		ldr	r3, [r3]
 2938              		.loc 2 502 20
 2939 0030 03F00703 		and	r3, r3, #7
 2940              		.loc 2 502 7
 2941 0034 3A68     		ldr	r2, [r7]
 2942 0036 9A42     		cmp	r2, r3
 2943 0038 01D0     		beq	.L180
 503:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 504:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_ERROR;
 2944              		.loc 2 504 14
 2945 003a 0123     		movs	r3, #1
 2946 003c 5AE1     		b	.L181
 2947              	.L180:
 505:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 506:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 507:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 508:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- HCLK Configuration --------------------------*/
 509:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 2948              		.loc 2 509 25
 2949 003e 7B68     		ldr	r3, [r7, #4]
 2950 0040 1B68     		ldr	r3, [r3]
 2951              		.loc 2 509 38
 2952 0042 03F00203 		and	r3, r3, #2
 2953              		.loc 2 509 5
 2954 0046 002B     		cmp	r3, #0
 2955 0048 08D0     		beq	.L182
 510:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 511:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 512:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 2956              		.loc 2 512 5
 2957 004a 8A4B     		ldr	r3, .L216+4
 2958 004c 5B68     		ldr	r3, [r3, #4]
 2959 004e 23F0F002 		bic	r2, r3, #240
 2960 0052 7B68     		ldr	r3, [r7, #4]
 2961 0054 9B68     		ldr	r3, [r3, #8]
 2962 0056 8749     		ldr	r1, .L216+4
 2963 0058 1343     		orrs	r3, r3, r2
 2964 005a 4B60     		str	r3, [r1, #4]
 2965              	.L182:
 513:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 514:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 515:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*------------------------- SYSCLK Configuration ---------------------------*/ 
 516:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 2966              		.loc 2 516 25
 2967 005c 7B68     		ldr	r3, [r7, #4]
 2968 005e 1B68     		ldr	r3, [r3]
 2969              		.loc 2 516 38
 2970 0060 03F00103 		and	r3, r3, #1
 2971              		.loc 2 516 5
 2972 0064 002B     		cmp	r3, #0
 2973 0066 00F00D81 		beq	.L183
 517:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {    
 518:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 519:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 520:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* HSE is selected as System Clock Source */
 521:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 2974              		.loc 2 521 25
 2975 006a 7B68     		ldr	r3, [r7, #4]
 2976 006c 5B68     		ldr	r3, [r3, #4]
 2977              		.loc 2 521 7
 2978 006e 012B     		cmp	r3, #1
 2979 0070 3DD1     		bne	.L184
 2980 0072 4FF40033 		mov	r3, #131072
 2981 0076 BB66     		str	r3, [r7, #104]
 2982              	.LBB274:
 2983              	.LBB275:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2984              		.loc 3 531 4
 2985 0078 BB6E     		ldr	r3, [r7, #104]
 2986              		.syntax unified
 2987              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2988 007a 93FAA3F3 		rbit r3, r3
 2989              	@ 0 "" 2
 2990              		.thumb
 2991              		.syntax unified
 2992 007e 7B66     		str	r3, [r7, #100]
 2993              		.loc 3 544 9
 2994 0080 7B6E     		ldr	r3, [r7, #100]
 2995              	.LBE275:
 2996              	.LBE274:
 522:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 523:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Check the HSE ready flag */  
 524:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 2997              		.loc 2 524 10
 2998 0082 B3FA83F3 		clz	r3, r3
 2999 0086 DBB2     		uxtb	r3, r3
 3000 0088 5B09     		lsrs	r3, r3, #5
 3001 008a DBB2     		uxtb	r3, r3
 3002 008c 43F00103 		orr	r3, r3, #1
 3003 0090 DBB2     		uxtb	r3, r3
 3004 0092 012B     		cmp	r3, #1
 3005 0094 02D1     		bne	.L186
 3006              		.loc 2 524 10 is_stmt 0 discriminator 1
 3007 0096 774B     		ldr	r3, .L216+4
 3008 0098 1B68     		ldr	r3, [r3]
 3009 009a 0FE0     		b	.L187
 3010              	.L186:
 3011 009c 4FF40033 		mov	r3, #131072
 3012 00a0 3B66     		str	r3, [r7, #96]
 3013              	.LBB276:
 3014              	.LBB277:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 3015              		.loc 3 531 4 is_stmt 1 discriminator 2
 3016 00a2 3B6E     		ldr	r3, [r7, #96]
 3017              		.syntax unified
 3018              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 3019 00a4 93FAA3F3 		rbit r3, r3
 3020              	@ 0 "" 2
 3021              		.thumb
 3022              		.syntax unified
 3023 00a8 FB65     		str	r3, [r7, #92]
 3024 00aa 4FF40033 		mov	r3, #131072
 3025 00ae BB65     		str	r3, [r7, #88]
 3026              	.LBE277:
 3027              	.LBE276:
 3028              	.LBB278:
 3029              	.LBB279:
 3030 00b0 BB6D     		ldr	r3, [r7, #88]
 3031              		.syntax unified
 3032              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 3033 00b2 93FAA3F3 		rbit r3, r3
 3034              	@ 0 "" 2
 3035              		.thumb
 3036              		.syntax unified
 3037 00b6 7B65     		str	r3, [r7, #84]
 3038              	.LBE279:
 3039              	.LBE278:
 3040              		.loc 2 524 10 discriminator 2
 3041 00b8 6E4B     		ldr	r3, .L216+4
 3042 00ba 5B6A     		ldr	r3, [r3, #36]
 3043              	.L187:
 3044 00bc 4FF40032 		mov	r2, #131072
 3045 00c0 3A65     		str	r2, [r7, #80]
 3046              	.LBB280:
 3047              	.LBB281:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 3048              		.loc 3 531 4 discriminator 12
 3049 00c2 3A6D     		ldr	r2, [r7, #80]
 3050              		.syntax unified
 3051              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 3052 00c4 92FAA2F2 		rbit r2, r2
 3053              	@ 0 "" 2
 3054              		.thumb
 3055              		.syntax unified
 3056 00c8 FA64     		str	r2, [r7, #76]
 3057              		.loc 3 544 9 discriminator 12
 3058 00ca FA6C     		ldr	r2, [r7, #76]
 3059              	.LBE281:
 3060              	.LBE280:
 3061              		.loc 2 524 10 discriminator 12
 3062 00cc B2FA82F2 		clz	r2, r2
 3063 00d0 52B2     		sxtb	r2, r2
 3064 00d2 42F02002 		orr	r2, r2, #32
 3065 00d6 52B2     		sxtb	r2, r2
 3066 00d8 D2B2     		uxtb	r2, r2
 3067 00da 02F01F02 		and	r2, r2, #31
 3068 00de 0121     		movs	r1, #1
 3069 00e0 01FA02F2 		lsl	r2, r1, r2
 3070 00e4 1340     		ands	r3, r3, r2
 3071              		.loc 2 524 9 discriminator 12
 3072 00e6 002B     		cmp	r3, #0
 3073 00e8 7DD1     		bne	.L191
 525:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 526:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_ERROR;
 3074              		.loc 2 526 16
 3075 00ea 0123     		movs	r3, #1
 3076 00ec 02E1     		b	.L181
 3077              	.L184:
 527:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 528:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 529:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* PLL is selected as System Clock Source */
 530:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 3078              		.loc 2 530 30
 3079 00ee 7B68     		ldr	r3, [r7, #4]
 3080 00f0 5B68     		ldr	r3, [r3, #4]
 3081              		.loc 2 530 12
 3082 00f2 022B     		cmp	r3, #2
 3083 00f4 3DD1     		bne	.L192
 3084 00f6 4FF00073 		mov	r3, #33554432
 3085 00fa BB64     		str	r3, [r7, #72]
 3086              	.LBB282:
 3087              	.LBB283:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 3088              		.loc 3 531 4
 3089 00fc BB6C     		ldr	r3, [r7, #72]
 3090              		.syntax unified
 3091              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 3092 00fe 93FAA3F3 		rbit r3, r3
 3093              	@ 0 "" 2
 3094              		.thumb
 3095              		.syntax unified
 3096 0102 7B64     		str	r3, [r7, #68]
 3097              		.loc 3 544 9
 3098 0104 7B6C     		ldr	r3, [r7, #68]
 3099              	.LBE283:
 3100              	.LBE282:
 531:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 532:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Check the PLL ready flag */  
 533:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 3101              		.loc 2 533 10
 3102 0106 B3FA83F3 		clz	r3, r3
 3103 010a DBB2     		uxtb	r3, r3
 3104 010c 5B09     		lsrs	r3, r3, #5
 3105 010e DBB2     		uxtb	r3, r3
 3106 0110 43F00103 		orr	r3, r3, #1
 3107 0114 DBB2     		uxtb	r3, r3
 3108 0116 012B     		cmp	r3, #1
 3109 0118 02D1     		bne	.L194
 3110              		.loc 2 533 10 is_stmt 0 discriminator 1
 3111 011a 564B     		ldr	r3, .L216+4
 3112 011c 1B68     		ldr	r3, [r3]
 3113 011e 0FE0     		b	.L195
 3114              	.L194:
 3115 0120 4FF00073 		mov	r3, #33554432
 3116 0124 3B64     		str	r3, [r7, #64]
 3117              	.LBB284:
 3118              	.LBB285:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 3119              		.loc 3 531 4 is_stmt 1 discriminator 2
 3120 0126 3B6C     		ldr	r3, [r7, #64]
 3121              		.syntax unified
 3122              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 3123 0128 93FAA3F3 		rbit r3, r3
 3124              	@ 0 "" 2
 3125              		.thumb
 3126              		.syntax unified
 3127 012c FB63     		str	r3, [r7, #60]
 3128 012e 4FF00073 		mov	r3, #33554432
 3129 0132 BB63     		str	r3, [r7, #56]
 3130              	.LBE285:
 3131              	.LBE284:
 3132              	.LBB286:
 3133              	.LBB287:
 3134 0134 BB6B     		ldr	r3, [r7, #56]
 3135              		.syntax unified
 3136              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 3137 0136 93FAA3F3 		rbit r3, r3
 3138              	@ 0 "" 2
 3139              		.thumb
 3140              		.syntax unified
 3141 013a 7B63     		str	r3, [r7, #52]
 3142              	.LBE287:
 3143              	.LBE286:
 3144              		.loc 2 533 10 discriminator 2
 3145 013c 4D4B     		ldr	r3, .L216+4
 3146 013e 5B6A     		ldr	r3, [r3, #36]
 3147              	.L195:
 3148 0140 4FF00072 		mov	r2, #33554432
 3149 0144 3A63     		str	r2, [r7, #48]
 3150              	.LBB288:
 3151              	.LBB289:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 3152              		.loc 3 531 4 discriminator 12
 3153 0146 3A6B     		ldr	r2, [r7, #48]
 3154              		.syntax unified
 3155              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 3156 0148 92FAA2F2 		rbit r2, r2
 3157              	@ 0 "" 2
 3158              		.thumb
 3159              		.syntax unified
 3160 014c FA62     		str	r2, [r7, #44]
 3161              		.loc 3 544 9 discriminator 12
 3162 014e FA6A     		ldr	r2, [r7, #44]
 3163              	.LBE289:
 3164              	.LBE288:
 3165              		.loc 2 533 10 discriminator 12
 3166 0150 B2FA82F2 		clz	r2, r2
 3167 0154 52B2     		sxtb	r2, r2
 3168 0156 42F02002 		orr	r2, r2, #32
 3169 015a 52B2     		sxtb	r2, r2
 3170 015c D2B2     		uxtb	r2, r2
 3171 015e 02F01F02 		and	r2, r2, #31
 3172 0162 0121     		movs	r1, #1
 3173 0164 01FA02F2 		lsl	r2, r1, r2
 3174 0168 1340     		ands	r3, r3, r2
 3175              		.loc 2 533 9 discriminator 12
 3176 016a 002B     		cmp	r3, #0
 3177 016c 3BD1     		bne	.L191
 534:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 535:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_ERROR;
 3178              		.loc 2 535 16
 3179 016e 0123     		movs	r3, #1
 3180 0170 C0E0     		b	.L181
 3181              	.L192:
 3182 0172 0223     		movs	r3, #2
 3183 0174 BB62     		str	r3, [r7, #40]
 3184              	.LBB290:
 3185              	.LBB291:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 3186              		.loc 3 531 4
 3187 0176 BB6A     		ldr	r3, [r7, #40]
 3188              		.syntax unified
 3189              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 3190 0178 93FAA3F3 		rbit r3, r3
 3191              	@ 0 "" 2
 3192              		.thumb
 3193              		.syntax unified
 3194 017c 7B62     		str	r3, [r7, #36]
 3195              		.loc 3 544 9
 3196 017e 7B6A     		ldr	r3, [r7, #36]
 3197              	.LBE291:
 3198              	.LBE290:
 536:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 537:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 538:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* HSI is selected as System Clock Source */
 539:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 540:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 541:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Check the HSI ready flag */  
 542:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 3199              		.loc 2 542 10
 3200 0180 B3FA83F3 		clz	r3, r3
 3201 0184 DBB2     		uxtb	r3, r3
 3202 0186 5B09     		lsrs	r3, r3, #5
 3203 0188 DBB2     		uxtb	r3, r3
 3204 018a 43F00103 		orr	r3, r3, #1
 3205 018e DBB2     		uxtb	r3, r3
 3206 0190 012B     		cmp	r3, #1
 3207 0192 02D1     		bne	.L200
 3208              		.loc 2 542 10 is_stmt 0 discriminator 1
 3209 0194 374B     		ldr	r3, .L216+4
 3210 0196 1B68     		ldr	r3, [r3]
 3211 0198 0DE0     		b	.L201
 3212              	.L200:
 3213 019a 0223     		movs	r3, #2
 3214 019c 3B62     		str	r3, [r7, #32]
 3215              	.LBB292:
 3216              	.LBB293:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 3217              		.loc 3 531 4 is_stmt 1 discriminator 2
 3218 019e 3B6A     		ldr	r3, [r7, #32]
 3219              		.syntax unified
 3220              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 3221 01a0 93FAA3F3 		rbit r3, r3
 3222              	@ 0 "" 2
 3223              		.thumb
 3224              		.syntax unified
 3225 01a4 FB61     		str	r3, [r7, #28]
 3226 01a6 0223     		movs	r3, #2
 3227 01a8 BB61     		str	r3, [r7, #24]
 3228              	.LBE293:
 3229              	.LBE292:
 3230              	.LBB294:
 3231              	.LBB295:
 3232 01aa BB69     		ldr	r3, [r7, #24]
 3233              		.syntax unified
 3234              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 3235 01ac 93FAA3F3 		rbit r3, r3
 3236              	@ 0 "" 2
 3237              		.thumb
 3238              		.syntax unified
 3239 01b0 7B61     		str	r3, [r7, #20]
 3240              	.LBE295:
 3241              	.LBE294:
 3242              		.loc 2 542 10 discriminator 2
 3243 01b2 304B     		ldr	r3, .L216+4
 3244 01b4 5B6A     		ldr	r3, [r3, #36]
 3245              	.L201:
 3246 01b6 0222     		movs	r2, #2
 3247 01b8 3A61     		str	r2, [r7, #16]
 3248              	.LBB296:
 3249              	.LBB297:
 531:../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 3250              		.loc 3 531 4 discriminator 12
 3251 01ba 3A69     		ldr	r2, [r7, #16]
 3252              		.syntax unified
 3253              	@ 531 "../base/./hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 3254 01bc 92FAA2F2 		rbit r2, r2
 3255              	@ 0 "" 2
 3256              		.thumb
 3257              		.syntax unified
 3258 01c0 FA60     		str	r2, [r7, #12]
 3259              		.loc 3 544 9 discriminator 12
 3260 01c2 FA68     		ldr	r2, [r7, #12]
 3261              	.LBE297:
 3262              	.LBE296:
 3263              		.loc 2 542 10 discriminator 12
 3264 01c4 B2FA82F2 		clz	r2, r2
 3265 01c8 52B2     		sxtb	r2, r2
 3266 01ca 42F02002 		orr	r2, r2, #32
 3267 01ce 52B2     		sxtb	r2, r2
 3268 01d0 D2B2     		uxtb	r2, r2
 3269 01d2 02F01F02 		and	r2, r2, #31
 3270 01d6 0121     		movs	r1, #1
 3271 01d8 01FA02F2 		lsl	r2, r1, r2
 3272 01dc 1340     		ands	r3, r3, r2
 3273              		.loc 2 542 9 discriminator 12
 3274 01de 002B     		cmp	r3, #0
 3275 01e0 01D1     		bne	.L191
 543:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 544:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_ERROR;
 3276              		.loc 2 544 16
 3277 01e2 0123     		movs	r3, #1
 3278 01e4 86E0     		b	.L181
 3279              	.L191:
 545:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 546:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 547:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 3280              		.loc 2 547 5
 3281 01e6 234B     		ldr	r3, .L216+4
 3282 01e8 5B68     		ldr	r3, [r3, #4]
 3283 01ea 23F00302 		bic	r2, r3, #3
 3284 01ee 7B68     		ldr	r3, [r7, #4]
 3285 01f0 5B68     		ldr	r3, [r3, #4]
 3286 01f2 2049     		ldr	r1, .L216+4
 3287 01f4 1343     		orrs	r3, r3, r2
 3288 01f6 4B60     		str	r3, [r1, #4]
 548:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 549:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Get Start Tick */
 550:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     tickstart = HAL_GetTick();
 3289              		.loc 2 550 17
 3290 01f8 FFF7FEFF 		bl	HAL_GetTick
 3291 01fc F866     		str	r0, [r7, #108]
 551:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 552:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 3292              		.loc 2 552 25
 3293 01fe 7B68     		ldr	r3, [r7, #4]
 3294 0200 5B68     		ldr	r3, [r3, #4]
 3295              		.loc 2 552 7
 3296 0202 012B     		cmp	r3, #1
 3297 0204 12D1     		bne	.L205
 553:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 554:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 3298              		.loc 2 554 13
 3299 0206 0AE0     		b	.L206
 3300              	.L207:
 555:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 556:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 3301              		.loc 2 556 13
 3302 0208 FFF7FEFF 		bl	HAL_GetTick
 3303 020c 0246     		mov	r2, r0
 3304              		.loc 2 556 27
 3305 020e FB6E     		ldr	r3, [r7, #108]
 3306 0210 D31A     		subs	r3, r2, r3
 3307              		.loc 2 556 11
 3308 0212 41F28832 		movw	r2, #5000
 3309 0216 9342     		cmp	r3, r2
 3310 0218 01D9     		bls	.L206
 557:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 558:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 3311              		.loc 2 558 18
 3312 021a 0323     		movs	r3, #3
 3313 021c 6AE0     		b	.L181
 3314              	.L206:
 554:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 3315              		.loc 2 554 14
 3316 021e 154B     		ldr	r3, .L216+4
 3317 0220 5B68     		ldr	r3, [r3, #4]
 3318 0222 03F00C03 		and	r3, r3, #12
 554:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 3319              		.loc 2 554 13
 3320 0226 042B     		cmp	r3, #4
 3321 0228 EED1     		bne	.L207
 3322 022a 2BE0     		b	.L183
 3323              	.L205:
 559:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 560:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 561:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 562:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 3324              		.loc 2 562 30
 3325 022c 7B68     		ldr	r3, [r7, #4]
 3326 022e 5B68     		ldr	r3, [r3, #4]
 3327              		.loc 2 562 12
 3328 0230 022B     		cmp	r3, #2
 3329 0232 21D1     		bne	.L211
 563:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 564:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 3330              		.loc 2 564 13
 3331 0234 0AE0     		b	.L209
 3332              	.L210:
 565:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 566:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 3333              		.loc 2 566 13
 3334 0236 FFF7FEFF 		bl	HAL_GetTick
 3335 023a 0246     		mov	r2, r0
 3336              		.loc 2 566 27
 3337 023c FB6E     		ldr	r3, [r7, #108]
 3338 023e D31A     		subs	r3, r2, r3
 3339              		.loc 2 566 11
 3340 0240 41F28832 		movw	r2, #5000
 3341 0244 9342     		cmp	r3, r2
 3342 0246 01D9     		bls	.L209
 567:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 568:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 3343              		.loc 2 568 18
 3344 0248 0323     		movs	r3, #3
 3345 024a 53E0     		b	.L181
 3346              	.L209:
 564:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 3347              		.loc 2 564 14
 3348 024c 094B     		ldr	r3, .L216+4
 3349 024e 5B68     		ldr	r3, [r3, #4]
 3350 0250 03F00C03 		and	r3, r3, #12
 564:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 3351              		.loc 2 564 13
 3352 0254 082B     		cmp	r3, #8
 3353 0256 EED1     		bne	.L210
 3354 0258 14E0     		b	.L183
 3355              	.L212:
 569:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 570:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 571:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 572:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 573:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 574:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 575:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 576:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 3356              		.loc 2 576 13
 3357 025a FFF7FEFF 		bl	HAL_GetTick
 3358 025e 0246     		mov	r2, r0
 3359              		.loc 2 576 27
 3360 0260 FB6E     		ldr	r3, [r7, #108]
 3361 0262 D31A     		subs	r3, r2, r3
 3362              		.loc 2 576 11
 3363 0264 41F28832 		movw	r2, #5000
 3364 0268 9342     		cmp	r3, r2
 3365 026a 05D9     		bls	.L211
 577:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 578:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 3366              		.loc 2 578 18
 3367 026c 0323     		movs	r3, #3
 3368 026e 41E0     		b	.L181
 3369              	.L217:
 3370              		.align	2
 3371              	.L216:
 3372 0270 00200240 		.word	1073881088
 3373 0274 00100240 		.word	1073876992
 3374              	.L211:
 574:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 3375              		.loc 2 574 14
 3376 0278 204B     		ldr	r3, .L218
 3377 027a 5B68     		ldr	r3, [r3, #4]
 3378 027c 03F00C03 		and	r3, r3, #12
 574:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 3379              		.loc 2 574 13
 3380 0280 002B     		cmp	r3, #0
 3381 0282 EAD1     		bne	.L212
 3382              	.L183:
 579:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 580:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 581:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }      
 582:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }    
 583:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Decreasing the number of wait states because of lower CPU frequency */
 584:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 3383              		.loc 2 584 23
 3384 0284 1E4B     		ldr	r3, .L218+4
 3385 0286 1B68     		ldr	r3, [r3]
 3386              		.loc 2 584 29
 3387 0288 03F00703 		and	r3, r3, #7
 3388              		.loc 2 584 5
 3389 028c 3A68     		ldr	r2, [r7]
 3390 028e 9A42     		cmp	r2, r3
 3391 0290 10D2     		bcs	.L213
 585:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {    
 586:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 587:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 3392              		.loc 2 587 5
 3393 0292 1B4B     		ldr	r3, .L218+4
 3394 0294 1B68     		ldr	r3, [r3]
 3395 0296 23F00702 		bic	r2, r3, #7
 3396 029a 1949     		ldr	r1, .L218+4
 3397 029c 3B68     		ldr	r3, [r7]
 3398 029e 1343     		orrs	r3, r3, r2
 3399 02a0 0B60     		str	r3, [r1]
 588:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 589:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 590:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     memory by reading the FLASH_ACR register */
 591:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 3400              		.loc 2 591 14
 3401 02a2 174B     		ldr	r3, .L218+4
 3402 02a4 1B68     		ldr	r3, [r3]
 3403              		.loc 2 591 20
 3404 02a6 03F00703 		and	r3, r3, #7
 3405              		.loc 2 591 7
 3406 02aa 3A68     		ldr	r2, [r7]
 3407 02ac 9A42     		cmp	r2, r3
 3408 02ae 01D0     		beq	.L213
 592:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 593:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_ERROR;
 3409              		.loc 2 593 14
 3410 02b0 0123     		movs	r3, #1
 3411 02b2 1FE0     		b	.L181
 3412              	.L213:
 594:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 595:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }    
 596:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 597:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/ 
 598:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 3413              		.loc 2 598 25
 3414 02b4 7B68     		ldr	r3, [r7, #4]
 3415 02b6 1B68     		ldr	r3, [r3]
 3416              		.loc 2 598 38
 3417 02b8 03F00403 		and	r3, r3, #4
 3418              		.loc 2 598 5
 3419 02bc 002B     		cmp	r3, #0
 3420 02be 08D0     		beq	.L214
 599:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 600:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 601:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 3421              		.loc 2 601 5
 3422 02c0 0E4B     		ldr	r3, .L218
 3423 02c2 5B68     		ldr	r3, [r3, #4]
 3424 02c4 23F4E062 		bic	r2, r3, #1792
 3425 02c8 7B68     		ldr	r3, [r7, #4]
 3426 02ca DB68     		ldr	r3, [r3, #12]
 3427 02cc 0B49     		ldr	r1, .L218
 3428 02ce 1343     		orrs	r3, r3, r2
 3429 02d0 4B60     		str	r3, [r1, #4]
 3430              	.L214:
 602:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 603:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 604:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/ 
 605:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 3431              		.loc 2 605 25
 3432 02d2 7B68     		ldr	r3, [r7, #4]
 3433 02d4 1B68     		ldr	r3, [r3]
 3434              		.loc 2 605 38
 3435 02d6 03F00803 		and	r3, r3, #8
 3436              		.loc 2 605 5
 3437 02da 002B     		cmp	r3, #0
 3438 02dc 09D0     		beq	.L215
 606:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 607:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 608:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 3439              		.loc 2 608 5
 3440 02de 074B     		ldr	r3, .L218
 3441 02e0 5B68     		ldr	r3, [r3, #4]
 3442 02e2 23F46052 		bic	r2, r3, #14336
 3443 02e6 7B68     		ldr	r3, [r7, #4]
 3444 02e8 1B69     		ldr	r3, [r3, #16]
 3445 02ea DB00     		lsls	r3, r3, #3
 3446 02ec 0349     		ldr	r1, .L218
 3447 02ee 1343     		orrs	r3, r3, r2
 3448 02f0 4B60     		str	r3, [r1, #4]
 3449              	.L215:
 609:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 610:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****  
 611:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Update the SystemCoreClock global variable */
 612:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_
 613:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 614:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Configure the source of time base considering new system clocks settings*/
 615:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   //HAL_InitTick (TICK_INT_PRIORITY);
 616:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 617:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   return HAL_OK;
 3450              		.loc 2 617 10
 3451 02f2 0023     		movs	r3, #0
 3452              	.L181:
 618:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 3453              		.loc 2 618 1
 3454 02f4 1846     		mov	r0, r3
 3455 02f6 7037     		adds	r7, r7, #112
 3456              	.LCFI51:
 3457              		.cfi_def_cfa_offset 8
 3458 02f8 BD46     		mov	sp, r7
 3459              	.LCFI52:
 3460              		.cfi_def_cfa_register 13
 3461              		@ sp needed
 3462 02fa 80BD     		pop	{r7, pc}
 3463              	.L219:
 3464              		.align	2
 3465              	.L218:
 3466 02fc 00100240 		.word	1073876992
 3467 0300 00200240 		.word	1073881088
 3468              		.cfi_endproc
 3469              	.LFE133:
 3471              		.section	.text.HAL_RCC_GetPCLK2Freq,"ax",%progbits
 3472              		.align	1
 3473              		.global	HAL_RCC_GetPCLK2Freq
 3474              		.syntax unified
 3475              		.thumb
 3476              		.thumb_func
 3477              		.fpu softvfp
 3479              	HAL_RCC_GetPCLK2Freq:
 3480              	.LFB134:
 619:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 620:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 621:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Returns the PCLK2 frequency
 622:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
 623:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
 624:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval PCLK2 frequency
 625:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 626:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
 627:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 3481              		.loc 2 627 1
 3482              		.cfi_startproc
 3483              		@ args = 0, pretend = 0, frame = 0
 3484              		@ frame_needed = 1, uses_anonymous_args = 0
 3485              		@ link register save eliminated.
 3486 0000 80B4     		push	{r7}
 3487              	.LCFI53:
 3488              		.cfi_def_cfa_offset 4
 3489              		.cfi_offset 7, -4
 3490 0002 00AF     		add	r7, sp, #0
 3491              	.LCFI54:
 3492              		.cfi_def_cfa_register 7
 628:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
 629:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   //return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_C
 630:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   return F_CPU;
 3493              		.loc 2 630 10
 3494 0004 4FF4E103 		mov	r3, #7372800
 631:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 3495              		.loc 2 631 1
 3496 0008 1846     		mov	r0, r3
 3497 000a BD46     		mov	sp, r7
 3498              	.LCFI55:
 3499              		.cfi_def_cfa_register 13
 3500              		@ sp needed
 3501 000c 80BC     		pop	{r7}
 3502              	.LCFI56:
 3503              		.cfi_restore 7
 3504              		.cfi_def_cfa_offset 0
 3505 000e 7047     		bx	lr
 3506              		.cfi_endproc
 3507              	.LFE134:
 3509              		.section	.text.HAL_GPIO_Init,"ax",%progbits
 3510              		.align	1
 3511              		.global	HAL_GPIO_Init
 3512              		.syntax unified
 3513              		.thumb
 3514              		.thumb_func
 3515              		.fpu softvfp
 3517              	HAL_GPIO_Init:
 3518              	.LFB135:
 632:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 633:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 634:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 635:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #define GPIO_MODE             (0x00000003U)
 636:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #define EXTI_MODE             (0x10000000U)
 637:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #define GPIO_MODE_IT          (0x00010000U)
 638:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #define GPIO_MODE_EVT         (0x00020000U)
 639:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #define RISING_EDGE           (0x00100000U)
 640:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #define FALLING_EDGE          (0x00200000U)
 641:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #define GPIO_OUTPUT_TYPE      (0x00000010U)
 642:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 643:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #define GPIO_NUMBER           (16U)
 644:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 645:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** #define __HAL_RCC_GPIOA_CLK_ENABLE()   do { \
 646:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****                                         __IO uint32_t tmpreg; \
 647:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****                                         SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOAEN);\
 648:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****                                         /* Delay after an RCC peripheral clock enabling */ \
 649:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****                                         tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_GPIOAEN);\
 650:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****                                         UNUSED(tmpreg); \
 651:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****                                       } while(0U)
 652:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 653:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 654:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 655:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Initialize the GPIOx peripheral according to the specified parameters in the GPIO_Init.
 656:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  GPIOx: where x can be (A..F) to select the GPIO peripheral for STM32F3 family devices
 657:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
 658:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         the configuration information for the specified GPIO peripheral.
 659:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval None
 660:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 661:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
 662:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 3519              		.loc 2 662 1
 3520              		.cfi_startproc
 3521              		@ args = 0, pretend = 0, frame = 24
 3522              		@ frame_needed = 1, uses_anonymous_args = 0
 3523              		@ link register save eliminated.
 3524 0000 80B4     		push	{r7}
 3525              	.LCFI57:
 3526              		.cfi_def_cfa_offset 4
 3527              		.cfi_offset 7, -4
 3528 0002 87B0     		sub	sp, sp, #28
 3529              	.LCFI58:
 3530              		.cfi_def_cfa_offset 32
 3531 0004 00AF     		add	r7, sp, #0
 3532              	.LCFI59:
 3533              		.cfi_def_cfa_register 7
 3534 0006 7860     		str	r0, [r7, #4]
 3535 0008 3960     		str	r1, [r7]
 663:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t position = 0x00U;
 3536              		.loc 2 663 12
 3537 000a 0023     		movs	r3, #0
 3538 000c 7B61     		str	r3, [r7, #20]
 664:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t iocurrent = 0x00U;
 3539              		.loc 2 664 12
 3540 000e 0023     		movs	r3, #0
 3541 0010 FB60     		str	r3, [r7, #12]
 665:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t temp = 0x00U;
 3542              		.loc 2 665 12
 3543 0012 0023     		movs	r3, #0
 3544 0014 3B61     		str	r3, [r7, #16]
 666:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 667:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 668:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 669:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 670:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 671:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 672:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 673:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Configure the port pins */
 674:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   while (((GPIO_Init->Pin) >> position) != RESET)
 3545              		.loc 2 674 9
 3546 0016 54E1     		b	.L223
 3547              	.L243:
 675:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 676:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Get current io position */
 677:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     iocurrent = (GPIO_Init->Pin) & (1U << position);
 3548              		.loc 2 677 27
 3549 0018 3B68     		ldr	r3, [r7]
 3550 001a 1A68     		ldr	r2, [r3]
 3551              		.loc 2 677 40
 3552 001c 0121     		movs	r1, #1
 3553 001e 7B69     		ldr	r3, [r7, #20]
 3554 0020 01FA03F3 		lsl	r3, r1, r3
 3555              		.loc 2 677 15
 3556 0024 1340     		ands	r3, r3, r2
 3557 0026 FB60     		str	r3, [r7, #12]
 678:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 679:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(iocurrent)
 3558              		.loc 2 679 7
 3559 0028 FB68     		ldr	r3, [r7, #12]
 3560 002a 002B     		cmp	r3, #0
 3561 002c 00F04681 		beq	.L224
 680:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 681:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /*--------------------- GPIO Mode Configuration ------------------------*/
 682:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* In case of Alternate function mode selection */
 683:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 3562              		.loc 2 683 20
 3563 0030 3B68     		ldr	r3, [r7]
 3564 0032 5B68     		ldr	r3, [r3, #4]
 3565              		.loc 2 683 9
 3566 0034 022B     		cmp	r3, #2
 3567 0036 03D0     		beq	.L225
 3568              		.loc 2 683 60 discriminator 1
 3569 0038 3B68     		ldr	r3, [r7]
 3570 003a 5B68     		ldr	r3, [r3, #4]
 3571              		.loc 2 683 47 discriminator 1
 3572 003c 122B     		cmp	r3, #18
 3573 003e 23D1     		bne	.L226
 3574              	.L225:
 684:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 685:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Check the Alternate function parameters */
 686:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 687:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 688:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 689:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Configure Alternate function mapped with the current IO */
 690:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = GPIOx->AFR[position >> 3];
 3575              		.loc 2 690 36
 3576 0040 7B69     		ldr	r3, [r7, #20]
 3577 0042 DA08     		lsrs	r2, r3, #3
 3578              		.loc 2 690 14
 3579 0044 7B68     		ldr	r3, [r7, #4]
 3580 0046 0832     		adds	r2, r2, #8
 3581 0048 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3582 004c 3B61     		str	r3, [r7, #16]
 691:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 3583              		.loc 2 691 28
 3584 004e 7B69     		ldr	r3, [r7, #20]
 3585 0050 03F00703 		and	r3, r3, #7
 3586              		.loc 2 691 57
 3587 0054 9B00     		lsls	r3, r3, #2
 3588              		.loc 2 691 24
 3589 0056 0F22     		movs	r2, #15
 3590 0058 02FA03F3 		lsl	r3, r2, r3
 3591              		.loc 2 691 17
 3592 005c DB43     		mvns	r3, r3
 3593              		.loc 2 691 14
 3594 005e 3A69     		ldr	r2, [r7, #16]
 3595 0060 1340     		ands	r3, r3, r2
 3596 0062 3B61     		str	r3, [r7, #16]
 692:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 3597              		.loc 2 692 38
 3598 0064 3B68     		ldr	r3, [r7]
 3599 0066 1A69     		ldr	r2, [r3, #16]
 3600              		.loc 2 692 75
 3601 0068 7B69     		ldr	r3, [r7, #20]
 3602 006a 03F00703 		and	r3, r3, #7
 3603              		.loc 2 692 84
 3604 006e 9B00     		lsls	r3, r3, #2
 3605              		.loc 2 692 51
 3606 0070 02FA03F3 		lsl	r3, r2, r3
 3607              		.loc 2 692 14
 3608 0074 3A69     		ldr	r2, [r7, #16]
 3609 0076 1343     		orrs	r3, r3, r2
 3610 0078 3B61     		str	r3, [r7, #16]
 693:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         GPIOx->AFR[position >> 3] = temp;
 3611              		.loc 2 693 29
 3612 007a 7B69     		ldr	r3, [r7, #20]
 3613 007c DA08     		lsrs	r2, r3, #3
 3614              		.loc 2 693 35
 3615 007e 7B68     		ldr	r3, [r7, #4]
 3616 0080 0832     		adds	r2, r2, #8
 3617 0082 3969     		ldr	r1, [r7, #16]
 3618 0084 43F82210 		str	r1, [r3, r2, lsl #2]
 3619              	.L226:
 694:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 695:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 696:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
 697:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp = GPIOx->MODER;
 3620              		.loc 2 697 12
 3621 0088 7B68     		ldr	r3, [r7, #4]
 3622 008a 1B68     		ldr	r3, [r3]
 3623 008c 3B61     		str	r3, [r7, #16]
 698:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 3624              		.loc 2 698 48
 3625 008e 7B69     		ldr	r3, [r7, #20]
 3626 0090 5B00     		lsls	r3, r3, #1
 3627              		.loc 2 698 35
 3628 0092 0322     		movs	r2, #3
 3629 0094 02FA03F3 		lsl	r3, r2, r3
 3630              		.loc 2 698 15
 3631 0098 DB43     		mvns	r3, r3
 3632              		.loc 2 698 12
 3633 009a 3A69     		ldr	r2, [r7, #16]
 3634 009c 1340     		ands	r3, r3, r2
 3635 009e 3B61     		str	r3, [r7, #16]
 699:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 3636              		.loc 2 699 26
 3637 00a0 3B68     		ldr	r3, [r7]
 3638 00a2 5B68     		ldr	r3, [r3, #4]
 3639              		.loc 2 699 33
 3640 00a4 03F00302 		and	r2, r3, #3
 3641              		.loc 2 699 59
 3642 00a8 7B69     		ldr	r3, [r7, #20]
 3643 00aa 5B00     		lsls	r3, r3, #1
 3644              		.loc 2 699 46
 3645 00ac 02FA03F3 		lsl	r3, r2, r3
 3646              		.loc 2 699 12
 3647 00b0 3A69     		ldr	r2, [r7, #16]
 3648 00b2 1343     		orrs	r3, r3, r2
 3649 00b4 3B61     		str	r3, [r7, #16]
 700:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       GPIOx->MODER = temp;
 3650              		.loc 2 700 20
 3651 00b6 7B68     		ldr	r3, [r7, #4]
 3652 00b8 3A69     		ldr	r2, [r7, #16]
 3653 00ba 1A60     		str	r2, [r3]
 701:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 702:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* In case of Output or Alternate function mode selection */
 703:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 3654              		.loc 2 703 20
 3655 00bc 3B68     		ldr	r3, [r7]
 3656 00be 5B68     		ldr	r3, [r3, #4]
 3657              		.loc 2 703 9
 3658 00c0 012B     		cmp	r3, #1
 3659 00c2 0BD0     		beq	.L227
 3660              		.loc 2 703 64 discriminator 1
 3661 00c4 3B68     		ldr	r3, [r7]
 3662 00c6 5B68     		ldr	r3, [r3, #4]
 3663              		.loc 2 703 51 discriminator 1
 3664 00c8 022B     		cmp	r3, #2
 3665 00ca 07D0     		beq	.L227
 704:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 3666              		.loc 2 704 20 discriminator 2
 3667 00cc 3B68     		ldr	r3, [r7]
 3668 00ce 5B68     		ldr	r3, [r3, #4]
 703:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 3669              		.loc 2 703 91 discriminator 2
 3670 00d0 112B     		cmp	r3, #17
 3671 00d2 03D0     		beq	.L227
 3672              		.loc 2 704 64
 3673 00d4 3B68     		ldr	r3, [r7]
 3674 00d6 5B68     		ldr	r3, [r3, #4]
 3675              		.loc 2 704 51
 3676 00d8 122B     		cmp	r3, #18
 3677 00da 30D1     		bne	.L228
 3678              	.L227:
 705:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 706:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Check the Speed parameter */
 707:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 708:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Configure the IO Speed */
 709:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = GPIOx->OSPEEDR;
 3679              		.loc 2 709 14
 3680 00dc 7B68     		ldr	r3, [r7, #4]
 3681 00de 9B68     		ldr	r3, [r3, #8]
 3682 00e0 3B61     		str	r3, [r7, #16]
 710:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 3683              		.loc 2 710 55
 3684 00e2 7B69     		ldr	r3, [r7, #20]
 3685 00e4 5B00     		lsls	r3, r3, #1
 3686              		.loc 2 710 42
 3687 00e6 0322     		movs	r2, #3
 3688 00e8 02FA03F3 		lsl	r3, r2, r3
 3689              		.loc 2 710 17
 3690 00ec DB43     		mvns	r3, r3
 3691              		.loc 2 710 14
 3692 00ee 3A69     		ldr	r2, [r7, #16]
 3693 00f0 1340     		ands	r3, r3, r2
 3694 00f2 3B61     		str	r3, [r7, #16]
 711:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= (GPIO_Init->Speed << (position * 2U));
 3695              		.loc 2 711 27
 3696 00f4 3B68     		ldr	r3, [r7]
 3697 00f6 DA68     		ldr	r2, [r3, #12]
 3698              		.loc 2 711 48
 3699 00f8 7B69     		ldr	r3, [r7, #20]
 3700 00fa 5B00     		lsls	r3, r3, #1
 3701              		.loc 2 711 35
 3702 00fc 02FA03F3 		lsl	r3, r2, r3
 3703              		.loc 2 711 14
 3704 0100 3A69     		ldr	r2, [r7, #16]
 3705 0102 1343     		orrs	r3, r3, r2
 3706 0104 3B61     		str	r3, [r7, #16]
 712:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         GPIOx->OSPEEDR = temp;
 3707              		.loc 2 712 24
 3708 0106 7B68     		ldr	r3, [r7, #4]
 3709 0108 3A69     		ldr	r2, [r7, #16]
 3710 010a 9A60     		str	r2, [r3, #8]
 713:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 714:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Configure the IO Output Type */
 715:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = GPIOx->OTYPER;
 3711              		.loc 2 715 14
 3712 010c 7B68     		ldr	r3, [r7, #4]
 3713 010e 5B68     		ldr	r3, [r3, #4]
 3714 0110 3B61     		str	r3, [r7, #16]
 716:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 3715              		.loc 2 716 36
 3716 0112 0122     		movs	r2, #1
 3717 0114 7B69     		ldr	r3, [r7, #20]
 3718 0116 02FA03F3 		lsl	r3, r2, r3
 3719              		.loc 2 716 17
 3720 011a DB43     		mvns	r3, r3
 3721              		.loc 2 716 14
 3722 011c 3A69     		ldr	r2, [r7, #16]
 3723 011e 1340     		ands	r3, r3, r2
 3724 0120 3B61     		str	r3, [r7, #16]
 717:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 3725              		.loc 2 717 29
 3726 0122 3B68     		ldr	r3, [r7]
 3727 0124 5B68     		ldr	r3, [r3, #4]
 3728              		.loc 2 717 56
 3729 0126 1B09     		lsrs	r3, r3, #4
 3730 0128 03F00102 		and	r2, r3, #1
 3731              		.loc 2 717 63
 3732 012c 7B69     		ldr	r3, [r7, #20]
 3733 012e 02FA03F3 		lsl	r3, r2, r3
 3734              		.loc 2 717 14
 3735 0132 3A69     		ldr	r2, [r7, #16]
 3736 0134 1343     		orrs	r3, r3, r2
 3737 0136 3B61     		str	r3, [r7, #16]
 718:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         GPIOx->OTYPER = temp;
 3738              		.loc 2 718 23
 3739 0138 7B68     		ldr	r3, [r7, #4]
 3740 013a 3A69     		ldr	r2, [r7, #16]
 3741 013c 5A60     		str	r2, [r3, #4]
 3742              	.L228:
 719:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 720:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 721:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Activate the Pull-up or Pull down resistor for the current IO */
 722:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp = GPIOx->PUPDR;
 3743              		.loc 2 722 12
 3744 013e 7B68     		ldr	r3, [r7, #4]
 3745 0140 DB68     		ldr	r3, [r3, #12]
 3746 0142 3B61     		str	r3, [r7, #16]
 723:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 3747              		.loc 2 723 48
 3748 0144 7B69     		ldr	r3, [r7, #20]
 3749 0146 5B00     		lsls	r3, r3, #1
 3750              		.loc 2 723 35
 3751 0148 0322     		movs	r2, #3
 3752 014a 02FA03F3 		lsl	r3, r2, r3
 3753              		.loc 2 723 15
 3754 014e DB43     		mvns	r3, r3
 3755              		.loc 2 723 12
 3756 0150 3A69     		ldr	r2, [r7, #16]
 3757 0152 1340     		ands	r3, r3, r2
 3758 0154 3B61     		str	r3, [r7, #16]
 724:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp |= ((GPIO_Init->Pull) << (position * 2U));
 3759              		.loc 2 724 26
 3760 0156 3B68     		ldr	r3, [r7]
 3761 0158 9A68     		ldr	r2, [r3, #8]
 3762              		.loc 2 724 47
 3763 015a 7B69     		ldr	r3, [r7, #20]
 3764 015c 5B00     		lsls	r3, r3, #1
 3765              		.loc 2 724 34
 3766 015e 02FA03F3 		lsl	r3, r2, r3
 3767              		.loc 2 724 12
 3768 0162 3A69     		ldr	r2, [r7, #16]
 3769 0164 1343     		orrs	r3, r3, r2
 3770 0166 3B61     		str	r3, [r7, #16]
 725:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       GPIOx->PUPDR = temp;
 3771              		.loc 2 725 20
 3772 0168 7B68     		ldr	r3, [r7, #4]
 3773 016a 3A69     		ldr	r2, [r7, #16]
 3774 016c DA60     		str	r2, [r3, #12]
 726:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 727:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /*--------------------- EXTI Mode Configuration ------------------------*/
 728:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Configure the External Interrupt or event for the current IO */
 729:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 3775              		.loc 2 729 20
 3776 016e 3B68     		ldr	r3, [r7]
 3777 0170 5B68     		ldr	r3, [r3, #4]
 3778              		.loc 2 729 27
 3779 0172 03F08053 		and	r3, r3, #268435456
 3780              		.loc 2 729 9
 3781 0176 002B     		cmp	r3, #0
 3782 0178 00F0A080 		beq	.L224
 3783              	.LBB298:
 730:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 731:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Enable SYSCFG Clock */
 732:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_SYSCFG_CLK_ENABLE();
 3784              		.loc 2 732 9
 3785 017c 584B     		ldr	r3, .L244
 3786 017e 9B69     		ldr	r3, [r3, #24]
 3787 0180 574A     		ldr	r2, .L244
 3788 0182 43F00103 		orr	r3, r3, #1
 3789 0186 9361     		str	r3, [r2, #24]
 3790 0188 554B     		ldr	r3, .L244
 3791 018a 9B69     		ldr	r3, [r3, #24]
 3792 018c 03F00103 		and	r3, r3, #1
 3793 0190 BB60     		str	r3, [r7, #8]
 3794 0192 BB68     		ldr	r3, [r7, #8]
 3795              	.LBE298:
 733:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 734:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = SYSCFG->EXTICR[position >> 2];
 3796              		.loc 2 734 22
 3797 0194 534A     		ldr	r2, .L244+4
 3798              		.loc 2 734 40
 3799 0196 7B69     		ldr	r3, [r7, #20]
 3800 0198 9B08     		lsrs	r3, r3, #2
 3801              		.loc 2 734 14
 3802 019a 0233     		adds	r3, r3, #2
 3803 019c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3804 01a0 3B61     		str	r3, [r7, #16]
 735:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 3805              		.loc 2 735 46
 3806 01a2 7B69     		ldr	r3, [r7, #20]
 3807 01a4 03F00303 		and	r3, r3, #3
 3808              		.loc 2 735 34
 3809 01a8 9B00     		lsls	r3, r3, #2
 3810              		.loc 2 735 27
 3811 01aa 0F22     		movs	r2, #15
 3812 01ac 02FA03F3 		lsl	r3, r2, r3
 3813              		.loc 2 735 17
 3814 01b0 DB43     		mvns	r3, r3
 3815              		.loc 2 735 14
 3816 01b2 3A69     		ldr	r2, [r7, #16]
 3817 01b4 1340     		ands	r3, r3, r2
 3818 01b6 3B61     		str	r3, [r7, #16]
 736:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 3819              		.loc 2 736 18
 3820 01b8 7B68     		ldr	r3, [r7, #4]
 3821 01ba B3F1904F 		cmp	r3, #1207959552
 3822 01be 19D0     		beq	.L229
 3823              		.loc 2 736 18 is_stmt 0 discriminator 1
 3824 01c0 7B68     		ldr	r3, [r7, #4]
 3825 01c2 494A     		ldr	r2, .L244+8
 3826 01c4 9342     		cmp	r3, r2
 3827 01c6 13D0     		beq	.L230
 3828              		.loc 2 736 18 discriminator 3
 3829 01c8 7B68     		ldr	r3, [r7, #4]
 3830 01ca 484A     		ldr	r2, .L244+12
 3831 01cc 9342     		cmp	r3, r2
 3832 01ce 0DD0     		beq	.L231
 3833              		.loc 2 736 18 discriminator 5
 3834 01d0 7B68     		ldr	r3, [r7, #4]
 3835 01d2 474A     		ldr	r2, .L244+16
 3836 01d4 9342     		cmp	r3, r2
 3837 01d6 07D0     		beq	.L232
 3838              		.loc 2 736 18 discriminator 7
 3839 01d8 7B68     		ldr	r3, [r7, #4]
 3840 01da 464A     		ldr	r2, .L244+20
 3841 01dc 9342     		cmp	r3, r2
 3842 01de 01D1     		bne	.L233
 3843              		.loc 2 736 18 discriminator 9
 3844 01e0 0423     		movs	r3, #4
 3845 01e2 08E0     		b	.L238
 3846              	.L233:
 3847              		.loc 2 736 18 discriminator 10
 3848 01e4 0523     		movs	r3, #5
 3849 01e6 06E0     		b	.L238
 3850              	.L232:
 3851              		.loc 2 736 18 discriminator 8
 3852 01e8 0323     		movs	r3, #3
 3853 01ea 04E0     		b	.L238
 3854              	.L231:
 3855              		.loc 2 736 18 discriminator 6
 3856 01ec 0223     		movs	r3, #2
 3857 01ee 02E0     		b	.L238
 3858              	.L230:
 3859              		.loc 2 736 18 discriminator 4
 3860 01f0 0123     		movs	r3, #1
 3861 01f2 00E0     		b	.L238
 3862              	.L229:
 3863              		.loc 2 736 18 discriminator 2
 3864 01f4 0023     		movs	r3, #0
 3865              	.L238:
 3866              		.loc 2 736 59 is_stmt 1 discriminator 20
 3867 01f6 7A69     		ldr	r2, [r7, #20]
 3868 01f8 02F00302 		and	r2, r2, #3
 3869              		.loc 2 736 47 discriminator 20
 3870 01fc 9200     		lsls	r2, r2, #2
 3871              		.loc 2 736 40 discriminator 20
 3872 01fe 9340     		lsls	r3, r3, r2
 3873              		.loc 2 736 14 discriminator 20
 3874 0200 3A69     		ldr	r2, [r7, #16]
 3875 0202 1343     		orrs	r3, r3, r2
 3876 0204 3B61     		str	r3, [r7, #16]
 737:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2] = temp;
 3877              		.loc 2 737 15 discriminator 20
 3878 0206 3749     		ldr	r1, .L244+4
 3879              		.loc 2 737 33 discriminator 20
 3880 0208 7B69     		ldr	r3, [r7, #20]
 3881 020a 9B08     		lsrs	r3, r3, #2
 3882              		.loc 2 737 39 discriminator 20
 3883 020c 0233     		adds	r3, r3, #2
 3884 020e 3A69     		ldr	r2, [r7, #16]
 3885 0210 41F82320 		str	r2, [r1, r3, lsl #2]
 738:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 739:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Clear EXTI line configuration */
 740:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = EXTI->IMR;
 3886              		.loc 2 740 20 discriminator 20
 3887 0214 384B     		ldr	r3, .L244+24
 3888              		.loc 2 740 14 discriminator 20
 3889 0216 1B68     		ldr	r3, [r3]
 3890 0218 3B61     		str	r3, [r7, #16]
 741:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 3891              		.loc 2 741 17 discriminator 20
 3892 021a FB68     		ldr	r3, [r7, #12]
 3893 021c DB43     		mvns	r3, r3
 3894              		.loc 2 741 14 discriminator 20
 3895 021e 3A69     		ldr	r2, [r7, #16]
 3896 0220 1340     		ands	r3, r3, r2
 3897 0222 3B61     		str	r3, [r7, #16]
 742:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 3898              		.loc 2 742 22 discriminator 20
 3899 0224 3B68     		ldr	r3, [r7]
 3900 0226 5B68     		ldr	r3, [r3, #4]
 3901              		.loc 2 742 29 discriminator 20
 3902 0228 03F48033 		and	r3, r3, #65536
 3903              		.loc 2 742 11 discriminator 20
 3904 022c 002B     		cmp	r3, #0
 3905 022e 03D0     		beq	.L239
 743:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 744:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           temp |= iocurrent;
 3906              		.loc 2 744 16
 3907 0230 3A69     		ldr	r2, [r7, #16]
 3908 0232 FB68     		ldr	r3, [r7, #12]
 3909 0234 1343     		orrs	r3, r3, r2
 3910 0236 3B61     		str	r3, [r7, #16]
 3911              	.L239:
 745:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 746:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         EXTI->IMR = temp;
 3912              		.loc 2 746 13
 3913 0238 2F4A     		ldr	r2, .L244+24
 3914              		.loc 2 746 19
 3915 023a 3B69     		ldr	r3, [r7, #16]
 3916 023c 1360     		str	r3, [r2]
 747:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 748:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = EXTI->EMR;
 3917              		.loc 2 748 20
 3918 023e 2E4B     		ldr	r3, .L244+24
 3919              		.loc 2 748 14
 3920 0240 5B68     		ldr	r3, [r3, #4]
 3921 0242 3B61     		str	r3, [r7, #16]
 749:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 3922              		.loc 2 749 17
 3923 0244 FB68     		ldr	r3, [r7, #12]
 3924 0246 DB43     		mvns	r3, r3
 3925              		.loc 2 749 14
 3926 0248 3A69     		ldr	r2, [r7, #16]
 3927 024a 1340     		ands	r3, r3, r2
 3928 024c 3B61     		str	r3, [r7, #16]
 750:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 3929              		.loc 2 750 22
 3930 024e 3B68     		ldr	r3, [r7]
 3931 0250 5B68     		ldr	r3, [r3, #4]
 3932              		.loc 2 750 29
 3933 0252 03F40033 		and	r3, r3, #131072
 3934              		.loc 2 750 11
 3935 0256 002B     		cmp	r3, #0
 3936 0258 03D0     		beq	.L240
 751:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 752:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           temp |= iocurrent;
 3937              		.loc 2 752 16
 3938 025a 3A69     		ldr	r2, [r7, #16]
 3939 025c FB68     		ldr	r3, [r7, #12]
 3940 025e 1343     		orrs	r3, r3, r2
 3941 0260 3B61     		str	r3, [r7, #16]
 3942              	.L240:
 753:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 754:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         EXTI->EMR = temp;
 3943              		.loc 2 754 13
 3944 0262 254A     		ldr	r2, .L244+24
 3945              		.loc 2 754 19
 3946 0264 3B69     		ldr	r3, [r7, #16]
 3947 0266 5360     		str	r3, [r2, #4]
 755:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 756:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Clear Rising Falling edge configuration */
 757:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = EXTI->RTSR;
 3948              		.loc 2 757 20
 3949 0268 234B     		ldr	r3, .L244+24
 3950              		.loc 2 757 14
 3951 026a 9B68     		ldr	r3, [r3, #8]
 3952 026c 3B61     		str	r3, [r7, #16]
 758:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 3953              		.loc 2 758 17
 3954 026e FB68     		ldr	r3, [r7, #12]
 3955 0270 DB43     		mvns	r3, r3
 3956              		.loc 2 758 14
 3957 0272 3A69     		ldr	r2, [r7, #16]
 3958 0274 1340     		ands	r3, r3, r2
 3959 0276 3B61     		str	r3, [r7, #16]
 759:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 3960              		.loc 2 759 22
 3961 0278 3B68     		ldr	r3, [r7]
 3962 027a 5B68     		ldr	r3, [r3, #4]
 3963              		.loc 2 759 29
 3964 027c 03F48013 		and	r3, r3, #1048576
 3965              		.loc 2 759 11
 3966 0280 002B     		cmp	r3, #0
 3967 0282 03D0     		beq	.L241
 760:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 761:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           temp |= iocurrent;
 3968              		.loc 2 761 16
 3969 0284 3A69     		ldr	r2, [r7, #16]
 3970 0286 FB68     		ldr	r3, [r7, #12]
 3971 0288 1343     		orrs	r3, r3, r2
 3972 028a 3B61     		str	r3, [r7, #16]
 3973              	.L241:
 762:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 763:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         EXTI->RTSR = temp;
 3974              		.loc 2 763 13
 3975 028c 1A4A     		ldr	r2, .L244+24
 3976              		.loc 2 763 20
 3977 028e 3B69     		ldr	r3, [r7, #16]
 3978 0290 9360     		str	r3, [r2, #8]
 764:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 765:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = EXTI->FTSR;
 3979              		.loc 2 765 20
 3980 0292 194B     		ldr	r3, .L244+24
 3981              		.loc 2 765 14
 3982 0294 DB68     		ldr	r3, [r3, #12]
 3983 0296 3B61     		str	r3, [r7, #16]
 766:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 3984              		.loc 2 766 17
 3985 0298 FB68     		ldr	r3, [r7, #12]
 3986 029a DB43     		mvns	r3, r3
 3987              		.loc 2 766 14
 3988 029c 3A69     		ldr	r2, [r7, #16]
 3989 029e 1340     		ands	r3, r3, r2
 3990 02a0 3B61     		str	r3, [r7, #16]
 767:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 3991              		.loc 2 767 22
 3992 02a2 3B68     		ldr	r3, [r7]
 3993 02a4 5B68     		ldr	r3, [r3, #4]
 3994              		.loc 2 767 29
 3995 02a6 03F40013 		and	r3, r3, #2097152
 3996              		.loc 2 767 11
 3997 02aa 002B     		cmp	r3, #0
 3998 02ac 03D0     		beq	.L242
 768:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 769:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****           temp |= iocurrent;
 3999              		.loc 2 769 16
 4000 02ae 3A69     		ldr	r2, [r7, #16]
 4001 02b0 FB68     		ldr	r3, [r7, #12]
 4002 02b2 1343     		orrs	r3, r3, r2
 4003 02b4 3B61     		str	r3, [r7, #16]
 4004              	.L242:
 770:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 771:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         EXTI->FTSR = temp;
 4005              		.loc 2 771 13
 4006 02b6 104A     		ldr	r2, .L244+24
 4007              		.loc 2 771 20
 4008 02b8 3B69     		ldr	r3, [r7, #16]
 4009 02ba D360     		str	r3, [r2, #12]
 4010              	.L224:
 772:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 773:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 774:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 775:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     position++;
 4011              		.loc 2 775 13
 4012 02bc 7B69     		ldr	r3, [r7, #20]
 4013 02be 0133     		adds	r3, r3, #1
 4014 02c0 7B61     		str	r3, [r7, #20]
 4015              	.L223:
 674:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 4016              		.loc 2 674 21
 4017 02c2 3B68     		ldr	r3, [r7]
 4018 02c4 1A68     		ldr	r2, [r3]
 674:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 4019              		.loc 2 674 28
 4020 02c6 7B69     		ldr	r3, [r7, #20]
 4021 02c8 22FA03F3 		lsr	r3, r2, r3
 674:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 4022              		.loc 2 674 9
 4023 02cc 002B     		cmp	r3, #0
 4024 02ce 7FF4A3AE 		bne	.L243
 776:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 777:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 4025              		.loc 2 777 1
 4026 02d2 00BF     		nop
 4027 02d4 00BF     		nop
 4028 02d6 1C37     		adds	r7, r7, #28
 4029              	.LCFI60:
 4030              		.cfi_def_cfa_offset 4
 4031 02d8 BD46     		mov	sp, r7
 4032              	.LCFI61:
 4033              		.cfi_def_cfa_register 13
 4034              		@ sp needed
 4035 02da 80BC     		pop	{r7}
 4036              	.LCFI62:
 4037              		.cfi_restore 7
 4038              		.cfi_def_cfa_offset 0
 4039 02dc 7047     		bx	lr
 4040              	.L245:
 4041 02de 00BF     		.align	2
 4042              	.L244:
 4043 02e0 00100240 		.word	1073876992
 4044 02e4 00000140 		.word	1073807360
 4045 02e8 00040048 		.word	1207960576
 4046 02ec 00080048 		.word	1207961600
 4047 02f0 000C0048 		.word	1207962624
 4048 02f4 00100048 		.word	1207963648
 4049 02f8 00040140 		.word	1073808384
 4050              		.cfi_endproc
 4051              	.LFE135:
 4053              		.section	.text.HAL_GPIO_WritePin,"ax",%progbits
 4054              		.align	1
 4055              		.global	HAL_GPIO_WritePin
 4056              		.syntax unified
 4057              		.thumb
 4058              		.thumb_func
 4059              		.fpu softvfp
 4061              	HAL_GPIO_WritePin:
 4062              	.LFB136:
 778:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 779:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 780:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Set or clear the selected data port bit.
 781:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
 782:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   This function uses GPIOx_BSRR and GPIOx_BRR registers to allow atomic read/modify
 783:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         accesses. In this way, there is no risk of an IRQ occurring between
 784:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         the read and the modify access.
 785:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
 786:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  GPIOx: where x can be (A..F) to select the GPIO peripheral for STM32F3 family
 787:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  GPIO_Pin: specifies the port bit to be written.
 788:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
 789:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  PinState: specifies the value to be written to the selected bit.
 790:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         This parameter can be one of the GPIO_PinState enum values:
 791:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *            @arg GPIO_PIN_RESET: to clear the port pin
 792:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *            @arg GPIO_PIN_SET: to set the port pin
 793:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval None
 794:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 795:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
 796:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 4063              		.loc 2 796 1
 4064              		.cfi_startproc
 4065              		@ args = 0, pretend = 0, frame = 8
 4066              		@ frame_needed = 1, uses_anonymous_args = 0
 4067              		@ link register save eliminated.
 4068 0000 80B4     		push	{r7}
 4069              	.LCFI63:
 4070              		.cfi_def_cfa_offset 4
 4071              		.cfi_offset 7, -4
 4072 0002 83B0     		sub	sp, sp, #12
 4073              	.LCFI64:
 4074              		.cfi_def_cfa_offset 16
 4075 0004 00AF     		add	r7, sp, #0
 4076              	.LCFI65:
 4077              		.cfi_def_cfa_register 7
 4078 0006 7860     		str	r0, [r7, #4]
 4079 0008 0B46     		mov	r3, r1
 4080 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 4081 000c 1346     		mov	r3, r2
 4082 000e 7B70     		strb	r3, [r7, #1]
 797:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 798:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_PIN(GPIO_Pin));
 799:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_PIN_ACTION(PinState));
 800:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 801:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(PinState != GPIO_PIN_RESET)
 4083              		.loc 2 801 5
 4084 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 4085 0012 002B     		cmp	r3, #0
 4086 0014 03D0     		beq	.L247
 802:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 803:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     GPIOx->BSRR = (uint32_t)GPIO_Pin;
 4087              		.loc 2 803 19
 4088 0016 7A88     		ldrh	r2, [r7, #2]
 4089              		.loc 2 803 17
 4090 0018 7B68     		ldr	r3, [r7, #4]
 4091 001a 9A61     		str	r2, [r3, #24]
 804:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 805:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   else
 806:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 807:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     GPIOx->BRR = (uint32_t)GPIO_Pin;
 808:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 809:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 4092              		.loc 2 809 1
 4093 001c 02E0     		b	.L249
 4094              	.L247:
 807:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 4095              		.loc 2 807 18
 4096 001e 7A88     		ldrh	r2, [r7, #2]
 807:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 4097              		.loc 2 807 16
 4098 0020 7B68     		ldr	r3, [r7, #4]
 4099 0022 9A62     		str	r2, [r3, #40]
 4100              	.L249:
 4101              		.loc 2 809 1
 4102 0024 00BF     		nop
 4103 0026 0C37     		adds	r7, r7, #12
 4104              	.LCFI66:
 4105              		.cfi_def_cfa_offset 4
 4106 0028 BD46     		mov	sp, r7
 4107              	.LCFI67:
 4108              		.cfi_def_cfa_register 13
 4109              		@ sp needed
 4110 002a 80BC     		pop	{r7}
 4111              	.LCFI68:
 4112              		.cfi_restore 7
 4113              		.cfi_def_cfa_offset 0
 4114 002c 7047     		bx	lr
 4115              		.cfi_endproc
 4116              	.LFE136:
 4118              		.section	.text.UART_SetConfig,"ax",%progbits
 4119              		.align	1
 4120              		.global	UART_SetConfig
 4121              		.syntax unified
 4122              		.thumb
 4123              		.thumb_func
 4124              		.fpu softvfp
 4126              	UART_SetConfig:
 4127              	.LFB137:
 810:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 811:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 812:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 813:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief Configure the UART peripheral.
 814:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param huart: UART handle.
 815:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
 816:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 817:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
 818:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 4128              		.loc 2 818 1
 4129              		.cfi_startproc
 4130              		@ args = 0, pretend = 0, frame = 24
 4131              		@ frame_needed = 1, uses_anonymous_args = 0
 4132 0000 80B5     		push	{r7, lr}
 4133              	.LCFI69:
 4134              		.cfi_def_cfa_offset 8
 4135              		.cfi_offset 7, -8
 4136              		.cfi_offset 14, -4
 4137 0002 86B0     		sub	sp, sp, #24
 4138              	.LCFI70:
 4139              		.cfi_def_cfa_offset 32
 4140 0004 00AF     		add	r7, sp, #0
 4141              	.LCFI71:
 4142              		.cfi_def_cfa_register 7
 4143 0006 7860     		str	r0, [r7, #4]
 819:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tmpreg                     = 0x00000000U;
 4144              		.loc 2 819 12
 4145 0008 0023     		movs	r3, #0
 4146 000a FB60     		str	r3, [r7, #12]
 820:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 4147              		.loc 2 820 27
 4148 000c 1023     		movs	r3, #16
 4149 000e FB75     		strb	r3, [r7, #23]
 821:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t brrtemp                    = 0x0000U;
 4150              		.loc 2 821 12
 4151 0010 0023     		movs	r3, #0
 4152 0012 7B81     		strh	r3, [r7, #10]	@ movhi
 822:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t usartdiv                   = 0x0000U;
 4153              		.loc 2 822 12
 4154 0014 0023     		movs	r3, #0
 4155 0016 BB82     		strh	r3, [r7, #20]	@ movhi
 823:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   HAL_StatusTypeDef ret               = HAL_OK;
 4156              		.loc 2 823 21
 4157 0018 0023     		movs	r3, #0
 4158 001a FB74     		strb	r3, [r7, #19]
 824:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 825:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 826:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 827:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 828:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 829:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
 830:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
 831:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 832:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 833:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 834:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 835:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 836:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
 837:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Clear M, PCE, PS, TE, RE and OVER8 bits and configure
 838:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****    *  the UART Word Length, Parity, Mode and oversampling:
 839:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****    *  set the M bits according to huart->Init.WordLength value
 840:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****    *  set PCE and PS bits according to huart->Init.Parity value
 841:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****    *  set TE and RE bits according to huart->Init.Mode value
 842:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****    *  set OVER8 bit according to huart->Init.OverSampling value */
 843:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
 4159              		.loc 2 843 33
 4160 001c 7B68     		ldr	r3, [r7, #4]
 4161 001e 9A68     		ldr	r2, [r3, #8]
 4162              		.loc 2 843 58
 4163 0020 7B68     		ldr	r3, [r7, #4]
 4164 0022 1B69     		ldr	r3, [r3, #16]
 4165              		.loc 2 843 45
 4166 0024 1A43     		orrs	r2, r2, r3
 4167              		.loc 2 843 79
 4168 0026 7B68     		ldr	r3, [r7, #4]
 4169 0028 5B69     		ldr	r3, [r3, #20]
 4170              		.loc 2 843 66
 4171 002a 1A43     		orrs	r2, r2, r3
 4172              		.loc 2 843 98
 4173 002c 7B68     		ldr	r3, [r7, #4]
 4174 002e DB69     		ldr	r3, [r3, #28]
 4175              		.loc 2 843 10
 4176 0030 1343     		orrs	r3, r3, r2
 4177 0032 FB60     		str	r3, [r7, #12]
 844:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 4178              		.loc 2 844 3
 4179 0034 7B68     		ldr	r3, [r7, #4]
 4180 0036 1B68     		ldr	r3, [r3]
 4181 0038 1B68     		ldr	r3, [r3]
 4182 003a 23F41643 		bic	r3, r3, #38400
 4183 003e 23F00C03 		bic	r3, r3, #12
 4184 0042 7A68     		ldr	r2, [r7, #4]
 4185 0044 1268     		ldr	r2, [r2]
 4186 0046 F968     		ldr	r1, [r7, #12]
 4187 0048 0B43     		orrs	r3, r3, r1
 4188 004a 1360     		str	r3, [r2]
 845:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 846:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
 847:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits according
 848:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****    * to huart->Init.StopBits value */
 849:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 4189              		.loc 2 849 3
 4190 004c 7B68     		ldr	r3, [r7, #4]
 4191 004e 1B68     		ldr	r3, [r3]
 4192 0050 5B68     		ldr	r3, [r3, #4]
 4193 0052 23F44051 		bic	r1, r3, #12288
 4194 0056 7B68     		ldr	r3, [r7, #4]
 4195 0058 DA68     		ldr	r2, [r3, #12]
 4196 005a 7B68     		ldr	r3, [r7, #4]
 4197 005c 1B68     		ldr	r3, [r3]
 4198 005e 0A43     		orrs	r2, r2, r1
 4199 0060 5A60     		str	r2, [r3, #4]
 850:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 851:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
 852:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Configure
 853:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****    * - UART HardWare Flow Control: set CTSE and RTSE bits according
 854:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****    *   to huart->Init.HwFlowCtl value
 855:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****    * - one-bit sampling method versus three samples' majority rule according
 856:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****    *   to huart->Init.OneBitSampling */
 857:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 4200              		.loc 2 857 33
 4201 0062 7B68     		ldr	r3, [r7, #4]
 4202 0064 9A69     		ldr	r2, [r3, #24]
 4203              		.loc 2 857 57
 4204 0066 7B68     		ldr	r3, [r7, #4]
 4205 0068 1B6A     		ldr	r3, [r3, #32]
 4206              		.loc 2 857 10
 4207 006a 1343     		orrs	r3, r3, r2
 4208 006c FB60     		str	r3, [r7, #12]
 858:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 4209              		.loc 2 858 3
 4210 006e 7B68     		ldr	r3, [r7, #4]
 4211 0070 1B68     		ldr	r3, [r3]
 4212 0072 9B68     		ldr	r3, [r3, #8]
 4213 0074 23F43061 		bic	r1, r3, #2816
 4214 0078 7B68     		ldr	r3, [r7, #4]
 4215 007a 1B68     		ldr	r3, [r3]
 4216 007c FA68     		ldr	r2, [r7, #12]
 4217 007e 0A43     		orrs	r2, r2, r1
 4218 0080 9A60     		str	r2, [r3, #8]
 859:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 860:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- USART BRR Configuration -----------------------*/
 861:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   UART_GETCLOCKSOURCE(huart, clocksource);
 4219              		.loc 2 861 3
 4220 0082 7B68     		ldr	r3, [r7, #4]
 4221 0084 1B68     		ldr	r3, [r3]
 4222 0086 A14A     		ldr	r2, .L306
 4223 0088 9342     		cmp	r3, r2
 4224 008a 20D1     		bne	.L251
 4225              		.loc 2 861 3 is_stmt 0 discriminator 1
 4226 008c A04B     		ldr	r3, .L306+4
 4227 008e 1B6B     		ldr	r3, [r3, #48]
 4228 0090 03F00303 		and	r3, r3, #3
 4229 0094 032B     		cmp	r3, #3
 4230 0096 17D8     		bhi	.L252
 4231 0098 01A2     		adr	r2, .L254
 4232 009a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4233 009e 00BF     		.p2align 2
 4234              	.L254:
 4235 00a0 B1000000 		.word	.L257+1
 4236 00a4 BD000000 		.word	.L256+1
 4237 00a8 C3000000 		.word	.L255+1
 4238 00ac B7000000 		.word	.L253+1
 4239              		.p2align 1
 4240              	.L257:
 4241              		.loc 2 861 3 discriminator 4
 4242 00b0 0123     		movs	r3, #1
 4243 00b2 FB75     		strb	r3, [r7, #23]
 4244 00b4 B5E0     		b	.L259
 4245              	.L253:
 4246              		.loc 2 861 3 discriminator 7
 4247 00b6 0223     		movs	r3, #2
 4248 00b8 FB75     		strb	r3, [r7, #23]
 4249 00ba B2E0     		b	.L259
 4250              	.L256:
 4251              		.loc 2 861 3 discriminator 5
 4252 00bc 0423     		movs	r3, #4
 4253 00be FB75     		strb	r3, [r7, #23]
 4254 00c0 AFE0     		b	.L259
 4255              	.L255:
 4256              		.loc 2 861 3 discriminator 6
 4257 00c2 0823     		movs	r3, #8
 4258 00c4 FB75     		strb	r3, [r7, #23]
 4259 00c6 ACE0     		b	.L259
 4260              	.L252:
 4261              		.loc 2 861 3 discriminator 3
 4262 00c8 1023     		movs	r3, #16
 4263 00ca FB75     		strb	r3, [r7, #23]
 4264 00cc A9E0     		b	.L259
 4265              	.L251:
 4266              		.loc 2 861 3 discriminator 2
 4267 00ce 7B68     		ldr	r3, [r7, #4]
 4268 00d0 1B68     		ldr	r3, [r3]
 4269 00d2 904A     		ldr	r2, .L306+8
 4270 00d4 9342     		cmp	r3, r2
 4271 00d6 24D1     		bne	.L260
 4272              		.loc 2 861 3 discriminator 13
 4273 00d8 8D4B     		ldr	r3, .L306+4
 4274 00da 1B6B     		ldr	r3, [r3, #48]
 4275 00dc 03F44033 		and	r3, r3, #196608
 4276 00e0 B3F5403F 		cmp	r3, #196608
 4277 00e4 11D0     		beq	.L261
 4278              		.loc 2 861 3
 4279 00e6 B3F5403F 		cmp	r3, #196608
 4280 00ea 17D8     		bhi	.L262
 4281 00ec B3F5003F 		cmp	r3, #131072
 4282 00f0 11D0     		beq	.L263
 4283 00f2 B3F5003F 		cmp	r3, #131072
 4284 00f6 11D8     		bhi	.L262
 4285 00f8 002B     		cmp	r3, #0
 4286 00fa 03D0     		beq	.L264
 4287 00fc B3F5803F 		cmp	r3, #65536
 4288 0100 06D0     		beq	.L265
 4289 0102 0BE0     		b	.L262
 4290              	.L264:
 4291              		.loc 2 861 3 discriminator 16
 4292 0104 0023     		movs	r3, #0
 4293 0106 FB75     		strb	r3, [r7, #23]
 4294 0108 8BE0     		b	.L259
 4295              	.L261:
 4296              		.loc 2 861 3 discriminator 19
 4297 010a 0223     		movs	r3, #2
 4298 010c FB75     		strb	r3, [r7, #23]
 4299 010e 88E0     		b	.L259
 4300              	.L265:
 4301              		.loc 2 861 3 discriminator 17
 4302 0110 0423     		movs	r3, #4
 4303 0112 FB75     		strb	r3, [r7, #23]
 4304 0114 85E0     		b	.L259
 4305              	.L263:
 4306              		.loc 2 861 3 discriminator 18
 4307 0116 0823     		movs	r3, #8
 4308 0118 FB75     		strb	r3, [r7, #23]
 4309 011a 82E0     		b	.L259
 4310              	.L262:
 4311              		.loc 2 861 3 discriminator 15
 4312 011c 1023     		movs	r3, #16
 4313 011e FB75     		strb	r3, [r7, #23]
 4314 0120 7FE0     		b	.L259
 4315              	.L260:
 4316              		.loc 2 861 3 discriminator 14
 4317 0122 7B68     		ldr	r3, [r7, #4]
 4318 0124 1B68     		ldr	r3, [r3]
 4319 0126 7C4A     		ldr	r2, .L306+12
 4320 0128 9342     		cmp	r3, r2
 4321 012a 24D1     		bne	.L267
 4322              		.loc 2 861 3 discriminator 25
 4323 012c 784B     		ldr	r3, .L306+4
 4324 012e 1B6B     		ldr	r3, [r3, #48]
 4325 0130 03F44023 		and	r3, r3, #786432
 4326 0134 B3F5402F 		cmp	r3, #786432
 4327 0138 11D0     		beq	.L268
 4328              		.loc 2 861 3
 4329 013a B3F5402F 		cmp	r3, #786432
 4330 013e 17D8     		bhi	.L269
 4331 0140 B3F5002F 		cmp	r3, #524288
 4332 0144 11D0     		beq	.L270
 4333 0146 B3F5002F 		cmp	r3, #524288
 4334 014a 11D8     		bhi	.L269
 4335 014c 002B     		cmp	r3, #0
 4336 014e 03D0     		beq	.L271
 4337 0150 B3F5802F 		cmp	r3, #262144
 4338 0154 06D0     		beq	.L272
 4339 0156 0BE0     		b	.L269
 4340              	.L271:
 4341              		.loc 2 861 3 discriminator 28
 4342 0158 0023     		movs	r3, #0
 4343 015a FB75     		strb	r3, [r7, #23]
 4344 015c 61E0     		b	.L259
 4345              	.L268:
 4346              		.loc 2 861 3 discriminator 31
 4347 015e 0223     		movs	r3, #2
 4348 0160 FB75     		strb	r3, [r7, #23]
 4349 0162 5EE0     		b	.L259
 4350              	.L272:
 4351              		.loc 2 861 3 discriminator 29
 4352 0164 0423     		movs	r3, #4
 4353 0166 FB75     		strb	r3, [r7, #23]
 4354 0168 5BE0     		b	.L259
 4355              	.L270:
 4356              		.loc 2 861 3 discriminator 30
 4357 016a 0823     		movs	r3, #8
 4358 016c FB75     		strb	r3, [r7, #23]
 4359 016e 58E0     		b	.L259
 4360              	.L269:
 4361              		.loc 2 861 3 discriminator 27
 4362 0170 1023     		movs	r3, #16
 4363 0172 FB75     		strb	r3, [r7, #23]
 4364 0174 55E0     		b	.L259
 4365              	.L267:
 4366              		.loc 2 861 3 discriminator 26
 4367 0176 7B68     		ldr	r3, [r7, #4]
 4368 0178 1B68     		ldr	r3, [r3]
 4369 017a 684A     		ldr	r2, .L306+16
 4370 017c 9342     		cmp	r3, r2
 4371 017e 24D1     		bne	.L274
 4372              		.loc 2 861 3 discriminator 37
 4373 0180 634B     		ldr	r3, .L306+4
 4374 0182 1B6B     		ldr	r3, [r3, #48]
 4375 0184 03F44013 		and	r3, r3, #3145728
 4376 0188 B3F5401F 		cmp	r3, #3145728
 4377 018c 11D0     		beq	.L275
 4378              		.loc 2 861 3
 4379 018e B3F5401F 		cmp	r3, #3145728
 4380 0192 17D8     		bhi	.L276
 4381 0194 B3F5001F 		cmp	r3, #2097152
 4382 0198 11D0     		beq	.L277
 4383 019a B3F5001F 		cmp	r3, #2097152
 4384 019e 11D8     		bhi	.L276
 4385 01a0 002B     		cmp	r3, #0
 4386 01a2 03D0     		beq	.L278
 4387 01a4 B3F5801F 		cmp	r3, #1048576
 4388 01a8 06D0     		beq	.L279
 4389 01aa 0BE0     		b	.L276
 4390              	.L278:
 4391              		.loc 2 861 3 discriminator 40
 4392 01ac 0023     		movs	r3, #0
 4393 01ae FB75     		strb	r3, [r7, #23]
 4394 01b0 37E0     		b	.L259
 4395              	.L275:
 4396              		.loc 2 861 3 discriminator 43
 4397 01b2 0223     		movs	r3, #2
 4398 01b4 FB75     		strb	r3, [r7, #23]
 4399 01b6 34E0     		b	.L259
 4400              	.L279:
 4401              		.loc 2 861 3 discriminator 41
 4402 01b8 0423     		movs	r3, #4
 4403 01ba FB75     		strb	r3, [r7, #23]
 4404 01bc 31E0     		b	.L259
 4405              	.L277:
 4406              		.loc 2 861 3 discriminator 42
 4407 01be 0823     		movs	r3, #8
 4408 01c0 FB75     		strb	r3, [r7, #23]
 4409 01c2 2EE0     		b	.L259
 4410              	.L276:
 4411              		.loc 2 861 3 discriminator 39
 4412 01c4 1023     		movs	r3, #16
 4413 01c6 FB75     		strb	r3, [r7, #23]
 4414 01c8 2BE0     		b	.L259
 4415              	.L274:
 4416              		.loc 2 861 3 discriminator 38
 4417 01ca 7B68     		ldr	r3, [r7, #4]
 4418 01cc 1B68     		ldr	r3, [r3]
 4419 01ce 544A     		ldr	r2, .L306+20
 4420 01d0 9342     		cmp	r3, r2
 4421 01d2 24D1     		bne	.L281
 4422              		.loc 2 861 3 discriminator 49
 4423 01d4 4E4B     		ldr	r3, .L306+4
 4424 01d6 1B6B     		ldr	r3, [r3, #48]
 4425 01d8 03F44003 		and	r3, r3, #12582912
 4426 01dc B3F5400F 		cmp	r3, #12582912
 4427 01e0 11D0     		beq	.L282
 4428              		.loc 2 861 3
 4429 01e2 B3F5400F 		cmp	r3, #12582912
 4430 01e6 17D8     		bhi	.L283
 4431 01e8 B3F5000F 		cmp	r3, #8388608
 4432 01ec 11D0     		beq	.L284
 4433 01ee B3F5000F 		cmp	r3, #8388608
 4434 01f2 11D8     		bhi	.L283
 4435 01f4 002B     		cmp	r3, #0
 4436 01f6 03D0     		beq	.L285
 4437 01f8 B3F5800F 		cmp	r3, #4194304
 4438 01fc 06D0     		beq	.L286
 4439 01fe 0BE0     		b	.L283
 4440              	.L285:
 4441              		.loc 2 861 3 discriminator 52
 4442 0200 0023     		movs	r3, #0
 4443 0202 FB75     		strb	r3, [r7, #23]
 4444 0204 0DE0     		b	.L259
 4445              	.L282:
 4446              		.loc 2 861 3 discriminator 55
 4447 0206 0223     		movs	r3, #2
 4448 0208 FB75     		strb	r3, [r7, #23]
 4449 020a 0AE0     		b	.L259
 4450              	.L286:
 4451              		.loc 2 861 3 discriminator 53
 4452 020c 0423     		movs	r3, #4
 4453 020e FB75     		strb	r3, [r7, #23]
 4454 0210 07E0     		b	.L259
 4455              	.L284:
 4456              		.loc 2 861 3 discriminator 54
 4457 0212 0823     		movs	r3, #8
 4458 0214 FB75     		strb	r3, [r7, #23]
 4459 0216 04E0     		b	.L259
 4460              	.L283:
 4461              		.loc 2 861 3 discriminator 51
 4462 0218 1023     		movs	r3, #16
 4463 021a FB75     		strb	r3, [r7, #23]
 4464 021c 01E0     		b	.L259
 4465              	.L281:
 4466              		.loc 2 861 3 discriminator 50
 4467 021e 1023     		movs	r3, #16
 4468 0220 FB75     		strb	r3, [r7, #23]
 4469              	.L259:
 862:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 863:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check UART Over Sampling to set Baud Rate Register */
 864:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 4470              		.loc 2 864 18 is_stmt 1
 4471 0222 7B68     		ldr	r3, [r7, #4]
 4472 0224 DB69     		ldr	r3, [r3, #28]
 4473              		.loc 2 864 6
 4474 0226 B3F5004F 		cmp	r3, #32768
 4475 022a 7BD1     		bne	.L288
 865:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 866:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     switch (clocksource)
 4476              		.loc 2 866 5
 4477 022c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4478 022e 082B     		cmp	r3, #8
 4479 0230 56D8     		bhi	.L289
 4480 0232 01A2     		adr	r2, .L291
 4481 0234 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4482              		.p2align 2
 4483              	.L291:
 4484 0238 5D020000 		.word	.L295+1
 4485 023c 79020000 		.word	.L294+1
 4486 0240 95020000 		.word	.L293+1
 4487 0244 E1020000 		.word	.L289+1
 4488 0248 AF020000 		.word	.L292+1
 4489 024c E1020000 		.word	.L289+1
 4490 0250 E1020000 		.word	.L289+1
 4491 0254 E1020000 		.word	.L289+1
 4492 0258 CB020000 		.word	.L290+1
 4493              		.p2align 1
 4494              	.L295:
 867:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 868:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_PCLK1:
 869:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 4495              		.loc 2 869 31
 4496 025c FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 4497 0260 0346     		mov	r3, r0
 4498 0262 5A00     		lsls	r2, r3, #1
 4499 0264 7B68     		ldr	r3, [r7, #4]
 4500 0266 5B68     		ldr	r3, [r3, #4]
 4501 0268 5B08     		lsrs	r3, r3, #1
 4502 026a 1A44     		add	r2, r2, r3
 4503 026c 7B68     		ldr	r3, [r7, #4]
 4504 026e 5B68     		ldr	r3, [r3, #4]
 4505 0270 B2FBF3F3 		udiv	r3, r2, r3
 4506              		.loc 2 869 18
 4507 0274 BB82     		strh	r3, [r7, #20]	@ movhi
 870:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4508              		.loc 2 870 9
 4509 0276 36E0     		b	.L296
 4510              	.L294:
 871:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_PCLK2:
 872:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 4511              		.loc 2 872 31
 4512 0278 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 4513 027c 0346     		mov	r3, r0
 4514 027e 5A00     		lsls	r2, r3, #1
 4515 0280 7B68     		ldr	r3, [r7, #4]
 4516 0282 5B68     		ldr	r3, [r3, #4]
 4517 0284 5B08     		lsrs	r3, r3, #1
 4518 0286 1A44     		add	r2, r2, r3
 4519 0288 7B68     		ldr	r3, [r7, #4]
 4520 028a 5B68     		ldr	r3, [r3, #4]
 4521 028c B2FBF3F3 		udiv	r3, r2, r3
 4522              		.loc 2 872 18
 4523 0290 BB82     		strh	r3, [r7, #20]	@ movhi
 873:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4524              		.loc 2 873 9
 4525 0292 28E0     		b	.L296
 4526              	.L293:
 874:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_HSI:
 875:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 4527              		.loc 2 875 31
 4528 0294 7B68     		ldr	r3, [r7, #4]
 4529 0296 5B68     		ldr	r3, [r3, #4]
 4530 0298 5B08     		lsrs	r3, r3, #1
 4531 029a 03F1F473 		add	r3, r3, #31981568
 4532 029e 03F59043 		add	r3, r3, #18432
 4533 02a2 7A68     		ldr	r2, [r7, #4]
 4534 02a4 5268     		ldr	r2, [r2, #4]
 4535 02a6 B3FBF2F3 		udiv	r3, r3, r2
 4536              		.loc 2 875 18
 4537 02aa BB82     		strh	r3, [r7, #20]	@ movhi
 876:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4538              		.loc 2 876 9
 4539 02ac 1BE0     		b	.L296
 4540              	.L292:
 877:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_SYSCLK:
 878:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 4541              		.loc 2 878 31
 4542 02ae FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 4543 02b2 0346     		mov	r3, r0
 4544 02b4 5A00     		lsls	r2, r3, #1
 4545 02b6 7B68     		ldr	r3, [r7, #4]
 4546 02b8 5B68     		ldr	r3, [r3, #4]
 4547 02ba 5B08     		lsrs	r3, r3, #1
 4548 02bc 1A44     		add	r2, r2, r3
 4549 02be 7B68     		ldr	r3, [r7, #4]
 4550 02c0 5B68     		ldr	r3, [r3, #4]
 4551 02c2 B2FBF3F3 		udiv	r3, r2, r3
 4552              		.loc 2 878 18
 4553 02c6 BB82     		strh	r3, [r7, #20]	@ movhi
 879:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4554              		.loc 2 879 9
 4555 02c8 0DE0     		b	.L296
 4556              	.L290:
 880:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_LSE:
 881:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 4557              		.loc 2 881 31
 4558 02ca 7B68     		ldr	r3, [r7, #4]
 4559 02cc 5B68     		ldr	r3, [r3, #4]
 4560 02ce 5B08     		lsrs	r3, r3, #1
 4561 02d0 03F58032 		add	r2, r3, #65536
 4562 02d4 7B68     		ldr	r3, [r7, #4]
 4563 02d6 5B68     		ldr	r3, [r3, #4]
 4564 02d8 B2FBF3F3 		udiv	r3, r2, r3
 4565              		.loc 2 881 18
 4566 02dc BB82     		strh	r3, [r7, #20]	@ movhi
 882:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4567              		.loc 2 882 9
 4568 02de 02E0     		b	.L296
 4569              	.L289:
 883:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_UNDEFINED:
 884:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       default:
 885:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         ret = HAL_ERROR;
 4570              		.loc 2 885 13
 4571 02e0 0123     		movs	r3, #1
 4572 02e2 FB74     		strb	r3, [r7, #19]
 886:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4573              		.loc 2 886 9
 4574 02e4 00BF     		nop
 4575              	.L296:
 887:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 888:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 889:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     brrtemp = usartdiv & 0xFFF0U;
 4576              		.loc 2 889 13
 4577 02e6 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 4578 02e8 23F00F03 		bic	r3, r3, #15
 4579 02ec 7B81     		strh	r3, [r7, #10]	@ movhi
 890:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 4580              		.loc 2 890 58
 4581 02ee BB8A     		ldrh	r3, [r7, #20]
 4582 02f0 5B10     		asrs	r3, r3, #1
 4583              		.loc 2 890 16
 4584 02f2 9BB2     		uxth	r3, r3
 4585 02f4 03F00703 		and	r3, r3, #7
 4586 02f8 9AB2     		uxth	r2, r3
 4587              		.loc 2 890 13
 4588 02fa 7B89     		ldrh	r3, [r7, #10]	@ movhi
 4589 02fc 1343     		orrs	r3, r3, r2
 4590 02fe 7B81     		strh	r3, [r7, #10]	@ movhi
 891:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->Instance->BRR = brrtemp;
 4591              		.loc 2 891 10
 4592 0300 7B68     		ldr	r3, [r7, #4]
 4593 0302 1B68     		ldr	r3, [r3]
 4594              		.loc 2 891 26
 4595 0304 7A89     		ldrh	r2, [r7, #10]
 4596 0306 DA60     		str	r2, [r3, #12]
 4597 0308 75E0     		b	.L297
 4598              	.L307:
 4599 030a 00BF     		.align	2
 4600              	.L306:
 4601 030c 00380140 		.word	1073821696
 4602 0310 00100240 		.word	1073876992
 4603 0314 00440040 		.word	1073759232
 4604 0318 00480040 		.word	1073760256
 4605 031c 004C0040 		.word	1073761280
 4606 0320 00500040 		.word	1073762304
 4607              	.L288:
 892:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 893:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   else
 894:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 895:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     switch (clocksource)
 4608              		.loc 2 895 5
 4609 0324 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4610 0326 082B     		cmp	r3, #8
 4611 0328 62D8     		bhi	.L298
 4612 032a 01A2     		adr	r2, .L300
 4613 032c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4614              		.p2align 2
 4615              	.L300:
 4616 0330 55030000 		.word	.L304+1
 4617 0334 75030000 		.word	.L303+1
 4618 0338 95030000 		.word	.L302+1
 4619 033c F1030000 		.word	.L298+1
 4620 0340 B5030000 		.word	.L301+1
 4621 0344 F1030000 		.word	.L298+1
 4622 0348 F1030000 		.word	.L298+1
 4623 034c F1030000 		.word	.L298+1
 4624 0350 D5030000 		.word	.L299+1
 4625              		.p2align 1
 4626              	.L304:
 896:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 897:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_PCLK1:
 898:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.B
 4627              		.loc 2 898 43
 4628 0354 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 4629 0358 0246     		mov	r2, r0
 4630 035a 7B68     		ldr	r3, [r7, #4]
 4631 035c 5B68     		ldr	r3, [r3, #4]
 4632 035e 5B08     		lsrs	r3, r3, #1
 4633 0360 1A44     		add	r2, r2, r3
 4634 0362 7B68     		ldr	r3, [r7, #4]
 4635 0364 5B68     		ldr	r3, [r3, #4]
 4636 0366 B2FBF3F3 		udiv	r3, r2, r3
 4637              		.loc 2 898 32
 4638 036a 9AB2     		uxth	r2, r3
 4639              		.loc 2 898 14
 4640 036c 7B68     		ldr	r3, [r7, #4]
 4641 036e 1B68     		ldr	r3, [r3]
 4642              		.loc 2 898 30
 4643 0370 DA60     		str	r2, [r3, #12]
 899:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4644              		.loc 2 899 9
 4645 0372 40E0     		b	.L297
 4646              	.L303:
 900:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_PCLK2:
 901:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.B
 4647              		.loc 2 901 43
 4648 0374 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 4649 0378 0246     		mov	r2, r0
 4650 037a 7B68     		ldr	r3, [r7, #4]
 4651 037c 5B68     		ldr	r3, [r3, #4]
 4652 037e 5B08     		lsrs	r3, r3, #1
 4653 0380 1A44     		add	r2, r2, r3
 4654 0382 7B68     		ldr	r3, [r7, #4]
 4655 0384 5B68     		ldr	r3, [r3, #4]
 4656 0386 B2FBF3F3 		udiv	r3, r2, r3
 4657              		.loc 2 901 32
 4658 038a 9AB2     		uxth	r2, r3
 4659              		.loc 2 901 14
 4660 038c 7B68     		ldr	r3, [r7, #4]
 4661 038e 1B68     		ldr	r3, [r3]
 4662              		.loc 2 901 30
 4663 0390 DA60     		str	r2, [r3, #12]
 902:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4664              		.loc 2 902 9
 4665 0392 30E0     		b	.L297
 4666              	.L302:
 903:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_HSI:
 904:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 4667              		.loc 2 904 43
 4668 0394 7B68     		ldr	r3, [r7, #4]
 4669 0396 5B68     		ldr	r3, [r3, #4]
 4670 0398 5B08     		lsrs	r3, r3, #1
 4671 039a 03F57403 		add	r3, r3, #15990784
 4672 039e 03F51053 		add	r3, r3, #9216
 4673 03a2 7A68     		ldr	r2, [r7, #4]
 4674 03a4 5268     		ldr	r2, [r2, #4]
 4675 03a6 B3FBF2F3 		udiv	r3, r3, r2
 4676              		.loc 2 904 32
 4677 03aa 9AB2     		uxth	r2, r3
 4678              		.loc 2 904 14
 4679 03ac 7B68     		ldr	r3, [r7, #4]
 4680 03ae 1B68     		ldr	r3, [r3]
 4681              		.loc 2 904 30
 4682 03b0 DA60     		str	r2, [r3, #12]
 905:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4683              		.loc 2 905 9
 4684 03b2 20E0     		b	.L297
 4685              	.L301:
 906:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_SYSCLK:
 907:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Ini
 4686              		.loc 2 907 43
 4687 03b4 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 4688 03b8 0246     		mov	r2, r0
 4689 03ba 7B68     		ldr	r3, [r7, #4]
 4690 03bc 5B68     		ldr	r3, [r3, #4]
 4691 03be 5B08     		lsrs	r3, r3, #1
 4692 03c0 1A44     		add	r2, r2, r3
 4693 03c2 7B68     		ldr	r3, [r7, #4]
 4694 03c4 5B68     		ldr	r3, [r3, #4]
 4695 03c6 B2FBF3F3 		udiv	r3, r2, r3
 4696              		.loc 2 907 32
 4697 03ca 9AB2     		uxth	r2, r3
 4698              		.loc 2 907 14
 4699 03cc 7B68     		ldr	r3, [r7, #4]
 4700 03ce 1B68     		ldr	r3, [r3]
 4701              		.loc 2 907 30
 4702 03d0 DA60     		str	r2, [r3, #12]
 908:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4703              		.loc 2 908 9
 4704 03d2 10E0     		b	.L297
 4705              	.L299:
 909:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_LSE:
 910:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 4706              		.loc 2 910 43
 4707 03d4 7B68     		ldr	r3, [r7, #4]
 4708 03d6 5B68     		ldr	r3, [r3, #4]
 4709 03d8 5B08     		lsrs	r3, r3, #1
 4710 03da 03F50042 		add	r2, r3, #32768
 4711 03de 7B68     		ldr	r3, [r7, #4]
 4712 03e0 5B68     		ldr	r3, [r3, #4]
 4713 03e2 B2FBF3F3 		udiv	r3, r2, r3
 4714              		.loc 2 910 32
 4715 03e6 9AB2     		uxth	r2, r3
 4716              		.loc 2 910 14
 4717 03e8 7B68     		ldr	r3, [r7, #4]
 4718 03ea 1B68     		ldr	r3, [r3]
 4719              		.loc 2 910 30
 4720 03ec DA60     		str	r2, [r3, #12]
 911:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4721              		.loc 2 911 9
 4722 03ee 02E0     		b	.L297
 4723              	.L298:
 912:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_UNDEFINED:
 913:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       default:
 914:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         ret = HAL_ERROR;
 4724              		.loc 2 914 13
 4725 03f0 0123     		movs	r3, #1
 4726 03f2 FB74     		strb	r3, [r7, #19]
 915:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4727              		.loc 2 915 9
 4728 03f4 00BF     		nop
 4729              	.L297:
 916:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 917:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 918:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 919:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   return ret;
 4730              		.loc 2 919 10
 4731 03f6 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 920:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 921:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 4732              		.loc 2 921 1
 4733 03f8 1846     		mov	r0, r3
 4734 03fa 1837     		adds	r7, r7, #24
 4735              	.LCFI72:
 4736              		.cfi_def_cfa_offset 8
 4737 03fc BD46     		mov	sp, r7
 4738              	.LCFI73:
 4739              		.cfi_def_cfa_register 13
 4740              		@ sp needed
 4741 03fe 80BD     		pop	{r7, pc}
 4742              		.cfi_endproc
 4743              	.LFE137:
 4745              		.section	.text.UART_CheckIdleState,"ax",%progbits
 4746              		.align	1
 4747              		.global	UART_CheckIdleState
 4748              		.syntax unified
 4749              		.thumb
 4750              		.thumb_func
 4751              		.fpu softvfp
 4753              	UART_CheckIdleState:
 4754              	.LFB138:
 922:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 923:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 924:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 925:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief Check the UART Idle State.
 926:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param huart UART handle.
 927:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
 928:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 929:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
 930:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 4755              		.loc 2 930 1
 4756              		.cfi_startproc
 4757              		@ args = 0, pretend = 0, frame = 16
 4758              		@ frame_needed = 1, uses_anonymous_args = 0
 4759 0000 80B5     		push	{r7, lr}
 4760              	.LCFI74:
 4761              		.cfi_def_cfa_offset 8
 4762              		.cfi_offset 7, -8
 4763              		.cfi_offset 14, -4
 4764 0002 86B0     		sub	sp, sp, #24
 4765              	.LCFI75:
 4766              		.cfi_def_cfa_offset 32
 4767 0004 02AF     		add	r7, sp, #8
 4768              	.LCFI76:
 4769              		.cfi_def_cfa 7, 24
 4770 0006 7860     		str	r0, [r7, #4]
 931:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 4771              		.loc 2 931 12
 4772 0008 0023     		movs	r3, #0
 4773 000a FB60     		str	r3, [r7, #12]
 932:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 933:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Initialize the UART ErrorCode */
 934:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 4774              		.loc 2 934 20
 4775 000c 7B68     		ldr	r3, [r7, #4]
 4776 000e 0022     		movs	r2, #0
 4777 0010 DA66     		str	r2, [r3, #108]
 935:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 936:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Init tickstart for timeout managment*/
 937:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   tickstart = HAL_GetTick();
 4778              		.loc 2 937 15
 4779 0012 FFF7FEFF 		bl	HAL_GetTick
 4780 0016 F860     		str	r0, [r7, #12]
 938:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 939:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check if the Transmitter is enabled */
 940:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 4781              		.loc 2 940 12
 4782 0018 7B68     		ldr	r3, [r7, #4]
 4783 001a 1B68     		ldr	r3, [r3]
 4784              		.loc 2 940 22
 4785 001c 1B68     		ldr	r3, [r3]
 4786              		.loc 2 940 28
 4787 001e 03F00803 		and	r3, r3, #8
 4788              		.loc 2 940 5
 4789 0022 082B     		cmp	r3, #8
 4790 0024 0ED1     		bne	.L309
 941:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 942:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Wait until TEACK flag is set */
 943:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE
 4791              		.loc 2 943 8
 4792 0026 6FF07E43 		mvn	r3, #-33554432
 4793 002a 0093     		str	r3, [sp]
 4794 002c FB68     		ldr	r3, [r7, #12]
 4795 002e 0022     		movs	r2, #0
 4796 0030 4FF40011 		mov	r1, #2097152
 4797 0034 7868     		ldr	r0, [r7, #4]
 4798 0036 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 4799 003a 0346     		mov	r3, r0
 4800              		.loc 2 943 7
 4801 003c 002B     		cmp	r3, #0
 4802 003e 01D0     		beq	.L309
 944:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 945:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Timeout Occured */
 946:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_TIMEOUT;
 4803              		.loc 2 946 14
 4804 0040 0323     		movs	r3, #3
 4805 0042 22E0     		b	.L310
 4806              	.L309:
 947:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 948:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 949:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check if the Receiver is enabled */
 950:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 4807              		.loc 2 950 12
 4808 0044 7B68     		ldr	r3, [r7, #4]
 4809 0046 1B68     		ldr	r3, [r3]
 4810              		.loc 2 950 22
 4811 0048 1B68     		ldr	r3, [r3]
 4812              		.loc 2 950 28
 4813 004a 03F00403 		and	r3, r3, #4
 4814              		.loc 2 950 5
 4815 004e 042B     		cmp	r3, #4
 4816 0050 0ED1     		bne	.L311
 951:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 952:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Wait until REACK flag is set */
 953:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE
 4817              		.loc 2 953 8
 4818 0052 6FF07E43 		mvn	r3, #-33554432
 4819 0056 0093     		str	r3, [sp]
 4820 0058 FB68     		ldr	r3, [r7, #12]
 4821 005a 0022     		movs	r2, #0
 4822 005c 4FF48001 		mov	r1, #4194304
 4823 0060 7868     		ldr	r0, [r7, #4]
 4824 0062 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 4825 0066 0346     		mov	r3, r0
 4826              		.loc 2 953 7
 4827 0068 002B     		cmp	r3, #0
 4828 006a 01D0     		beq	.L311
 954:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 955:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Timeout Occured */
 956:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_TIMEOUT;
 4829              		.loc 2 956 14
 4830 006c 0323     		movs	r3, #3
 4831 006e 0CE0     		b	.L310
 4832              	.L311:
 957:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 958:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 959:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 960:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Initialize the UART State */
 961:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   huart->gState  = HAL_UART_STATE_READY;
 4833              		.loc 2 961 18
 4834 0070 7B68     		ldr	r3, [r7, #4]
 4835 0072 2022     		movs	r2, #32
 4836 0074 83F86920 		strb	r2, [r3, #105]
 962:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   huart->RxState = HAL_UART_STATE_READY;
 4837              		.loc 2 962 18
 4838 0078 7B68     		ldr	r3, [r7, #4]
 4839 007a 2022     		movs	r2, #32
 4840 007c 83F86A20 		strb	r2, [r3, #106]
 963:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 964:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Process Unlocked */
 965:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   __HAL_UNLOCK(huart);
 4841              		.loc 2 965 3
 4842 0080 7B68     		ldr	r3, [r7, #4]
 4843 0082 0022     		movs	r2, #0
 4844 0084 83F86820 		strb	r2, [r3, #104]
 966:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 967:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   return HAL_OK;
 4845              		.loc 2 967 10
 4846 0088 0023     		movs	r3, #0
 4847              	.L310:
 968:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 4848              		.loc 2 968 1
 4849 008a 1846     		mov	r0, r3
 4850 008c 1037     		adds	r7, r7, #16
 4851              	.LCFI77:
 4852              		.cfi_def_cfa_offset 8
 4853 008e BD46     		mov	sp, r7
 4854              	.LCFI78:
 4855              		.cfi_def_cfa_register 13
 4856              		@ sp needed
 4857 0090 80BD     		pop	{r7, pc}
 4858              		.cfi_endproc
 4859              	.LFE138:
 4861              		.section	.text.HAL_UART_Init,"ax",%progbits
 4862              		.align	1
 4863              		.global	HAL_UART_Init
 4864              		.syntax unified
 4865              		.thumb
 4866              		.thumb_func
 4867              		.fpu softvfp
 4869              	HAL_UART_Init:
 4870              	.LFB139:
 969:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 970:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 971:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 972:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 973:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief Initialize the UART mode according to the specified
 974:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   *        parameters in the UART_InitTypeDef and initialize the associated handle.
 975:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param huart: UART handle.
 976:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
 977:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 978:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 979:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 4871              		.loc 2 979 1
 4872              		.cfi_startproc
 4873              		@ args = 0, pretend = 0, frame = 8
 4874              		@ frame_needed = 1, uses_anonymous_args = 0
 4875 0000 80B5     		push	{r7, lr}
 4876              	.LCFI79:
 4877              		.cfi_def_cfa_offset 8
 4878              		.cfi_offset 7, -8
 4879              		.cfi_offset 14, -4
 4880 0002 82B0     		sub	sp, sp, #8
 4881              	.LCFI80:
 4882              		.cfi_def_cfa_offset 16
 4883 0004 00AF     		add	r7, sp, #0
 4884              	.LCFI81:
 4885              		.cfi_def_cfa_register 7
 4886 0006 7860     		str	r0, [r7, #4]
 980:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the UART handle allocation */
 981:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(huart == NULL)
 4887              		.loc 2 981 5
 4888 0008 7B68     		ldr	r3, [r7, #4]
 4889 000a 002B     		cmp	r3, #0
 4890 000c 01D1     		bne	.L313
 982:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 983:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_ERROR;
 4891              		.loc 2 983 12
 4892 000e 0123     		movs	r3, #1
 4893 0010 39E0     		b	.L314
 4894              	.L313:
 984:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 985:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 986:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 987:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 988:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 989:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 990:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 991:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   else
 992:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 993:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 994:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 995:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 996:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 997:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 4895              		.loc 2 997 11
 4896 0012 7B68     		ldr	r3, [r7, #4]
 4897 0014 93F86930 		ldrb	r3, [r3, #105]
 4898 0018 DBB2     		uxtb	r3, r3
 4899              		.loc 2 997 5
 4900 001a 002B     		cmp	r3, #0
 4901 001c 03D1     		bne	.L315
 998:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 999:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Allocate lock resource and initialize it */
1000:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->Lock = HAL_UNLOCKED;
 4902              		.loc 2 1000 17
 4903 001e 7B68     		ldr	r3, [r7, #4]
 4904 0020 0022     		movs	r2, #0
 4905 0022 83F86820 		strb	r2, [r3, #104]
 4906              	.L315:
1001:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1002:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Init the low level hardware : GPIO, CLOCK */
1003:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     //HAL_UART_MspInit(huart);
1004:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1005:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1006:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4907              		.loc 2 1006 17
 4908 0026 7B68     		ldr	r3, [r7, #4]
 4909 0028 2422     		movs	r2, #36
 4910 002a 83F86920 		strb	r2, [r3, #105]
1007:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1008:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Disable the Peripheral */
1009:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   __HAL_UART_DISABLE(huart);
 4911              		.loc 2 1009 3
 4912 002e 7B68     		ldr	r3, [r7, #4]
 4913 0030 1B68     		ldr	r3, [r3]
 4914 0032 1A68     		ldr	r2, [r3]
 4915 0034 7B68     		ldr	r3, [r7, #4]
 4916 0036 1B68     		ldr	r3, [r3]
 4917 0038 22F00102 		bic	r2, r2, #1
 4918 003c 1A60     		str	r2, [r3]
1010:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1011:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Set the UART Communication parameters */
1012:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 4919              		.loc 2 1012 7
 4920 003e 7868     		ldr	r0, [r7, #4]
 4921 0040 FFF7FEFF 		bl	UART_SetConfig
 4922 0044 0346     		mov	r3, r0
 4923              		.loc 2 1012 6
 4924 0046 012B     		cmp	r3, #1
 4925 0048 01D1     		bne	.L316
1013:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1014:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_ERROR;
 4926              		.loc 2 1014 12
 4927 004a 0123     		movs	r3, #1
 4928 004c 1BE0     		b	.L314
 4929              	.L316:
1015:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1016:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1017:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
1018:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1019:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     //UART_AdvFeatureConfig(huart);
1020:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1021:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1022:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* In asynchronous mode, the following bits must be kept cleared:
1023:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
1024:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
1025:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 4930              		.loc 2 1025 3
 4931 004e 7B68     		ldr	r3, [r7, #4]
 4932 0050 1B68     		ldr	r3, [r3]
 4933 0052 5A68     		ldr	r2, [r3, #4]
 4934 0054 7B68     		ldr	r3, [r7, #4]
 4935 0056 1B68     		ldr	r3, [r3]
 4936 0058 22F49042 		bic	r2, r2, #18432
 4937 005c 5A60     		str	r2, [r3, #4]
1026:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 4938              		.loc 2 1026 3
 4939 005e 7B68     		ldr	r3, [r7, #4]
 4940 0060 1B68     		ldr	r3, [r3]
 4941 0062 9A68     		ldr	r2, [r3, #8]
 4942 0064 7B68     		ldr	r3, [r7, #4]
 4943 0066 1B68     		ldr	r3, [r3]
 4944 0068 22F02A02 		bic	r2, r2, #42
 4945 006c 9A60     		str	r2, [r3, #8]
1027:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1028:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Enable the Peripheral */
1029:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   __HAL_UART_ENABLE(huart);
 4946              		.loc 2 1029 3
 4947 006e 7B68     		ldr	r3, [r7, #4]
 4948 0070 1B68     		ldr	r3, [r3]
 4949 0072 1A68     		ldr	r2, [r3]
 4950 0074 7B68     		ldr	r3, [r7, #4]
 4951 0076 1B68     		ldr	r3, [r3]
 4952 0078 42F00102 		orr	r2, r2, #1
 4953 007c 1A60     		str	r2, [r3]
1030:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1031:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
1032:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   return UART_CheckIdleState(huart);
 4954              		.loc 2 1032 10
 4955 007e 7868     		ldr	r0, [r7, #4]
 4956 0080 FFF7FEFF 		bl	UART_CheckIdleState
 4957 0084 0346     		mov	r3, r0
 4958              	.L314:
1033:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 4959              		.loc 2 1033 1
 4960 0086 1846     		mov	r0, r3
 4961 0088 0837     		adds	r7, r7, #8
 4962              	.LCFI82:
 4963              		.cfi_def_cfa_offset 8
 4964 008a BD46     		mov	sp, r7
 4965              	.LCFI83:
 4966              		.cfi_def_cfa_register 13
 4967              		@ sp needed
 4968 008c 80BD     		pop	{r7, pc}
 4969              		.cfi_endproc
 4970              	.LFE139:
 4972              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 4973              		.align	1
 4974              		.global	UART_WaitOnFlagUntilTimeout
 4975              		.syntax unified
 4976              		.thumb
 4977              		.thumb_func
 4978              		.fpu softvfp
 4980              	UART_WaitOnFlagUntilTimeout:
 4981              	.LFB140:
1034:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1035:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
1036:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Handle UART Communication Timeout.
1037:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  huart UART handle.
1038:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  Flag Specifies the UART flag to check
1039:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  Status Flag status (SET or RESET)
1040:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  Tickstart Tick start value
1041:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  Timeout Timeout duration
1042:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
1043:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
1044:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus 
1045:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 4982              		.loc 2 1045 1
 4983              		.cfi_startproc
 4984              		@ args = 4, pretend = 0, frame = 16
 4985              		@ frame_needed = 1, uses_anonymous_args = 0
 4986 0000 80B5     		push	{r7, lr}
 4987              	.LCFI84:
 4988              		.cfi_def_cfa_offset 8
 4989              		.cfi_offset 7, -8
 4990              		.cfi_offset 14, -4
 4991 0002 84B0     		sub	sp, sp, #16
 4992              	.LCFI85:
 4993              		.cfi_def_cfa_offset 24
 4994 0004 00AF     		add	r7, sp, #0
 4995              	.LCFI86:
 4996              		.cfi_def_cfa_register 7
 4997 0006 F860     		str	r0, [r7, #12]
 4998 0008 B960     		str	r1, [r7, #8]
 4999 000a 3B60     		str	r3, [r7]
 5000 000c 1346     		mov	r3, r2
 5001 000e FB71     		strb	r3, [r7, #7]
1046:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Wait until flag is set */
1047:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 5002              		.loc 2 1047 8
 5003 0010 2CE0     		b	.L318
 5004              	.L321:
1048:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1049:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check for the Timeout */
1050:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(Timeout != HAL_MAX_DELAY)
 5005              		.loc 2 1050 7
 5006 0012 BB69     		ldr	r3, [r7, #24]
 5007 0014 B3F1FF3F 		cmp	r3, #-1
 5008 0018 28D0     		beq	.L318
1051:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1052:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 5009              		.loc 2 1052 9
 5010 001a BB69     		ldr	r3, [r7, #24]
 5011 001c 002B     		cmp	r3, #0
 5012 001e 07D0     		beq	.L319
 5013              		.loc 2 1052 31 discriminator 1
 5014 0020 FFF7FEFF 		bl	HAL_GetTick
 5015 0024 0246     		mov	r2, r0
 5016              		.loc 2 1052 44 discriminator 1
 5017 0026 3B68     		ldr	r3, [r7]
 5018 0028 D31A     		subs	r3, r2, r3
 5019              		.loc 2 1052 26 discriminator 1
 5020 002a BA69     		ldr	r2, [r7, #24]
 5021 002c 9A42     		cmp	r2, r3
 5022 002e 1DD2     		bcs	.L318
 5023              	.L319:
1053:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1054:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
1055:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 5024              		.loc 2 1055 9
 5025 0030 FB68     		ldr	r3, [r7, #12]
 5026 0032 1B68     		ldr	r3, [r3]
 5027 0034 1A68     		ldr	r2, [r3]
 5028 0036 FB68     		ldr	r3, [r7, #12]
 5029 0038 1B68     		ldr	r3, [r3]
 5030 003a 22F4D072 		bic	r2, r2, #416
 5031 003e 1A60     		str	r2, [r3]
1056:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5032              		.loc 2 1056 9
 5033 0040 FB68     		ldr	r3, [r7, #12]
 5034 0042 1B68     		ldr	r3, [r3]
 5035 0044 9A68     		ldr	r2, [r3, #8]
 5036 0046 FB68     		ldr	r3, [r7, #12]
 5037 0048 1B68     		ldr	r3, [r3]
 5038 004a 22F00102 		bic	r2, r2, #1
 5039 004e 9A60     		str	r2, [r3, #8]
1057:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1058:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->gState  = HAL_UART_STATE_READY;
 5040              		.loc 2 1058 24
 5041 0050 FB68     		ldr	r3, [r7, #12]
 5042 0052 2022     		movs	r2, #32
 5043 0054 83F86920 		strb	r2, [r3, #105]
1059:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->RxState = HAL_UART_STATE_READY;
 5044              		.loc 2 1059 24
 5045 0058 FB68     		ldr	r3, [r7, #12]
 5046 005a 2022     		movs	r2, #32
 5047 005c 83F86A20 		strb	r2, [r3, #106]
1060:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1061:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Process Unlocked */
1062:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_UNLOCK(huart);
 5048              		.loc 2 1062 9
 5049 0060 FB68     		ldr	r3, [r7, #12]
 5050 0062 0022     		movs	r2, #0
 5051 0064 83F86820 		strb	r2, [r3, #104]
1063:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_TIMEOUT;
 5052              		.loc 2 1063 16
 5053 0068 0323     		movs	r3, #3
 5054 006a 0FE0     		b	.L320
 5055              	.L318:
1047:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 5056              		.loc 2 1047 10
 5057 006c FB68     		ldr	r3, [r7, #12]
 5058 006e 1B68     		ldr	r3, [r3]
 5059 0070 DA69     		ldr	r2, [r3, #28]
 5060 0072 BB68     		ldr	r3, [r7, #8]
 5061 0074 1340     		ands	r3, r3, r2
1047:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 5062              		.loc 2 1047 49
 5063 0076 BA68     		ldr	r2, [r7, #8]
 5064 0078 9A42     		cmp	r2, r3
 5065 007a 0CBF     		ite	eq
 5066 007c 0123     		moveq	r3, #1
 5067 007e 0023     		movne	r3, #0
 5068 0080 DBB2     		uxtb	r3, r3
 5069 0082 1A46     		mov	r2, r3
1047:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 5070              		.loc 2 1047 58
 5071 0084 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1047:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 5072              		.loc 2 1047 8
 5073 0086 9A42     		cmp	r2, r3
 5074 0088 C3D0     		beq	.L321
1064:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1065:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1066:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1067:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   return HAL_OK;
 5075              		.loc 2 1067 10
 5076 008a 0023     		movs	r3, #0
 5077              	.L320:
1068:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 5078              		.loc 2 1068 1
 5079 008c 1846     		mov	r0, r3
 5080 008e 1037     		adds	r7, r7, #16
 5081              	.LCFI87:
 5082              		.cfi_def_cfa_offset 8
 5083 0090 BD46     		mov	sp, r7
 5084              	.LCFI88:
 5085              		.cfi_def_cfa_register 13
 5086              		@ sp needed
 5087 0092 80BD     		pop	{r7, pc}
 5088              		.cfi_endproc
 5089              	.LFE140:
 5091              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 5092              		.align	1
 5093              		.global	HAL_UART_Transmit
 5094              		.syntax unified
 5095              		.thumb
 5096              		.thumb_func
 5097              		.fpu softvfp
 5099              	HAL_UART_Transmit:
 5100              	.LFB141:
1069:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1070:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1071:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1072:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
1073:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief Send an amount of data in blocking mode.
1074:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param huart: UART handle.
1075:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param pData: Pointer to data buffer.
1076:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param Size: Amount of data to be sent.
1077:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param Timeout: Timeout duration.
1078:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
1079:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
1080:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
1081:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 5101              		.loc 2 1081 1
 5102              		.cfi_startproc
 5103              		@ args = 0, pretend = 0, frame = 24
 5104              		@ frame_needed = 1, uses_anonymous_args = 0
 5105 0000 80B5     		push	{r7, lr}
 5106              	.LCFI89:
 5107              		.cfi_def_cfa_offset 8
 5108              		.cfi_offset 7, -8
 5109              		.cfi_offset 14, -4
 5110 0002 88B0     		sub	sp, sp, #32
 5111              	.LCFI90:
 5112              		.cfi_def_cfa_offset 40
 5113 0004 02AF     		add	r7, sp, #8
 5114              	.LCFI91:
 5115              		.cfi_def_cfa 7, 32
 5116 0006 F860     		str	r0, [r7, #12]
 5117 0008 B960     		str	r1, [r7, #8]
 5118 000a 3B60     		str	r3, [r7]
 5119 000c 1346     		mov	r3, r2	@ movhi
 5120 000e FB80     		strh	r3, [r7, #6]	@ movhi
1082:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t* tmp;
1083:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 5121              		.loc 2 1083 12
 5122 0010 0023     		movs	r3, #0
 5123 0012 7B61     		str	r3, [r7, #20]
1084:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1085:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check that a Tx process is not already ongoing */
1086:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(huart->gState == HAL_UART_STATE_READY)
 5124              		.loc 2 1086 11
 5125 0014 FB68     		ldr	r3, [r7, #12]
 5126 0016 93F86930 		ldrb	r3, [r3, #105]
 5127 001a DBB2     		uxtb	r3, r3
 5128              		.loc 2 1086 5
 5129 001c 202B     		cmp	r3, #32
 5130 001e 77D1     		bne	.L323
1087:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1088:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((pData == NULL ) || (Size == 0U))
 5131              		.loc 2 1088 7
 5132 0020 BB68     		ldr	r3, [r7, #8]
 5133 0022 002B     		cmp	r3, #0
 5134 0024 02D0     		beq	.L324
 5135              		.loc 2 1088 25 discriminator 1
 5136 0026 FB88     		ldrh	r3, [r7, #6]
 5137 0028 002B     		cmp	r3, #0
 5138 002a 01D1     		bne	.L325
 5139              	.L324:
1089:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1090:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       return  HAL_ERROR;
 5140              		.loc 2 1090 15
 5141 002c 0123     		movs	r3, #1
 5142 002e 70E0     		b	.L326
 5143              	.L325:
1091:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1092:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1093:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Process Locked */
1094:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_LOCK(huart);
 5144              		.loc 2 1094 5
 5145 0030 FB68     		ldr	r3, [r7, #12]
 5146 0032 93F86830 		ldrb	r3, [r3, #104]	@ zero_extendqisi2
 5147 0036 012B     		cmp	r3, #1
 5148 0038 01D1     		bne	.L327
 5149              		.loc 2 1094 5 is_stmt 0 discriminator 1
 5150 003a 0223     		movs	r3, #2
 5151 003c 69E0     		b	.L326
 5152              	.L327:
 5153              		.loc 2 1094 5 discriminator 2
 5154 003e FB68     		ldr	r3, [r7, #12]
 5155 0040 0122     		movs	r2, #1
 5156 0042 83F86820 		strb	r2, [r3, #104]
1095:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1096:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 5157              		.loc 2 1096 22 is_stmt 1 discriminator 2
 5158 0046 FB68     		ldr	r3, [r7, #12]
 5159 0048 0022     		movs	r2, #0
 5160 004a DA66     		str	r2, [r3, #108]
1097:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 5161              		.loc 2 1097 19 discriminator 2
 5162 004c FB68     		ldr	r3, [r7, #12]
 5163 004e 2122     		movs	r2, #33
 5164 0050 83F86920 		strb	r2, [r3, #105]
1098:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1099:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Init tickstart for timeout managment*/
1100:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     tickstart = HAL_GetTick();
 5165              		.loc 2 1100 17 discriminator 2
 5166 0054 FFF7FEFF 		bl	HAL_GetTick
 5167 0058 7861     		str	r0, [r7, #20]
1101:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1102:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->TxXferSize = Size;
 5168              		.loc 2 1102 23 discriminator 2
 5169 005a FB68     		ldr	r3, [r7, #12]
 5170 005c FA88     		ldrh	r2, [r7, #6]	@ movhi
 5171 005e A3F85020 		strh	r2, [r3, #80]	@ movhi
1103:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->TxXferCount = Size;
 5172              		.loc 2 1103 24 discriminator 2
 5173 0062 FB68     		ldr	r3, [r7, #12]
 5174 0064 FA88     		ldrh	r2, [r7, #6]	@ movhi
 5175 0066 A3F85220 		strh	r2, [r3, #82]	@ movhi
1104:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     while(huart->TxXferCount > 0U)
 5176              		.loc 2 1104 10 discriminator 2
 5177 006a 34E0     		b	.L328
 5178              	.L331:
1105:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1106:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       huart->TxXferCount--;
 5179              		.loc 2 1106 12
 5180 006c FB68     		ldr	r3, [r7, #12]
 5181 006e B3F85230 		ldrh	r3, [r3, #82]	@ movhi
 5182 0072 9BB2     		uxth	r3, r3
 5183              		.loc 2 1106 25
 5184 0074 013B     		subs	r3, r3, #1
 5185 0076 9AB2     		uxth	r2, r3
 5186 0078 FB68     		ldr	r3, [r7, #12]
 5187 007a A3F85220 		strh	r2, [r3, #82]	@ movhi
1107:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 5188              		.loc 2 1107 10
 5189 007e 3B68     		ldr	r3, [r7]
 5190 0080 0093     		str	r3, [sp]
 5191 0082 7B69     		ldr	r3, [r7, #20]
 5192 0084 0022     		movs	r2, #0
 5193 0086 8021     		movs	r1, #128
 5194 0088 F868     		ldr	r0, [r7, #12]
 5195 008a FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 5196 008e 0346     		mov	r3, r0
 5197              		.loc 2 1107 9
 5198 0090 002B     		cmp	r3, #0
 5199 0092 01D0     		beq	.L329
1108:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1109:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_TIMEOUT;
 5200              		.loc 2 1109 16
 5201 0094 0323     		movs	r3, #3
 5202 0096 3CE0     		b	.L326
 5203              	.L329:
1110:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1111:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE
 5204              		.loc 2 1111 23
 5205 0098 FB68     		ldr	r3, [r7, #12]
 5206 009a 9B68     		ldr	r3, [r3, #8]
 5207              		.loc 2 1111 10
 5208 009c B3F5805F 		cmp	r3, #4096
 5209 00a0 11D1     		bne	.L330
 5210              		.loc 2 1111 73 discriminator 1
 5211 00a2 FB68     		ldr	r3, [r7, #12]
 5212 00a4 1B69     		ldr	r3, [r3, #16]
 5213              		.loc 2 1111 58 discriminator 1
 5214 00a6 002B     		cmp	r3, #0
 5215 00a8 0DD1     		bne	.L330
1112:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1113:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         tmp = (uint16_t*) pData;
 5216              		.loc 2 1113 13
 5217 00aa BB68     		ldr	r3, [r7, #8]
 5218 00ac 3B61     		str	r3, [r7, #16]
1114:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 5219              		.loc 2 1114 38
 5220 00ae 3B69     		ldr	r3, [r7, #16]
 5221 00b0 1A88     		ldrh	r2, [r3]
 5222              		.loc 2 1114 14
 5223 00b2 FB68     		ldr	r3, [r7, #12]
 5224 00b4 1B68     		ldr	r3, [r3]
 5225              		.loc 2 1114 38
 5226 00b6 C2F30802 		ubfx	r2, r2, #0, #9
 5227 00ba 92B2     		uxth	r2, r2
 5228              		.loc 2 1114 30
 5229 00bc 1A85     		strh	r2, [r3, #40]	@ movhi
1115:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         pData += 2U;
 5230              		.loc 2 1115 15
 5231 00be BB68     		ldr	r3, [r7, #8]
 5232 00c0 0233     		adds	r3, r3, #2
 5233 00c2 BB60     		str	r3, [r7, #8]
 5234 00c4 07E0     		b	.L328
 5235              	.L330:
1116:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1117:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
1118:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1119:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 5236              		.loc 2 1119 39
 5237 00c6 BB68     		ldr	r3, [r7, #8]
 5238 00c8 5A1C     		adds	r2, r3, #1
 5239 00ca BA60     		str	r2, [r7, #8]
 5240              		.loc 2 1119 33
 5241 00cc 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5242              		.loc 2 1119 14
 5243 00ce FB68     		ldr	r3, [r7, #12]
 5244 00d0 1B68     		ldr	r3, [r3]
 5245              		.loc 2 1119 33
 5246 00d2 92B2     		uxth	r2, r2
 5247              		.loc 2 1119 30
 5248 00d4 1A85     		strh	r2, [r3, #40]	@ movhi
 5249              	.L328:
1104:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 5250              		.loc 2 1104 16
 5251 00d6 FB68     		ldr	r3, [r7, #12]
 5252 00d8 B3F85230 		ldrh	r3, [r3, #82]	@ movhi
 5253 00dc 9BB2     		uxth	r3, r3
1104:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 5254              		.loc 2 1104 10
 5255 00de 002B     		cmp	r3, #0
 5256 00e0 C4D1     		bne	.L331
1120:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1121:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1122:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 5257              		.loc 2 1122 8
 5258 00e2 3B68     		ldr	r3, [r7]
 5259 00e4 0093     		str	r3, [sp]
 5260 00e6 7B69     		ldr	r3, [r7, #20]
 5261 00e8 0022     		movs	r2, #0
 5262 00ea 4021     		movs	r1, #64
 5263 00ec F868     		ldr	r0, [r7, #12]
 5264 00ee FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 5265 00f2 0346     		mov	r3, r0
 5266              		.loc 2 1122 7
 5267 00f4 002B     		cmp	r3, #0
 5268 00f6 01D0     		beq	.L332
1123:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1124:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_TIMEOUT;
 5269              		.loc 2 1124 14
 5270 00f8 0323     		movs	r3, #3
 5271 00fa 0AE0     		b	.L326
 5272              	.L332:
1125:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1126:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1127:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* At end of Tx process, restore huart->gState to Ready */
1128:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->gState = HAL_UART_STATE_READY;
 5273              		.loc 2 1128 19
 5274 00fc FB68     		ldr	r3, [r7, #12]
 5275 00fe 2022     		movs	r2, #32
 5276 0100 83F86920 		strb	r2, [r3, #105]
1129:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1130:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Process Unlocked */
1131:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_UNLOCK(huart);
 5277              		.loc 2 1131 5
 5278 0104 FB68     		ldr	r3, [r7, #12]
 5279 0106 0022     		movs	r2, #0
 5280 0108 83F86820 		strb	r2, [r3, #104]
1132:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1133:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_OK;
 5281              		.loc 2 1133 12
 5282 010c 0023     		movs	r3, #0
 5283 010e 00E0     		b	.L326
 5284              	.L323:
1134:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1135:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   else
1136:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1137:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_BUSY;
 5285              		.loc 2 1137 12
 5286 0110 0223     		movs	r3, #2
 5287              	.L326:
1138:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1139:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 5288              		.loc 2 1139 1
 5289 0112 1846     		mov	r0, r3
 5290 0114 1837     		adds	r7, r7, #24
 5291              	.LCFI92:
 5292              		.cfi_def_cfa_offset 8
 5293 0116 BD46     		mov	sp, r7
 5294              	.LCFI93:
 5295              		.cfi_def_cfa_register 13
 5296              		@ sp needed
 5297 0118 80BD     		pop	{r7, pc}
 5298              		.cfi_endproc
 5299              	.LFE141:
 5301              		.section	.text.HAL_UART_Receive,"ax",%progbits
 5302              		.align	1
 5303              		.global	HAL_UART_Receive
 5304              		.syntax unified
 5305              		.thumb
 5306              		.thumb_func
 5307              		.fpu softvfp
 5309              	HAL_UART_Receive:
 5310              	.LFB142:
1140:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1141:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1142:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1143:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
1144:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief Receive an amount of data in blocking mode.
1145:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param huart: UART handle.
1146:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param pData: pointer to data buffer.
1147:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param Size: amount of data to be received.
1148:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param Timeout: Timeout duration.
1149:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
1150:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
1151:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
1152:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 5311              		.loc 2 1152 1
 5312              		.cfi_startproc
 5313              		@ args = 0, pretend = 0, frame = 32
 5314              		@ frame_needed = 1, uses_anonymous_args = 0
 5315 0000 80B5     		push	{r7, lr}
 5316              	.LCFI94:
 5317              		.cfi_def_cfa_offset 8
 5318              		.cfi_offset 7, -8
 5319              		.cfi_offset 14, -4
 5320 0002 8AB0     		sub	sp, sp, #40
 5321              	.LCFI95:
 5322              		.cfi_def_cfa_offset 48
 5323 0004 02AF     		add	r7, sp, #8
 5324              	.LCFI96:
 5325              		.cfi_def_cfa 7, 40
 5326 0006 F860     		str	r0, [r7, #12]
 5327 0008 B960     		str	r1, [r7, #8]
 5328 000a 3B60     		str	r3, [r7]
 5329 000c 1346     		mov	r3, r2	@ movhi
 5330 000e FB80     		strh	r3, [r7, #6]	@ movhi
1153:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t* tmp;
1154:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t uhMask;
1155:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 5331              		.loc 2 1155 12
 5332 0010 0023     		movs	r3, #0
 5333 0012 FB61     		str	r3, [r7, #28]
1156:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1157:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check that a Rx process is not already ongoing */
1158:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(huart->RxState == HAL_UART_STATE_READY)
 5334              		.loc 2 1158 11
 5335 0014 FB68     		ldr	r3, [r7, #12]
 5336 0016 93F86A30 		ldrb	r3, [r3, #106]
 5337 001a DBB2     		uxtb	r3, r3
 5338              		.loc 2 1158 5
 5339 001c 202B     		cmp	r3, #32
 5340 001e 40F09F80 		bne	.L334
1159:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1160:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((pData == NULL ) || (Size == 0U))
 5341              		.loc 2 1160 7
 5342 0022 BB68     		ldr	r3, [r7, #8]
 5343 0024 002B     		cmp	r3, #0
 5344 0026 02D0     		beq	.L335
 5345              		.loc 2 1160 25 discriminator 1
 5346 0028 FB88     		ldrh	r3, [r7, #6]
 5347 002a 002B     		cmp	r3, #0
 5348 002c 01D1     		bne	.L336
 5349              	.L335:
1161:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1162:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       return  HAL_ERROR;
 5350              		.loc 2 1162 15
 5351 002e 0123     		movs	r3, #1
 5352 0030 97E0     		b	.L337
 5353              	.L336:
1163:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1164:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1165:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Process Locked */
1166:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_LOCK(huart);
 5354              		.loc 2 1166 5
 5355 0032 FB68     		ldr	r3, [r7, #12]
 5356 0034 93F86830 		ldrb	r3, [r3, #104]	@ zero_extendqisi2
 5357 0038 012B     		cmp	r3, #1
 5358 003a 01D1     		bne	.L338
 5359              		.loc 2 1166 5 is_stmt 0 discriminator 1
 5360 003c 0223     		movs	r3, #2
 5361 003e 90E0     		b	.L337
 5362              	.L338:
 5363              		.loc 2 1166 5 discriminator 2
 5364 0040 FB68     		ldr	r3, [r7, #12]
 5365 0042 0122     		movs	r2, #1
 5366 0044 83F86820 		strb	r2, [r3, #104]
1167:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1168:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->Instance->ICR = 0xFFFFFFFF;
 5367              		.loc 2 1168 10 is_stmt 1 discriminator 2
 5368 0048 FB68     		ldr	r3, [r7, #12]
 5369 004a 1B68     		ldr	r3, [r3]
 5370              		.loc 2 1168 26 discriminator 2
 5371 004c 4FF0FF32 		mov	r2, #-1
 5372 0050 1A62     		str	r2, [r3, #32]
1169:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 5373              		.loc 2 1169 22 discriminator 2
 5374 0052 FB68     		ldr	r3, [r7, #12]
 5375 0054 0022     		movs	r2, #0
 5376 0056 DA66     		str	r2, [r3, #108]
1170:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 5377              		.loc 2 1170 20 discriminator 2
 5378 0058 FB68     		ldr	r3, [r7, #12]
 5379 005a 2222     		movs	r2, #34
 5380 005c 83F86A20 		strb	r2, [r3, #106]
1171:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1172:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Init tickstart for timeout managment*/
1173:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     tickstart = HAL_GetTick();
 5381              		.loc 2 1173 17 discriminator 2
 5382 0060 FFF7FEFF 		bl	HAL_GetTick
 5383 0064 F861     		str	r0, [r7, #28]
1174:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1175:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->RxXferSize = Size;
 5384              		.loc 2 1175 23 discriminator 2
 5385 0066 FB68     		ldr	r3, [r7, #12]
 5386 0068 FA88     		ldrh	r2, [r7, #6]	@ movhi
 5387 006a A3F85820 		strh	r2, [r3, #88]	@ movhi
1176:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->RxXferCount = Size;
 5388              		.loc 2 1176 24 discriminator 2
 5389 006e FB68     		ldr	r3, [r7, #12]
 5390 0070 FA88     		ldrh	r2, [r7, #6]	@ movhi
 5391 0072 A3F85A20 		strh	r2, [r3, #90]	@ movhi
1177:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1178:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Computation of UART mask to apply to RDR register */
1179:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     UART_MASK_COMPUTATION(huart);
 5392              		.loc 2 1179 5 discriminator 2
 5393 0076 FB68     		ldr	r3, [r7, #12]
 5394 0078 9B68     		ldr	r3, [r3, #8]
 5395 007a B3F5805F 		cmp	r3, #4096
 5396 007e 0ED1     		bne	.L339
 5397              		.loc 2 1179 5 is_stmt 0 discriminator 1
 5398 0080 FB68     		ldr	r3, [r7, #12]
 5399 0082 1B69     		ldr	r3, [r3, #16]
 5400 0084 002B     		cmp	r3, #0
 5401 0086 05D1     		bne	.L340
 5402              		.loc 2 1179 5 discriminator 3
 5403 0088 FB68     		ldr	r3, [r7, #12]
 5404 008a 40F2FF12 		movw	r2, #511
 5405 008e A3F85C20 		strh	r2, [r3, #92]	@ movhi
 5406 0092 15E0     		b	.L341
 5407              	.L340:
 5408              		.loc 2 1179 5 discriminator 4
 5409 0094 FB68     		ldr	r3, [r7, #12]
 5410 0096 FF22     		movs	r2, #255
 5411 0098 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 5412 009c 10E0     		b	.L341
 5413              	.L339:
 5414              		.loc 2 1179 5 discriminator 2
 5415 009e FB68     		ldr	r3, [r7, #12]
 5416 00a0 9B68     		ldr	r3, [r3, #8]
 5417 00a2 002B     		cmp	r3, #0
 5418 00a4 0CD1     		bne	.L341
 5419              		.loc 2 1179 5 discriminator 5
 5420 00a6 FB68     		ldr	r3, [r7, #12]
 5421 00a8 1B69     		ldr	r3, [r3, #16]
 5422 00aa 002B     		cmp	r3, #0
 5423 00ac 04D1     		bne	.L342
 5424              		.loc 2 1179 5 discriminator 6
 5425 00ae FB68     		ldr	r3, [r7, #12]
 5426 00b0 FF22     		movs	r2, #255
 5427 00b2 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 5428 00b6 03E0     		b	.L341
 5429              	.L342:
 5430              		.loc 2 1179 5 discriminator 7
 5431 00b8 FB68     		ldr	r3, [r7, #12]
 5432 00ba 7F22     		movs	r2, #127
 5433 00bc A3F85C20 		strh	r2, [r3, #92]	@ movhi
 5434              	.L341:
1180:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     uhMask = huart->Mask;
 5435              		.loc 2 1180 12 is_stmt 1
 5436 00c0 FB68     		ldr	r3, [r7, #12]
 5437 00c2 B3F85C30 		ldrh	r3, [r3, #92]	@ movhi
 5438 00c6 7B83     		strh	r3, [r7, #26]	@ movhi
1181:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1182:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* as long as data have to be received */
1183:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     while(huart->RxXferCount > 0U)
 5439              		.loc 2 1183 10
 5440 00c8 3AE0     		b	.L343
 5441              	.L346:
1184:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1185:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       huart->RxXferCount--;
 5442              		.loc 2 1185 12
 5443 00ca FB68     		ldr	r3, [r7, #12]
 5444 00cc B3F85A30 		ldrh	r3, [r3, #90]	@ movhi
 5445 00d0 9BB2     		uxth	r3, r3
 5446              		.loc 2 1185 25
 5447 00d2 013B     		subs	r3, r3, #1
 5448 00d4 9AB2     		uxth	r2, r3
 5449 00d6 FB68     		ldr	r3, [r7, #12]
 5450 00d8 A3F85A20 		strh	r2, [r3, #90]	@ movhi
1186:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 5451              		.loc 2 1186 10
 5452 00dc 3B68     		ldr	r3, [r7]
 5453 00de 0093     		str	r3, [sp]
 5454 00e0 FB69     		ldr	r3, [r7, #28]
 5455 00e2 0022     		movs	r2, #0
 5456 00e4 2021     		movs	r1, #32
 5457 00e6 F868     		ldr	r0, [r7, #12]
 5458 00e8 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 5459 00ec 0346     		mov	r3, r0
 5460              		.loc 2 1186 9
 5461 00ee 002B     		cmp	r3, #0
 5462 00f0 01D0     		beq	.L344
1187:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1188:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_TIMEOUT;
 5463              		.loc 2 1188 16
 5464 00f2 0323     		movs	r3, #3
 5465 00f4 35E0     		b	.L337
 5466              	.L344:
1189:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1190:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE
 5467              		.loc 2 1190 23
 5468 00f6 FB68     		ldr	r3, [r7, #12]
 5469 00f8 9B68     		ldr	r3, [r3, #8]
 5470              		.loc 2 1190 10
 5471 00fa B3F5805F 		cmp	r3, #4096
 5472 00fe 12D1     		bne	.L345
 5473              		.loc 2 1190 73 discriminator 1
 5474 0100 FB68     		ldr	r3, [r7, #12]
 5475 0102 1B69     		ldr	r3, [r3, #16]
 5476              		.loc 2 1190 58 discriminator 1
 5477 0104 002B     		cmp	r3, #0
 5478 0106 0ED1     		bne	.L345
1191:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1192:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         tmp = (uint16_t*) pData ;
 5479              		.loc 2 1192 13
 5480 0108 BB68     		ldr	r3, [r7, #8]
 5481 010a 7B61     		str	r3, [r7, #20]
1193:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 5482              		.loc 2 1193 32
 5483 010c FB68     		ldr	r3, [r7, #12]
 5484 010e 1B68     		ldr	r3, [r3]
 5485              		.loc 2 1193 42
 5486 0110 9B8C     		ldrh	r3, [r3, #36]	@ movhi
 5487 0112 9AB2     		uxth	r2, r3
 5488              		.loc 2 1193 16
 5489 0114 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 5490 0116 1340     		ands	r3, r3, r2
 5491 0118 9AB2     		uxth	r2, r3
 5492              		.loc 2 1193 14
 5493 011a 7B69     		ldr	r3, [r7, #20]
 5494 011c 1A80     		strh	r2, [r3]	@ movhi
1194:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         pData +=2U;
 5495              		.loc 2 1194 15
 5496 011e BB68     		ldr	r3, [r7, #8]
 5497 0120 0233     		adds	r3, r3, #2
 5498 0122 BB60     		str	r3, [r7, #8]
 5499 0124 0CE0     		b	.L343
 5500              	.L345:
1195:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1196:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
1197:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1198:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****         *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 5501              		.loc 2 1198 35
 5502 0126 FB68     		ldr	r3, [r7, #12]
 5503 0128 1B68     		ldr	r3, [r3]
 5504              		.loc 2 1198 45
 5505 012a 9B8C     		ldrh	r3, [r3, #36]	@ movhi
 5506 012c 9BB2     		uxth	r3, r3
 5507              		.loc 2 1198 20
 5508 012e D9B2     		uxtb	r1, r3
 5509              		.loc 2 1198 53
 5510 0130 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 5511 0132 DAB2     		uxtb	r2, r3
 5512              		.loc 2 1198 15
 5513 0134 BB68     		ldr	r3, [r7, #8]
 5514 0136 581C     		adds	r0, r3, #1
 5515 0138 B860     		str	r0, [r7, #8]
 5516              		.loc 2 1198 20
 5517 013a 0A40     		ands	r2, r2, r1
 5518 013c D2B2     		uxtb	r2, r2
 5519              		.loc 2 1198 18
 5520 013e 1A70     		strb	r2, [r3]
 5521              	.L343:
1183:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 5522              		.loc 2 1183 16
 5523 0140 FB68     		ldr	r3, [r7, #12]
 5524 0142 B3F85A30 		ldrh	r3, [r3, #90]	@ movhi
 5525 0146 9BB2     		uxth	r3, r3
1183:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 5526              		.loc 2 1183 10
 5527 0148 002B     		cmp	r3, #0
 5528 014a BED1     		bne	.L346
1199:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1200:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1201:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1202:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1203:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->RxState = HAL_UART_STATE_READY;
 5529              		.loc 2 1203 20
 5530 014c FB68     		ldr	r3, [r7, #12]
 5531 014e 2022     		movs	r2, #32
 5532 0150 83F86A20 		strb	r2, [r3, #106]
1204:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1205:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Process Unlocked */
1206:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_UNLOCK(huart);
 5533              		.loc 2 1206 5
 5534 0154 FB68     		ldr	r3, [r7, #12]
 5535 0156 0022     		movs	r2, #0
 5536 0158 83F86820 		strb	r2, [r3, #104]
1207:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1208:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_OK;
 5537              		.loc 2 1208 12
 5538 015c 0023     		movs	r3, #0
 5539 015e 00E0     		b	.L337
 5540              	.L334:
1209:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1210:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   else
1211:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1212:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_BUSY;
 5541              		.loc 2 1212 12
 5542 0160 0223     		movs	r3, #2
 5543              	.L337:
1213:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1214:../base/./hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 5544              		.loc 2 1214 1
 5545 0162 1846     		mov	r0, r3
 5546 0164 2037     		adds	r7, r7, #32
 5547              	.LCFI97:
 5548              		.cfi_def_cfa_offset 8
 5549 0166 BD46     		mov	sp, r7
 5550              	.LCFI98:
 5551              		.cfi_def_cfa_register 13
 5552              		@ sp needed
 5553 0168 80BD     		pop	{r7, pc}
 5554              		.cfi_endproc
 5555              	.LFE142:
 5557              		.text
 5558              	.Letext0:
 5559              		.file 4 "c:\\users\\user\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\gcc-arm-none-eabi-10-2020
 5560              		.file 5 "c:\\users\\user\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\gcc-arm-none-eabi-10-2020
 5561              		.file 6 "../base/./hal/stm32f3/CMSIS/device/stm32f303xc.h"
 5562              		.file 7 "../base/./hal/stm32f3/CMSIS/device/stm32f3xx.h"
 5563              		.file 8 "../base/./hal/stm32f3/stm32f3xx_hal_def.h"
 5564              		.file 9 "../base/./hal/stm32f3/stm32f3xx_hal_rcc.h"
 5565              		.file 10 "../base/./hal/stm32f3/stm32f3xx_hal_gpio.h"
 5566              		.file 11 "../base/./hal/stm32f3/stm32f3xx_hal_dma.h"
 5567              		.file 12 "../base/./hal/stm32f3/stm32f3xx_hal_uart.h"
 5568              		.file 13 "../base/./hal/stm32f3/CMSIS/device/system_stm32f3xx.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f3_hal_lowlevel.c
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:16     .text.NVIC_GetPriorityGrouping:00000000 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:23     .text.NVIC_GetPriorityGrouping:00000000 NVIC_GetPriorityGrouping
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:58     .text.NVIC_GetPriorityGrouping:00000018 $d
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:63     .text.NVIC_SetPriority:00000000 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:69     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:143    .text.NVIC_SetPriority:0000004c $d
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:149    .text.NVIC_EncodePriority:00000000 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:155    .text.NVIC_EncodePriority:00000000 NVIC_EncodePriority
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:244    .bss:00000000 hal_sys_tick
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:241    .bss:00000000 $d
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:250    .bss:00000004 uwTick
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:257    .data:00000000 SystemCoreClock
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:254    .data:00000000 $d
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:260    .text.HAL_NVIC_SetPriority:00000000 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:267    .text.HAL_NVIC_SetPriority:00000000 HAL_NVIC_SetPriority
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:319    .text.HAL_InitTick:00000000 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:326    .text.HAL_InitTick:00000000 HAL_InitTick
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:367    .text.HAL_InitTick:0000001c $d
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:372    .text.HAL_GetTick:00000000 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:379    .text.HAL_GetTick:00000000 HAL_GetTick
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:413    .text.HAL_GetTick:00000018 $d
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:418    .text.HAL_IncTick:00000000 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:425    .text.HAL_IncTick:00000000 HAL_IncTick
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:454    .text.HAL_RCC_GetSysClockFreq:00000000 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:461    .text.HAL_RCC_GetSysClockFreq:00000000 HAL_RCC_GetSysClockFreq
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:492    .text.HAL_RCC_GetPCLK1Freq:00000000 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:499    .text.HAL_RCC_GetPCLK1Freq:00000000 HAL_RCC_GetPCLK1Freq
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:530    .text.HAL_RCC_OscConfig:00000000 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:537    .text.HAL_RCC_OscConfig:00000000 HAL_RCC_OscConfig
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:1017   .text.HAL_RCC_OscConfig:00000328 $d
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:1020   .text.HAL_RCC_OscConfig:0000032c $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:1450   .text.HAL_RCC_OscConfig:000005e0 $d
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:1452   .text.HAL_RCC_OscConfig:000005e4 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:1928   .text.HAL_RCC_OscConfig:00000920 $d
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:1933   .text.HAL_RCC_OscConfig:0000092c $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:2217   .text.HAL_RCC_OscConfig:00000b3c $d
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:2219   .text.HAL_RCC_OscConfig:00000b40 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:2601   .text.HAL_RCC_OscConfig:00000e18 $d
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:2603   .text.HAL_RCC_OscConfig:00000e1c $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:2884   .text.HAL_RCC_OscConfig:0000101c $d
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:2889   .text.HAL_RCC_ClockConfig:00000000 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:2896   .text.HAL_RCC_ClockConfig:00000000 HAL_RCC_ClockConfig
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:3372   .text.HAL_RCC_ClockConfig:00000270 $d
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:3376   .text.HAL_RCC_ClockConfig:00000278 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:3466   .text.HAL_RCC_ClockConfig:000002fc $d
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:3472   .text.HAL_RCC_GetPCLK2Freq:00000000 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:3479   .text.HAL_RCC_GetPCLK2Freq:00000000 HAL_RCC_GetPCLK2Freq
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:3510   .text.HAL_GPIO_Init:00000000 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:3517   .text.HAL_GPIO_Init:00000000 HAL_GPIO_Init
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:4043   .text.HAL_GPIO_Init:000002e0 $d
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:4054   .text.HAL_GPIO_WritePin:00000000 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:4061   .text.HAL_GPIO_WritePin:00000000 HAL_GPIO_WritePin
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:4119   .text.UART_SetConfig:00000000 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:4126   .text.UART_SetConfig:00000000 UART_SetConfig
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:4235   .text.UART_SetConfig:000000a0 $d
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:4239   .text.UART_SetConfig:000000b0 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:4484   .text.UART_SetConfig:00000238 $d
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:4493   .text.UART_SetConfig:0000025c $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:4601   .text.UART_SetConfig:0000030c $d
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:4609   .text.UART_SetConfig:00000324 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:4616   .text.UART_SetConfig:00000330 $d
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:4625   .text.UART_SetConfig:00000354 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:4746   .text.UART_CheckIdleState:00000000 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:4753   .text.UART_CheckIdleState:00000000 UART_CheckIdleState
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:4980   .text.UART_WaitOnFlagUntilTimeout:00000000 UART_WaitOnFlagUntilTimeout
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:4862   .text.HAL_UART_Init:00000000 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:4869   .text.HAL_UART_Init:00000000 HAL_UART_Init
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:4973   .text.UART_WaitOnFlagUntilTimeout:00000000 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:5092   .text.HAL_UART_Transmit:00000000 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:5099   .text.HAL_UART_Transmit:00000000 HAL_UART_Transmit
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:5302   .text.HAL_UART_Receive:00000000 $t
C:\Users\user\AppData\Local\Temp\ccywAGmF.s:5309   .text.HAL_UART_Receive:00000000 HAL_UART_Receive

NO UNDEFINED SYMBOLS
