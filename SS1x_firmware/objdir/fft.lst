   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"fft.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.rodata
  16              		.align	3
  19              	fpr_q:
  20 0000 00000000 		.word	0
  21 0004 8000C840 		.word	1086849152
  22              		.align	3
  25              	fpr_inverse_of_q:
  26 0008 82A79790 		.word	-1869109374
  27 000c E354153F 		.word	1058362595
  28              		.align	3
  31              	fpr_inv_2sqrsigma0:
  32 0010 C2BB83C1 		.word	-1048331326
  33 0014 8B4FC33F 		.word	1069764491
  34              		.align	3
  37              	fpr_inv_sigma:
  38 0018 00000000 		.word	0
  39 001c 00000000 		.word	0
  40 0020 9A16247E 		.word	2116294298
  41 0024 EB487C3F 		.word	1065109739
  42 0028 D9AE8C54 		.word	1418505945
  43 002c 0AE57B3F 		.word	1065084170
  44 0030 2C769EE0 		.word	-526485972
  45 0034 2E857B3F 		.word	1065059630
  46 0038 36DACAD3 		.word	-741680586
  47 003c 5EFC7A3F 		.word	1065024606
  48 0040 EDB37609 		.word	158774253
  49 0044 3B7B7A3F 		.word	1064991547
  50 0048 989CCA82 		.word	-2100650856
  51 004c 12017A3F 		.word	1064960274
  52 0050 36275FCE 		.word	-832624842
  53 0054 498D793F 		.word	1064930633
  54 0058 EED96EC5 		.word	-982590994
  55 005c 571F793F 		.word	1064902487
  56 0060 CAC764DE 		.word	-563820598
  57 0064 C2B6783F 		.word	1064875714
  58 0068 E31A31F6 		.word	-164554013
  59 006c 1E53783F 		.word	1064850206
  60              		.align	3
  63              	fpr_sigma_min:
  64 0070 00000000 		.word	0
  65 0074 00000000 		.word	0
  66 0078 8B564406 		.word	105141899
  67 007c 38DDF13F 		.word	1072815416
  68 0080 2686ADDC 		.word	-592607706
  69 0084 2E1DF23F 		.word	1072831790
  70 0088 7A7CAAE1 		.word	-508920710
  71 008c 465CF23F 		.word	1072847942
  72 0090 25FB4A57 		.word	1464531749
  73 0094 5CB9F23F 		.word	1072871772
  74 0098 B622FEC7 		.word	-939646282
  75 009c AB14F33F 		.word	1072895147
  76 00a0 C3D77534 		.word	880138179
  77 00a4 4E6EF33F 		.word	1072918094
  78 00a8 24C2A166 		.word	1721877028
  79 00ac 5AC6F33F 		.word	1072940634
  80 00b0 A0B38C35 		.word	898413472
  81 00b4 E51CF43F 		.word	1072962789
  82 00b8 757A1FBF 		.word	-1088456075
  83 00bc 0172F43F 		.word	1072984577
  84 00c0 64C79099 		.word	-1718565020
  85 00c4 C1C5F43F 		.word	1073006017
  86              		.align	3
  89              	fpr_log2:
  90 00c8 EF39FAFE 		.word	-17155601
  91 00cc 422EE63F 		.word	1072049730
  92              		.align	3
  95              	fpr_inv_log2:
  96 00d0 FE822B65 		.word	1697350398
  97 00d4 4715F73F 		.word	1073157447
  98              		.align	3
 101              	fpr_bnorm_max:
 102 00d8 ACADD85F 		.word	1608035756
 103 00dc 9A6DD040 		.word	1087401370
 104              		.align	3
 107              	fpr_zero:
 108 00e0 00000000 		.space	8
 108      00000000 
 109              		.align	3
 112              	fpr_one:
 113 00e8 00000000 		.word	0
 114 00ec 0000F03F 		.word	1072693248
 115              		.align	3
 118              	fpr_two:
 119 00f0 00000000 		.word	0
 120 00f4 00000040 		.word	1073741824
 121              		.align	3
 124              	fpr_onehalf:
 125 00f8 00000000 		.word	0
 126 00fc 0000E03F 		.word	1071644672
 127              		.align	3
 130              	fpr_invsqrt2:
 131 0100 CD3B7F66 		.word	1719614413
 132 0104 9EA0E63F 		.word	1072079006
 133              		.align	3
 136              	fpr_invsqrt8:
 137 0108 CD3B7F66 		.word	1719614413
 138 010c 9EA0D63F 		.word	1071030430
 139              		.align	3
 142              	fpr_ptwo31:
 143 0110 00000000 		.word	0
 144 0114 0000E041 		.word	1105199104
 145              		.align	3
 148              	fpr_ptwo31m1:
 149 0118 0000C0FF 		.word	-4194304
 150 011c FFFFDF41 		.word	1105199103
 151              		.align	3
 154              	fpr_mtwo31m1:
 155 0120 0000C0FF 		.word	-4194304
 156 0124 FFFFDFC1 		.word	-1042284545
 157              		.align	3
 160              	fpr_ptwo63m1:
 161 0128 00000000 		.word	0
 162 012c 0000E043 		.word	1138753536
 163              		.align	3
 166              	fpr_mtwo63m1:
 167 0130 00000000 		.word	0
 168 0134 0000E0C3 		.word	-1008730112
 169              		.align	3
 172              	fpr_ptwo63:
 173 0138 00000000 		.word	0
 174 013c 0000E043 		.word	1138753536
 175              		.section	.text.fpr_sub,"ax",%progbits
 176              		.align	1
 177              		.arch armv7e-m
 178              		.syntax unified
 179              		.thumb
 180              		.thumb_func
 181              		.fpu softvfp
 183              	fpr_sub:
 184              	.LFB9:
 185              		.file 1 "fpr.h"
   1:fpr.h         **** /*
   2:fpr.h         ****  * Floating-point operations.
   3:fpr.h         ****  *
   4:fpr.h         ****  * ==========================(LICENSE BEGIN)============================
   5:fpr.h         ****  *
   6:fpr.h         ****  * Copyright (c) 2017-2019  Falcon Project
   7:fpr.h         ****  *
   8:fpr.h         ****  * Permission is hereby granted, free of charge, to any person obtaining
   9:fpr.h         ****  * a copy of this software and associated documentation files (the
  10:fpr.h         ****  * "Software"), to deal in the Software without restriction, including
  11:fpr.h         ****  * without limitation the rights to use, copy, modify, merge, publish,
  12:fpr.h         ****  * distribute, sublicense, and/or sell copies of the Software, and to
  13:fpr.h         ****  * permit persons to whom the Software is furnished to do so, subject to
  14:fpr.h         ****  * the following conditions:
  15:fpr.h         ****  *
  16:fpr.h         ****  * The above copyright notice and this permission notice shall be
  17:fpr.h         ****  * included in all copies or substantial portions of the Software.
  18:fpr.h         ****  *
  19:fpr.h         ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  20:fpr.h         ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  21:fpr.h         ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  22:fpr.h         ****  * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  23:fpr.h         ****  * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  24:fpr.h         ****  * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  25:fpr.h         ****  * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  26:fpr.h         ****  *
  27:fpr.h         ****  * ===========================(LICENSE END)=============================
  28:fpr.h         ****  *
  29:fpr.h         ****  * @author   Thomas Pornin <thomas.pornin@nccgroup.com>
  30:fpr.h         ****  */
  31:fpr.h         **** 
  32:fpr.h         **** 
  33:fpr.h         **** /* ====================================================================== */
  34:fpr.h         **** /*
  35:fpr.h         ****  * Custom floating-point implementation with integer arithmetics. We
  36:fpr.h         ****  * use IEEE-754 "binary64" format, with some simplifications:
  37:fpr.h         ****  *
  38:fpr.h         ****  *   - Top bit is s = 1 for negative, 0 for positive.
  39:fpr.h         ****  *
  40:fpr.h         ****  *   - Exponent e uses the next 11 bits (bits 52 to 62, inclusive).
  41:fpr.h         ****  *
  42:fpr.h         ****  *   - Mantissa m uses the 52 low bits.
  43:fpr.h         ****  *
  44:fpr.h         ****  * Encoded value is, in general: (-1)^s * 2^(e-1023) * (1 + m*2^(-52))
  45:fpr.h         ****  * i.e. the mantissa really is a 53-bit number (less than 2.0, but not
  46:fpr.h         ****  * less than 1.0), but the top bit (equal to 1 by definition) is omitted
  47:fpr.h         ****  * in the encoding.
  48:fpr.h         ****  *
  49:fpr.h         ****  * In IEEE-754, there are some special values:
  50:fpr.h         ****  *
  51:fpr.h         ****  *   - If e = 2047, then the value is either an infinite (m = 0) or
  52:fpr.h         ****  *     a NaN (m != 0).
  53:fpr.h         ****  *
  54:fpr.h         ****  *   - If e = 0, then the value is either a zero (m = 0) or a subnormal,
  55:fpr.h         ****  *     aka "denormalized number" (m != 0).
  56:fpr.h         ****  *
  57:fpr.h         ****  * Of these, we only need the zeros. The caller is responsible for not
  58:fpr.h         ****  * providing operands that would lead to infinites, NaNs or subnormals.
  59:fpr.h         ****  * If inputs are such that values go out of range, then indeterminate
  60:fpr.h         ****  * values are returned (it would still be deterministic, but no specific
  61:fpr.h         ****  * value may be relied upon).
  62:fpr.h         ****  *
  63:fpr.h         ****  * At the C level, the three parts are stored in a 64-bit unsigned
  64:fpr.h         ****  * word.
  65:fpr.h         ****  *
  66:fpr.h         ****  * One may note that a property of the IEEE-754 format is that order
  67:fpr.h         ****  * is preserved for positive values: if two positive floating-point
  68:fpr.h         ****  * values x and y are such that x < y, then their respective encodings
  69:fpr.h         ****  * as _signed_ 64-bit integers i64(x) and i64(y) will be such that
  70:fpr.h         ****  * i64(x) < i64(y). For negative values, order is reversed: if x < 0,
  71:fpr.h         ****  * y < 0, and x < y, then ia64(x) > ia64(y).
  72:fpr.h         ****  *
  73:fpr.h         ****  * IMPORTANT ASSUMPTIONS:
  74:fpr.h         ****  * ======================
  75:fpr.h         ****  *
  76:fpr.h         ****  * For proper computations, and constant-time behaviour, we assume the
  77:fpr.h         ****  * following:
  78:fpr.h         ****  *
  79:fpr.h         ****  *   - 32x32->64 multiplication (unsigned) has an execution time that
  80:fpr.h         ****  *     is independent of its operands. This is true of most modern
  81:fpr.h         ****  *     x86 and ARM cores. Notable exceptions are the ARM Cortex M0, M0+
  82:fpr.h         ****  *     and M3 (in the M0 and M0+, this is done in software, so it depends
  83:fpr.h         ****  *     on that routine), and the PowerPC cores from the G3/G4 lines.
  84:fpr.h         ****  *     For more info, see: https://www.bearssl.org/ctmul.html
  85:fpr.h         ****  *
  86:fpr.h         ****  *   - Left-shifts and right-shifts of 32-bit values have an execution
  87:fpr.h         ****  *     time which does not depend on the shifted value nor on the
  88:fpr.h         ****  *     shift count. An historical exception is the Pentium IV, but most
  89:fpr.h         ****  *     modern CPU have barrel shifters. Some small microcontrollers
  90:fpr.h         ****  *     might have varying-time shifts (not the ARM Cortex M*, though).
  91:fpr.h         ****  *
  92:fpr.h         ****  *   - Right-shift of a signed negative value performs a sign extension.
  93:fpr.h         ****  *     As per the C standard, this operation returns an
  94:fpr.h         ****  *     implementation-defined result (this is NOT an "undefined
  95:fpr.h         ****  *     behaviour"). On most/all systems, an arithmetic shift is
  96:fpr.h         ****  *     performed, because this is what makes most sense.
  97:fpr.h         ****  */
  98:fpr.h         **** 
  99:fpr.h         **** /*
 100:fpr.h         ****  * Normally we should declare the 'fpr' type to be a struct or union
 101:fpr.h         ****  * around the internal 64-bit value; however, we want to use the
 102:fpr.h         ****  * direct 64-bit integer type to enable a lighter call convention on
 103:fpr.h         ****  * ARM platforms. This means that direct (invalid) use of operators
 104:fpr.h         ****  * such as '*' or '+' will not be caught by the compiler. We rely on
 105:fpr.h         ****  * the "normal" (non-emulated) code to detect such instances.
 106:fpr.h         ****  */
 107:fpr.h         **** typedef uint64_t fpr;
 108:fpr.h         **** 
 109:fpr.h         **** /*
 110:fpr.h         ****  * For computations, we split values into an integral mantissa in the
 111:fpr.h         ****  * 2^54..2^55 range, and an (adjusted) exponent. The lowest bit is
 112:fpr.h         ****  * "sticky" (it is set to 1 if any of the bits below it is 1); when
 113:fpr.h         ****  * re-encoding, the low two bits are dropped, but may induce an
 114:fpr.h         ****  * increment in the value for proper rounding.
 115:fpr.h         ****  */
 116:fpr.h         **** 
 117:fpr.h         **** /*
 118:fpr.h         ****  * Right-shift a 64-bit unsigned value by a possibly secret shift count.
 119:fpr.h         ****  * We assumed that the underlying architecture had a barrel shifter for
 120:fpr.h         ****  * 32-bit shifts, but for 64-bit shifts on a 32-bit system, this will
 121:fpr.h         ****  * typically invoke a software routine that is not necessarily
 122:fpr.h         ****  * constant-time; hence the function below.
 123:fpr.h         ****  *
 124:fpr.h         ****  * Shift count n MUST be in the 0..63 range.
 125:fpr.h         ****  */
 126:fpr.h         **** static inline uint64_t
 127:fpr.h         **** fpr_ursh(uint64_t x, int n)
 128:fpr.h         **** {
 129:fpr.h         **** 	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 130:fpr.h         **** 	return x >> (n & 31);
 131:fpr.h         **** }
 132:fpr.h         **** 
 133:fpr.h         **** /*
 134:fpr.h         ****  * Right-shift a 64-bit signed value by a possibly secret shift count
 135:fpr.h         ****  * (see fpr_ursh() for the rationale).
 136:fpr.h         ****  *
 137:fpr.h         ****  * Shift count n MUST be in the 0..63 range.
 138:fpr.h         ****  */
 139:fpr.h         **** static inline int64_t
 140:fpr.h         **** fpr_irsh(int64_t x, int n)
 141:fpr.h         **** {
 142:fpr.h         **** 	x ^= (x ^ (x >> 32)) & -(int64_t)(n >> 5);
 143:fpr.h         **** 	return x >> (n & 31);
 144:fpr.h         **** }
 145:fpr.h         **** 
 146:fpr.h         **** /*
 147:fpr.h         ****  * Left-shift a 64-bit unsigned value by a possibly secret shift count
 148:fpr.h         ****  * (see fpr_ursh() for the rationale).
 149:fpr.h         ****  *
 150:fpr.h         ****  * Shift count n MUST be in the 0..63 range.
 151:fpr.h         ****  */
 152:fpr.h         **** static inline uint64_t
 153:fpr.h         **** fpr_ulsh(uint64_t x, int n)
 154:fpr.h         **** {
 155:fpr.h         **** 	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 156:fpr.h         **** 	return x << (n & 31);
 157:fpr.h         **** }
 158:fpr.h         **** 
 159:fpr.h         **** /*
 160:fpr.h         ****  * Expectations:
 161:fpr.h         ****  *   s = 0 or 1
 162:fpr.h         ****  *   exponent e is "arbitrary" and unbiased
 163:fpr.h         ****  *   2^54 <= m < 2^55
 164:fpr.h         ****  * Numerical value is (-1)^2 * m * 2^e
 165:fpr.h         ****  *
 166:fpr.h         ****  * Exponents which are too low lead to value zero. If the exponent is
 167:fpr.h         ****  * too large, the returned value is indeterminate.
 168:fpr.h         ****  *
 169:fpr.h         ****  * If m = 0, then a zero is returned (using the provided sign).
 170:fpr.h         ****  * If e < -1076, then a zero is returned (regardless of the value of m).
 171:fpr.h         ****  * If e >= -1076 and e != 0, m must be within the expected range
 172:fpr.h         ****  * (2^54 to 2^55-1).
 173:fpr.h         ****  */
 174:fpr.h         **** 
 175:fpr.h         **** static inline fpr
 176:fpr.h         **** FPR(int s, int e, uint64_t m)
 177:fpr.h         **** {
 178:fpr.h         **** 	fpr x;
 179:fpr.h         **** 	uint32_t t;
 180:fpr.h         **** 	unsigned f;
 181:fpr.h         **** 
 182:fpr.h         **** 	/*
 183:fpr.h         **** 	 * If e >= -1076, then the value is "normal"; otherwise, it
 184:fpr.h         **** 	 * should be a subnormal, which we clamp down to zero.
 185:fpr.h         **** 	 */
 186:fpr.h         **** 	e += 1076;
 187:fpr.h         **** 	t = (uint32_t)e >> 31;
 188:fpr.h         **** 	m &= (uint64_t)t - 1;
 189:fpr.h         **** 
 190:fpr.h         **** 	/*
 191:fpr.h         **** 	 * If m = 0 then we want a zero; make e = 0 too, but conserve
 192:fpr.h         **** 	 * the sign.
 193:fpr.h         **** 	 */
 194:fpr.h         **** 	t = (uint32_t)(m >> 54);
 195:fpr.h         **** 	e &= -(int)t;
 196:fpr.h         **** 
 197:fpr.h         **** 	/*
 198:fpr.h         **** 	 * The 52 mantissa bits come from m. Value m has its top bit set
 199:fpr.h         **** 	 * (unless it is a zero); we leave it "as is": the top bit will
 200:fpr.h         **** 	 * increment the exponent by 1, except when m = 0, which is
 201:fpr.h         **** 	 * exactly what we want.
 202:fpr.h         **** 	 */
 203:fpr.h         **** 	x = (((uint64_t)s << 63) | (m >> 2)) + ((uint64_t)(uint32_t)e << 52);
 204:fpr.h         **** 
 205:fpr.h         **** 	/*
 206:fpr.h         **** 	 * Rounding: if the low three bits of m are 011, 110 or 111,
 207:fpr.h         **** 	 * then the value should be incremented to get the next
 208:fpr.h         **** 	 * representable value. This implements the usual
 209:fpr.h         **** 	 * round-to-nearest rule (with preference to even values in case
 210:fpr.h         **** 	 * of a tie). Note that the increment may make a carry spill
 211:fpr.h         **** 	 * into the exponent field, which is again exactly what we want
 212:fpr.h         **** 	 * in that case.
 213:fpr.h         **** 	 */
 214:fpr.h         **** 	f = (unsigned)m & 7U;
 215:fpr.h         **** 	x += (0xC8U >> f) & 1;
 216:fpr.h         **** 	return x;
 217:fpr.h         **** }
 218:fpr.h         **** 
 219:fpr.h         **** #define fpr_scaled   Zf(fpr_scaled)
 220:fpr.h         **** fpr fpr_scaled(int64_t i, int sc);
 221:fpr.h         **** 
 222:fpr.h         **** static inline fpr
 223:fpr.h         **** fpr_of(int64_t i)
 224:fpr.h         **** {
 225:fpr.h         **** 	return fpr_scaled(i, 0);
 226:fpr.h         **** }
 227:fpr.h         **** 
 228:fpr.h         **** static const fpr fpr_q = 4667981563525332992;
 229:fpr.h         **** static const fpr fpr_inverse_of_q = 4545632735260551042;
 230:fpr.h         **** static const fpr fpr_inv_2sqrsigma0 = 4594603506513722306;
 231:fpr.h         **** static const fpr fpr_inv_sigma[] = {
 232:fpr.h         **** 	0,  /* unused */
 233:fpr.h         **** 	4574611497772390042,
 234:fpr.h         **** 	4574501679055810265,
 235:fpr.h         **** 	4574396282908341804,
 236:fpr.h         **** 	4574245855758572086,
 237:fpr.h         **** 	4574103865040221165,
 238:fpr.h         **** 	4573969550563515544,
 239:fpr.h         **** 	4573842244705920822,
 240:fpr.h         **** 	4573721358406441454,
 241:fpr.h         **** 	4573606369665796042,
 242:fpr.h         **** 	4573496814039276259
 243:fpr.h         **** };
 244:fpr.h         **** static const fpr fpr_sigma_min[] = {
 245:fpr.h         **** 	0,  /* unused */
 246:fpr.h         **** 	4607707126469777035,
 247:fpr.h         **** 	4607777455861499430,
 248:fpr.h         **** 	4607846828256951418,
 249:fpr.h         **** 	4607949175006100261,
 250:fpr.h         **** 	4608049571757433526,
 251:fpr.h         **** 	4608148125896792003,
 252:fpr.h         **** 	4608244935301382692,
 253:fpr.h         **** 	4608340089478362016,
 254:fpr.h         **** 	4608433670533905013,
 255:fpr.h         **** 	4608525754002622308
 256:fpr.h         **** };
 257:fpr.h         **** static const fpr fpr_log2 = 4604418534313441775;
 258:fpr.h         **** static const fpr fpr_inv_log2 = 4609176140021203710;
 259:fpr.h         **** static const fpr fpr_bnorm_max = 4670353323383631276;
 260:fpr.h         **** static const fpr fpr_zero = 0;
 261:fpr.h         **** static const fpr fpr_one = 4607182418800017408;
 262:fpr.h         **** static const fpr fpr_two = 4611686018427387904;
 263:fpr.h         **** static const fpr fpr_onehalf = 4602678819172646912;
 264:fpr.h         **** static const fpr fpr_invsqrt2 = 4604544271217802189;
 265:fpr.h         **** static const fpr fpr_invsqrt8 = 4600040671590431693;
 266:fpr.h         **** static const fpr fpr_ptwo31 = 4746794007248502784;
 267:fpr.h         **** static const fpr fpr_ptwo31m1 = 4746794007244308480;
 268:fpr.h         **** static const fpr fpr_mtwo31m1 = 13970166044099084288U;
 269:fpr.h         **** static const fpr fpr_ptwo63m1 = 4890909195324358656;
 270:fpr.h         **** static const fpr fpr_mtwo63m1 = 14114281232179134464U;
 271:fpr.h         **** static const fpr fpr_ptwo63 = 4890909195324358656;
 272:fpr.h         **** 
 273:fpr.h         **** static inline int64_t
 274:fpr.h         **** fpr_rint(fpr x)
 275:fpr.h         **** {
 276:fpr.h         **** 	uint64_t m, d;
 277:fpr.h         **** 	int e;
 278:fpr.h         **** 	uint32_t s, dd, f;
 279:fpr.h         **** 
 280:fpr.h         **** 	/*
 281:fpr.h         **** 	 * We assume that the value fits in -(2^63-1)..+(2^63-1). We can
 282:fpr.h         **** 	 * thus extract the mantissa as a 63-bit integer, then right-shift
 283:fpr.h         **** 	 * it as needed.
 284:fpr.h         **** 	 */
 285:fpr.h         **** 	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 286:fpr.h         **** 	e = 1085 - ((int)(x >> 52) & 0x7FF);
 287:fpr.h         **** 
 288:fpr.h         **** 	/*
 289:fpr.h         **** 	 * If a shift of more than 63 bits is needed, then simply set m
 290:fpr.h         **** 	 * to zero. This also covers the case of an input operand equal
 291:fpr.h         **** 	 * to zero.
 292:fpr.h         **** 	 */
 293:fpr.h         **** 	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 294:fpr.h         **** 	e &= 63;
 295:fpr.h         **** 
 296:fpr.h         **** 	/*
 297:fpr.h         **** 	 * Right-shift m as needed. Shift count is e. Proper rounding
 298:fpr.h         **** 	 * mandates that:
 299:fpr.h         **** 	 *   - If the highest dropped bit is zero, then round low.
 300:fpr.h         **** 	 *   - If the highest dropped bit is one, and at least one of the
 301:fpr.h         **** 	 *     other dropped bits is one, then round up.
 302:fpr.h         **** 	 *   - If the highest dropped bit is one, and all other dropped
 303:fpr.h         **** 	 *     bits are zero, then round up if the lowest kept bit is 1,
 304:fpr.h         **** 	 *     or low otherwise (i.e. ties are broken by "rounding to even").
 305:fpr.h         **** 	 *
 306:fpr.h         **** 	 * We thus first extract a word consisting of all the dropped bit
 307:fpr.h         **** 	 * AND the lowest kept bit; then we shrink it down to three bits,
 308:fpr.h         **** 	 * the lowest being "sticky".
 309:fpr.h         **** 	 */
 310:fpr.h         **** 	d = fpr_ulsh(m, 63 - e);
 311:fpr.h         **** 	dd = (uint32_t)d | ((uint32_t)(d >> 32) & 0x1FFFFFFF);
 312:fpr.h         **** 	f = (uint32_t)(d >> 61) | ((dd | -dd) >> 31);
 313:fpr.h         **** 	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 314:fpr.h         **** 
 315:fpr.h         **** 	/*
 316:fpr.h         **** 	 * Apply the sign bit.
 317:fpr.h         **** 	 */
 318:fpr.h         **** 	s = (uint32_t)(x >> 63);
 319:fpr.h         **** 	return ((int64_t)m ^ -(int64_t)s) + (int64_t)s;
 320:fpr.h         **** }
 321:fpr.h         **** 
 322:fpr.h         **** static inline int64_t
 323:fpr.h         **** fpr_floor(fpr x)
 324:fpr.h         **** {
 325:fpr.h         **** 	uint64_t t;
 326:fpr.h         **** 	int64_t xi;
 327:fpr.h         **** 	int e, cc;
 328:fpr.h         **** 
 329:fpr.h         **** 	/*
 330:fpr.h         **** 	 * We extract the integer as a _signed_ 64-bit integer with
 331:fpr.h         **** 	 * a scaling factor. Since we assume that the value fits
 332:fpr.h         **** 	 * in the -(2^63-1)..+(2^63-1) range, we can left-shift the
 333:fpr.h         **** 	 * absolute value to make it in the 2^62..2^63-1 range: we
 334:fpr.h         **** 	 * will only need a right-shift afterwards.
 335:fpr.h         **** 	 */
 336:fpr.h         **** 	e = (int)(x >> 52) & 0x7FF;
 337:fpr.h         **** 	t = x >> 63;
 338:fpr.h         **** 	xi = (int64_t)(((x << 10) | ((uint64_t)1 << 62))
 339:fpr.h         **** 		& (((uint64_t)1 << 63) - 1));
 340:fpr.h         **** 	xi = (xi ^ -(int64_t)t) + (int64_t)t;
 341:fpr.h         **** 	cc = 1085 - e;
 342:fpr.h         **** 
 343:fpr.h         **** 	/*
 344:fpr.h         **** 	 * We perform an arithmetic right-shift on the value. This
 345:fpr.h         **** 	 * applies floor() semantics on both positive and negative values
 346:fpr.h         **** 	 * (rounding toward minus infinity).
 347:fpr.h         **** 	 */
 348:fpr.h         **** 	xi = fpr_irsh(xi, cc & 63);
 349:fpr.h         **** 
 350:fpr.h         **** 	/*
 351:fpr.h         **** 	 * If the true shift count was 64 or more, then we should instead
 352:fpr.h         **** 	 * replace xi with 0 (if nonnegative) or -1 (if negative). Edge
 353:fpr.h         **** 	 * case: -0 will be floored to -1, not 0 (whether this is correct
 354:fpr.h         **** 	 * is debatable; in any case, the other functions normalize zero
 355:fpr.h         **** 	 * to +0).
 356:fpr.h         **** 	 *
 357:fpr.h         **** 	 * For an input of zero, the non-shifted xi was incorrect (we used
 358:fpr.h         **** 	 * a top implicit bit of value 1, not 0), but this does not matter
 359:fpr.h         **** 	 * since this operation will clamp it down.
 360:fpr.h         **** 	 */
 361:fpr.h         **** 	xi ^= (xi ^ -(int64_t)t) & -(int64_t)((uint32_t)(63 - cc) >> 31);
 362:fpr.h         **** 	return xi;
 363:fpr.h         **** }
 364:fpr.h         **** 
 365:fpr.h         **** static inline int64_t
 366:fpr.h         **** fpr_trunc(fpr x)
 367:fpr.h         **** {
 368:fpr.h         **** 	uint64_t t, xu;
 369:fpr.h         **** 	int e, cc;
 370:fpr.h         **** 
 371:fpr.h         **** 	/*
 372:fpr.h         **** 	 * Extract the absolute value. Since we assume that the value
 373:fpr.h         **** 	 * fits in the -(2^63-1)..+(2^63-1) range, we can left-shift
 374:fpr.h         **** 	 * the absolute value into the 2^62..2^63-1 range, and then
 375:fpr.h         **** 	 * do a right shift afterwards.
 376:fpr.h         **** 	 */
 377:fpr.h         **** 	e = (int)(x >> 52) & 0x7FF;
 378:fpr.h         **** 	xu = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 379:fpr.h         **** 	cc = 1085 - e;
 380:fpr.h         **** 	xu = fpr_ursh(xu, cc & 63);
 381:fpr.h         **** 
 382:fpr.h         **** 	/*
 383:fpr.h         **** 	 * If the exponent is too low (cc > 63), then the shift was wrong
 384:fpr.h         **** 	 * and we must clamp the value to 0. This also covers the case
 385:fpr.h         **** 	 * of an input equal to zero.
 386:fpr.h         **** 	 */
 387:fpr.h         **** 	xu &= -(uint64_t)((uint32_t)(cc - 64) >> 31);
 388:fpr.h         **** 
 389:fpr.h         **** 	/*
 390:fpr.h         **** 	 * Apply back the sign, if the source value is negative.
 391:fpr.h         **** 	 */
 392:fpr.h         **** 	t = x >> 63;
 393:fpr.h         **** 	xu = (xu ^ -t) + t;
 394:fpr.h         **** 	return *(int64_t *)&xu;
 395:fpr.h         **** }
 396:fpr.h         **** 
 397:fpr.h         **** #define fpr_add   Zf(fpr_add)
 398:fpr.h         **** fpr fpr_add(fpr x, fpr y);
 399:fpr.h         **** 
 400:fpr.h         **** static inline fpr
 401:fpr.h         **** fpr_sub(fpr x, fpr y)
 402:fpr.h         **** {
 186              		.loc 1 402 1
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 16
 189              		@ frame_needed = 1, uses_anonymous_args = 0
 190 0000 B0B5     		push	{r4, r5, r7, lr}
 191              	.LCFI0:
 192              		.cfi_def_cfa_offset 16
 193              		.cfi_offset 4, -16
 194              		.cfi_offset 5, -12
 195              		.cfi_offset 7, -8
 196              		.cfi_offset 14, -4
 197 0002 84B0     		sub	sp, sp, #16
 198              	.LCFI1:
 199              		.cfi_def_cfa_offset 32
 200 0004 00AF     		add	r7, sp, #0
 201              	.LCFI2:
 202              		.cfi_def_cfa_register 7
 203 0006 C7E90201 		strd	r0, [r7, #8]
 204 000a C7E90023 		strd	r2, [r7]
 403:fpr.h         **** 	y ^= (uint64_t)1 << 63;
 205              		.loc 1 403 4
 206 000e D7E90023 		ldrd	r2, [r7]
 207 0012 1446     		mov	r4, r2
 208 0014 03F10045 		add	r5, r3, #-2147483648
 209 0018 C7E90045 		strd	r4, [r7]
 404:fpr.h         **** 	return fpr_add(x, y);
 210              		.loc 1 404 9
 211 001c D7E90023 		ldrd	r2, [r7]
 212 0020 D7E90201 		ldrd	r0, [r7, #8]
 213 0024 FFF7FEFF 		bl	falcon_inner_fpr_add
 214 0028 0246     		mov	r2, r0
 215 002a 0B46     		mov	r3, r1
 405:fpr.h         **** }
 216              		.loc 1 405 1
 217 002c 1046     		mov	r0, r2
 218 002e 1946     		mov	r1, r3
 219 0030 1037     		adds	r7, r7, #16
 220              	.LCFI3:
 221              		.cfi_def_cfa_offset 16
 222 0032 BD46     		mov	sp, r7
 223              	.LCFI4:
 224              		.cfi_def_cfa_register 13
 225              		@ sp needed
 226 0034 B0BD     		pop	{r4, r5, r7, pc}
 227              		.cfi_endproc
 228              	.LFE9:
 230              		.section	.text.fpr_neg,"ax",%progbits
 231              		.align	1
 232              		.syntax unified
 233              		.thumb
 234              		.thumb_func
 235              		.fpu softvfp
 237              	fpr_neg:
 238              	.LFB10:
 406:fpr.h         **** 
 407:fpr.h         **** static inline fpr
 408:fpr.h         **** fpr_neg(fpr x)
 409:fpr.h         **** {
 239              		.loc 1 409 1
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 8
 242              		@ frame_needed = 1, uses_anonymous_args = 0
 243              		@ link register save eliminated.
 244 0000 80B4     		push	{r7}
 245              	.LCFI5:
 246              		.cfi_def_cfa_offset 4
 247              		.cfi_offset 7, -4
 248 0002 83B0     		sub	sp, sp, #12
 249              	.LCFI6:
 250              		.cfi_def_cfa_offset 16
 251 0004 00AF     		add	r7, sp, #0
 252              	.LCFI7:
 253              		.cfi_def_cfa_register 7
 254 0006 C7E90001 		strd	r0, [r7]
 410:fpr.h         **** 	x ^= (uint64_t)1 << 63;
 255              		.loc 1 410 4
 256 000a D7E90001 		ldrd	r0, [r7]
 257 000e 0246     		mov	r2, r0
 258 0010 01F10043 		add	r3, r1, #-2147483648
 259 0014 C7E90023 		strd	r2, [r7]
 411:fpr.h         **** 	return x;
 260              		.loc 1 411 9
 261 0018 D7E90023 		ldrd	r2, [r7]
 412:fpr.h         **** }
 262              		.loc 1 412 1
 263 001c 1046     		mov	r0, r2
 264 001e 1946     		mov	r1, r3
 265 0020 0C37     		adds	r7, r7, #12
 266              	.LCFI8:
 267              		.cfi_def_cfa_offset 4
 268 0022 BD46     		mov	sp, r7
 269              	.LCFI9:
 270              		.cfi_def_cfa_register 13
 271              		@ sp needed
 272 0024 80BC     		pop	{r7}
 273              	.LCFI10:
 274              		.cfi_restore 7
 275              		.cfi_def_cfa_offset 0
 276 0026 7047     		bx	lr
 277              		.cfi_endproc
 278              	.LFE10:
 280              		.section	.text.fpr_half,"ax",%progbits
 281              		.align	1
 282              		.syntax unified
 283              		.thumb
 284              		.thumb_func
 285              		.fpu softvfp
 287              	fpr_half:
 288              	.LFB11:
 413:fpr.h         **** 
 414:fpr.h         **** static inline fpr
 415:fpr.h         **** fpr_half(fpr x)
 416:fpr.h         **** {
 289              		.loc 1 416 1
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 16
 292              		@ frame_needed = 1, uses_anonymous_args = 0
 293              		@ link register save eliminated.
 294 0000 2DE9B00F 		push	{r4, r5, r7, r8, r9, r10, fp}
 295              	.LCFI11:
 296              		.cfi_def_cfa_offset 28
 297              		.cfi_offset 4, -28
 298              		.cfi_offset 5, -24
 299              		.cfi_offset 7, -20
 300              		.cfi_offset 8, -16
 301              		.cfi_offset 9, -12
 302              		.cfi_offset 10, -8
 303              		.cfi_offset 11, -4
 304 0004 85B0     		sub	sp, sp, #20
 305              	.LCFI12:
 306              		.cfi_def_cfa_offset 48
 307 0006 00AF     		add	r7, sp, #0
 308              	.LCFI13:
 309              		.cfi_def_cfa_register 7
 310 0008 C7E90001 		strd	r0, [r7]
 417:fpr.h         **** 	/*
 418:fpr.h         **** 	 * To divide a value by 2, we just have to subtract 1 from its
 419:fpr.h         **** 	 * exponent, but we have to take care of zero.
 420:fpr.h         **** 	 */
 421:fpr.h         **** 	uint32_t t;
 422:fpr.h         **** 
 423:fpr.h         **** 	x -= (uint64_t)1 << 52;
 311              		.loc 1 423 4
 312 000c D7E90001 		ldrd	r0, [r7]
 313 0010 A1F5801B 		sub	fp, r1, #1048576
 314 0014 8246     		mov	r10, r0
 315 0016 C7E900AB 		strd	r10, [r7]
 424:fpr.h         **** 	t = (((uint32_t)(x >> 52) & 0x7FF) + 1) >> 11;
 316              		.loc 1 424 21
 317 001a D7E900AB 		ldrd	r10, [r7]
 318 001e 4FF00000 		mov	r0, #0
 319 0022 4FF00001 		mov	r1, #0
 320 0026 4FEA1B50 		lsr	r0, fp, #20
 321 002a 0021     		movs	r1, #0
 322              		.loc 1 424 8
 323 002c 0146     		mov	r1, r0
 324              		.loc 1 424 28
 325 002e C1F30A01 		ubfx	r1, r1, #0, #11
 326              		.loc 1 424 37
 327 0032 0131     		adds	r1, r1, #1
 328              		.loc 1 424 4
 329 0034 C90A     		lsrs	r1, r1, #11
 330 0036 F960     		str	r1, [r7, #12]
 425:fpr.h         **** 	x &= (uint64_t)t - 1;
 331              		.loc 1 425 7
 332 0038 F968     		ldr	r1, [r7, #12]
 333 003a 0020     		movs	r0, #0
 334 003c 0C46     		mov	r4, r1
 335 003e 0546     		mov	r5, r0
 336              		.loc 1 425 19
 337 0040 621E     		subs	r2, r4, #1
 338 0042 45F1FF33 		adc	r3, r5, #-1
 339              		.loc 1 425 4
 340 0046 D7E90001 		ldrd	r0, [r7]
 341 004a 00EA0208 		and	r8, r0, r2
 342 004e 01EA0309 		and	r9, r1, r3
 343 0052 C7E90089 		strd	r8, [r7]
 426:fpr.h         **** 	return x;
 344              		.loc 1 426 9
 345 0056 D7E90023 		ldrd	r2, [r7]
 427:fpr.h         **** }
 346              		.loc 1 427 1
 347 005a 1046     		mov	r0, r2
 348 005c 1946     		mov	r1, r3
 349 005e 1437     		adds	r7, r7, #20
 350              	.LCFI14:
 351              		.cfi_def_cfa_offset 28
 352 0060 BD46     		mov	sp, r7
 353              	.LCFI15:
 354              		.cfi_def_cfa_register 13
 355              		@ sp needed
 356 0062 BDE8B00F 		pop	{r4, r5, r7, r8, r9, r10, fp}
 357              	.LCFI16:
 358              		.cfi_restore 11
 359              		.cfi_restore 10
 360              		.cfi_restore 9
 361              		.cfi_restore 8
 362              		.cfi_restore 7
 363              		.cfi_restore 5
 364              		.cfi_restore 4
 365              		.cfi_def_cfa_offset 0
 366 0066 7047     		bx	lr
 367              		.cfi_endproc
 368              	.LFE11:
 370              		.section	.text.fpr_sqr,"ax",%progbits
 371              		.align	1
 372              		.syntax unified
 373              		.thumb
 374              		.thumb_func
 375              		.fpu softvfp
 377              	fpr_sqr:
 378              	.LFB13:
 428:fpr.h         **** 
 429:fpr.h         **** static inline fpr
 430:fpr.h         **** fpr_double(fpr x)
 431:fpr.h         **** {
 432:fpr.h         **** 	/*
 433:fpr.h         **** 	 * To double a value, we just increment by one the exponent. We
 434:fpr.h         **** 	 * don't care about infinites or NaNs; however, 0 is a
 435:fpr.h         **** 	 * special case.
 436:fpr.h         **** 	 */
 437:fpr.h         **** 	x += (uint64_t)((((unsigned)(x >> 52) & 0x7FFU) + 0x7FFU) >> 11) << 52;
 438:fpr.h         **** 	return x;
 439:fpr.h         **** }
 440:fpr.h         **** 
 441:fpr.h         **** #define fpr_mul   Zf(fpr_mul)
 442:fpr.h         **** fpr fpr_mul(fpr x, fpr y);
 443:fpr.h         **** 
 444:fpr.h         **** static inline fpr
 445:fpr.h         **** fpr_sqr(fpr x)
 446:fpr.h         **** {
 379              		.loc 1 446 1
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 8
 382              		@ frame_needed = 1, uses_anonymous_args = 0
 383 0000 80B5     		push	{r7, lr}
 384              	.LCFI17:
 385              		.cfi_def_cfa_offset 8
 386              		.cfi_offset 7, -8
 387              		.cfi_offset 14, -4
 388 0002 82B0     		sub	sp, sp, #8
 389              	.LCFI18:
 390              		.cfi_def_cfa_offset 16
 391 0004 00AF     		add	r7, sp, #0
 392              	.LCFI19:
 393              		.cfi_def_cfa_register 7
 394 0006 C7E90001 		strd	r0, [r7]
 447:fpr.h         **** 	return fpr_mul(x, x);
 395              		.loc 1 447 9
 396 000a D7E90023 		ldrd	r2, [r7]
 397 000e D7E90001 		ldrd	r0, [r7]
 398 0012 FFF7FEFF 		bl	falcon_inner_fpr_mul
 399 0016 0246     		mov	r2, r0
 400 0018 0B46     		mov	r3, r1
 448:fpr.h         **** }
 401              		.loc 1 448 1
 402 001a 1046     		mov	r0, r2
 403 001c 1946     		mov	r1, r3
 404 001e 0837     		adds	r7, r7, #8
 405              	.LCFI20:
 406              		.cfi_def_cfa_offset 8
 407 0020 BD46     		mov	sp, r7
 408              	.LCFI21:
 409              		.cfi_def_cfa_register 13
 410              		@ sp needed
 411 0022 80BD     		pop	{r7, pc}
 412              		.cfi_endproc
 413              	.LFE13:
 415              		.section	.text.fpr_inv,"ax",%progbits
 416              		.align	1
 417              		.syntax unified
 418              		.thumb
 419              		.thumb_func
 420              		.fpu softvfp
 422              	fpr_inv:
 423              	.LFB14:
 449:fpr.h         **** 
 450:fpr.h         **** #define fpr_div   Zf(fpr_div)
 451:fpr.h         **** fpr fpr_div(fpr x, fpr y);
 452:fpr.h         **** 
 453:fpr.h         **** static inline fpr
 454:fpr.h         **** fpr_inv(fpr x)
 455:fpr.h         **** {
 424              		.loc 1 455 1
 425              		.cfi_startproc
 426              		@ args = 0, pretend = 0, frame = 8
 427              		@ frame_needed = 1, uses_anonymous_args = 0
 428 0000 80B5     		push	{r7, lr}
 429              	.LCFI22:
 430              		.cfi_def_cfa_offset 8
 431              		.cfi_offset 7, -8
 432              		.cfi_offset 14, -4
 433 0002 82B0     		sub	sp, sp, #8
 434              	.LCFI23:
 435              		.cfi_def_cfa_offset 16
 436 0004 00AF     		add	r7, sp, #0
 437              	.LCFI24:
 438              		.cfi_def_cfa_register 7
 439 0006 C7E90001 		strd	r0, [r7]
 456:fpr.h         **** 	return fpr_div(4607182418800017408u, x);
 440              		.loc 1 456 9
 441 000a D7E90023 		ldrd	r2, [r7]
 442 000e 4FF00000 		mov	r0, #0
 443 0012 0549     		ldr	r1, .L11
 444 0014 FFF7FEFF 		bl	falcon_inner_fpr_div
 445 0018 0246     		mov	r2, r0
 446 001a 0B46     		mov	r3, r1
 457:fpr.h         **** }
 447              		.loc 1 457 1
 448 001c 1046     		mov	r0, r2
 449 001e 1946     		mov	r1, r3
 450 0020 0837     		adds	r7, r7, #8
 451              	.LCFI25:
 452              		.cfi_def_cfa_offset 8
 453 0022 BD46     		mov	sp, r7
 454              	.LCFI26:
 455              		.cfi_def_cfa_register 13
 456              		@ sp needed
 457 0024 80BD     		pop	{r7, pc}
 458              	.L12:
 459 0026 00BF     		.align	2
 460              	.L11:
 461 0028 0000F03F 		.word	1072693248
 462              		.cfi_endproc
 463              	.LFE14:
 465              		.section	.text.falcon_inner_FFT,"ax",%progbits
 466              		.align	1
 467              		.global	falcon_inner_FFT
 468              		.syntax unified
 469              		.thumb
 470              		.thumb_func
 471              		.fpu softvfp
 473              	falcon_inner_FFT:
 474              	.LFB18:
 475              		.file 2 "fft.c"
   1:fft.c         **** /*
   2:fft.c         ****  * FFT code.
   3:fft.c         ****  *
   4:fft.c         ****  * ==========================(LICENSE BEGIN)============================
   5:fft.c         ****  *
   6:fft.c         ****  * Copyright (c) 2017-2019  Falcon Project
   7:fft.c         ****  *
   8:fft.c         ****  * Permission is hereby granted, free of charge, to any person obtaining
   9:fft.c         ****  * a copy of this software and associated documentation files (the
  10:fft.c         ****  * "Software"), to deal in the Software without restriction, including
  11:fft.c         ****  * without limitation the rights to use, copy, modify, merge, publish,
  12:fft.c         ****  * distribute, sublicense, and/or sell copies of the Software, and to
  13:fft.c         ****  * permit persons to whom the Software is furnished to do so, subject to
  14:fft.c         ****  * the following conditions:
  15:fft.c         ****  *
  16:fft.c         ****  * The above copyright notice and this permission notice shall be
  17:fft.c         ****  * included in all copies or substantial portions of the Software.
  18:fft.c         ****  *
  19:fft.c         ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  20:fft.c         ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  21:fft.c         ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  22:fft.c         ****  * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  23:fft.c         ****  * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  24:fft.c         ****  * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  25:fft.c         ****  * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  26:fft.c         ****  *
  27:fft.c         ****  * ===========================(LICENSE END)=============================
  28:fft.c         ****  *
  29:fft.c         ****  * @author   Thomas Pornin <thomas.pornin@nccgroup.com>
  30:fft.c         ****  */
  31:fft.c         **** 
  32:fft.c         **** #include "inner.h"
  33:fft.c         **** //#include "fpr.h"
  34:fft.c         **** /*
  35:fft.c         ****  * Rules for complex number macros:
  36:fft.c         ****  * --------------------------------
  37:fft.c         ****  *
  38:fft.c         ****  * Operand order is: destination, source1, source2...
  39:fft.c         ****  *
  40:fft.c         ****  * Each operand is a real and an imaginary part.
  41:fft.c         ****  *
  42:fft.c         ****  * All overlaps are allowed.
  43:fft.c         ****  */
  44:fft.c         **** 
  45:fft.c         **** /*
  46:fft.c         ****  * Addition of two complex numbers (d = a + b).
  47:fft.c         ****  */
  48:fft.c         **** #define FPC_ADD(d_re, d_im, a_re, a_im, b_re, b_im)   do { \
  49:fft.c         **** 		fpr fpct_re, fpct_im; \
  50:fft.c         **** 		fpct_re = fpr_add(a_re, b_re); \
  51:fft.c         **** 		fpct_im = fpr_add(a_im, b_im); \
  52:fft.c         **** 		(d_re) = fpct_re; \
  53:fft.c         **** 		(d_im) = fpct_im; \
  54:fft.c         **** 	} while (0)
  55:fft.c         **** 
  56:fft.c         **** /*
  57:fft.c         ****  * Subtraction of two complex numbers (d = a - b).
  58:fft.c         ****  */
  59:fft.c         **** #define FPC_SUB(d_re, d_im, a_re, a_im, b_re, b_im)   do { \
  60:fft.c         **** 		fpr fpct_re, fpct_im; \
  61:fft.c         **** 		fpct_re = fpr_sub(a_re, b_re); \
  62:fft.c         **** 		fpct_im = fpr_sub(a_im, b_im); \
  63:fft.c         **** 		(d_re) = fpct_re; \
  64:fft.c         **** 		(d_im) = fpct_im; \
  65:fft.c         **** 	} while (0)
  66:fft.c         **** 
  67:fft.c         **** /*
  68:fft.c         ****  * Multplication of two complex numbers (d = a * b).
  69:fft.c         ****  */
  70:fft.c         **** #define FPC_MUL(d_re, d_im, a_re, a_im, b_re, b_im){ \
  71:fft.c         **** 		fpr fpct_a_re, fpct_a_im; \
  72:fft.c         **** 		fpr fpct_b_re, fpct_b_im; \
  73:fft.c         **** 		fpr fpct_d_re, fpct_d_im; \
  74:fft.c         **** 		fpct_a_re = (a_re); \
  75:fft.c         **** 		fpct_a_im = (a_im); \
  76:fft.c         **** 		fpct_b_re = (b_re); \
  77:fft.c         **** 		fpct_b_im = (b_im); \
  78:fft.c         **** 		fpct_d_re = fpr_sub( \
  79:fft.c         **** 			fpr_mul(fpct_a_re, fpct_b_re), \
  80:fft.c         **** 			fpr_mul(fpct_a_im, fpct_b_im)); \
  81:fft.c         **** 		fpct_d_im = fpr_add( \
  82:fft.c         **** 			fpr_mul(fpct_a_re, fpct_b_im), \
  83:fft.c         **** 			fpr_mul(fpct_a_im, fpct_b_re)); \
  84:fft.c         **** 		(d_re) = fpct_d_re; \
  85:fft.c         **** 		(d_im) = fpct_d_im; \
  86:fft.c         **** 	}
  87:fft.c         **** 
  88:fft.c         **** /*
  89:fft.c         ****  * Squaring of a complex number (d = a * a).
  90:fft.c         ****  */
  91:fft.c         **** #define FPC_SQR(d_re, d_im, a_re, a_im)   do { \
  92:fft.c         **** 		fpr fpct_a_re, fpct_a_im; \
  93:fft.c         **** 		fpr fpct_d_re, fpct_d_im; \
  94:fft.c         **** 		fpct_a_re = (a_re); \
  95:fft.c         **** 		fpct_a_im = (a_im); \
  96:fft.c         **** 		fpct_d_re = fpr_sub(fpr_sqr(fpct_a_re), fpr_sqr(fpct_a_im)); \
  97:fft.c         **** 		fpct_d_im = fpr_double(fpr_mul(fpct_a_re, fpct_a_im)); \
  98:fft.c         **** 		(d_re) = fpct_d_re; \
  99:fft.c         **** 		(d_im) = fpct_d_im; \
 100:fft.c         **** 	} while (0)
 101:fft.c         **** 
 102:fft.c         **** /*
 103:fft.c         ****  * Inversion of a complex number (d = 1 / a).
 104:fft.c         ****  */
 105:fft.c         **** #define FPC_INV(d_re, d_im, a_re, a_im)   do { \
 106:fft.c         **** 		fpr fpct_a_re, fpct_a_im; \
 107:fft.c         **** 		fpr fpct_d_re, fpct_d_im; \
 108:fft.c         **** 		fpr fpct_m; \
 109:fft.c         **** 		fpct_a_re = (a_re); \
 110:fft.c         **** 		fpct_a_im = (a_im); \
 111:fft.c         **** 		fpct_m = fpr_add(fpr_sqr(fpct_a_re), fpr_sqr(fpct_a_im)); \
 112:fft.c         **** 		fpct_m = fpr_inv(fpct_m); \
 113:fft.c         **** 		fpct_d_re = fpr_mul(fpct_a_re, fpct_m); \
 114:fft.c         **** 		fpct_d_im = fpr_mul(fpr_neg(fpct_a_im), fpct_m); \
 115:fft.c         **** 		(d_re) = fpct_d_re; \
 116:fft.c         **** 		(d_im) = fpct_d_im; \
 117:fft.c         **** 	} while (0)
 118:fft.c         **** 
 119:fft.c         **** /*
 120:fft.c         ****  * Division of complex numbers (d = a / b).
 121:fft.c         ****  */
 122:fft.c         **** #define FPC_DIV(d_re, d_im, a_re, a_im, b_re, b_im)   do { \
 123:fft.c         **** 		fpr fpct_a_re, fpct_a_im; \
 124:fft.c         **** 		fpr fpct_b_re, fpct_b_im; \
 125:fft.c         **** 		fpr fpct_d_re, fpct_d_im; \
 126:fft.c         **** 		fpr fpct_m; \
 127:fft.c         **** 		fpct_a_re = (a_re); \
 128:fft.c         **** 		fpct_a_im = (a_im); \
 129:fft.c         **** 		fpct_b_re = (b_re); \
 130:fft.c         **** 		fpct_b_im = (b_im); \
 131:fft.c         **** 		fpct_m = fpr_add(fpr_sqr(fpct_b_re), fpr_sqr(fpct_b_im)); \
 132:fft.c         **** 		fpct_m = fpr_inv(fpct_m); \
 133:fft.c         **** 		fpct_b_re = fpr_mul(fpct_b_re, fpct_m); \
 134:fft.c         **** 		fpct_b_im = fpr_mul(fpr_neg(fpct_b_im), fpct_m); \
 135:fft.c         **** 		fpct_d_re = fpr_sub( \
 136:fft.c         **** 			fpr_mul(fpct_a_re, fpct_b_re), \
 137:fft.c         **** 			fpr_mul(fpct_a_im, fpct_b_im)); \
 138:fft.c         **** 		fpct_d_im = fpr_add( \
 139:fft.c         **** 			fpr_mul(fpct_a_re, fpct_b_im), \
 140:fft.c         **** 			fpr_mul(fpct_a_im, fpct_b_re)); \
 141:fft.c         **** 		(d_re) = fpct_d_re; \
 142:fft.c         **** 		(d_im) = fpct_d_im; \
 143:fft.c         **** 	} while (0)
 144:fft.c         **** 
 145:fft.c         **** /*
 146:fft.c         ****  * Let w = exp(i*pi/N); w is a primitive 2N-th root of 1. We define the
 147:fft.c         ****  * values w_j = w^(2j+1) for all j from 0 to N-1: these are the roots
 148:fft.c         ****  * of X^N+1 in the field of complex numbers. A crucial property is that
 149:fft.c         ****  * w_{N-1-j} = conj(w_j) = 1/w_j for all j.
 150:fft.c         ****  *
 151:fft.c         ****  * FFT representation of a polynomial f (taken modulo X^N+1) is the
 152:fft.c         ****  * set of values f(w_j). Since f is real, conj(f(w_j)) = f(conj(w_j)),
 153:fft.c         ****  * thus f(w_{N-1-j}) = conj(f(w_j)). We thus store only half the values,
 154:fft.c         ****  * for j = 0 to N/2-1; the other half can be recomputed easily when (if)
 155:fft.c         ****  * needed. A consequence is that FFT representation has the same size
 156:fft.c         ****  * as normal representation: N/2 complex numbers use N real numbers (each
 157:fft.c         ****  * complex number is the combination of a real and an imaginary part).
 158:fft.c         ****  *
 159:fft.c         ****  * We use a specific ordering which makes computations easier. Let rev()
 160:fft.c         ****  * be the bit-reversal function over log(N) bits. For j in 0..N/2-1, we
 161:fft.c         ****  * store the real and imaginary parts of f(w_j) in slots:
 162:fft.c         ****  *
 163:fft.c         ****  *    Re(f(w_j)) -> slot rev(j)/2
 164:fft.c         ****  *    Im(f(w_j)) -> slot rev(j)/2+N/2
 165:fft.c         ****  *
 166:fft.c         ****  * (Note that rev(j) is even for j < N/2.)
 167:fft.c         ****  */
 168:fft.c         **** 
 169:fft.c         **** /* see inner.h */
 170:fft.c         **** void
 171:fft.c         **** Zf(FFT)(fpr *f, unsigned logn)
 172:fft.c         **** {
 476              		.loc 2 172 1
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 184
 479              		@ frame_needed = 1, uses_anonymous_args = 0
 480 0000 B0B5     		push	{r4, r5, r7, lr}
 481              	.LCFI27:
 482              		.cfi_def_cfa_offset 16
 483              		.cfi_offset 4, -16
 484              		.cfi_offset 5, -12
 485              		.cfi_offset 7, -8
 486              		.cfi_offset 14, -4
 487 0002 AEB0     		sub	sp, sp, #184
 488              	.LCFI28:
 489              		.cfi_def_cfa_offset 200
 490 0004 00AF     		add	r7, sp, #0
 491              	.LCFI29:
 492              		.cfi_def_cfa_register 7
 493 0006 7860     		str	r0, [r7, #4]
 494 0008 3960     		str	r1, [r7]
 173:fft.c         **** 	/*
 174:fft.c         **** 	 * FFT algorithm in bit-reversal order uses the following
 175:fft.c         **** 	 * iterative algorithm:
 176:fft.c         **** 	 *
 177:fft.c         **** 	 *   t = N
 178:fft.c         **** 	 *   for m = 1; m < N; m *= 2:
 179:fft.c         **** 	 *       ht = t/2
 180:fft.c         **** 	 *       for i1 = 0; i1 < m; i1 ++:
 181:fft.c         **** 	 *           j1 = i1 * t
 182:fft.c         **** 	 *           s = GM[m + i1]
 183:fft.c         **** 	 *           for j = j1; j < (j1 + ht); j ++:
 184:fft.c         **** 	 *               x = f[j]
 185:fft.c         **** 	 *               y = s * f[j + ht]
 186:fft.c         **** 	 *               f[j] = x + y
 187:fft.c         **** 	 *               f[j + ht] = x - y
 188:fft.c         **** 	 *       t = ht
 189:fft.c         **** 	 *
 190:fft.c         **** 	 * GM[k] contains w^rev(k) for primitive root w = exp(i*pi/N).
 191:fft.c         **** 	 *
 192:fft.c         **** 	 * In the description above, f[] is supposed to contain complex
 193:fft.c         **** 	 * numbers. In our in-memory representation, the real and
 194:fft.c         **** 	 * imaginary parts of f[k] are in array slots k and k+N/2.
 195:fft.c         **** 	 *
 196:fft.c         **** 	 * We only keep the first half of the complex numbers. We can
 197:fft.c         **** 	 * see that after the first iteration, the first and second halves
 198:fft.c         **** 	 * of the array of complex numbers have separate lives, so we
 199:fft.c         **** 	 * simply ignore the second part.
 200:fft.c         **** 	 */
 201:fft.c         **** 
 202:fft.c         **** 	unsigned u;
 203:fft.c         **** 	size_t t, n, hn, m;
 204:fft.c         **** 	/*
 205:fft.c         **** 	 * First iteration: compute f[j] + i * f[j+N/2] for all j < N/2
 206:fft.c         **** 	 * (because GM[1] = w^rev(1) = w^(N/2) = i).
 207:fft.c         **** 	 * In our chosen representation, this is a no-op: everything is
 208:fft.c         **** 	 * already where it should be.
 209:fft.c         **** 	 */
 210:fft.c         **** 
 211:fft.c         **** 	/*
 212:fft.c         **** 	 * Subsequent iterations are truncated to use only the first
 213:fft.c         **** 	 * half of values.
 214:fft.c         **** 	 */
 215:fft.c         **** 	n = (size_t)1 << logn;
 495              		.loc 2 215 4
 496 000a 0122     		movs	r2, #1
 497 000c 3B68     		ldr	r3, [r7]
 498 000e 02FA03F3 		lsl	r3, r2, r3
 499 0012 C7F89C30 		str	r3, [r7, #156]
 216:fft.c         **** 	hn = n >> 1;
 500              		.loc 2 216 5
 501 0016 D7F89C30 		ldr	r3, [r7, #156]
 502 001a 5B08     		lsrs	r3, r3, #1
 503 001c C7F89830 		str	r3, [r7, #152]
 217:fft.c         **** 	t = hn;
 504              		.loc 2 217 4
 505 0020 D7F89830 		ldr	r3, [r7, #152]
 506 0024 C7F8B030 		str	r3, [r7, #176]
 218:fft.c         **** 
 219:fft.c         **** 	for (u = 1, m = 2; u < logn; u ++, m <<= 1) {
 507              		.loc 2 219 9
 508 0028 0123     		movs	r3, #1
 509 002a C7F8B430 		str	r3, [r7, #180]
 510              		.loc 2 219 16
 511 002e 0223     		movs	r3, #2
 512 0030 C7F8AC30 		str	r3, [r7, #172]
 513              		.loc 2 219 2
 514 0034 28E1     		b	.L14
 515              	.L19:
 516              	.LBB2:
 220:fft.c         **** 		size_t ht, hm, i1, j1;
 221:fft.c         **** 
 222:fft.c         **** 		ht = t >> 1;
 517              		.loc 2 222 6
 518 0036 D7F8B030 		ldr	r3, [r7, #176]
 519 003a 5B08     		lsrs	r3, r3, #1
 520 003c C7F89430 		str	r3, [r7, #148]
 223:fft.c         **** 		hm = m >> 1;
 521              		.loc 2 223 6
 522 0040 D7F8AC30 		ldr	r3, [r7, #172]
 523 0044 5B08     		lsrs	r3, r3, #1
 524 0046 C7F89030 		str	r3, [r7, #144]
 224:fft.c         **** 		for (i1 = 0, j1 = 0; i1 < hm; i1 ++, j1 += t) {
 525              		.loc 2 224 11
 526 004a 0023     		movs	r3, #0
 527 004c C7F8A830 		str	r3, [r7, #168]
 528              		.loc 2 224 19
 529 0050 0023     		movs	r3, #0
 530 0052 C7F8A430 		str	r3, [r7, #164]
 531              		.loc 2 224 3
 532 0056 02E1     		b	.L15
 533              	.L18:
 534              	.LBB3:
 225:fft.c         **** 			size_t j, j2;
 226:fft.c         **** 
 227:fft.c         **** 			j2 = j1 + ht;
 535              		.loc 2 227 7
 536 0058 D7F8A420 		ldr	r2, [r7, #164]
 537 005c D7F89430 		ldr	r3, [r7, #148]
 538 0060 1344     		add	r3, r3, r2
 539 0062 C7F88C30 		str	r3, [r7, #140]
 228:fft.c         **** 			fpr s_re, s_im;
 229:fft.c         **** 
 230:fft.c         **** 			s_re = fpr_gm_tab[((m + i1) << 1) + 0];
 540              		.loc 2 230 26
 541 0066 D7F8AC20 		ldr	r2, [r7, #172]
 542 006a D7F8A830 		ldr	r3, [r7, #168]
 543 006e 1344     		add	r3, r3, r2
 544              		.loc 2 230 38
 545 0070 5B00     		lsls	r3, r3, #1
 546              		.loc 2 230 9
 547 0072 8B4A     		ldr	r2, .L20
 548 0074 DB00     		lsls	r3, r3, #3
 549 0076 1344     		add	r3, r3, r2
 550 0078 D3E90023 		ldrd	r2, [r3]
 551 007c C7E92023 		strd	r2, [r7, #128]
 231:fft.c         **** 			s_im = fpr_gm_tab[((m + i1) << 1) + 1];
 552              		.loc 2 231 26
 553 0080 D7F8AC20 		ldr	r2, [r7, #172]
 554 0084 D7F8A830 		ldr	r3, [r7, #168]
 555 0088 1344     		add	r3, r3, r2
 556              		.loc 2 231 32
 557 008a 5B00     		lsls	r3, r3, #1
 558              		.loc 2 231 38
 559 008c 0133     		adds	r3, r3, #1
 560              		.loc 2 231 9
 561 008e 844A     		ldr	r2, .L20
 562 0090 DB00     		lsls	r3, r3, #3
 563 0092 1344     		add	r3, r3, r2
 564 0094 D3E90023 		ldrd	r2, [r3]
 565 0098 C7E91E23 		strd	r2, [r7, #120]
 232:fft.c         **** 			for (j = j1; j < j2; j ++) {
 566              		.loc 2 232 11
 567 009c D7F8A430 		ldr	r3, [r7, #164]
 568 00a0 C7F8A030 		str	r3, [r7, #160]
 569              		.loc 2 232 4
 570 00a4 C8E0     		b	.L16
 571              	.L17:
 572              	.LBB4:
 233:fft.c         **** 				fpr x_re, x_im, y_re, y_im;
 234:fft.c         **** 
 235:fft.c         **** 				x_re = f[j];
 573              		.loc 2 235 13 discriminator 3
 574 00a6 D7F8A030 		ldr	r3, [r7, #160]
 575 00aa DB00     		lsls	r3, r3, #3
 576 00ac 7A68     		ldr	r2, [r7, #4]
 577 00ae 1344     		add	r3, r3, r2
 578              		.loc 2 235 10 discriminator 3
 579 00b0 D3E90023 		ldrd	r2, [r3]
 580 00b4 C7E91C23 		strd	r2, [r7, #112]
 236:fft.c         **** 				x_im = f[j + hn];
 581              		.loc 2 236 16 discriminator 3
 582 00b8 D7F8A020 		ldr	r2, [r7, #160]
 583 00bc D7F89830 		ldr	r3, [r7, #152]
 584 00c0 1344     		add	r3, r3, r2
 585              		.loc 2 236 13 discriminator 3
 586 00c2 DB00     		lsls	r3, r3, #3
 587 00c4 7A68     		ldr	r2, [r7, #4]
 588 00c6 1344     		add	r3, r3, r2
 589              		.loc 2 236 10 discriminator 3
 590 00c8 D3E90023 		ldrd	r2, [r3]
 591 00cc C7E91A23 		strd	r2, [r7, #104]
 237:fft.c         **** 				y_re = f[j + ht];
 592              		.loc 2 237 16 discriminator 3
 593 00d0 D7F8A020 		ldr	r2, [r7, #160]
 594 00d4 D7F89430 		ldr	r3, [r7, #148]
 595 00d8 1344     		add	r3, r3, r2
 596              		.loc 2 237 13 discriminator 3
 597 00da DB00     		lsls	r3, r3, #3
 598 00dc 7A68     		ldr	r2, [r7, #4]
 599 00de 1344     		add	r3, r3, r2
 600              		.loc 2 237 10 discriminator 3
 601 00e0 D3E90023 		ldrd	r2, [r3]
 602 00e4 C7E91823 		strd	r2, [r7, #96]
 238:fft.c         **** 				y_im = f[j + ht + hn];
 603              		.loc 2 238 16 discriminator 3
 604 00e8 D7F8A020 		ldr	r2, [r7, #160]
 605 00ec D7F89430 		ldr	r3, [r7, #148]
 606 00f0 1A44     		add	r2, r2, r3
 607              		.loc 2 238 21 discriminator 3
 608 00f2 D7F89830 		ldr	r3, [r7, #152]
 609 00f6 1344     		add	r3, r3, r2
 610              		.loc 2 238 13 discriminator 3
 611 00f8 DB00     		lsls	r3, r3, #3
 612 00fa 7A68     		ldr	r2, [r7, #4]
 613 00fc 1344     		add	r3, r3, r2
 614              		.loc 2 238 10 discriminator 3
 615 00fe D3E90023 		ldrd	r2, [r3]
 616 0102 C7E91623 		strd	r2, [r7, #88]
 617              	.LBB5:
 239:fft.c         **** 
 240:fft.c         **** 				FPC_MUL(y_re, y_im, y_re, y_im, s_re, s_im);
 618              		.loc 2 240 5 discriminator 3
 619 0106 D7E91823 		ldrd	r2, [r7, #96]
 620 010a C7E91423 		strd	r2, [r7, #80]
 621 010e D7E91623 		ldrd	r2, [r7, #88]
 622 0112 C7E91223 		strd	r2, [r7, #72]
 623 0116 D7E92023 		ldrd	r2, [r7, #128]
 624 011a C7E91023 		strd	r2, [r7, #64]
 625 011e D7E91E23 		ldrd	r2, [r7, #120]
 626 0122 C7E90E23 		strd	r2, [r7, #56]
 627 0126 D7E91023 		ldrd	r2, [r7, #64]
 628 012a D7E91401 		ldrd	r0, [r7, #80]
 629 012e FFF7FEFF 		bl	falcon_inner_fpr_mul
 630 0132 0446     		mov	r4, r0
 631 0134 0D46     		mov	r5, r1
 632 0136 D7E90E23 		ldrd	r2, [r7, #56]
 633 013a D7E91201 		ldrd	r0, [r7, #72]
 634 013e FFF7FEFF 		bl	falcon_inner_fpr_mul
 635 0142 0246     		mov	r2, r0
 636 0144 0B46     		mov	r3, r1
 637 0146 2046     		mov	r0, r4
 638 0148 2946     		mov	r1, r5
 639 014a FFF7FEFF 		bl	fpr_sub
 640 014e C7E90C01 		strd	r0, [r7, #48]
 641 0152 D7E90E23 		ldrd	r2, [r7, #56]
 642 0156 D7E91401 		ldrd	r0, [r7, #80]
 643 015a FFF7FEFF 		bl	falcon_inner_fpr_mul
 644 015e 0446     		mov	r4, r0
 645 0160 0D46     		mov	r5, r1
 646 0162 D7E91023 		ldrd	r2, [r7, #64]
 647 0166 D7E91201 		ldrd	r0, [r7, #72]
 648 016a FFF7FEFF 		bl	falcon_inner_fpr_mul
 649 016e 0246     		mov	r2, r0
 650 0170 0B46     		mov	r3, r1
 651 0172 2046     		mov	r0, r4
 652 0174 2946     		mov	r1, r5
 653 0176 FFF7FEFF 		bl	falcon_inner_fpr_add
 654 017a C7E90A01 		strd	r0, [r7, #40]
 655 017e D7E90C23 		ldrd	r2, [r7, #48]
 656 0182 C7E91823 		strd	r2, [r7, #96]
 657 0186 D7E90A23 		ldrd	r2, [r7, #40]
 658 018a C7E91623 		strd	r2, [r7, #88]
 659              	.LBE5:
 660              	.LBB6:
 241:fft.c         **** 				FPC_ADD(f[j], f[j + hn],
 661              		.loc 2 241 5 discriminator 3
 662 018e D7E91823 		ldrd	r2, [r7, #96]
 663 0192 D7E91C01 		ldrd	r0, [r7, #112]
 664 0196 FFF7FEFF 		bl	falcon_inner_fpr_add
 665 019a C7E90801 		strd	r0, [r7, #32]
 666 019e D7E91623 		ldrd	r2, [r7, #88]
 667 01a2 D7E91A01 		ldrd	r0, [r7, #104]
 668 01a6 FFF7FEFF 		bl	falcon_inner_fpr_add
 669 01aa C7E90601 		strd	r0, [r7, #24]
 670 01ae D7F8A030 		ldr	r3, [r7, #160]
 671 01b2 DB00     		lsls	r3, r3, #3
 672 01b4 7A68     		ldr	r2, [r7, #4]
 673 01b6 D118     		adds	r1, r2, r3
 674 01b8 D7E90823 		ldrd	r2, [r7, #32]
 675 01bc C1E90023 		strd	r2, [r1]
 676 01c0 D7F8A020 		ldr	r2, [r7, #160]
 677 01c4 D7F89830 		ldr	r3, [r7, #152]
 678 01c8 1344     		add	r3, r3, r2
 679 01ca DB00     		lsls	r3, r3, #3
 680 01cc 7A68     		ldr	r2, [r7, #4]
 681 01ce D118     		adds	r1, r2, r3
 682 01d0 D7E90623 		ldrd	r2, [r7, #24]
 683 01d4 C1E90023 		strd	r2, [r1]
 684              	.LBE6:
 685              	.LBB7:
 242:fft.c         **** 					x_re, x_im, y_re, y_im);
 243:fft.c         **** 				FPC_SUB(f[j + ht], f[j + ht + hn],
 686              		.loc 2 243 5 discriminator 3
 687 01d8 D7E91823 		ldrd	r2, [r7, #96]
 688 01dc D7E91C01 		ldrd	r0, [r7, #112]
 689 01e0 FFF7FEFF 		bl	fpr_sub
 690 01e4 C7E90401 		strd	r0, [r7, #16]
 691 01e8 D7E91623 		ldrd	r2, [r7, #88]
 692 01ec D7E91A01 		ldrd	r0, [r7, #104]
 693 01f0 FFF7FEFF 		bl	fpr_sub
 694 01f4 C7E90201 		strd	r0, [r7, #8]
 695 01f8 D7F8A020 		ldr	r2, [r7, #160]
 696 01fc D7F89430 		ldr	r3, [r7, #148]
 697 0200 1344     		add	r3, r3, r2
 698 0202 DB00     		lsls	r3, r3, #3
 699 0204 7A68     		ldr	r2, [r7, #4]
 700 0206 D118     		adds	r1, r2, r3
 701 0208 D7E90423 		ldrd	r2, [r7, #16]
 702 020c C1E90023 		strd	r2, [r1]
 703 0210 D7F8A020 		ldr	r2, [r7, #160]
 704 0214 D7F89430 		ldr	r3, [r7, #148]
 705 0218 1A44     		add	r2, r2, r3
 706 021a D7F89830 		ldr	r3, [r7, #152]
 707 021e 1344     		add	r3, r3, r2
 708 0220 DB00     		lsls	r3, r3, #3
 709 0222 7A68     		ldr	r2, [r7, #4]
 710 0224 D118     		adds	r1, r2, r3
 711 0226 D7E90223 		ldrd	r2, [r7, #8]
 712 022a C1E90023 		strd	r2, [r1]
 713              	.LBE7:
 714              	.LBE4:
 232:fft.c         **** 				fpr x_re, x_im, y_re, y_im;
 715              		.loc 2 232 27 discriminator 3
 716 022e D7F8A030 		ldr	r3, [r7, #160]
 717 0232 0133     		adds	r3, r3, #1
 718 0234 C7F8A030 		str	r3, [r7, #160]
 719              	.L16:
 232:fft.c         **** 				fpr x_re, x_im, y_re, y_im;
 720              		.loc 2 232 4 discriminator 1
 721 0238 D7F8A020 		ldr	r2, [r7, #160]
 722 023c D7F88C30 		ldr	r3, [r7, #140]
 723 0240 9A42     		cmp	r2, r3
 724 0242 FFF430AF 		bcc	.L17
 725              	.LBE3:
 224:fft.c         **** 			size_t j, j2;
 726              		.loc 2 224 36 discriminator 2
 727 0246 D7F8A830 		ldr	r3, [r7, #168]
 728 024a 0133     		adds	r3, r3, #1
 729 024c C7F8A830 		str	r3, [r7, #168]
 224:fft.c         **** 			size_t j, j2;
 730              		.loc 2 224 43 discriminator 2
 731 0250 D7F8A420 		ldr	r2, [r7, #164]
 732 0254 D7F8B030 		ldr	r3, [r7, #176]
 733 0258 1344     		add	r3, r3, r2
 734 025a C7F8A430 		str	r3, [r7, #164]
 735              	.L15:
 224:fft.c         **** 			size_t j, j2;
 736              		.loc 2 224 3 discriminator 1
 737 025e D7F8A820 		ldr	r2, [r7, #168]
 738 0262 D7F89030 		ldr	r3, [r7, #144]
 739 0266 9A42     		cmp	r2, r3
 740 0268 FFF4F6AE 		bcc	.L18
 244:fft.c         **** 					x_re, x_im, y_re, y_im);
 245:fft.c         **** 			}
 246:fft.c         **** 		}
 247:fft.c         **** 		t = ht;
 741              		.loc 2 247 5 discriminator 2
 742 026c D7F89430 		ldr	r3, [r7, #148]
 743 0270 C7F8B030 		str	r3, [r7, #176]
 744              	.LBE2:
 219:fft.c         **** 		size_t ht, hm, i1, j1;
 745              		.loc 2 219 33 discriminator 2
 746 0274 D7F8B430 		ldr	r3, [r7, #180]
 747 0278 0133     		adds	r3, r3, #1
 748 027a C7F8B430 		str	r3, [r7, #180]
 219:fft.c         **** 		size_t ht, hm, i1, j1;
 749              		.loc 2 219 39 discriminator 2
 750 027e D7F8AC30 		ldr	r3, [r7, #172]
 751 0282 5B00     		lsls	r3, r3, #1
 752 0284 C7F8AC30 		str	r3, [r7, #172]
 753              	.L14:
 219:fft.c         **** 		size_t ht, hm, i1, j1;
 754              		.loc 2 219 2 discriminator 1
 755 0288 D7F8B420 		ldr	r2, [r7, #180]
 756 028c 3B68     		ldr	r3, [r7]
 757 028e 9A42     		cmp	r2, r3
 758 0290 FFF4D1AE 		bcc	.L19
 248:fft.c         **** 	}
 249:fft.c         **** }
 759              		.loc 2 249 1
 760 0294 00BF     		nop
 761 0296 00BF     		nop
 762 0298 B837     		adds	r7, r7, #184
 763              	.LCFI30:
 764              		.cfi_def_cfa_offset 16
 765 029a BD46     		mov	sp, r7
 766              	.LCFI31:
 767              		.cfi_def_cfa_register 13
 768              		@ sp needed
 769 029c B0BD     		pop	{r4, r5, r7, pc}
 770              	.L21:
 771 029e 00BF     		.align	2
 772              	.L20:
 773 02a0 00000000 		.word	falcon_inner_fpr_gm_tab
 774              		.cfi_endproc
 775              	.LFE18:
 777              		.section	.text.falcon_inner_iFFT,"ax",%progbits
 778              		.align	1
 779              		.global	falcon_inner_iFFT
 780              		.syntax unified
 781              		.thumb
 782              		.thumb_func
 783              		.fpu softvfp
 785              	falcon_inner_iFFT:
 786              	.LFB19:
 250:fft.c         **** 
 251:fft.c         **** /* see inner.h */
 252:fft.c         **** void
 253:fft.c         **** Zf(iFFT)(fpr *f, unsigned logn)
 254:fft.c         **** {
 787              		.loc 2 254 1
 788              		.cfi_startproc
 789              		@ args = 0, pretend = 0, frame = 192
 790              		@ frame_needed = 1, uses_anonymous_args = 0
 791 0000 B0B5     		push	{r4, r5, r7, lr}
 792              	.LCFI32:
 793              		.cfi_def_cfa_offset 16
 794              		.cfi_offset 4, -16
 795              		.cfi_offset 5, -12
 796              		.cfi_offset 7, -8
 797              		.cfi_offset 14, -4
 798 0002 B0B0     		sub	sp, sp, #192
 799              	.LCFI33:
 800              		.cfi_def_cfa_offset 208
 801 0004 00AF     		add	r7, sp, #0
 802              	.LCFI34:
 803              		.cfi_def_cfa_register 7
 804 0006 7860     		str	r0, [r7, #4]
 805 0008 3960     		str	r1, [r7]
 255:fft.c         **** 	/*
 256:fft.c         **** 	 * Inverse FFT algorithm in bit-reversal order uses the following
 257:fft.c         **** 	 * iterative algorithm:
 258:fft.c         **** 	 *
 259:fft.c         **** 	 *   t = 1
 260:fft.c         **** 	 *   for m = N; m > 1; m /= 2:
 261:fft.c         **** 	 *       hm = m/2
 262:fft.c         **** 	 *       dt = t*2
 263:fft.c         **** 	 *       for i1 = 0; i1 < hm; i1 ++:
 264:fft.c         **** 	 *           j1 = i1 * dt
 265:fft.c         **** 	 *           s = iGM[hm + i1]
 266:fft.c         **** 	 *           for j = j1; j < (j1 + t); j ++:
 267:fft.c         **** 	 *               x = f[j]
 268:fft.c         **** 	 *               y = f[j + t]
 269:fft.c         **** 	 *               f[j] = x + y
 270:fft.c         **** 	 *               f[j + t] = s * (x - y)
 271:fft.c         **** 	 *       t = dt
 272:fft.c         **** 	 *   for i1 = 0; i1 < N; i1 ++:
 273:fft.c         **** 	 *       f[i1] = f[i1] / N
 274:fft.c         **** 	 *
 275:fft.c         **** 	 * iGM[k] contains (1/w)^rev(k) for primitive root w = exp(i*pi/N)
 276:fft.c         **** 	 * (actually, iGM[k] = 1/GM[k] = conj(GM[k])).
 277:fft.c         **** 	 *
 278:fft.c         **** 	 * In the main loop (not counting the final division loop), in
 279:fft.c         **** 	 * all iterations except the last, the first and second half of f[]
 280:fft.c         **** 	 * (as an array of complex numbers) are separate. In our chosen
 281:fft.c         **** 	 * representation, we do not keep the second half.
 282:fft.c         **** 	 *
 283:fft.c         **** 	 * The last iteration recombines the recomputed half with the
 284:fft.c         **** 	 * implicit half, and should yield only real numbers since the
 285:fft.c         **** 	 * target polynomial is real; moreover, s = i at that step.
 286:fft.c         **** 	 * Thus, when considering x and y:
 287:fft.c         **** 	 *    y = conj(x) since the final f[j] must be real
 288:fft.c         **** 	 *    Therefore, f[j] is filled with 2*Re(x), and f[j + t] is
 289:fft.c         **** 	 *    filled with 2*Im(x).
 290:fft.c         **** 	 * But we already have Re(x) and Im(x) in array slots j and j+t
 291:fft.c         **** 	 * in our chosen representation. That last iteration is thus a
 292:fft.c         **** 	 * simple doubling of the values in all the array.
 293:fft.c         **** 	 *
 294:fft.c         **** 	 * We make the last iteration a no-op by tweaking the final
 295:fft.c         **** 	 * division into a division by N/2, not N.
 296:fft.c         **** 	 */
 297:fft.c         **** 	size_t u, n, hn, t, m;
 298:fft.c         **** 
 299:fft.c         **** 	n = (size_t)1 << logn;
 806              		.loc 2 299 4
 807 000a 0122     		movs	r2, #1
 808 000c 3B68     		ldr	r3, [r7]
 809 000e 02FA03F3 		lsl	r3, r2, r3
 810 0012 C7F8A430 		str	r3, [r7, #164]
 300:fft.c         **** 	t = 1;
 811              		.loc 2 300 4
 812 0016 0123     		movs	r3, #1
 813 0018 C7F8B830 		str	r3, [r7, #184]
 301:fft.c         **** 	m = n;
 814              		.loc 2 301 4
 815 001c D7F8A430 		ldr	r3, [r7, #164]
 816 0020 C7F8B430 		str	r3, [r7, #180]
 302:fft.c         **** 	hn = n >> 1;
 817              		.loc 2 302 5
 818 0024 D7F8A430 		ldr	r3, [r7, #164]
 819 0028 5B08     		lsrs	r3, r3, #1
 820 002a C7F8A030 		str	r3, [r7, #160]
 303:fft.c         **** 	for (u = logn; u > 1; u --) {
 821              		.loc 2 303 9
 822 002e 3B68     		ldr	r3, [r7]
 823 0030 C7F8BC30 		str	r3, [r7, #188]
 824              		.loc 2 303 2
 825 0034 2BE1     		b	.L23
 826              	.L28:
 827              	.LBB8:
 304:fft.c         **** 		size_t hm, dt, i1, j1;
 305:fft.c         **** 
 306:fft.c         **** 		hm = m >> 1;
 828              		.loc 2 306 6
 829 0036 D7F8B430 		ldr	r3, [r7, #180]
 830 003a 5B08     		lsrs	r3, r3, #1
 831 003c C7F89430 		str	r3, [r7, #148]
 307:fft.c         **** 		dt = t << 1;
 832              		.loc 2 307 6
 833 0040 D7F8B830 		ldr	r3, [r7, #184]
 834 0044 5B00     		lsls	r3, r3, #1
 835 0046 C7F89030 		str	r3, [r7, #144]
 308:fft.c         **** 		for (i1 = 0, j1 = 0; j1 < hn; i1 ++, j1 += dt) {
 836              		.loc 2 308 11
 837 004a 0023     		movs	r3, #0
 838 004c C7F8B030 		str	r3, [r7, #176]
 839              		.loc 2 308 19
 840 0050 0023     		movs	r3, #0
 841 0052 C7F8AC30 		str	r3, [r7, #172]
 842              		.loc 2 308 3
 843 0056 06E1     		b	.L24
 844              	.L27:
 845              	.LBB9:
 309:fft.c         **** 			size_t j, j2;
 310:fft.c         **** 
 311:fft.c         **** 			j2 = j1 + t;
 846              		.loc 2 311 7
 847 0058 D7F8AC20 		ldr	r2, [r7, #172]
 848 005c D7F8B830 		ldr	r3, [r7, #184]
 849 0060 1344     		add	r3, r3, r2
 850 0062 C7F88C30 		str	r3, [r7, #140]
 312:fft.c         **** 			fpr s_re, s_im;
 313:fft.c         **** 
 314:fft.c         **** 			s_re = fpr_gm_tab[((hm + i1) << 1) + 0];
 851              		.loc 2 314 27
 852 0066 D7F89420 		ldr	r2, [r7, #148]
 853 006a D7F8B030 		ldr	r3, [r7, #176]
 854 006e 1344     		add	r3, r3, r2
 855              		.loc 2 314 39
 856 0070 5B00     		lsls	r3, r3, #1
 857              		.loc 2 314 9
 858 0072 A24A     		ldr	r2, .L33
 859 0074 DB00     		lsls	r3, r3, #3
 860 0076 1344     		add	r3, r3, r2
 861 0078 D3E90023 		ldrd	r2, [r3]
 862 007c C7E92023 		strd	r2, [r7, #128]
 315:fft.c         **** 			s_im = fpr_neg(fpr_gm_tab[((hm + i1) << 1) + 1]);
 863              		.loc 2 315 35
 864 0080 D7F89420 		ldr	r2, [r7, #148]
 865 0084 D7F8B030 		ldr	r3, [r7, #176]
 866 0088 1344     		add	r3, r3, r2
 867              		.loc 2 315 41
 868 008a 5B00     		lsls	r3, r3, #1
 869              		.loc 2 315 47
 870 008c 0133     		adds	r3, r3, #1
 871              		.loc 2 315 11
 872 008e 9B4A     		ldr	r2, .L33
 873 0090 DB00     		lsls	r3, r3, #3
 874 0092 1344     		add	r3, r3, r2
 875 0094 D3E90023 		ldrd	r2, [r3]
 876 0098 1046     		mov	r0, r2
 877 009a 1946     		mov	r1, r3
 878 009c FFF7FEFF 		bl	fpr_neg
 879 00a0 C7E91E01 		strd	r0, [r7, #120]
 316:fft.c         **** 			for (j = j1; j < j2; j ++) {
 880              		.loc 2 316 11
 881 00a4 D7F8AC30 		ldr	r3, [r7, #172]
 882 00a8 C7F8A830 		str	r3, [r7, #168]
 883              		.loc 2 316 4
 884 00ac C8E0     		b	.L25
 885              	.L26:
 886              	.LBB10:
 317:fft.c         **** 				fpr x_re, x_im, y_re, y_im;
 318:fft.c         **** 
 319:fft.c         **** 				x_re = f[j];
 887              		.loc 2 319 13 discriminator 3
 888 00ae D7F8A830 		ldr	r3, [r7, #168]
 889 00b2 DB00     		lsls	r3, r3, #3
 890 00b4 7A68     		ldr	r2, [r7, #4]
 891 00b6 1344     		add	r3, r3, r2
 892              		.loc 2 319 10 discriminator 3
 893 00b8 D3E90023 		ldrd	r2, [r3]
 894 00bc C7E91C23 		strd	r2, [r7, #112]
 320:fft.c         **** 				x_im = f[j + hn];
 895              		.loc 2 320 16 discriminator 3
 896 00c0 D7F8A820 		ldr	r2, [r7, #168]
 897 00c4 D7F8A030 		ldr	r3, [r7, #160]
 898 00c8 1344     		add	r3, r3, r2
 899              		.loc 2 320 13 discriminator 3
 900 00ca DB00     		lsls	r3, r3, #3
 901 00cc 7A68     		ldr	r2, [r7, #4]
 902 00ce 1344     		add	r3, r3, r2
 903              		.loc 2 320 10 discriminator 3
 904 00d0 D3E90023 		ldrd	r2, [r3]
 905 00d4 C7E91A23 		strd	r2, [r7, #104]
 321:fft.c         **** 				y_re = f[j + t];
 906              		.loc 2 321 16 discriminator 3
 907 00d8 D7F8A820 		ldr	r2, [r7, #168]
 908 00dc D7F8B830 		ldr	r3, [r7, #184]
 909 00e0 1344     		add	r3, r3, r2
 910              		.loc 2 321 13 discriminator 3
 911 00e2 DB00     		lsls	r3, r3, #3
 912 00e4 7A68     		ldr	r2, [r7, #4]
 913 00e6 1344     		add	r3, r3, r2
 914              		.loc 2 321 10 discriminator 3
 915 00e8 D3E90023 		ldrd	r2, [r3]
 916 00ec C7E91823 		strd	r2, [r7, #96]
 322:fft.c         **** 				y_im = f[j + t + hn];
 917              		.loc 2 322 16 discriminator 3
 918 00f0 D7F8A820 		ldr	r2, [r7, #168]
 919 00f4 D7F8B830 		ldr	r3, [r7, #184]
 920 00f8 1A44     		add	r2, r2, r3
 921              		.loc 2 322 20 discriminator 3
 922 00fa D7F8A030 		ldr	r3, [r7, #160]
 923 00fe 1344     		add	r3, r3, r2
 924              		.loc 2 322 13 discriminator 3
 925 0100 DB00     		lsls	r3, r3, #3
 926 0102 7A68     		ldr	r2, [r7, #4]
 927 0104 1344     		add	r3, r3, r2
 928              		.loc 2 322 10 discriminator 3
 929 0106 D3E90023 		ldrd	r2, [r3]
 930 010a C7E91623 		strd	r2, [r7, #88]
 931              	.LBB11:
 323:fft.c         **** 				FPC_ADD(f[j], f[j + hn],
 932              		.loc 2 323 5 discriminator 3
 933 010e D7E91823 		ldrd	r2, [r7, #96]
 934 0112 D7E91C01 		ldrd	r0, [r7, #112]
 935 0116 FFF7FEFF 		bl	falcon_inner_fpr_add
 936 011a C7E91401 		strd	r0, [r7, #80]
 937 011e D7E91623 		ldrd	r2, [r7, #88]
 938 0122 D7E91A01 		ldrd	r0, [r7, #104]
 939 0126 FFF7FEFF 		bl	falcon_inner_fpr_add
 940 012a C7E91201 		strd	r0, [r7, #72]
 941 012e D7F8A830 		ldr	r3, [r7, #168]
 942 0132 DB00     		lsls	r3, r3, #3
 943 0134 7A68     		ldr	r2, [r7, #4]
 944 0136 D118     		adds	r1, r2, r3
 945 0138 D7E91423 		ldrd	r2, [r7, #80]
 946 013c C1E90023 		strd	r2, [r1]
 947 0140 D7F8A820 		ldr	r2, [r7, #168]
 948 0144 D7F8A030 		ldr	r3, [r7, #160]
 949 0148 1344     		add	r3, r3, r2
 950 014a DB00     		lsls	r3, r3, #3
 951 014c 7A68     		ldr	r2, [r7, #4]
 952 014e D118     		adds	r1, r2, r3
 953 0150 D7E91223 		ldrd	r2, [r7, #72]
 954 0154 C1E90023 		strd	r2, [r1]
 955              	.LBE11:
 956              	.LBB12:
 324:fft.c         **** 					x_re, x_im, y_re, y_im);
 325:fft.c         **** 				FPC_SUB(x_re, x_im, x_re, x_im, y_re, y_im);
 957              		.loc 2 325 5 discriminator 3
 958 0158 D7E91823 		ldrd	r2, [r7, #96]
 959 015c D7E91C01 		ldrd	r0, [r7, #112]
 960 0160 FFF7FEFF 		bl	fpr_sub
 961 0164 C7E91001 		strd	r0, [r7, #64]
 962 0168 D7E91623 		ldrd	r2, [r7, #88]
 963 016c D7E91A01 		ldrd	r0, [r7, #104]
 964 0170 FFF7FEFF 		bl	fpr_sub
 965 0174 C7E90E01 		strd	r0, [r7, #56]
 966 0178 D7E91023 		ldrd	r2, [r7, #64]
 967 017c C7E91C23 		strd	r2, [r7, #112]
 968 0180 D7E90E23 		ldrd	r2, [r7, #56]
 969 0184 C7E91A23 		strd	r2, [r7, #104]
 970              	.LBE12:
 971              	.LBB13:
 326:fft.c         **** 				FPC_MUL(f[j + t], f[j + t + hn],
 972              		.loc 2 326 5 discriminator 3
 973 0188 D7E91C23 		ldrd	r2, [r7, #112]
 974 018c C7E90C23 		strd	r2, [r7, #48]
 975 0190 D7E91A23 		ldrd	r2, [r7, #104]
 976 0194 C7E90A23 		strd	r2, [r7, #40]
 977 0198 D7E92023 		ldrd	r2, [r7, #128]
 978 019c C7E90823 		strd	r2, [r7, #32]
 979 01a0 D7E91E23 		ldrd	r2, [r7, #120]
 980 01a4 C7E90623 		strd	r2, [r7, #24]
 981 01a8 D7E90823 		ldrd	r2, [r7, #32]
 982 01ac D7E90C01 		ldrd	r0, [r7, #48]
 983 01b0 FFF7FEFF 		bl	falcon_inner_fpr_mul
 984 01b4 0446     		mov	r4, r0
 985 01b6 0D46     		mov	r5, r1
 986 01b8 D7E90623 		ldrd	r2, [r7, #24]
 987 01bc D7E90A01 		ldrd	r0, [r7, #40]
 988 01c0 FFF7FEFF 		bl	falcon_inner_fpr_mul
 989 01c4 0246     		mov	r2, r0
 990 01c6 0B46     		mov	r3, r1
 991 01c8 2046     		mov	r0, r4
 992 01ca 2946     		mov	r1, r5
 993 01cc FFF7FEFF 		bl	fpr_sub
 994 01d0 C7E90401 		strd	r0, [r7, #16]
 995 01d4 D7E90623 		ldrd	r2, [r7, #24]
 996 01d8 D7E90C01 		ldrd	r0, [r7, #48]
 997 01dc FFF7FEFF 		bl	falcon_inner_fpr_mul
 998 01e0 0446     		mov	r4, r0
 999 01e2 0D46     		mov	r5, r1
 1000 01e4 D7E90823 		ldrd	r2, [r7, #32]
 1001 01e8 D7E90A01 		ldrd	r0, [r7, #40]
 1002 01ec FFF7FEFF 		bl	falcon_inner_fpr_mul
 1003 01f0 0246     		mov	r2, r0
 1004 01f2 0B46     		mov	r3, r1
 1005 01f4 2046     		mov	r0, r4
 1006 01f6 2946     		mov	r1, r5
 1007 01f8 FFF7FEFF 		bl	falcon_inner_fpr_add
 1008 01fc C7E90201 		strd	r0, [r7, #8]
 1009 0200 D7F8A820 		ldr	r2, [r7, #168]
 1010 0204 D7F8B830 		ldr	r3, [r7, #184]
 1011 0208 1344     		add	r3, r3, r2
 1012 020a DB00     		lsls	r3, r3, #3
 1013 020c 7A68     		ldr	r2, [r7, #4]
 1014 020e D118     		adds	r1, r2, r3
 1015 0210 D7E90423 		ldrd	r2, [r7, #16]
 1016 0214 C1E90023 		strd	r2, [r1]
 1017 0218 D7F8A820 		ldr	r2, [r7, #168]
 1018 021c D7F8B830 		ldr	r3, [r7, #184]
 1019 0220 1A44     		add	r2, r2, r3
 1020 0222 D7F8A030 		ldr	r3, [r7, #160]
 1021 0226 1344     		add	r3, r3, r2
 1022 0228 DB00     		lsls	r3, r3, #3
 1023 022a 7A68     		ldr	r2, [r7, #4]
 1024 022c D118     		adds	r1, r2, r3
 1025 022e D7E90223 		ldrd	r2, [r7, #8]
 1026 0232 C1E90023 		strd	r2, [r1]
 1027              	.LBE13:
 1028              	.LBE10:
 316:fft.c         **** 				fpr x_re, x_im, y_re, y_im;
 1029              		.loc 2 316 27 discriminator 3
 1030 0236 D7F8A830 		ldr	r3, [r7, #168]
 1031 023a 0133     		adds	r3, r3, #1
 1032 023c C7F8A830 		str	r3, [r7, #168]
 1033              	.L25:
 316:fft.c         **** 				fpr x_re, x_im, y_re, y_im;
 1034              		.loc 2 316 4 discriminator 1
 1035 0240 D7F8A820 		ldr	r2, [r7, #168]
 1036 0244 D7F88C30 		ldr	r3, [r7, #140]
 1037 0248 9A42     		cmp	r2, r3
 1038 024a FFF430AF 		bcc	.L26
 1039              	.LBE9:
 308:fft.c         **** 			size_t j, j2;
 1040              		.loc 2 308 36 discriminator 2
 1041 024e D7F8B030 		ldr	r3, [r7, #176]
 1042 0252 0133     		adds	r3, r3, #1
 1043 0254 C7F8B030 		str	r3, [r7, #176]
 308:fft.c         **** 			size_t j, j2;
 1044              		.loc 2 308 43 discriminator 2
 1045 0258 D7F8AC20 		ldr	r2, [r7, #172]
 1046 025c D7F89030 		ldr	r3, [r7, #144]
 1047 0260 1344     		add	r3, r3, r2
 1048 0262 C7F8AC30 		str	r3, [r7, #172]
 1049              	.L24:
 308:fft.c         **** 			size_t j, j2;
 1050              		.loc 2 308 3 discriminator 1
 1051 0266 D7F8AC20 		ldr	r2, [r7, #172]
 1052 026a D7F8A030 		ldr	r3, [r7, #160]
 1053 026e 9A42     		cmp	r2, r3
 1054 0270 FFF4F2AE 		bcc	.L27
 327:fft.c         **** 					x_re, x_im, s_re, s_im);
 328:fft.c         **** 			}
 329:fft.c         **** 		}
 330:fft.c         **** 		t = dt;
 1055              		.loc 2 330 5 discriminator 2
 1056 0274 D7F89030 		ldr	r3, [r7, #144]
 1057 0278 C7F8B830 		str	r3, [r7, #184]
 331:fft.c         **** 		m = hm;
 1058              		.loc 2 331 5 discriminator 2
 1059 027c D7F89430 		ldr	r3, [r7, #148]
 1060 0280 C7F8B430 		str	r3, [r7, #180]
 1061              	.LBE8:
 303:fft.c         **** 		size_t hm, dt, i1, j1;
 1062              		.loc 2 303 26 discriminator 2
 1063 0284 D7F8BC30 		ldr	r3, [r7, #188]
 1064 0288 013B     		subs	r3, r3, #1
 1065 028a C7F8BC30 		str	r3, [r7, #188]
 1066              	.L23:
 303:fft.c         **** 		size_t hm, dt, i1, j1;
 1067              		.loc 2 303 2 discriminator 1
 1068 028e D7F8BC30 		ldr	r3, [r7, #188]
 1069 0292 012B     		cmp	r3, #1
 1070 0294 3FF6CFAE 		bhi	.L28
 332:fft.c         **** 	}
 333:fft.c         **** 
 334:fft.c         **** 	/*
 335:fft.c         **** 	 * Last iteration is a no-op, provided that we divide by N/2
 336:fft.c         **** 	 * instead of N. We need to make a special case for logn = 0.
 337:fft.c         **** 	 */
 338:fft.c         **** 	if (logn > 0) {
 1071              		.loc 2 338 5
 1072 0298 3B68     		ldr	r3, [r7]
 1073 029a 002B     		cmp	r3, #0
 1074 029c 2AD0     		beq	.L32
 1075              	.LBB14:
 339:fft.c         **** 		fpr ni;
 340:fft.c         **** 
 341:fft.c         **** 		ni = fpr_p2_tab[logn];
 1076              		.loc 2 341 6
 1077 029e 184A     		ldr	r2, .L33+4
 1078 02a0 3B68     		ldr	r3, [r7]
 1079 02a2 DB00     		lsls	r3, r3, #3
 1080 02a4 1344     		add	r3, r3, r2
 1081 02a6 D3E90023 		ldrd	r2, [r3]
 1082 02aa C7E92623 		strd	r2, [r7, #152]
 342:fft.c         **** 		for (u = 0; u < n; u ++) {
 1083              		.loc 2 342 10
 1084 02ae 0023     		movs	r3, #0
 1085 02b0 C7F8BC30 		str	r3, [r7, #188]
 1086              		.loc 2 342 3
 1087 02b4 18E0     		b	.L30
 1088              	.L31:
 343:fft.c         **** 			f[u] = fpr_mul(f[u], ni);
 1089              		.loc 2 343 20 discriminator 3
 1090 02b6 D7F8BC30 		ldr	r3, [r7, #188]
 1091 02ba DB00     		lsls	r3, r3, #3
 1092 02bc 7A68     		ldr	r2, [r7, #4]
 1093 02be 1344     		add	r3, r3, r2
 1094              		.loc 2 343 11 discriminator 3
 1095 02c0 D3E90001 		ldrd	r0, [r3]
 1096              		.loc 2 343 5 discriminator 3
 1097 02c4 D7F8BC30 		ldr	r3, [r7, #188]
 1098 02c8 DB00     		lsls	r3, r3, #3
 1099 02ca 7A68     		ldr	r2, [r7, #4]
 1100 02cc D418     		adds	r4, r2, r3
 1101              		.loc 2 343 11 discriminator 3
 1102 02ce D7E92623 		ldrd	r2, [r7, #152]
 1103 02d2 FFF7FEFF 		bl	falcon_inner_fpr_mul
 1104 02d6 0246     		mov	r2, r0
 1105 02d8 0B46     		mov	r3, r1
 1106              		.loc 2 343 9 discriminator 3
 1107 02da C4E90023 		strd	r2, [r4]
 342:fft.c         **** 		for (u = 0; u < n; u ++) {
 1108              		.loc 2 342 24 discriminator 3
 1109 02de D7F8BC30 		ldr	r3, [r7, #188]
 1110 02e2 0133     		adds	r3, r3, #1
 1111 02e4 C7F8BC30 		str	r3, [r7, #188]
 1112              	.L30:
 342:fft.c         **** 		for (u = 0; u < n; u ++) {
 1113              		.loc 2 342 3 discriminator 1
 1114 02e8 D7F8BC20 		ldr	r2, [r7, #188]
 1115 02ec D7F8A430 		ldr	r3, [r7, #164]
 1116 02f0 9A42     		cmp	r2, r3
 1117 02f2 E0D3     		bcc	.L31
 1118              	.L32:
 1119              	.LBE14:
 344:fft.c         **** 		}
 345:fft.c         **** 	}
 346:fft.c         **** }
 1120              		.loc 2 346 1
 1121 02f4 00BF     		nop
 1122 02f6 C037     		adds	r7, r7, #192
 1123              	.LCFI35:
 1124              		.cfi_def_cfa_offset 16
 1125 02f8 BD46     		mov	sp, r7
 1126              	.LCFI36:
 1127              		.cfi_def_cfa_register 13
 1128              		@ sp needed
 1129 02fa B0BD     		pop	{r4, r5, r7, pc}
 1130              	.L34:
 1131              		.align	2
 1132              	.L33:
 1133 02fc 00000000 		.word	falcon_inner_fpr_gm_tab
 1134 0300 00000000 		.word	falcon_inner_fpr_p2_tab
 1135              		.cfi_endproc
 1136              	.LFE19:
 1138              		.section	.text.falcon_inner_poly_add,"ax",%progbits
 1139              		.align	1
 1140              		.global	falcon_inner_poly_add
 1141              		.syntax unified
 1142              		.thumb
 1143              		.thumb_func
 1144              		.fpu softvfp
 1146              	falcon_inner_poly_add:
 1147              	.LFB20:
 347:fft.c         **** 
 348:fft.c         **** /* see inner.h */
 349:fft.c         **** void
 350:fft.c         **** Zf(poly_add)(
 351:fft.c         **** 	fpr *restrict a, const fpr *restrict b, unsigned logn)
 352:fft.c         **** {
 1148              		.loc 2 352 1
 1149              		.cfi_startproc
 1150              		@ args = 0, pretend = 0, frame = 24
 1151              		@ frame_needed = 1, uses_anonymous_args = 0
 1152 0000 B0B5     		push	{r4, r5, r7, lr}
 1153              	.LCFI37:
 1154              		.cfi_def_cfa_offset 16
 1155              		.cfi_offset 4, -16
 1156              		.cfi_offset 5, -12
 1157              		.cfi_offset 7, -8
 1158              		.cfi_offset 14, -4
 1159 0002 86B0     		sub	sp, sp, #24
 1160              	.LCFI38:
 1161              		.cfi_def_cfa_offset 40
 1162 0004 00AF     		add	r7, sp, #0
 1163              	.LCFI39:
 1164              		.cfi_def_cfa_register 7
 1165 0006 F860     		str	r0, [r7, #12]
 1166 0008 B960     		str	r1, [r7, #8]
 1167 000a 7A60     		str	r2, [r7, #4]
 353:fft.c         **** 	size_t n, u;
 354:fft.c         **** 
 355:fft.c         **** 	n = (size_t)1 << logn;
 1168              		.loc 2 355 4
 1169 000c 0122     		movs	r2, #1
 1170 000e 7B68     		ldr	r3, [r7, #4]
 1171 0010 02FA03F3 		lsl	r3, r2, r3
 1172 0014 3B61     		str	r3, [r7, #16]
 356:fft.c         **** 	for (u = 0; u < n; u ++) {
 1173              		.loc 2 356 9
 1174 0016 0023     		movs	r3, #0
 1175 0018 7B61     		str	r3, [r7, #20]
 1176              		.loc 2 356 2
 1177 001a 18E0     		b	.L36
 1178              	.L37:
 357:fft.c         **** 		a[u] = fpr_add(a[u], b[u]);
 1179              		.loc 2 357 19 discriminator 3
 1180 001c 7B69     		ldr	r3, [r7, #20]
 1181 001e DB00     		lsls	r3, r3, #3
 1182 0020 FA68     		ldr	r2, [r7, #12]
 1183 0022 1344     		add	r3, r3, r2
 1184              		.loc 2 357 10 discriminator 3
 1185 0024 D3E90001 		ldrd	r0, [r3]
 1186              		.loc 2 357 25 discriminator 3
 1187 0028 7B69     		ldr	r3, [r7, #20]
 1188 002a DB00     		lsls	r3, r3, #3
 1189 002c BA68     		ldr	r2, [r7, #8]
 1190 002e 1344     		add	r3, r3, r2
 1191              		.loc 2 357 10 discriminator 3
 1192 0030 D3E90023 		ldrd	r2, [r3]
 1193              		.loc 2 357 4 discriminator 3
 1194 0034 7C69     		ldr	r4, [r7, #20]
 1195 0036 E400     		lsls	r4, r4, #3
 1196 0038 FD68     		ldr	r5, [r7, #12]
 1197 003a 2C44     		add	r4, r4, r5
 1198              		.loc 2 357 10 discriminator 3
 1199 003c FFF7FEFF 		bl	falcon_inner_fpr_add
 1200 0040 0246     		mov	r2, r0
 1201 0042 0B46     		mov	r3, r1
 1202              		.loc 2 357 8 discriminator 3
 1203 0044 C4E90023 		strd	r2, [r4]
 356:fft.c         **** 	for (u = 0; u < n; u ++) {
 1204              		.loc 2 356 23 discriminator 3
 1205 0048 7B69     		ldr	r3, [r7, #20]
 1206 004a 0133     		adds	r3, r3, #1
 1207 004c 7B61     		str	r3, [r7, #20]
 1208              	.L36:
 356:fft.c         **** 	for (u = 0; u < n; u ++) {
 1209              		.loc 2 356 2 discriminator 1
 1210 004e 7A69     		ldr	r2, [r7, #20]
 1211 0050 3B69     		ldr	r3, [r7, #16]
 1212 0052 9A42     		cmp	r2, r3
 1213 0054 E2D3     		bcc	.L37
 358:fft.c         **** 	}
 359:fft.c         **** }
 1214              		.loc 2 359 1
 1215 0056 00BF     		nop
 1216 0058 00BF     		nop
 1217 005a 1837     		adds	r7, r7, #24
 1218              	.LCFI40:
 1219              		.cfi_def_cfa_offset 16
 1220 005c BD46     		mov	sp, r7
 1221              	.LCFI41:
 1222              		.cfi_def_cfa_register 13
 1223              		@ sp needed
 1224 005e B0BD     		pop	{r4, r5, r7, pc}
 1225              		.cfi_endproc
 1226              	.LFE20:
 1228              		.section	.text.falcon_inner_poly_sub,"ax",%progbits
 1229              		.align	1
 1230              		.global	falcon_inner_poly_sub
 1231              		.syntax unified
 1232              		.thumb
 1233              		.thumb_func
 1234              		.fpu softvfp
 1236              	falcon_inner_poly_sub:
 1237              	.LFB21:
 360:fft.c         **** 
 361:fft.c         **** /* see inner.h */
 362:fft.c         **** void
 363:fft.c         **** Zf(poly_sub)(
 364:fft.c         **** 	fpr *restrict a, const fpr *restrict b, unsigned logn)
 365:fft.c         **** {
 1238              		.loc 2 365 1
 1239              		.cfi_startproc
 1240              		@ args = 0, pretend = 0, frame = 24
 1241              		@ frame_needed = 1, uses_anonymous_args = 0
 1242 0000 B0B5     		push	{r4, r5, r7, lr}
 1243              	.LCFI42:
 1244              		.cfi_def_cfa_offset 16
 1245              		.cfi_offset 4, -16
 1246              		.cfi_offset 5, -12
 1247              		.cfi_offset 7, -8
 1248              		.cfi_offset 14, -4
 1249 0002 86B0     		sub	sp, sp, #24
 1250              	.LCFI43:
 1251              		.cfi_def_cfa_offset 40
 1252 0004 00AF     		add	r7, sp, #0
 1253              	.LCFI44:
 1254              		.cfi_def_cfa_register 7
 1255 0006 F860     		str	r0, [r7, #12]
 1256 0008 B960     		str	r1, [r7, #8]
 1257 000a 7A60     		str	r2, [r7, #4]
 366:fft.c         **** 	size_t n, u;
 367:fft.c         **** 
 368:fft.c         **** 	n = (size_t)1 << logn;
 1258              		.loc 2 368 4
 1259 000c 0122     		movs	r2, #1
 1260 000e 7B68     		ldr	r3, [r7, #4]
 1261 0010 02FA03F3 		lsl	r3, r2, r3
 1262 0014 3B61     		str	r3, [r7, #16]
 369:fft.c         **** 	for (u = 0; u < n; u ++) {
 1263              		.loc 2 369 9
 1264 0016 0023     		movs	r3, #0
 1265 0018 7B61     		str	r3, [r7, #20]
 1266              		.loc 2 369 2
 1267 001a 18E0     		b	.L39
 1268              	.L40:
 370:fft.c         **** 		a[u] = fpr_sub(a[u], b[u]);
 1269              		.loc 2 370 19 discriminator 3
 1270 001c 7B69     		ldr	r3, [r7, #20]
 1271 001e DB00     		lsls	r3, r3, #3
 1272 0020 FA68     		ldr	r2, [r7, #12]
 1273 0022 1344     		add	r3, r3, r2
 1274              		.loc 2 370 10 discriminator 3
 1275 0024 D3E90001 		ldrd	r0, [r3]
 1276              		.loc 2 370 25 discriminator 3
 1277 0028 7B69     		ldr	r3, [r7, #20]
 1278 002a DB00     		lsls	r3, r3, #3
 1279 002c BA68     		ldr	r2, [r7, #8]
 1280 002e 1344     		add	r3, r3, r2
 1281              		.loc 2 370 10 discriminator 3
 1282 0030 D3E90023 		ldrd	r2, [r3]
 1283              		.loc 2 370 4 discriminator 3
 1284 0034 7C69     		ldr	r4, [r7, #20]
 1285 0036 E400     		lsls	r4, r4, #3
 1286 0038 FD68     		ldr	r5, [r7, #12]
 1287 003a 2C44     		add	r4, r4, r5
 1288              		.loc 2 370 10 discriminator 3
 1289 003c FFF7FEFF 		bl	fpr_sub
 1290 0040 0246     		mov	r2, r0
 1291 0042 0B46     		mov	r3, r1
 1292              		.loc 2 370 8 discriminator 3
 1293 0044 C4E90023 		strd	r2, [r4]
 369:fft.c         **** 	for (u = 0; u < n; u ++) {
 1294              		.loc 2 369 23 discriminator 3
 1295 0048 7B69     		ldr	r3, [r7, #20]
 1296 004a 0133     		adds	r3, r3, #1
 1297 004c 7B61     		str	r3, [r7, #20]
 1298              	.L39:
 369:fft.c         **** 	for (u = 0; u < n; u ++) {
 1299              		.loc 2 369 2 discriminator 1
 1300 004e 7A69     		ldr	r2, [r7, #20]
 1301 0050 3B69     		ldr	r3, [r7, #16]
 1302 0052 9A42     		cmp	r2, r3
 1303 0054 E2D3     		bcc	.L40
 371:fft.c         **** 	}
 372:fft.c         **** }
 1304              		.loc 2 372 1
 1305 0056 00BF     		nop
 1306 0058 00BF     		nop
 1307 005a 1837     		adds	r7, r7, #24
 1308              	.LCFI45:
 1309              		.cfi_def_cfa_offset 16
 1310 005c BD46     		mov	sp, r7
 1311              	.LCFI46:
 1312              		.cfi_def_cfa_register 13
 1313              		@ sp needed
 1314 005e B0BD     		pop	{r4, r5, r7, pc}
 1315              		.cfi_endproc
 1316              	.LFE21:
 1318              		.section	.text.falcon_inner_poly_neg,"ax",%progbits
 1319              		.align	1
 1320              		.global	falcon_inner_poly_neg
 1321              		.syntax unified
 1322              		.thumb
 1323              		.thumb_func
 1324              		.fpu softvfp
 1326              	falcon_inner_poly_neg:
 1327              	.LFB22:
 373:fft.c         **** 
 374:fft.c         **** /* see inner.h */
 375:fft.c         **** void
 376:fft.c         **** Zf(poly_neg)(fpr *a, unsigned logn)
 377:fft.c         **** {
 1328              		.loc 2 377 1
 1329              		.cfi_startproc
 1330              		@ args = 0, pretend = 0, frame = 16
 1331              		@ frame_needed = 1, uses_anonymous_args = 0
 1332 0000 90B5     		push	{r4, r7, lr}
 1333              	.LCFI47:
 1334              		.cfi_def_cfa_offset 12
 1335              		.cfi_offset 4, -12
 1336              		.cfi_offset 7, -8
 1337              		.cfi_offset 14, -4
 1338 0002 85B0     		sub	sp, sp, #20
 1339              	.LCFI48:
 1340              		.cfi_def_cfa_offset 32
 1341 0004 00AF     		add	r7, sp, #0
 1342              	.LCFI49:
 1343              		.cfi_def_cfa_register 7
 1344 0006 7860     		str	r0, [r7, #4]
 1345 0008 3960     		str	r1, [r7]
 378:fft.c         **** 	size_t n, u;
 379:fft.c         **** 
 380:fft.c         **** 	n = (size_t)1 << logn;
 1346              		.loc 2 380 4
 1347 000a 0122     		movs	r2, #1
 1348 000c 3B68     		ldr	r3, [r7]
 1349 000e 02FA03F3 		lsl	r3, r2, r3
 1350 0012 BB60     		str	r3, [r7, #8]
 381:fft.c         **** 	for (u = 0; u < n; u ++) {
 1351              		.loc 2 381 9
 1352 0014 0023     		movs	r3, #0
 1353 0016 FB60     		str	r3, [r7, #12]
 1354              		.loc 2 381 2
 1355 0018 14E0     		b	.L42
 1356              	.L43:
 382:fft.c         **** 		a[u] = fpr_neg(a[u]);
 1357              		.loc 2 382 19 discriminator 3
 1358 001a FB68     		ldr	r3, [r7, #12]
 1359 001c DB00     		lsls	r3, r3, #3
 1360 001e 7A68     		ldr	r2, [r7, #4]
 1361 0020 1344     		add	r3, r3, r2
 1362              		.loc 2 382 10 discriminator 3
 1363 0022 D3E90023 		ldrd	r2, [r3]
 1364              		.loc 2 382 4 discriminator 3
 1365 0026 F968     		ldr	r1, [r7, #12]
 1366 0028 C900     		lsls	r1, r1, #3
 1367 002a 7868     		ldr	r0, [r7, #4]
 1368 002c 4418     		adds	r4, r0, r1
 1369              		.loc 2 382 10 discriminator 3
 1370 002e 1046     		mov	r0, r2
 1371 0030 1946     		mov	r1, r3
 1372 0032 FFF7FEFF 		bl	fpr_neg
 1373 0036 0246     		mov	r2, r0
 1374 0038 0B46     		mov	r3, r1
 1375              		.loc 2 382 8 discriminator 3
 1376 003a C4E90023 		strd	r2, [r4]
 381:fft.c         **** 	for (u = 0; u < n; u ++) {
 1377              		.loc 2 381 23 discriminator 3
 1378 003e FB68     		ldr	r3, [r7, #12]
 1379 0040 0133     		adds	r3, r3, #1
 1380 0042 FB60     		str	r3, [r7, #12]
 1381              	.L42:
 381:fft.c         **** 	for (u = 0; u < n; u ++) {
 1382              		.loc 2 381 2 discriminator 1
 1383 0044 FA68     		ldr	r2, [r7, #12]
 1384 0046 BB68     		ldr	r3, [r7, #8]
 1385 0048 9A42     		cmp	r2, r3
 1386 004a E6D3     		bcc	.L43
 383:fft.c         **** 	}
 384:fft.c         **** }
 1387              		.loc 2 384 1
 1388 004c 00BF     		nop
 1389 004e 00BF     		nop
 1390 0050 1437     		adds	r7, r7, #20
 1391              	.LCFI50:
 1392              		.cfi_def_cfa_offset 12
 1393 0052 BD46     		mov	sp, r7
 1394              	.LCFI51:
 1395              		.cfi_def_cfa_register 13
 1396              		@ sp needed
 1397 0054 90BD     		pop	{r4, r7, pc}
 1398              		.cfi_endproc
 1399              	.LFE22:
 1401              		.section	.text.falcon_inner_poly_adj_fft,"ax",%progbits
 1402              		.align	1
 1403              		.global	falcon_inner_poly_adj_fft
 1404              		.syntax unified
 1405              		.thumb
 1406              		.thumb_func
 1407              		.fpu softvfp
 1409              	falcon_inner_poly_adj_fft:
 1410              	.LFB23:
 385:fft.c         **** 
 386:fft.c         **** /* see inner.h */
 387:fft.c         **** void
 388:fft.c         **** Zf(poly_adj_fft)(fpr *a, unsigned logn)
 389:fft.c         **** {
 1411              		.loc 2 389 1
 1412              		.cfi_startproc
 1413              		@ args = 0, pretend = 0, frame = 16
 1414              		@ frame_needed = 1, uses_anonymous_args = 0
 1415 0000 90B5     		push	{r4, r7, lr}
 1416              	.LCFI52:
 1417              		.cfi_def_cfa_offset 12
 1418              		.cfi_offset 4, -12
 1419              		.cfi_offset 7, -8
 1420              		.cfi_offset 14, -4
 1421 0002 85B0     		sub	sp, sp, #20
 1422              	.LCFI53:
 1423              		.cfi_def_cfa_offset 32
 1424 0004 00AF     		add	r7, sp, #0
 1425              	.LCFI54:
 1426              		.cfi_def_cfa_register 7
 1427 0006 7860     		str	r0, [r7, #4]
 1428 0008 3960     		str	r1, [r7]
 390:fft.c         **** 	size_t n, u;
 391:fft.c         **** 
 392:fft.c         **** 	n = (size_t)1 << logn;
 1429              		.loc 2 392 4
 1430 000a 0122     		movs	r2, #1
 1431 000c 3B68     		ldr	r3, [r7]
 1432 000e 02FA03F3 		lsl	r3, r2, r3
 1433 0012 BB60     		str	r3, [r7, #8]
 393:fft.c         **** 	for (u = (n >> 1); u < n; u ++) {
 1434              		.loc 2 393 9
 1435 0014 BB68     		ldr	r3, [r7, #8]
 1436 0016 5B08     		lsrs	r3, r3, #1
 1437 0018 FB60     		str	r3, [r7, #12]
 1438              		.loc 2 393 2
 1439 001a 14E0     		b	.L45
 1440              	.L46:
 394:fft.c         **** 		a[u] = fpr_neg(a[u]);
 1441              		.loc 2 394 19 discriminator 3
 1442 001c FB68     		ldr	r3, [r7, #12]
 1443 001e DB00     		lsls	r3, r3, #3
 1444 0020 7A68     		ldr	r2, [r7, #4]
 1445 0022 1344     		add	r3, r3, r2
 1446              		.loc 2 394 10 discriminator 3
 1447 0024 D3E90023 		ldrd	r2, [r3]
 1448              		.loc 2 394 4 discriminator 3
 1449 0028 F968     		ldr	r1, [r7, #12]
 1450 002a C900     		lsls	r1, r1, #3
 1451 002c 7868     		ldr	r0, [r7, #4]
 1452 002e 4418     		adds	r4, r0, r1
 1453              		.loc 2 394 10 discriminator 3
 1454 0030 1046     		mov	r0, r2
 1455 0032 1946     		mov	r1, r3
 1456 0034 FFF7FEFF 		bl	fpr_neg
 1457 0038 0246     		mov	r2, r0
 1458 003a 0B46     		mov	r3, r1
 1459              		.loc 2 394 8 discriminator 3
 1460 003c C4E90023 		strd	r2, [r4]
 393:fft.c         **** 	for (u = (n >> 1); u < n; u ++) {
 1461              		.loc 2 393 30 discriminator 3
 1462 0040 FB68     		ldr	r3, [r7, #12]
 1463 0042 0133     		adds	r3, r3, #1
 1464 0044 FB60     		str	r3, [r7, #12]
 1465              	.L45:
 393:fft.c         **** 	for (u = (n >> 1); u < n; u ++) {
 1466              		.loc 2 393 2 discriminator 1
 1467 0046 FA68     		ldr	r2, [r7, #12]
 1468 0048 BB68     		ldr	r3, [r7, #8]
 1469 004a 9A42     		cmp	r2, r3
 1470 004c E6D3     		bcc	.L46
 395:fft.c         **** 	}
 396:fft.c         **** }
 1471              		.loc 2 396 1
 1472 004e 00BF     		nop
 1473 0050 00BF     		nop
 1474 0052 1437     		adds	r7, r7, #20
 1475              	.LCFI55:
 1476              		.cfi_def_cfa_offset 12
 1477 0054 BD46     		mov	sp, r7
 1478              	.LCFI56:
 1479              		.cfi_def_cfa_register 13
 1480              		@ sp needed
 1481 0056 90BD     		pop	{r4, r7, pc}
 1482              		.cfi_endproc
 1483              	.LFE23:
 1485              		.section	.text.falcon_inner_poly_mul_fft,"ax",%progbits
 1486              		.align	1
 1487              		.global	falcon_inner_poly_mul_fft
 1488              		.syntax unified
 1489              		.thumb
 1490              		.thumb_func
 1491              		.fpu softvfp
 1493              	falcon_inner_poly_mul_fft:
 1494              	.LFB24:
 397:fft.c         **** 
 398:fft.c         **** /* see inner.h */
 399:fft.c         **** void
 400:fft.c         **** Zf(poly_mul_fft)(
 401:fft.c         **** 	fpr *restrict a, const fpr *restrict b, unsigned logn)
 402:fft.c         **** {
 1495              		.loc 2 402 1
 1496              		.cfi_startproc
 1497              		@ args = 0, pretend = 0, frame = 112
 1498              		@ frame_needed = 1, uses_anonymous_args = 0
 1499 0000 B0B5     		push	{r4, r5, r7, lr}
 1500              	.LCFI57:
 1501              		.cfi_def_cfa_offset 16
 1502              		.cfi_offset 4, -16
 1503              		.cfi_offset 5, -12
 1504              		.cfi_offset 7, -8
 1505              		.cfi_offset 14, -4
 1506 0002 9CB0     		sub	sp, sp, #112
 1507              	.LCFI58:
 1508              		.cfi_def_cfa_offset 128
 1509 0004 00AF     		add	r7, sp, #0
 1510              	.LCFI59:
 1511              		.cfi_def_cfa_register 7
 1512 0006 F860     		str	r0, [r7, #12]
 1513 0008 B960     		str	r1, [r7, #8]
 1514 000a 7A60     		str	r2, [r7, #4]
 403:fft.c         **** 	size_t n, hn, u;
 404:fft.c         **** 
 405:fft.c         **** 	n = (size_t)1 << logn;
 1515              		.loc 2 405 4
 1516 000c 0122     		movs	r2, #1
 1517 000e 7B68     		ldr	r3, [r7, #4]
 1518 0010 02FA03F3 		lsl	r3, r2, r3
 1519 0014 BB66     		str	r3, [r7, #104]
 406:fft.c         **** 	hn = n >> 1;
 1520              		.loc 2 406 5
 1521 0016 BB6E     		ldr	r3, [r7, #104]
 1522 0018 5B08     		lsrs	r3, r3, #1
 1523 001a 7B66     		str	r3, [r7, #100]
 407:fft.c         **** 	for (u = 0; u < hn; u ++) {
 1524              		.loc 2 407 9
 1525 001c 0023     		movs	r3, #0
 1526 001e FB66     		str	r3, [r7, #108]
 1527              		.loc 2 407 2
 1528 0020 74E0     		b	.L48
 1529              	.L49:
 1530              	.LBB15:
 408:fft.c         **** 		fpr a_re, a_im, b_re, b_im;
 409:fft.c         **** 
 410:fft.c         **** 		a_re = a[u];
 1531              		.loc 2 410 11 discriminator 3
 1532 0022 FB6E     		ldr	r3, [r7, #108]
 1533 0024 DB00     		lsls	r3, r3, #3
 1534 0026 FA68     		ldr	r2, [r7, #12]
 1535 0028 1344     		add	r3, r3, r2
 1536              		.loc 2 410 8 discriminator 3
 1537 002a D3E90023 		ldrd	r2, [r3]
 1538 002e C7E91623 		strd	r2, [r7, #88]
 411:fft.c         **** 		a_im = a[u + hn];
 1539              		.loc 2 411 14 discriminator 3
 1540 0032 FA6E     		ldr	r2, [r7, #108]
 1541 0034 7B6E     		ldr	r3, [r7, #100]
 1542 0036 1344     		add	r3, r3, r2
 1543              		.loc 2 411 11 discriminator 3
 1544 0038 DB00     		lsls	r3, r3, #3
 1545 003a FA68     		ldr	r2, [r7, #12]
 1546 003c 1344     		add	r3, r3, r2
 1547              		.loc 2 411 8 discriminator 3
 1548 003e D3E90023 		ldrd	r2, [r3]
 1549 0042 C7E91423 		strd	r2, [r7, #80]
 412:fft.c         **** 		b_re = b[u];
 1550              		.loc 2 412 11 discriminator 3
 1551 0046 FB6E     		ldr	r3, [r7, #108]
 1552 0048 DB00     		lsls	r3, r3, #3
 1553 004a BA68     		ldr	r2, [r7, #8]
 1554 004c 1344     		add	r3, r3, r2
 1555              		.loc 2 412 8 discriminator 3
 1556 004e D3E90023 		ldrd	r2, [r3]
 1557 0052 C7E91223 		strd	r2, [r7, #72]
 413:fft.c         **** 		b_im = b[u + hn];
 1558              		.loc 2 413 14 discriminator 3
 1559 0056 FA6E     		ldr	r2, [r7, #108]
 1560 0058 7B6E     		ldr	r3, [r7, #100]
 1561 005a 1344     		add	r3, r3, r2
 1562              		.loc 2 413 11 discriminator 3
 1563 005c DB00     		lsls	r3, r3, #3
 1564 005e BA68     		ldr	r2, [r7, #8]
 1565 0060 1344     		add	r3, r3, r2
 1566              		.loc 2 413 8 discriminator 3
 1567 0062 D3E90023 		ldrd	r2, [r3]
 1568 0066 C7E91023 		strd	r2, [r7, #64]
 1569              	.LBB16:
 414:fft.c         **** 		//trigger_high();
 415:fft.c         ****         // 복소수 곱셈
 416:fft.c         **** 		FPC_MUL(a[u], a[u + hn], a_re, a_im, b_re, b_im);
 1570              		.loc 2 416 3 discriminator 3
 1571 006a D7E91623 		ldrd	r2, [r7, #88]
 1572 006e C7E90E23 		strd	r2, [r7, #56]
 1573 0072 D7E91423 		ldrd	r2, [r7, #80]
 1574 0076 C7E90C23 		strd	r2, [r7, #48]
 1575 007a D7E91223 		ldrd	r2, [r7, #72]
 1576 007e C7E90A23 		strd	r2, [r7, #40]
 1577 0082 D7E91023 		ldrd	r2, [r7, #64]
 1578 0086 C7E90823 		strd	r2, [r7, #32]
 1579 008a D7E90A23 		ldrd	r2, [r7, #40]
 1580 008e D7E90E01 		ldrd	r0, [r7, #56]
 1581 0092 FFF7FEFF 		bl	falcon_inner_fpr_mul
 1582 0096 0446     		mov	r4, r0
 1583 0098 0D46     		mov	r5, r1
 1584 009a D7E90823 		ldrd	r2, [r7, #32]
 1585 009e D7E90C01 		ldrd	r0, [r7, #48]
 1586 00a2 FFF7FEFF 		bl	falcon_inner_fpr_mul
 1587 00a6 0246     		mov	r2, r0
 1588 00a8 0B46     		mov	r3, r1
 1589 00aa 2046     		mov	r0, r4
 1590 00ac 2946     		mov	r1, r5
 1591 00ae FFF7FEFF 		bl	fpr_sub
 1592 00b2 C7E90601 		strd	r0, [r7, #24]
 1593 00b6 D7E90823 		ldrd	r2, [r7, #32]
 1594 00ba D7E90E01 		ldrd	r0, [r7, #56]
 1595 00be FFF7FEFF 		bl	falcon_inner_fpr_mul
 1596 00c2 0446     		mov	r4, r0
 1597 00c4 0D46     		mov	r5, r1
 1598 00c6 D7E90A23 		ldrd	r2, [r7, #40]
 1599 00ca D7E90C01 		ldrd	r0, [r7, #48]
 1600 00ce FFF7FEFF 		bl	falcon_inner_fpr_mul
 1601 00d2 0246     		mov	r2, r0
 1602 00d4 0B46     		mov	r3, r1
 1603 00d6 2046     		mov	r0, r4
 1604 00d8 2946     		mov	r1, r5
 1605 00da FFF7FEFF 		bl	falcon_inner_fpr_add
 1606 00de C7E90401 		strd	r0, [r7, #16]
 1607 00e2 FB6E     		ldr	r3, [r7, #108]
 1608 00e4 DB00     		lsls	r3, r3, #3
 1609 00e6 FA68     		ldr	r2, [r7, #12]
 1610 00e8 D118     		adds	r1, r2, r3
 1611 00ea D7E90623 		ldrd	r2, [r7, #24]
 1612 00ee C1E90023 		strd	r2, [r1]
 1613 00f2 FA6E     		ldr	r2, [r7, #108]
 1614 00f4 7B6E     		ldr	r3, [r7, #100]
 1615 00f6 1344     		add	r3, r3, r2
 1616 00f8 DB00     		lsls	r3, r3, #3
 1617 00fa FA68     		ldr	r2, [r7, #12]
 1618 00fc D118     		adds	r1, r2, r3
 1619 00fe D7E90423 		ldrd	r2, [r7, #16]
 1620 0102 C1E90023 		strd	r2, [r1]
 1621              	.LBE16:
 1622              	.LBE15:
 407:fft.c         **** 		fpr a_re, a_im, b_re, b_im;
 1623              		.loc 2 407 24 discriminator 3
 1624 0106 FB6E     		ldr	r3, [r7, #108]
 1625 0108 0133     		adds	r3, r3, #1
 1626 010a FB66     		str	r3, [r7, #108]
 1627              	.L48:
 407:fft.c         **** 		fpr a_re, a_im, b_re, b_im;
 1628              		.loc 2 407 2 discriminator 1
 1629 010c FA6E     		ldr	r2, [r7, #108]
 1630 010e 7B6E     		ldr	r3, [r7, #100]
 1631 0110 9A42     		cmp	r2, r3
 1632 0112 86D3     		bcc	.L49
 417:fft.c         **** 		//trigger_low();
 418:fft.c         **** 
 419:fft.c         **** 	}
 420:fft.c         **** }
 1633              		.loc 2 420 1
 1634 0114 00BF     		nop
 1635 0116 00BF     		nop
 1636 0118 7037     		adds	r7, r7, #112
 1637              	.LCFI60:
 1638              		.cfi_def_cfa_offset 16
 1639 011a BD46     		mov	sp, r7
 1640              	.LCFI61:
 1641              		.cfi_def_cfa_register 13
 1642              		@ sp needed
 1643 011c B0BD     		pop	{r4, r5, r7, pc}
 1644              		.cfi_endproc
 1645              	.LFE24:
 1647              		.section	.text.falcon_inner_poly_muladj_fft,"ax",%progbits
 1648              		.align	1
 1649              		.global	falcon_inner_poly_muladj_fft
 1650              		.syntax unified
 1651              		.thumb
 1652              		.thumb_func
 1653              		.fpu softvfp
 1655              	falcon_inner_poly_muladj_fft:
 1656              	.LFB25:
 421:fft.c         **** 
 422:fft.c         **** /* see inner.h */
 423:fft.c         **** void
 424:fft.c         **** Zf(poly_muladj_fft)(
 425:fft.c         **** 	fpr *restrict a, const fpr *restrict b, unsigned logn)
 426:fft.c         **** {
 1657              		.loc 2 426 1
 1658              		.cfi_startproc
 1659              		@ args = 0, pretend = 0, frame = 112
 1660              		@ frame_needed = 1, uses_anonymous_args = 0
 1661 0000 B0B5     		push	{r4, r5, r7, lr}
 1662              	.LCFI62:
 1663              		.cfi_def_cfa_offset 16
 1664              		.cfi_offset 4, -16
 1665              		.cfi_offset 5, -12
 1666              		.cfi_offset 7, -8
 1667              		.cfi_offset 14, -4
 1668 0002 9CB0     		sub	sp, sp, #112
 1669              	.LCFI63:
 1670              		.cfi_def_cfa_offset 128
 1671 0004 00AF     		add	r7, sp, #0
 1672              	.LCFI64:
 1673              		.cfi_def_cfa_register 7
 1674 0006 F860     		str	r0, [r7, #12]
 1675 0008 B960     		str	r1, [r7, #8]
 1676 000a 7A60     		str	r2, [r7, #4]
 427:fft.c         **** 	size_t n, hn, u;
 428:fft.c         **** 
 429:fft.c         **** 	n = (size_t)1 << logn;
 1677              		.loc 2 429 4
 1678 000c 0122     		movs	r2, #1
 1679 000e 7B68     		ldr	r3, [r7, #4]
 1680 0010 02FA03F3 		lsl	r3, r2, r3
 1681 0014 BB66     		str	r3, [r7, #104]
 430:fft.c         **** 	hn = n >> 1;
 1682              		.loc 2 430 5
 1683 0016 BB6E     		ldr	r3, [r7, #104]
 1684 0018 5B08     		lsrs	r3, r3, #1
 1685 001a 7B66     		str	r3, [r7, #100]
 431:fft.c         **** 	for (u = 0; u < hn; u ++) {
 1686              		.loc 2 431 9
 1687 001c 0023     		movs	r3, #0
 1688 001e FB66     		str	r3, [r7, #108]
 1689              		.loc 2 431 2
 1690 0020 78E0     		b	.L51
 1691              	.L52:
 1692              	.LBB17:
 432:fft.c         **** 		fpr a_re, a_im, b_re, b_im;
 433:fft.c         **** 
 434:fft.c         **** 		a_re = a[u];
 1693              		.loc 2 434 11 discriminator 3
 1694 0022 FB6E     		ldr	r3, [r7, #108]
 1695 0024 DB00     		lsls	r3, r3, #3
 1696 0026 FA68     		ldr	r2, [r7, #12]
 1697 0028 1344     		add	r3, r3, r2
 1698              		.loc 2 434 8 discriminator 3
 1699 002a D3E90023 		ldrd	r2, [r3]
 1700 002e C7E91623 		strd	r2, [r7, #88]
 435:fft.c         **** 		a_im = a[u + hn];
 1701              		.loc 2 435 14 discriminator 3
 1702 0032 FA6E     		ldr	r2, [r7, #108]
 1703 0034 7B6E     		ldr	r3, [r7, #100]
 1704 0036 1344     		add	r3, r3, r2
 1705              		.loc 2 435 11 discriminator 3
 1706 0038 DB00     		lsls	r3, r3, #3
 1707 003a FA68     		ldr	r2, [r7, #12]
 1708 003c 1344     		add	r3, r3, r2
 1709              		.loc 2 435 8 discriminator 3
 1710 003e D3E90023 		ldrd	r2, [r3]
 1711 0042 C7E91423 		strd	r2, [r7, #80]
 436:fft.c         **** 		b_re = b[u];
 1712              		.loc 2 436 11 discriminator 3
 1713 0046 FB6E     		ldr	r3, [r7, #108]
 1714 0048 DB00     		lsls	r3, r3, #3
 1715 004a BA68     		ldr	r2, [r7, #8]
 1716 004c 1344     		add	r3, r3, r2
 1717              		.loc 2 436 8 discriminator 3
 1718 004e D3E90023 		ldrd	r2, [r3]
 1719 0052 C7E91223 		strd	r2, [r7, #72]
 437:fft.c         **** 		b_im = fpr_neg(b[u + hn]);
 1720              		.loc 2 437 22 discriminator 3
 1721 0056 FA6E     		ldr	r2, [r7, #108]
 1722 0058 7B6E     		ldr	r3, [r7, #100]
 1723 005a 1344     		add	r3, r3, r2
 1724              		.loc 2 437 19 discriminator 3
 1725 005c DB00     		lsls	r3, r3, #3
 1726 005e BA68     		ldr	r2, [r7, #8]
 1727 0060 1344     		add	r3, r3, r2
 1728              		.loc 2 437 10 discriminator 3
 1729 0062 D3E90023 		ldrd	r2, [r3]
 1730 0066 1046     		mov	r0, r2
 1731 0068 1946     		mov	r1, r3
 1732 006a FFF7FEFF 		bl	fpr_neg
 1733 006e C7E91001 		strd	r0, [r7, #64]
 1734              	.LBB18:
 438:fft.c         **** 		FPC_MUL(a[u], a[u + hn], a_re, a_im, b_re, b_im);
 1735              		.loc 2 438 3 discriminator 3
 1736 0072 D7E91623 		ldrd	r2, [r7, #88]
 1737 0076 C7E90E23 		strd	r2, [r7, #56]
 1738 007a D7E91423 		ldrd	r2, [r7, #80]
 1739 007e C7E90C23 		strd	r2, [r7, #48]
 1740 0082 D7E91223 		ldrd	r2, [r7, #72]
 1741 0086 C7E90A23 		strd	r2, [r7, #40]
 1742 008a D7E91023 		ldrd	r2, [r7, #64]
 1743 008e C7E90823 		strd	r2, [r7, #32]
 1744 0092 D7E90A23 		ldrd	r2, [r7, #40]
 1745 0096 D7E90E01 		ldrd	r0, [r7, #56]
 1746 009a FFF7FEFF 		bl	falcon_inner_fpr_mul
 1747 009e 0446     		mov	r4, r0
 1748 00a0 0D46     		mov	r5, r1
 1749 00a2 D7E90823 		ldrd	r2, [r7, #32]
 1750 00a6 D7E90C01 		ldrd	r0, [r7, #48]
 1751 00aa FFF7FEFF 		bl	falcon_inner_fpr_mul
 1752 00ae 0246     		mov	r2, r0
 1753 00b0 0B46     		mov	r3, r1
 1754 00b2 2046     		mov	r0, r4
 1755 00b4 2946     		mov	r1, r5
 1756 00b6 FFF7FEFF 		bl	fpr_sub
 1757 00ba C7E90601 		strd	r0, [r7, #24]
 1758 00be D7E90823 		ldrd	r2, [r7, #32]
 1759 00c2 D7E90E01 		ldrd	r0, [r7, #56]
 1760 00c6 FFF7FEFF 		bl	falcon_inner_fpr_mul
 1761 00ca 0446     		mov	r4, r0
 1762 00cc 0D46     		mov	r5, r1
 1763 00ce D7E90A23 		ldrd	r2, [r7, #40]
 1764 00d2 D7E90C01 		ldrd	r0, [r7, #48]
 1765 00d6 FFF7FEFF 		bl	falcon_inner_fpr_mul
 1766 00da 0246     		mov	r2, r0
 1767 00dc 0B46     		mov	r3, r1
 1768 00de 2046     		mov	r0, r4
 1769 00e0 2946     		mov	r1, r5
 1770 00e2 FFF7FEFF 		bl	falcon_inner_fpr_add
 1771 00e6 C7E90401 		strd	r0, [r7, #16]
 1772 00ea FB6E     		ldr	r3, [r7, #108]
 1773 00ec DB00     		lsls	r3, r3, #3
 1774 00ee FA68     		ldr	r2, [r7, #12]
 1775 00f0 D118     		adds	r1, r2, r3
 1776 00f2 D7E90623 		ldrd	r2, [r7, #24]
 1777 00f6 C1E90023 		strd	r2, [r1]
 1778 00fa FA6E     		ldr	r2, [r7, #108]
 1779 00fc 7B6E     		ldr	r3, [r7, #100]
 1780 00fe 1344     		add	r3, r3, r2
 1781 0100 DB00     		lsls	r3, r3, #3
 1782 0102 FA68     		ldr	r2, [r7, #12]
 1783 0104 D118     		adds	r1, r2, r3
 1784 0106 D7E90423 		ldrd	r2, [r7, #16]
 1785 010a C1E90023 		strd	r2, [r1]
 1786              	.LBE18:
 1787              	.LBE17:
 431:fft.c         **** 		fpr a_re, a_im, b_re, b_im;
 1788              		.loc 2 431 24 discriminator 3
 1789 010e FB6E     		ldr	r3, [r7, #108]
 1790 0110 0133     		adds	r3, r3, #1
 1791 0112 FB66     		str	r3, [r7, #108]
 1792              	.L51:
 431:fft.c         **** 		fpr a_re, a_im, b_re, b_im;
 1793              		.loc 2 431 2 discriminator 1
 1794 0114 FA6E     		ldr	r2, [r7, #108]
 1795 0116 7B6E     		ldr	r3, [r7, #100]
 1796 0118 9A42     		cmp	r2, r3
 1797 011a 82D3     		bcc	.L52
 439:fft.c         **** 	}
 440:fft.c         **** }
 1798              		.loc 2 440 1
 1799 011c 00BF     		nop
 1800 011e 00BF     		nop
 1801 0120 7037     		adds	r7, r7, #112
 1802              	.LCFI65:
 1803              		.cfi_def_cfa_offset 16
 1804 0122 BD46     		mov	sp, r7
 1805              	.LCFI66:
 1806              		.cfi_def_cfa_register 13
 1807              		@ sp needed
 1808 0124 B0BD     		pop	{r4, r5, r7, pc}
 1809              		.cfi_endproc
 1810              	.LFE25:
 1812              		.section	.text.falcon_inner_poly_mulselfadj_fft,"ax",%progbits
 1813              		.align	1
 1814              		.global	falcon_inner_poly_mulselfadj_fft
 1815              		.syntax unified
 1816              		.thumb
 1817              		.thumb_func
 1818              		.fpu softvfp
 1820              	falcon_inner_poly_mulselfadj_fft:
 1821              	.LFB26:
 441:fft.c         **** 
 442:fft.c         **** /* see inner.h */
 443:fft.c         **** void
 444:fft.c         **** Zf(poly_mulselfadj_fft)(fpr *a, unsigned logn)
 445:fft.c         **** {
 1822              		.loc 2 445 1
 1823              		.cfi_startproc
 1824              		@ args = 0, pretend = 0, frame = 40
 1825              		@ frame_needed = 1, uses_anonymous_args = 0
 1826 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1827              	.LCFI67:
 1828              		.cfi_def_cfa_offset 20
 1829              		.cfi_offset 4, -20
 1830              		.cfi_offset 5, -16
 1831              		.cfi_offset 6, -12
 1832              		.cfi_offset 7, -8
 1833              		.cfi_offset 14, -4
 1834 0002 8BB0     		sub	sp, sp, #44
 1835              	.LCFI68:
 1836              		.cfi_def_cfa_offset 64
 1837 0004 00AF     		add	r7, sp, #0
 1838              	.LCFI69:
 1839              		.cfi_def_cfa_register 7
 1840 0006 7860     		str	r0, [r7, #4]
 1841 0008 3960     		str	r1, [r7]
 446:fft.c         **** 	/*
 447:fft.c         **** 	 * Since each coefficient is multiplied with its own conjugate,
 448:fft.c         **** 	 * the result contains only real values.
 449:fft.c         **** 	 */
 450:fft.c         **** 	size_t n, hn, u;
 451:fft.c         **** 
 452:fft.c         **** 	n = (size_t)1 << logn;
 1842              		.loc 2 452 4
 1843 000a 0122     		movs	r2, #1
 1844 000c 3B68     		ldr	r3, [r7]
 1845 000e 02FA03F3 		lsl	r3, r2, r3
 1846 0012 3B62     		str	r3, [r7, #32]
 453:fft.c         **** 	hn = n >> 1;
 1847              		.loc 2 453 5
 1848 0014 3B6A     		ldr	r3, [r7, #32]
 1849 0016 5B08     		lsrs	r3, r3, #1
 1850 0018 FB61     		str	r3, [r7, #28]
 454:fft.c         **** 	for (u = 0; u < hn; u ++) {
 1851              		.loc 2 454 9
 1852 001a 0023     		movs	r3, #0
 1853 001c 7B62     		str	r3, [r7, #36]
 1854              		.loc 2 454 2
 1855 001e 38E0     		b	.L54
 1856              	.L55:
 1857              	.LBB19:
 455:fft.c         **** 		fpr a_re, a_im;
 456:fft.c         **** 
 457:fft.c         **** 		a_re = a[u];
 1858              		.loc 2 457 11 discriminator 3
 1859 0020 7B6A     		ldr	r3, [r7, #36]
 1860 0022 DB00     		lsls	r3, r3, #3
 1861 0024 7A68     		ldr	r2, [r7, #4]
 1862 0026 1344     		add	r3, r3, r2
 1863              		.loc 2 457 8 discriminator 3
 1864 0028 D3E90023 		ldrd	r2, [r3]
 1865 002c C7E90423 		strd	r2, [r7, #16]
 458:fft.c         **** 		a_im = a[u + hn];
 1866              		.loc 2 458 14 discriminator 3
 1867 0030 7A6A     		ldr	r2, [r7, #36]
 1868 0032 FB69     		ldr	r3, [r7, #28]
 1869 0034 1344     		add	r3, r3, r2
 1870              		.loc 2 458 11 discriminator 3
 1871 0036 DB00     		lsls	r3, r3, #3
 1872 0038 7A68     		ldr	r2, [r7, #4]
 1873 003a 1344     		add	r3, r3, r2
 1874              		.loc 2 458 8 discriminator 3
 1875 003c D3E90023 		ldrd	r2, [r3]
 1876 0040 C7E90223 		strd	r2, [r7, #8]
 459:fft.c         **** 		a[u] = fpr_add(fpr_sqr(a_re), fpr_sqr(a_im));
 1877              		.loc 2 459 10 discriminator 3
 1878 0044 D7E90401 		ldrd	r0, [r7, #16]
 1879 0048 FFF7FEFF 		bl	fpr_sqr
 1880 004c 0446     		mov	r4, r0
 1881 004e 0D46     		mov	r5, r1
 1882 0050 D7E90201 		ldrd	r0, [r7, #8]
 1883 0054 FFF7FEFF 		bl	fpr_sqr
 1884 0058 0246     		mov	r2, r0
 1885 005a 0B46     		mov	r3, r1
 1886              		.loc 2 459 4 discriminator 3
 1887 005c 796A     		ldr	r1, [r7, #36]
 1888 005e C900     		lsls	r1, r1, #3
 1889 0060 7868     		ldr	r0, [r7, #4]
 1890 0062 4618     		adds	r6, r0, r1
 1891              		.loc 2 459 10 discriminator 3
 1892 0064 2046     		mov	r0, r4
 1893 0066 2946     		mov	r1, r5
 1894 0068 FFF7FEFF 		bl	falcon_inner_fpr_add
 1895 006c 0246     		mov	r2, r0
 1896 006e 0B46     		mov	r3, r1
 1897              		.loc 2 459 8 discriminator 3
 1898 0070 C6E90023 		strd	r2, [r6]
 460:fft.c         **** 		a[u + hn] = fpr_zero;
 1899              		.loc 2 460 7 discriminator 3
 1900 0074 7A6A     		ldr	r2, [r7, #36]
 1901 0076 FB69     		ldr	r3, [r7, #28]
 1902 0078 1344     		add	r3, r3, r2
 1903              		.loc 2 460 4 discriminator 3
 1904 007a DB00     		lsls	r3, r3, #3
 1905 007c 7A68     		ldr	r2, [r7, #4]
 1906 007e D118     		adds	r1, r2, r3
 1907              		.loc 2 460 13 discriminator 3
 1908 0080 4FF00002 		mov	r2, #0
 1909 0084 4FF00003 		mov	r3, #0
 1910 0088 C1E90023 		strd	r2, [r1]
 1911              	.LBE19:
 454:fft.c         **** 		fpr a_re, a_im;
 1912              		.loc 2 454 24 discriminator 3
 1913 008c 7B6A     		ldr	r3, [r7, #36]
 1914 008e 0133     		adds	r3, r3, #1
 1915 0090 7B62     		str	r3, [r7, #36]
 1916              	.L54:
 454:fft.c         **** 		fpr a_re, a_im;
 1917              		.loc 2 454 2 discriminator 1
 1918 0092 7A6A     		ldr	r2, [r7, #36]
 1919 0094 FB69     		ldr	r3, [r7, #28]
 1920 0096 9A42     		cmp	r2, r3
 1921 0098 C2D3     		bcc	.L55
 461:fft.c         **** 	}
 462:fft.c         **** }
 1922              		.loc 2 462 1
 1923 009a 00BF     		nop
 1924 009c 00BF     		nop
 1925 009e 2C37     		adds	r7, r7, #44
 1926              	.LCFI70:
 1927              		.cfi_def_cfa_offset 20
 1928 00a0 BD46     		mov	sp, r7
 1929              	.LCFI71:
 1930              		.cfi_def_cfa_register 13
 1931              		@ sp needed
 1932 00a2 F0BD     		pop	{r4, r5, r6, r7, pc}
 1933              		.cfi_endproc
 1934              	.LFE26:
 1936              		.section	.text.falcon_inner_poly_mulconst,"ax",%progbits
 1937              		.align	1
 1938              		.global	falcon_inner_poly_mulconst
 1939              		.syntax unified
 1940              		.thumb
 1941              		.thumb_func
 1942              		.fpu softvfp
 1944              	falcon_inner_poly_mulconst:
 1945              	.LFB27:
 463:fft.c         **** 
 464:fft.c         **** /* see inner.h */
 465:fft.c         **** void
 466:fft.c         **** Zf(poly_mulconst)(fpr *a, fpr x, unsigned logn)
 467:fft.c         **** {
 1946              		.loc 2 467 1
 1947              		.cfi_startproc
 1948              		@ args = 4, pretend = 0, frame = 24
 1949              		@ frame_needed = 1, uses_anonymous_args = 0
 1950 0000 90B5     		push	{r4, r7, lr}
 1951              	.LCFI72:
 1952              		.cfi_def_cfa_offset 12
 1953              		.cfi_offset 4, -12
 1954              		.cfi_offset 7, -8
 1955              		.cfi_offset 14, -4
 1956 0002 87B0     		sub	sp, sp, #28
 1957              	.LCFI73:
 1958              		.cfi_def_cfa_offset 40
 1959 0004 00AF     		add	r7, sp, #0
 1960              	.LCFI74:
 1961              		.cfi_def_cfa_register 7
 1962 0006 F860     		str	r0, [r7, #12]
 1963 0008 C7E90023 		strd	r2, [r7]
 468:fft.c         **** 	size_t n, u;
 469:fft.c         **** 
 470:fft.c         **** 	n = (size_t)1 << logn;
 1964              		.loc 2 470 4
 1965 000c 0122     		movs	r2, #1
 1966 000e BB6A     		ldr	r3, [r7, #40]
 1967 0010 02FA03F3 		lsl	r3, r2, r3
 1968 0014 3B61     		str	r3, [r7, #16]
 471:fft.c         **** 	for (u = 0; u < n; u ++) {
 1969              		.loc 2 471 9
 1970 0016 0023     		movs	r3, #0
 1971 0018 7B61     		str	r3, [r7, #20]
 1972              		.loc 2 471 2
 1973 001a 14E0     		b	.L57
 1974              	.L58:
 472:fft.c         **** 		a[u] = fpr_mul(a[u], x);
 1975              		.loc 2 472 19 discriminator 3
 1976 001c 7B69     		ldr	r3, [r7, #20]
 1977 001e DB00     		lsls	r3, r3, #3
 1978 0020 FA68     		ldr	r2, [r7, #12]
 1979 0022 1344     		add	r3, r3, r2
 1980              		.loc 2 472 10 discriminator 3
 1981 0024 D3E90001 		ldrd	r0, [r3]
 1982              		.loc 2 472 4 discriminator 3
 1983 0028 7B69     		ldr	r3, [r7, #20]
 1984 002a DB00     		lsls	r3, r3, #3
 1985 002c FA68     		ldr	r2, [r7, #12]
 1986 002e D418     		adds	r4, r2, r3
 1987              		.loc 2 472 10 discriminator 3
 1988 0030 D7E90023 		ldrd	r2, [r7]
 1989 0034 FFF7FEFF 		bl	falcon_inner_fpr_mul
 1990 0038 0246     		mov	r2, r0
 1991 003a 0B46     		mov	r3, r1
 1992              		.loc 2 472 8 discriminator 3
 1993 003c C4E90023 		strd	r2, [r4]
 471:fft.c         **** 	for (u = 0; u < n; u ++) {
 1994              		.loc 2 471 23 discriminator 3
 1995 0040 7B69     		ldr	r3, [r7, #20]
 1996 0042 0133     		adds	r3, r3, #1
 1997 0044 7B61     		str	r3, [r7, #20]
 1998              	.L57:
 471:fft.c         **** 	for (u = 0; u < n; u ++) {
 1999              		.loc 2 471 2 discriminator 1
 2000 0046 7A69     		ldr	r2, [r7, #20]
 2001 0048 3B69     		ldr	r3, [r7, #16]
 2002 004a 9A42     		cmp	r2, r3
 2003 004c E6D3     		bcc	.L58
 473:fft.c         **** 	}
 474:fft.c         **** }
 2004              		.loc 2 474 1
 2005 004e 00BF     		nop
 2006 0050 00BF     		nop
 2007 0052 1C37     		adds	r7, r7, #28
 2008              	.LCFI75:
 2009              		.cfi_def_cfa_offset 12
 2010 0054 BD46     		mov	sp, r7
 2011              	.LCFI76:
 2012              		.cfi_def_cfa_register 13
 2013              		@ sp needed
 2014 0056 90BD     		pop	{r4, r7, pc}
 2015              		.cfi_endproc
 2016              	.LFE27:
 2018              		.section	.text.falcon_inner_poly_div_fft,"ax",%progbits
 2019              		.align	1
 2020              		.global	falcon_inner_poly_div_fft
 2021              		.syntax unified
 2022              		.thumb
 2023              		.thumb_func
 2024              		.fpu softvfp
 2026              	falcon_inner_poly_div_fft:
 2027              	.LFB28:
 475:fft.c         **** 
 476:fft.c         **** /* see inner.h */
 477:fft.c         **** void
 478:fft.c         **** Zf(poly_div_fft)(
 479:fft.c         **** 	fpr *restrict a, const fpr *restrict b, unsigned logn)
 480:fft.c         **** {
 2028              		.loc 2 480 1
 2029              		.cfi_startproc
 2030              		@ args = 0, pretend = 0, frame = 120
 2031              		@ frame_needed = 1, uses_anonymous_args = 0
 2032 0000 B0B5     		push	{r4, r5, r7, lr}
 2033              	.LCFI77:
 2034              		.cfi_def_cfa_offset 16
 2035              		.cfi_offset 4, -16
 2036              		.cfi_offset 5, -12
 2037              		.cfi_offset 7, -8
 2038              		.cfi_offset 14, -4
 2039 0002 9EB0     		sub	sp, sp, #120
 2040              	.LCFI78:
 2041              		.cfi_def_cfa_offset 136
 2042 0004 00AF     		add	r7, sp, #0
 2043              	.LCFI79:
 2044              		.cfi_def_cfa_register 7
 2045 0006 F860     		str	r0, [r7, #12]
 2046 0008 B960     		str	r1, [r7, #8]
 2047 000a 7A60     		str	r2, [r7, #4]
 481:fft.c         **** 	size_t n, hn, u;
 482:fft.c         **** 
 483:fft.c         **** 	n = (size_t)1 << logn;
 2048              		.loc 2 483 4
 2049 000c 0122     		movs	r2, #1
 2050 000e 7B68     		ldr	r3, [r7, #4]
 2051 0010 02FA03F3 		lsl	r3, r2, r3
 2052 0014 3B67     		str	r3, [r7, #112]
 484:fft.c         **** 	hn = n >> 1;
 2053              		.loc 2 484 5
 2054 0016 3B6F     		ldr	r3, [r7, #112]
 2055 0018 5B08     		lsrs	r3, r3, #1
 2056 001a FB66     		str	r3, [r7, #108]
 485:fft.c         **** 	for (u = 0; u < hn; u ++) {
 2057              		.loc 2 485 9
 2058 001c 0023     		movs	r3, #0
 2059 001e 7B67     		str	r3, [r7, #116]
 2060              		.loc 2 485 2
 2061 0020 9EE0     		b	.L60
 2062              	.L61:
 2063              	.LBB20:
 486:fft.c         **** 		fpr a_re, a_im, b_re, b_im;
 487:fft.c         **** 
 488:fft.c         **** 		a_re = a[u];
 2064              		.loc 2 488 11 discriminator 3
 2065 0022 7B6F     		ldr	r3, [r7, #116]
 2066 0024 DB00     		lsls	r3, r3, #3
 2067 0026 FA68     		ldr	r2, [r7, #12]
 2068 0028 1344     		add	r3, r3, r2
 2069              		.loc 2 488 8 discriminator 3
 2070 002a D3E90023 		ldrd	r2, [r3]
 2071 002e C7E91823 		strd	r2, [r7, #96]
 489:fft.c         **** 		a_im = a[u + hn];
 2072              		.loc 2 489 14 discriminator 3
 2073 0032 7A6F     		ldr	r2, [r7, #116]
 2074 0034 FB6E     		ldr	r3, [r7, #108]
 2075 0036 1344     		add	r3, r3, r2
 2076              		.loc 2 489 11 discriminator 3
 2077 0038 DB00     		lsls	r3, r3, #3
 2078 003a FA68     		ldr	r2, [r7, #12]
 2079 003c 1344     		add	r3, r3, r2
 2080              		.loc 2 489 8 discriminator 3
 2081 003e D3E90023 		ldrd	r2, [r3]
 2082 0042 C7E91623 		strd	r2, [r7, #88]
 490:fft.c         **** 		b_re = b[u];
 2083              		.loc 2 490 11 discriminator 3
 2084 0046 7B6F     		ldr	r3, [r7, #116]
 2085 0048 DB00     		lsls	r3, r3, #3
 2086 004a BA68     		ldr	r2, [r7, #8]
 2087 004c 1344     		add	r3, r3, r2
 2088              		.loc 2 490 8 discriminator 3
 2089 004e D3E90023 		ldrd	r2, [r3]
 2090 0052 C7E91423 		strd	r2, [r7, #80]
 491:fft.c         **** 		b_im = b[u + hn];
 2091              		.loc 2 491 14 discriminator 3
 2092 0056 7A6F     		ldr	r2, [r7, #116]
 2093 0058 FB6E     		ldr	r3, [r7, #108]
 2094 005a 1344     		add	r3, r3, r2
 2095              		.loc 2 491 11 discriminator 3
 2096 005c DB00     		lsls	r3, r3, #3
 2097 005e BA68     		ldr	r2, [r7, #8]
 2098 0060 1344     		add	r3, r3, r2
 2099              		.loc 2 491 8 discriminator 3
 2100 0062 D3E90023 		ldrd	r2, [r3]
 2101 0066 C7E91223 		strd	r2, [r7, #72]
 2102              	.LBB21:
 492:fft.c         **** 		FPC_DIV(a[u], a[u + hn], a_re, a_im, b_re, b_im);
 2103              		.loc 2 492 3 discriminator 3
 2104 006a D7E91823 		ldrd	r2, [r7, #96]
 2105 006e C7E91023 		strd	r2, [r7, #64]
 2106 0072 D7E91623 		ldrd	r2, [r7, #88]
 2107 0076 C7E90E23 		strd	r2, [r7, #56]
 2108 007a D7E91423 		ldrd	r2, [r7, #80]
 2109 007e C7E90C23 		strd	r2, [r7, #48]
 2110 0082 D7E91223 		ldrd	r2, [r7, #72]
 2111 0086 C7E90A23 		strd	r2, [r7, #40]
 2112 008a D7E90C01 		ldrd	r0, [r7, #48]
 2113 008e FFF7FEFF 		bl	fpr_sqr
 2114 0092 0446     		mov	r4, r0
 2115 0094 0D46     		mov	r5, r1
 2116 0096 D7E90A01 		ldrd	r0, [r7, #40]
 2117 009a FFF7FEFF 		bl	fpr_sqr
 2118 009e 0246     		mov	r2, r0
 2119 00a0 0B46     		mov	r3, r1
 2120 00a2 2046     		mov	r0, r4
 2121 00a4 2946     		mov	r1, r5
 2122 00a6 FFF7FEFF 		bl	falcon_inner_fpr_add
 2123 00aa C7E90801 		strd	r0, [r7, #32]
 2124 00ae D7E90801 		ldrd	r0, [r7, #32]
 2125 00b2 FFF7FEFF 		bl	fpr_inv
 2126 00b6 C7E90801 		strd	r0, [r7, #32]
 2127 00ba D7E90823 		ldrd	r2, [r7, #32]
 2128 00be D7E90C01 		ldrd	r0, [r7, #48]
 2129 00c2 FFF7FEFF 		bl	falcon_inner_fpr_mul
 2130 00c6 C7E90C01 		strd	r0, [r7, #48]
 2131 00ca D7E90A01 		ldrd	r0, [r7, #40]
 2132 00ce FFF7FEFF 		bl	fpr_neg
 2133 00d2 D7E90823 		ldrd	r2, [r7, #32]
 2134 00d6 FFF7FEFF 		bl	falcon_inner_fpr_mul
 2135 00da C7E90A01 		strd	r0, [r7, #40]
 2136 00de D7E90C23 		ldrd	r2, [r7, #48]
 2137 00e2 D7E91001 		ldrd	r0, [r7, #64]
 2138 00e6 FFF7FEFF 		bl	falcon_inner_fpr_mul
 2139 00ea 0446     		mov	r4, r0
 2140 00ec 0D46     		mov	r5, r1
 2141 00ee D7E90A23 		ldrd	r2, [r7, #40]
 2142 00f2 D7E90E01 		ldrd	r0, [r7, #56]
 2143 00f6 FFF7FEFF 		bl	falcon_inner_fpr_mul
 2144 00fa 0246     		mov	r2, r0
 2145 00fc 0B46     		mov	r3, r1
 2146 00fe 2046     		mov	r0, r4
 2147 0100 2946     		mov	r1, r5
 2148 0102 FFF7FEFF 		bl	fpr_sub
 2149 0106 C7E90601 		strd	r0, [r7, #24]
 2150 010a D7E90A23 		ldrd	r2, [r7, #40]
 2151 010e D7E91001 		ldrd	r0, [r7, #64]
 2152 0112 FFF7FEFF 		bl	falcon_inner_fpr_mul
 2153 0116 0446     		mov	r4, r0
 2154 0118 0D46     		mov	r5, r1
 2155 011a D7E90C23 		ldrd	r2, [r7, #48]
 2156 011e D7E90E01 		ldrd	r0, [r7, #56]
 2157 0122 FFF7FEFF 		bl	falcon_inner_fpr_mul
 2158 0126 0246     		mov	r2, r0
 2159 0128 0B46     		mov	r3, r1
 2160 012a 2046     		mov	r0, r4
 2161 012c 2946     		mov	r1, r5
 2162 012e FFF7FEFF 		bl	falcon_inner_fpr_add
 2163 0132 C7E90401 		strd	r0, [r7, #16]
 2164 0136 7B6F     		ldr	r3, [r7, #116]
 2165 0138 DB00     		lsls	r3, r3, #3
 2166 013a FA68     		ldr	r2, [r7, #12]
 2167 013c D118     		adds	r1, r2, r3
 2168 013e D7E90623 		ldrd	r2, [r7, #24]
 2169 0142 C1E90023 		strd	r2, [r1]
 2170 0146 7A6F     		ldr	r2, [r7, #116]
 2171 0148 FB6E     		ldr	r3, [r7, #108]
 2172 014a 1344     		add	r3, r3, r2
 2173 014c DB00     		lsls	r3, r3, #3
 2174 014e FA68     		ldr	r2, [r7, #12]
 2175 0150 D118     		adds	r1, r2, r3
 2176 0152 D7E90423 		ldrd	r2, [r7, #16]
 2177 0156 C1E90023 		strd	r2, [r1]
 2178              	.LBE21:
 2179              	.LBE20:
 485:fft.c         **** 		fpr a_re, a_im, b_re, b_im;
 2180              		.loc 2 485 24 discriminator 3
 2181 015a 7B6F     		ldr	r3, [r7, #116]
 2182 015c 0133     		adds	r3, r3, #1
 2183 015e 7B67     		str	r3, [r7, #116]
 2184              	.L60:
 485:fft.c         **** 		fpr a_re, a_im, b_re, b_im;
 2185              		.loc 2 485 2 discriminator 1
 2186 0160 7A6F     		ldr	r2, [r7, #116]
 2187 0162 FB6E     		ldr	r3, [r7, #108]
 2188 0164 9A42     		cmp	r2, r3
 2189 0166 FFF45CAF 		bcc	.L61
 493:fft.c         **** 	}
 494:fft.c         **** }
 2190              		.loc 2 494 1
 2191 016a 00BF     		nop
 2192 016c 00BF     		nop
 2193 016e 7837     		adds	r7, r7, #120
 2194              	.LCFI80:
 2195              		.cfi_def_cfa_offset 16
 2196 0170 BD46     		mov	sp, r7
 2197              	.LCFI81:
 2198              		.cfi_def_cfa_register 13
 2199              		@ sp needed
 2200 0172 B0BD     		pop	{r4, r5, r7, pc}
 2201              		.cfi_endproc
 2202              	.LFE28:
 2204              		.section	.text.falcon_inner_poly_invnorm2_fft,"ax",%progbits
 2205              		.align	1
 2206              		.global	falcon_inner_poly_invnorm2_fft
 2207              		.syntax unified
 2208              		.thumb
 2209              		.thumb_func
 2210              		.fpu softvfp
 2212              	falcon_inner_poly_invnorm2_fft:
 2213              	.LFB29:
 495:fft.c         **** 
 496:fft.c         **** /* see inner.h */
 497:fft.c         **** void
 498:fft.c         **** Zf(poly_invnorm2_fft)(fpr *restrict d,
 499:fft.c         **** 	const fpr *restrict a, const fpr *restrict b, unsigned logn)
 500:fft.c         **** {
 2214              		.loc 2 500 1
 2215              		.cfi_startproc
 2216              		@ args = 0, pretend = 0, frame = 64
 2217              		@ frame_needed = 1, uses_anonymous_args = 0
 2218 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 2219              	.LCFI82:
 2220              		.cfi_def_cfa_offset 24
 2221              		.cfi_offset 4, -24
 2222              		.cfi_offset 5, -20
 2223              		.cfi_offset 7, -16
 2224              		.cfi_offset 8, -12
 2225              		.cfi_offset 9, -8
 2226              		.cfi_offset 14, -4
 2227 0004 90B0     		sub	sp, sp, #64
 2228              	.LCFI83:
 2229              		.cfi_def_cfa_offset 88
 2230 0006 00AF     		add	r7, sp, #0
 2231              	.LCFI84:
 2232              		.cfi_def_cfa_register 7
 2233 0008 F860     		str	r0, [r7, #12]
 2234 000a B960     		str	r1, [r7, #8]
 2235 000c 7A60     		str	r2, [r7, #4]
 2236 000e 3B60     		str	r3, [r7]
 501:fft.c         **** 	size_t n, hn, u;
 502:fft.c         **** 
 503:fft.c         **** 	n = (size_t)1 << logn;
 2237              		.loc 2 503 4
 2238 0010 0122     		movs	r2, #1
 2239 0012 3B68     		ldr	r3, [r7]
 2240 0014 02FA03F3 		lsl	r3, r2, r3
 2241 0018 BB63     		str	r3, [r7, #56]
 504:fft.c         **** 	hn = n >> 1;
 2242              		.loc 2 504 5
 2243 001a BB6B     		ldr	r3, [r7, #56]
 2244 001c 5B08     		lsrs	r3, r3, #1
 2245 001e 7B63     		str	r3, [r7, #52]
 505:fft.c         **** 	for (u = 0; u < hn; u ++) {
 2246              		.loc 2 505 9
 2247 0020 0023     		movs	r3, #0
 2248 0022 FB63     		str	r3, [r7, #60]
 2249              		.loc 2 505 2
 2250 0024 5CE0     		b	.L63
 2251              	.L64:
 2252              	.LBB22:
 506:fft.c         **** 		fpr a_re, a_im;
 507:fft.c         **** 		fpr b_re, b_im;
 508:fft.c         **** 
 509:fft.c         **** 		a_re = a[u];
 2253              		.loc 2 509 11 discriminator 3
 2254 0026 FB6B     		ldr	r3, [r7, #60]
 2255 0028 DB00     		lsls	r3, r3, #3
 2256 002a BA68     		ldr	r2, [r7, #8]
 2257 002c 1344     		add	r3, r3, r2
 2258              		.loc 2 509 8 discriminator 3
 2259 002e D3E90023 		ldrd	r2, [r3]
 2260 0032 C7E90A23 		strd	r2, [r7, #40]
 510:fft.c         **** 		a_im = a[u + hn];
 2261              		.loc 2 510 14 discriminator 3
 2262 0036 FA6B     		ldr	r2, [r7, #60]
 2263 0038 7B6B     		ldr	r3, [r7, #52]
 2264 003a 1344     		add	r3, r3, r2
 2265              		.loc 2 510 11 discriminator 3
 2266 003c DB00     		lsls	r3, r3, #3
 2267 003e BA68     		ldr	r2, [r7, #8]
 2268 0040 1344     		add	r3, r3, r2
 2269              		.loc 2 510 8 discriminator 3
 2270 0042 D3E90023 		ldrd	r2, [r3]
 2271 0046 C7E90823 		strd	r2, [r7, #32]
 511:fft.c         **** 		b_re = b[u];
 2272              		.loc 2 511 11 discriminator 3
 2273 004a FB6B     		ldr	r3, [r7, #60]
 2274 004c DB00     		lsls	r3, r3, #3
 2275 004e 7A68     		ldr	r2, [r7, #4]
 2276 0050 1344     		add	r3, r3, r2
 2277              		.loc 2 511 8 discriminator 3
 2278 0052 D3E90023 		ldrd	r2, [r3]
 2279 0056 C7E90623 		strd	r2, [r7, #24]
 512:fft.c         **** 		b_im = b[u + hn];
 2280              		.loc 2 512 14 discriminator 3
 2281 005a FA6B     		ldr	r2, [r7, #60]
 2282 005c 7B6B     		ldr	r3, [r7, #52]
 2283 005e 1344     		add	r3, r3, r2
 2284              		.loc 2 512 11 discriminator 3
 2285 0060 DB00     		lsls	r3, r3, #3
 2286 0062 7A68     		ldr	r2, [r7, #4]
 2287 0064 1344     		add	r3, r3, r2
 2288              		.loc 2 512 8 discriminator 3
 2289 0066 D3E90023 		ldrd	r2, [r3]
 2290 006a C7E90423 		strd	r2, [r7, #16]
 513:fft.c         **** 		d[u] = fpr_inv(fpr_add(
 2291              		.loc 2 513 10 discriminator 3
 2292 006e D7E90A01 		ldrd	r0, [r7, #40]
 2293 0072 FFF7FEFF 		bl	fpr_sqr
 2294 0076 0446     		mov	r4, r0
 2295 0078 0D46     		mov	r5, r1
 2296 007a D7E90801 		ldrd	r0, [r7, #32]
 2297 007e FFF7FEFF 		bl	fpr_sqr
 2298 0082 0246     		mov	r2, r0
 2299 0084 0B46     		mov	r3, r1
 2300 0086 2046     		mov	r0, r4
 2301 0088 2946     		mov	r1, r5
 2302 008a FFF7FEFF 		bl	falcon_inner_fpr_add
 2303 008e 0446     		mov	r4, r0
 2304 0090 0D46     		mov	r5, r1
 2305 0092 D7E90601 		ldrd	r0, [r7, #24]
 2306 0096 FFF7FEFF 		bl	fpr_sqr
 2307 009a 8046     		mov	r8, r0
 2308 009c 8946     		mov	r9, r1
 2309 009e D7E90401 		ldrd	r0, [r7, #16]
 2310 00a2 FFF7FEFF 		bl	fpr_sqr
 2311 00a6 0246     		mov	r2, r0
 2312 00a8 0B46     		mov	r3, r1
 2313 00aa 4046     		mov	r0, r8
 2314 00ac 4946     		mov	r1, r9
 2315 00ae FFF7FEFF 		bl	falcon_inner_fpr_add
 2316 00b2 0246     		mov	r2, r0
 2317 00b4 0B46     		mov	r3, r1
 2318 00b6 2046     		mov	r0, r4
 2319 00b8 2946     		mov	r1, r5
 2320 00ba FFF7FEFF 		bl	falcon_inner_fpr_add
 2321 00be 0246     		mov	r2, r0
 2322 00c0 0B46     		mov	r3, r1
 2323              		.loc 2 513 4 discriminator 3
 2324 00c2 F96B     		ldr	r1, [r7, #60]
 2325 00c4 C900     		lsls	r1, r1, #3
 2326 00c6 F868     		ldr	r0, [r7, #12]
 2327 00c8 4418     		adds	r4, r0, r1
 2328              		.loc 2 513 10 discriminator 3
 2329 00ca 1046     		mov	r0, r2
 2330 00cc 1946     		mov	r1, r3
 2331 00ce FFF7FEFF 		bl	fpr_inv
 2332 00d2 0246     		mov	r2, r0
 2333 00d4 0B46     		mov	r3, r1
 2334              		.loc 2 513 8 discriminator 3
 2335 00d6 C4E90023 		strd	r2, [r4]
 2336              	.LBE22:
 505:fft.c         **** 		fpr a_re, a_im;
 2337              		.loc 2 505 24 discriminator 3
 2338 00da FB6B     		ldr	r3, [r7, #60]
 2339 00dc 0133     		adds	r3, r3, #1
 2340 00de FB63     		str	r3, [r7, #60]
 2341              	.L63:
 505:fft.c         **** 		fpr a_re, a_im;
 2342              		.loc 2 505 2 discriminator 1
 2343 00e0 FA6B     		ldr	r2, [r7, #60]
 2344 00e2 7B6B     		ldr	r3, [r7, #52]
 2345 00e4 9A42     		cmp	r2, r3
 2346 00e6 9ED3     		bcc	.L64
 514:fft.c         **** 			fpr_add(fpr_sqr(a_re), fpr_sqr(a_im)),
 515:fft.c         **** 			fpr_add(fpr_sqr(b_re), fpr_sqr(b_im))));
 516:fft.c         **** 	}
 517:fft.c         **** }
 2347              		.loc 2 517 1
 2348 00e8 00BF     		nop
 2349 00ea 00BF     		nop
 2350 00ec 4037     		adds	r7, r7, #64
 2351              	.LCFI85:
 2352              		.cfi_def_cfa_offset 24
 2353 00ee BD46     		mov	sp, r7
 2354              	.LCFI86:
 2355              		.cfi_def_cfa_register 13
 2356              		@ sp needed
 2357 00f0 BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 2358              		.cfi_endproc
 2359              	.LFE29:
 2361              		.section	.text.falcon_inner_poly_add_muladj_fft,"ax",%progbits
 2362              		.align	1
 2363              		.global	falcon_inner_poly_add_muladj_fft
 2364              		.syntax unified
 2365              		.thumb
 2366              		.thumb_func
 2367              		.fpu softvfp
 2369              	falcon_inner_poly_add_muladj_fft:
 2370              	.LFB30:
 518:fft.c         **** 
 519:fft.c         **** /* see inner.h */
 520:fft.c         **** void
 521:fft.c         **** Zf(poly_add_muladj_fft)(fpr *restrict d,
 522:fft.c         **** 	const fpr *restrict F, const fpr *restrict G,
 523:fft.c         **** 	const fpr *restrict f, const fpr *restrict g, unsigned logn)
 524:fft.c         **** {
 2371              		.loc 2 524 1
 2372              		.cfi_startproc
 2373              		@ args = 8, pretend = 0, frame = 224
 2374              		@ frame_needed = 1, uses_anonymous_args = 0
 2375 0000 B0B5     		push	{r4, r5, r7, lr}
 2376              	.LCFI87:
 2377              		.cfi_def_cfa_offset 16
 2378              		.cfi_offset 4, -16
 2379              		.cfi_offset 5, -12
 2380              		.cfi_offset 7, -8
 2381              		.cfi_offset 14, -4
 2382 0002 B8B0     		sub	sp, sp, #224
 2383              	.LCFI88:
 2384              		.cfi_def_cfa_offset 240
 2385 0004 00AF     		add	r7, sp, #0
 2386              	.LCFI89:
 2387              		.cfi_def_cfa_register 7
 2388 0006 F860     		str	r0, [r7, #12]
 2389 0008 B960     		str	r1, [r7, #8]
 2390 000a 7A60     		str	r2, [r7, #4]
 2391 000c 3B60     		str	r3, [r7]
 525:fft.c         **** 	size_t n, hn, u;
 526:fft.c         **** 
 527:fft.c         **** 	n = (size_t)1 << logn;
 2392              		.loc 2 527 4
 2393 000e 0122     		movs	r2, #1
 2394 0010 D7F8F430 		ldr	r3, [r7, #244]
 2395 0014 02FA03F3 		lsl	r3, r2, r3
 2396 0018 C7F8D830 		str	r3, [r7, #216]
 528:fft.c         **** 	hn = n >> 1;
 2397              		.loc 2 528 5
 2398 001c D7F8D830 		ldr	r3, [r7, #216]
 2399 0020 5B08     		lsrs	r3, r3, #1
 2400 0022 C7F8D430 		str	r3, [r7, #212]
 529:fft.c         **** 	for (u = 0; u < hn; u ++) {
 2401              		.loc 2 529 9
 2402 0026 0023     		movs	r3, #0
 2403 0028 C7F8DC30 		str	r3, [r7, #220]
 2404              		.loc 2 529 2
 2405 002c 07E1     		b	.L66
 2406              	.L67:
 2407              	.LBB23:
 530:fft.c         **** 		fpr F_re, F_im, G_re, G_im;
 531:fft.c         **** 		fpr f_re, f_im, g_re, g_im;
 532:fft.c         **** 		fpr a_re, a_im, b_re, b_im;
 533:fft.c         **** 
 534:fft.c         **** 		F_re = F[u];
 2408              		.loc 2 534 11 discriminator 3
 2409 002e D7F8DC30 		ldr	r3, [r7, #220]
 2410 0032 DB00     		lsls	r3, r3, #3
 2411 0034 BA68     		ldr	r2, [r7, #8]
 2412 0036 1344     		add	r3, r3, r2
 2413              		.loc 2 534 8 discriminator 3
 2414 0038 D3E90023 		ldrd	r2, [r3]
 2415 003c C7E93223 		strd	r2, [r7, #200]
 535:fft.c         **** 		F_im = F[u + hn];
 2416              		.loc 2 535 14 discriminator 3
 2417 0040 D7F8DC20 		ldr	r2, [r7, #220]
 2418 0044 D7F8D430 		ldr	r3, [r7, #212]
 2419 0048 1344     		add	r3, r3, r2
 2420              		.loc 2 535 11 discriminator 3
 2421 004a DB00     		lsls	r3, r3, #3
 2422 004c BA68     		ldr	r2, [r7, #8]
 2423 004e 1344     		add	r3, r3, r2
 2424              		.loc 2 535 8 discriminator 3
 2425 0050 D3E90023 		ldrd	r2, [r3]
 2426 0054 C7E93023 		strd	r2, [r7, #192]
 536:fft.c         **** 		G_re = G[u];
 2427              		.loc 2 536 11 discriminator 3
 2428 0058 D7F8DC30 		ldr	r3, [r7, #220]
 2429 005c DB00     		lsls	r3, r3, #3
 2430 005e 7A68     		ldr	r2, [r7, #4]
 2431 0060 1344     		add	r3, r3, r2
 2432              		.loc 2 536 8 discriminator 3
 2433 0062 D3E90023 		ldrd	r2, [r3]
 2434 0066 C7E92E23 		strd	r2, [r7, #184]
 537:fft.c         **** 		G_im = G[u + hn];
 2435              		.loc 2 537 14 discriminator 3
 2436 006a D7F8DC20 		ldr	r2, [r7, #220]
 2437 006e D7F8D430 		ldr	r3, [r7, #212]
 2438 0072 1344     		add	r3, r3, r2
 2439              		.loc 2 537 11 discriminator 3
 2440 0074 DB00     		lsls	r3, r3, #3
 2441 0076 7A68     		ldr	r2, [r7, #4]
 2442 0078 1344     		add	r3, r3, r2
 2443              		.loc 2 537 8 discriminator 3
 2444 007a D3E90023 		ldrd	r2, [r3]
 2445 007e C7E92C23 		strd	r2, [r7, #176]
 538:fft.c         **** 		f_re = f[u];
 2446              		.loc 2 538 11 discriminator 3
 2447 0082 D7F8DC30 		ldr	r3, [r7, #220]
 2448 0086 DB00     		lsls	r3, r3, #3
 2449 0088 3A68     		ldr	r2, [r7]
 2450 008a 1344     		add	r3, r3, r2
 2451              		.loc 2 538 8 discriminator 3
 2452 008c D3E90023 		ldrd	r2, [r3]
 2453 0090 C7E92A23 		strd	r2, [r7, #168]
 539:fft.c         **** 		f_im = f[u + hn];
 2454              		.loc 2 539 14 discriminator 3
 2455 0094 D7F8DC20 		ldr	r2, [r7, #220]
 2456 0098 D7F8D430 		ldr	r3, [r7, #212]
 2457 009c 1344     		add	r3, r3, r2
 2458              		.loc 2 539 11 discriminator 3
 2459 009e DB00     		lsls	r3, r3, #3
 2460 00a0 3A68     		ldr	r2, [r7]
 2461 00a2 1344     		add	r3, r3, r2
 2462              		.loc 2 539 8 discriminator 3
 2463 00a4 D3E90023 		ldrd	r2, [r3]
 2464 00a8 C7E92823 		strd	r2, [r7, #160]
 540:fft.c         **** 		g_re = g[u];
 2465              		.loc 2 540 11 discriminator 3
 2466 00ac D7F8DC30 		ldr	r3, [r7, #220]
 2467 00b0 DB00     		lsls	r3, r3, #3
 2468 00b2 D7F8F020 		ldr	r2, [r7, #240]
 2469 00b6 1344     		add	r3, r3, r2
 2470              		.loc 2 540 8 discriminator 3
 2471 00b8 D3E90023 		ldrd	r2, [r3]
 2472 00bc C7E92623 		strd	r2, [r7, #152]
 541:fft.c         **** 		g_im = g[u + hn];
 2473              		.loc 2 541 14 discriminator 3
 2474 00c0 D7F8DC20 		ldr	r2, [r7, #220]
 2475 00c4 D7F8D430 		ldr	r3, [r7, #212]
 2476 00c8 1344     		add	r3, r3, r2
 2477              		.loc 2 541 11 discriminator 3
 2478 00ca DB00     		lsls	r3, r3, #3
 2479 00cc D7F8F020 		ldr	r2, [r7, #240]
 2480 00d0 1344     		add	r3, r3, r2
 2481              		.loc 2 541 8 discriminator 3
 2482 00d2 D3E90023 		ldrd	r2, [r3]
 2483 00d6 C7E92423 		strd	r2, [r7, #144]
 2484              	.LBB24:
 542:fft.c         **** 
 543:fft.c         **** 		FPC_MUL(a_re, a_im, F_re, F_im, f_re, fpr_neg(f_im));
 2485              		.loc 2 543 3 discriminator 3
 2486 00da D7E93223 		ldrd	r2, [r7, #200]
 2487 00de C7E92223 		strd	r2, [r7, #136]
 2488 00e2 D7E93023 		ldrd	r2, [r7, #192]
 2489 00e6 C7E92023 		strd	r2, [r7, #128]
 2490 00ea D7E92A23 		ldrd	r2, [r7, #168]
 2491 00ee C7E91E23 		strd	r2, [r7, #120]
 2492 00f2 D7E92801 		ldrd	r0, [r7, #160]
 2493 00f6 FFF7FEFF 		bl	fpr_neg
 2494 00fa C7E91C01 		strd	r0, [r7, #112]
 2495 00fe D7E91E23 		ldrd	r2, [r7, #120]
 2496 0102 D7E92201 		ldrd	r0, [r7, #136]
 2497 0106 FFF7FEFF 		bl	falcon_inner_fpr_mul
 2498 010a 0446     		mov	r4, r0
 2499 010c 0D46     		mov	r5, r1
 2500 010e D7E91C23 		ldrd	r2, [r7, #112]
 2501 0112 D7E92001 		ldrd	r0, [r7, #128]
 2502 0116 FFF7FEFF 		bl	falcon_inner_fpr_mul
 2503 011a 0246     		mov	r2, r0
 2504 011c 0B46     		mov	r3, r1
 2505 011e 2046     		mov	r0, r4
 2506 0120 2946     		mov	r1, r5
 2507 0122 FFF7FEFF 		bl	fpr_sub
 2508 0126 C7E91A01 		strd	r0, [r7, #104]
 2509 012a D7E91C23 		ldrd	r2, [r7, #112]
 2510 012e D7E92201 		ldrd	r0, [r7, #136]
 2511 0132 FFF7FEFF 		bl	falcon_inner_fpr_mul
 2512 0136 0446     		mov	r4, r0
 2513 0138 0D46     		mov	r5, r1
 2514 013a D7E91E23 		ldrd	r2, [r7, #120]
 2515 013e D7E92001 		ldrd	r0, [r7, #128]
 2516 0142 FFF7FEFF 		bl	falcon_inner_fpr_mul
 2517 0146 0246     		mov	r2, r0
 2518 0148 0B46     		mov	r3, r1
 2519 014a 2046     		mov	r0, r4
 2520 014c 2946     		mov	r1, r5
 2521 014e FFF7FEFF 		bl	falcon_inner_fpr_add
 2522 0152 C7E91801 		strd	r0, [r7, #96]
 2523 0156 D7E91A23 		ldrd	r2, [r7, #104]
 2524 015a C7E91623 		strd	r2, [r7, #88]
 2525 015e D7E91823 		ldrd	r2, [r7, #96]
 2526 0162 C7E91423 		strd	r2, [r7, #80]
 2527              	.LBE24:
 2528              	.LBB25:
 544:fft.c         **** 		FPC_MUL(b_re, b_im, G_re, G_im, g_re, fpr_neg(g_im));
 2529              		.loc 2 544 3 discriminator 3
 2530 0166 D7E92E23 		ldrd	r2, [r7, #184]
 2531 016a C7E91223 		strd	r2, [r7, #72]
 2532 016e D7E92C23 		ldrd	r2, [r7, #176]
 2533 0172 C7E91023 		strd	r2, [r7, #64]
 2534 0176 D7E92623 		ldrd	r2, [r7, #152]
 2535 017a C7E90E23 		strd	r2, [r7, #56]
 2536 017e D7E92401 		ldrd	r0, [r7, #144]
 2537 0182 FFF7FEFF 		bl	fpr_neg
 2538 0186 C7E90C01 		strd	r0, [r7, #48]
 2539 018a D7E90E23 		ldrd	r2, [r7, #56]
 2540 018e D7E91201 		ldrd	r0, [r7, #72]
 2541 0192 FFF7FEFF 		bl	falcon_inner_fpr_mul
 2542 0196 0446     		mov	r4, r0
 2543 0198 0D46     		mov	r5, r1
 2544 019a D7E90C23 		ldrd	r2, [r7, #48]
 2545 019e D7E91001 		ldrd	r0, [r7, #64]
 2546 01a2 FFF7FEFF 		bl	falcon_inner_fpr_mul
 2547 01a6 0246     		mov	r2, r0
 2548 01a8 0B46     		mov	r3, r1
 2549 01aa 2046     		mov	r0, r4
 2550 01ac 2946     		mov	r1, r5
 2551 01ae FFF7FEFF 		bl	fpr_sub
 2552 01b2 C7E90A01 		strd	r0, [r7, #40]
 2553 01b6 D7E90C23 		ldrd	r2, [r7, #48]
 2554 01ba D7E91201 		ldrd	r0, [r7, #72]
 2555 01be FFF7FEFF 		bl	falcon_inner_fpr_mul
 2556 01c2 0446     		mov	r4, r0
 2557 01c4 0D46     		mov	r5, r1
 2558 01c6 D7E90E23 		ldrd	r2, [r7, #56]
 2559 01ca D7E91001 		ldrd	r0, [r7, #64]
 2560 01ce FFF7FEFF 		bl	falcon_inner_fpr_mul
 2561 01d2 0246     		mov	r2, r0
 2562 01d4 0B46     		mov	r3, r1
 2563 01d6 2046     		mov	r0, r4
 2564 01d8 2946     		mov	r1, r5
 2565 01da FFF7FEFF 		bl	falcon_inner_fpr_add
 2566 01de C7E90801 		strd	r0, [r7, #32]
 2567 01e2 D7E90A23 		ldrd	r2, [r7, #40]
 2568 01e6 C7E90623 		strd	r2, [r7, #24]
 2569 01ea D7E90823 		ldrd	r2, [r7, #32]
 2570 01ee C7E90423 		strd	r2, [r7, #16]
 2571              	.LBE25:
 545:fft.c         **** 		d[u] = fpr_add(a_re, b_re);
 2572              		.loc 2 545 4 discriminator 3
 2573 01f2 D7F8DC30 		ldr	r3, [r7, #220]
 2574 01f6 DB00     		lsls	r3, r3, #3
 2575 01f8 FA68     		ldr	r2, [r7, #12]
 2576 01fa D418     		adds	r4, r2, r3
 2577              		.loc 2 545 10 discriminator 3
 2578 01fc D7E90623 		ldrd	r2, [r7, #24]
 2579 0200 D7E91601 		ldrd	r0, [r7, #88]
 2580 0204 FFF7FEFF 		bl	falcon_inner_fpr_add
 2581 0208 0246     		mov	r2, r0
 2582 020a 0B46     		mov	r3, r1
 2583              		.loc 2 545 8 discriminator 3
 2584 020c C4E90023 		strd	r2, [r4]
 546:fft.c         **** 		d[u + hn] = fpr_add(a_im, b_im);
 2585              		.loc 2 546 7 discriminator 3
 2586 0210 D7F8DC20 		ldr	r2, [r7, #220]
 2587 0214 D7F8D430 		ldr	r3, [r7, #212]
 2588 0218 1344     		add	r3, r3, r2
 2589              		.loc 2 546 4 discriminator 3
 2590 021a DB00     		lsls	r3, r3, #3
 2591 021c FA68     		ldr	r2, [r7, #12]
 2592 021e D418     		adds	r4, r2, r3
 2593              		.loc 2 546 15 discriminator 3
 2594 0220 D7E90423 		ldrd	r2, [r7, #16]
 2595 0224 D7E91401 		ldrd	r0, [r7, #80]
 2596 0228 FFF7FEFF 		bl	falcon_inner_fpr_add
 2597 022c 0246     		mov	r2, r0
 2598 022e 0B46     		mov	r3, r1
 2599              		.loc 2 546 13 discriminator 3
 2600 0230 C4E90023 		strd	r2, [r4]
 2601              	.LBE23:
 529:fft.c         **** 		fpr F_re, F_im, G_re, G_im;
 2602              		.loc 2 529 24 discriminator 3
 2603 0234 D7F8DC30 		ldr	r3, [r7, #220]
 2604 0238 0133     		adds	r3, r3, #1
 2605 023a C7F8DC30 		str	r3, [r7, #220]
 2606              	.L66:
 529:fft.c         **** 		fpr F_re, F_im, G_re, G_im;
 2607              		.loc 2 529 2 discriminator 1
 2608 023e D7F8DC20 		ldr	r2, [r7, #220]
 2609 0242 D7F8D430 		ldr	r3, [r7, #212]
 2610 0246 9A42     		cmp	r2, r3
 2611 0248 FFF4F1AE 		bcc	.L67
 547:fft.c         **** 	}
 548:fft.c         **** }
 2612              		.loc 2 548 1
 2613 024c 00BF     		nop
 2614 024e 00BF     		nop
 2615 0250 E037     		adds	r7, r7, #224
 2616              	.LCFI90:
 2617              		.cfi_def_cfa_offset 16
 2618 0252 BD46     		mov	sp, r7
 2619              	.LCFI91:
 2620              		.cfi_def_cfa_register 13
 2621              		@ sp needed
 2622 0254 B0BD     		pop	{r4, r5, r7, pc}
 2623              		.cfi_endproc
 2624              	.LFE30:
 2626              		.section	.text.falcon_inner_poly_mul_autoadj_fft,"ax",%progbits
 2627              		.align	1
 2628              		.global	falcon_inner_poly_mul_autoadj_fft
 2629              		.syntax unified
 2630              		.thumb
 2631              		.thumb_func
 2632              		.fpu softvfp
 2634              	falcon_inner_poly_mul_autoadj_fft:
 2635              	.LFB31:
 549:fft.c         **** 
 550:fft.c         **** /* see inner.h */
 551:fft.c         **** void
 552:fft.c         **** Zf(poly_mul_autoadj_fft)(
 553:fft.c         **** 	fpr *restrict a, const fpr *restrict b, unsigned logn)
 554:fft.c         **** {
 2636              		.loc 2 554 1
 2637              		.cfi_startproc
 2638              		@ args = 0, pretend = 0, frame = 32
 2639              		@ frame_needed = 1, uses_anonymous_args = 0
 2640 0000 B0B5     		push	{r4, r5, r7, lr}
 2641              	.LCFI92:
 2642              		.cfi_def_cfa_offset 16
 2643              		.cfi_offset 4, -16
 2644              		.cfi_offset 5, -12
 2645              		.cfi_offset 7, -8
 2646              		.cfi_offset 14, -4
 2647 0002 88B0     		sub	sp, sp, #32
 2648              	.LCFI93:
 2649              		.cfi_def_cfa_offset 48
 2650 0004 00AF     		add	r7, sp, #0
 2651              	.LCFI94:
 2652              		.cfi_def_cfa_register 7
 2653 0006 F860     		str	r0, [r7, #12]
 2654 0008 B960     		str	r1, [r7, #8]
 2655 000a 7A60     		str	r2, [r7, #4]
 555:fft.c         **** 	size_t n, hn, u;
 556:fft.c         **** 
 557:fft.c         **** 	n = (size_t)1 << logn;
 2656              		.loc 2 557 4
 2657 000c 0122     		movs	r2, #1
 2658 000e 7B68     		ldr	r3, [r7, #4]
 2659 0010 02FA03F3 		lsl	r3, r2, r3
 2660 0014 BB61     		str	r3, [r7, #24]
 558:fft.c         **** 	hn = n >> 1;
 2661              		.loc 2 558 5
 2662 0016 BB69     		ldr	r3, [r7, #24]
 2663 0018 5B08     		lsrs	r3, r3, #1
 2664 001a 7B61     		str	r3, [r7, #20]
 559:fft.c         **** 	for (u = 0; u < hn; u ++) {
 2665              		.loc 2 559 9
 2666 001c 0023     		movs	r3, #0
 2667 001e FB61     		str	r3, [r7, #28]
 2668              		.loc 2 559 2
 2669 0020 32E0     		b	.L69
 2670              	.L70:
 560:fft.c         **** 		a[u] = fpr_mul(a[u], b[u]);
 2671              		.loc 2 560 19 discriminator 3
 2672 0022 FB69     		ldr	r3, [r7, #28]
 2673 0024 DB00     		lsls	r3, r3, #3
 2674 0026 FA68     		ldr	r2, [r7, #12]
 2675 0028 1344     		add	r3, r3, r2
 2676              		.loc 2 560 10 discriminator 3
 2677 002a D3E90001 		ldrd	r0, [r3]
 2678              		.loc 2 560 25 discriminator 3
 2679 002e FB69     		ldr	r3, [r7, #28]
 2680 0030 DB00     		lsls	r3, r3, #3
 2681 0032 BA68     		ldr	r2, [r7, #8]
 2682 0034 1344     		add	r3, r3, r2
 2683              		.loc 2 560 10 discriminator 3
 2684 0036 D3E90023 		ldrd	r2, [r3]
 2685              		.loc 2 560 4 discriminator 3
 2686 003a FC69     		ldr	r4, [r7, #28]
 2687 003c E400     		lsls	r4, r4, #3
 2688 003e FD68     		ldr	r5, [r7, #12]
 2689 0040 2C44     		add	r4, r4, r5
 2690              		.loc 2 560 10 discriminator 3
 2691 0042 FFF7FEFF 		bl	falcon_inner_fpr_mul
 2692 0046 0246     		mov	r2, r0
 2693 0048 0B46     		mov	r3, r1
 2694              		.loc 2 560 8 discriminator 3
 2695 004a C4E90023 		strd	r2, [r4]
 561:fft.c         **** 		a[u + hn] = fpr_mul(a[u + hn], b[u]);
 2696              		.loc 2 561 27 discriminator 3
 2697 004e FA69     		ldr	r2, [r7, #28]
 2698 0050 7B69     		ldr	r3, [r7, #20]
 2699 0052 1344     		add	r3, r3, r2
 2700              		.loc 2 561 24 discriminator 3
 2701 0054 DB00     		lsls	r3, r3, #3
 2702 0056 FA68     		ldr	r2, [r7, #12]
 2703 0058 1344     		add	r3, r3, r2
 2704              		.loc 2 561 15 discriminator 3
 2705 005a D3E90001 		ldrd	r0, [r3]
 2706              		.loc 2 561 35 discriminator 3
 2707 005e FB69     		ldr	r3, [r7, #28]
 2708 0060 DB00     		lsls	r3, r3, #3
 2709 0062 BA68     		ldr	r2, [r7, #8]
 2710 0064 1344     		add	r3, r3, r2
 2711              		.loc 2 561 15 discriminator 3
 2712 0066 D3E90023 		ldrd	r2, [r3]
 2713              		.loc 2 561 7 discriminator 3
 2714 006a FD69     		ldr	r5, [r7, #28]
 2715 006c 7C69     		ldr	r4, [r7, #20]
 2716 006e 2C44     		add	r4, r4, r5
 2717              		.loc 2 561 4 discriminator 3
 2718 0070 E400     		lsls	r4, r4, #3
 2719 0072 FD68     		ldr	r5, [r7, #12]
 2720 0074 2C44     		add	r4, r4, r5
 2721              		.loc 2 561 15 discriminator 3
 2722 0076 FFF7FEFF 		bl	falcon_inner_fpr_mul
 2723 007a 0246     		mov	r2, r0
 2724 007c 0B46     		mov	r3, r1
 2725              		.loc 2 561 13 discriminator 3
 2726 007e C4E90023 		strd	r2, [r4]
 559:fft.c         **** 	for (u = 0; u < hn; u ++) {
 2727              		.loc 2 559 24 discriminator 3
 2728 0082 FB69     		ldr	r3, [r7, #28]
 2729 0084 0133     		adds	r3, r3, #1
 2730 0086 FB61     		str	r3, [r7, #28]
 2731              	.L69:
 559:fft.c         **** 	for (u = 0; u < hn; u ++) {
 2732              		.loc 2 559 2 discriminator 1
 2733 0088 FA69     		ldr	r2, [r7, #28]
 2734 008a 7B69     		ldr	r3, [r7, #20]
 2735 008c 9A42     		cmp	r2, r3
 2736 008e C8D3     		bcc	.L70
 562:fft.c         **** 	}
 563:fft.c         **** }
 2737              		.loc 2 563 1
 2738 0090 00BF     		nop
 2739 0092 00BF     		nop
 2740 0094 2037     		adds	r7, r7, #32
 2741              	.LCFI95:
 2742              		.cfi_def_cfa_offset 16
 2743 0096 BD46     		mov	sp, r7
 2744              	.LCFI96:
 2745              		.cfi_def_cfa_register 13
 2746              		@ sp needed
 2747 0098 B0BD     		pop	{r4, r5, r7, pc}
 2748              		.cfi_endproc
 2749              	.LFE31:
 2751              		.section	.text.falcon_inner_poly_div_autoadj_fft,"ax",%progbits
 2752              		.align	1
 2753              		.global	falcon_inner_poly_div_autoadj_fft
 2754              		.syntax unified
 2755              		.thumb
 2756              		.thumb_func
 2757              		.fpu softvfp
 2759              	falcon_inner_poly_div_autoadj_fft:
 2760              	.LFB32:
 564:fft.c         **** 
 565:fft.c         **** /* see inner.h */
 566:fft.c         **** void
 567:fft.c         **** Zf(poly_div_autoadj_fft)(
 568:fft.c         **** 	fpr *restrict a, const fpr *restrict b, unsigned logn)
 569:fft.c         **** {
 2761              		.loc 2 569 1
 2762              		.cfi_startproc
 2763              		@ args = 0, pretend = 0, frame = 40
 2764              		@ frame_needed = 1, uses_anonymous_args = 0
 2765 0000 90B5     		push	{r4, r7, lr}
 2766              	.LCFI97:
 2767              		.cfi_def_cfa_offset 12
 2768              		.cfi_offset 4, -12
 2769              		.cfi_offset 7, -8
 2770              		.cfi_offset 14, -4
 2771 0002 8BB0     		sub	sp, sp, #44
 2772              	.LCFI98:
 2773              		.cfi_def_cfa_offset 56
 2774 0004 00AF     		add	r7, sp, #0
 2775              	.LCFI99:
 2776              		.cfi_def_cfa_register 7
 2777 0006 F860     		str	r0, [r7, #12]
 2778 0008 B960     		str	r1, [r7, #8]
 2779 000a 7A60     		str	r2, [r7, #4]
 570:fft.c         **** 	size_t n, hn, u;
 571:fft.c         **** 
 572:fft.c         **** 	n = (size_t)1 << logn;
 2780              		.loc 2 572 4
 2781 000c 0122     		movs	r2, #1
 2782 000e 7B68     		ldr	r3, [r7, #4]
 2783 0010 02FA03F3 		lsl	r3, r2, r3
 2784 0014 3B62     		str	r3, [r7, #32]
 573:fft.c         **** 	hn = n >> 1;
 2785              		.loc 2 573 5
 2786 0016 3B6A     		ldr	r3, [r7, #32]
 2787 0018 5B08     		lsrs	r3, r3, #1
 2788 001a FB61     		str	r3, [r7, #28]
 574:fft.c         **** 	for (u = 0; u < hn; u ++) {
 2789              		.loc 2 574 9
 2790 001c 0023     		movs	r3, #0
 2791 001e 7B62     		str	r3, [r7, #36]
 2792              		.loc 2 574 2
 2793 0020 36E0     		b	.L72
 2794              	.L73:
 2795              	.LBB26:
 575:fft.c         **** 		fpr ib;
 576:fft.c         **** 
 577:fft.c         **** 		ib = fpr_inv(b[u]);
 2796              		.loc 2 577 17 discriminator 3
 2797 0022 7B6A     		ldr	r3, [r7, #36]
 2798 0024 DB00     		lsls	r3, r3, #3
 2799 0026 BA68     		ldr	r2, [r7, #8]
 2800 0028 1344     		add	r3, r3, r2
 2801              		.loc 2 577 8 discriminator 3
 2802 002a D3E90023 		ldrd	r2, [r3]
 2803 002e 1046     		mov	r0, r2
 2804 0030 1946     		mov	r1, r3
 2805 0032 FFF7FEFF 		bl	fpr_inv
 2806 0036 C7E90401 		strd	r0, [r7, #16]
 578:fft.c         **** 		a[u] = fpr_mul(a[u], ib);
 2807              		.loc 2 578 19 discriminator 3
 2808 003a 7B6A     		ldr	r3, [r7, #36]
 2809 003c DB00     		lsls	r3, r3, #3
 2810 003e FA68     		ldr	r2, [r7, #12]
 2811 0040 1344     		add	r3, r3, r2
 2812              		.loc 2 578 10 discriminator 3
 2813 0042 D3E90001 		ldrd	r0, [r3]
 2814              		.loc 2 578 4 discriminator 3
 2815 0046 7B6A     		ldr	r3, [r7, #36]
 2816 0048 DB00     		lsls	r3, r3, #3
 2817 004a FA68     		ldr	r2, [r7, #12]
 2818 004c D418     		adds	r4, r2, r3
 2819              		.loc 2 578 10 discriminator 3
 2820 004e D7E90423 		ldrd	r2, [r7, #16]
 2821 0052 FFF7FEFF 		bl	falcon_inner_fpr_mul
 2822 0056 0246     		mov	r2, r0
 2823 0058 0B46     		mov	r3, r1
 2824              		.loc 2 578 8 discriminator 3
 2825 005a C4E90023 		strd	r2, [r4]
 579:fft.c         **** 		a[u + hn] = fpr_mul(a[u + hn], ib);
 2826              		.loc 2 579 27 discriminator 3
 2827 005e 7A6A     		ldr	r2, [r7, #36]
 2828 0060 FB69     		ldr	r3, [r7, #28]
 2829 0062 1344     		add	r3, r3, r2
 2830              		.loc 2 579 24 discriminator 3
 2831 0064 DB00     		lsls	r3, r3, #3
 2832 0066 FA68     		ldr	r2, [r7, #12]
 2833 0068 1344     		add	r3, r3, r2
 2834              		.loc 2 579 15 discriminator 3
 2835 006a D3E90001 		ldrd	r0, [r3]
 2836              		.loc 2 579 7 discriminator 3
 2837 006e 7A6A     		ldr	r2, [r7, #36]
 2838 0070 FB69     		ldr	r3, [r7, #28]
 2839 0072 1344     		add	r3, r3, r2
 2840              		.loc 2 579 4 discriminator 3
 2841 0074 DB00     		lsls	r3, r3, #3
 2842 0076 FA68     		ldr	r2, [r7, #12]
 2843 0078 D418     		adds	r4, r2, r3
 2844              		.loc 2 579 15 discriminator 3
 2845 007a D7E90423 		ldrd	r2, [r7, #16]
 2846 007e FFF7FEFF 		bl	falcon_inner_fpr_mul
 2847 0082 0246     		mov	r2, r0
 2848 0084 0B46     		mov	r3, r1
 2849              		.loc 2 579 13 discriminator 3
 2850 0086 C4E90023 		strd	r2, [r4]
 2851              	.LBE26:
 574:fft.c         **** 		fpr ib;
 2852              		.loc 2 574 24 discriminator 3
 2853 008a 7B6A     		ldr	r3, [r7, #36]
 2854 008c 0133     		adds	r3, r3, #1
 2855 008e 7B62     		str	r3, [r7, #36]
 2856              	.L72:
 574:fft.c         **** 		fpr ib;
 2857              		.loc 2 574 2 discriminator 1
 2858 0090 7A6A     		ldr	r2, [r7, #36]
 2859 0092 FB69     		ldr	r3, [r7, #28]
 2860 0094 9A42     		cmp	r2, r3
 2861 0096 C4D3     		bcc	.L73
 580:fft.c         **** 	}
 581:fft.c         **** }
 2862              		.loc 2 581 1
 2863 0098 00BF     		nop
 2864 009a 00BF     		nop
 2865 009c 2C37     		adds	r7, r7, #44
 2866              	.LCFI100:
 2867              		.cfi_def_cfa_offset 12
 2868 009e BD46     		mov	sp, r7
 2869              	.LCFI101:
 2870              		.cfi_def_cfa_register 13
 2871              		@ sp needed
 2872 00a0 90BD     		pop	{r4, r7, pc}
 2873              		.cfi_endproc
 2874              	.LFE32:
 2876              		.section	.text.falcon_inner_poly_LDL_fft,"ax",%progbits
 2877              		.align	1
 2878              		.global	falcon_inner_poly_LDL_fft
 2879              		.syntax unified
 2880              		.thumb
 2881              		.thumb_func
 2882              		.fpu softvfp
 2884              	falcon_inner_poly_LDL_fft:
 2885              	.LFB33:
 582:fft.c         **** 
 583:fft.c         **** /* see inner.h */
 584:fft.c         **** void
 585:fft.c         **** Zf(poly_LDL_fft)(
 586:fft.c         **** 	const fpr *restrict g00,
 587:fft.c         **** 	fpr *restrict g01, fpr *restrict g11, unsigned logn)
 588:fft.c         **** {
 2886              		.loc 2 588 1
 2887              		.cfi_startproc
 2888              		@ args = 0, pretend = 0, frame = 216
 2889              		@ frame_needed = 1, uses_anonymous_args = 0
 2890 0000 B0B5     		push	{r4, r5, r7, lr}
 2891              	.LCFI102:
 2892              		.cfi_def_cfa_offset 16
 2893              		.cfi_offset 4, -16
 2894              		.cfi_offset 5, -12
 2895              		.cfi_offset 7, -8
 2896              		.cfi_offset 14, -4
 2897 0002 B6B0     		sub	sp, sp, #216
 2898              	.LCFI103:
 2899              		.cfi_def_cfa_offset 232
 2900 0004 00AF     		add	r7, sp, #0
 2901              	.LCFI104:
 2902              		.cfi_def_cfa_register 7
 2903 0006 F860     		str	r0, [r7, #12]
 2904 0008 B960     		str	r1, [r7, #8]
 2905 000a 7A60     		str	r2, [r7, #4]
 2906 000c 3B60     		str	r3, [r7]
 589:fft.c         **** 	size_t n, hn, u;
 590:fft.c         **** 
 591:fft.c         **** 	n = (size_t)1 << logn;
 2907              		.loc 2 591 4
 2908 000e 0122     		movs	r2, #1
 2909 0010 3B68     		ldr	r3, [r7]
 2910 0012 02FA03F3 		lsl	r3, r2, r3
 2911 0016 C7F8D030 		str	r3, [r7, #208]
 592:fft.c         **** 	hn = n >> 1;
 2912              		.loc 2 592 5
 2913 001a D7F8D030 		ldr	r3, [r7, #208]
 2914 001e 5B08     		lsrs	r3, r3, #1
 2915 0020 C7F8CC30 		str	r3, [r7, #204]
 593:fft.c         **** 	for (u = 0; u < hn; u ++) {
 2916              		.loc 2 593 9
 2917 0024 0023     		movs	r3, #0
 2918 0026 C7F8D430 		str	r3, [r7, #212]
 2919              		.loc 2 593 2
 2920 002a 35E1     		b	.L75
 2921              	.L76:
 2922              	.LBB27:
 594:fft.c         **** 		fpr g00_re, g00_im, g01_re, g01_im, g11_re, g11_im;
 595:fft.c         **** 		fpr mu_re, mu_im;
 596:fft.c         **** 
 597:fft.c         **** 		g00_re = g00[u];
 2923              		.loc 2 597 15 discriminator 3
 2924 002c D7F8D430 		ldr	r3, [r7, #212]
 2925 0030 DB00     		lsls	r3, r3, #3
 2926 0032 FA68     		ldr	r2, [r7, #12]
 2927 0034 1344     		add	r3, r3, r2
 2928              		.loc 2 597 10 discriminator 3
 2929 0036 D3E90023 		ldrd	r2, [r3]
 2930 003a C7E93023 		strd	r2, [r7, #192]
 598:fft.c         **** 		g00_im = g00[u + hn];
 2931              		.loc 2 598 18 discriminator 3
 2932 003e D7F8D420 		ldr	r2, [r7, #212]
 2933 0042 D7F8CC30 		ldr	r3, [r7, #204]
 2934 0046 1344     		add	r3, r3, r2
 2935              		.loc 2 598 15 discriminator 3
 2936 0048 DB00     		lsls	r3, r3, #3
 2937 004a FA68     		ldr	r2, [r7, #12]
 2938 004c 1344     		add	r3, r3, r2
 2939              		.loc 2 598 10 discriminator 3
 2940 004e D3E90023 		ldrd	r2, [r3]
 2941 0052 C7E92E23 		strd	r2, [r7, #184]
 599:fft.c         **** 		g01_re = g01[u];
 2942              		.loc 2 599 15 discriminator 3
 2943 0056 D7F8D430 		ldr	r3, [r7, #212]
 2944 005a DB00     		lsls	r3, r3, #3
 2945 005c BA68     		ldr	r2, [r7, #8]
 2946 005e 1344     		add	r3, r3, r2
 2947              		.loc 2 599 10 discriminator 3
 2948 0060 D3E90023 		ldrd	r2, [r3]
 2949 0064 C7E92C23 		strd	r2, [r7, #176]
 600:fft.c         **** 		g01_im = g01[u + hn];
 2950              		.loc 2 600 18 discriminator 3
 2951 0068 D7F8D420 		ldr	r2, [r7, #212]
 2952 006c D7F8CC30 		ldr	r3, [r7, #204]
 2953 0070 1344     		add	r3, r3, r2
 2954              		.loc 2 600 15 discriminator 3
 2955 0072 DB00     		lsls	r3, r3, #3
 2956 0074 BA68     		ldr	r2, [r7, #8]
 2957 0076 1344     		add	r3, r3, r2
 2958              		.loc 2 600 10 discriminator 3
 2959 0078 D3E90023 		ldrd	r2, [r3]
 2960 007c C7E92A23 		strd	r2, [r7, #168]
 601:fft.c         **** 		g11_re = g11[u];
 2961              		.loc 2 601 15 discriminator 3
 2962 0080 D7F8D430 		ldr	r3, [r7, #212]
 2963 0084 DB00     		lsls	r3, r3, #3
 2964 0086 7A68     		ldr	r2, [r7, #4]
 2965 0088 1344     		add	r3, r3, r2
 2966              		.loc 2 601 10 discriminator 3
 2967 008a D3E90023 		ldrd	r2, [r3]
 2968 008e C7E92823 		strd	r2, [r7, #160]
 602:fft.c         **** 		g11_im = g11[u + hn];
 2969              		.loc 2 602 18 discriminator 3
 2970 0092 D7F8D420 		ldr	r2, [r7, #212]
 2971 0096 D7F8CC30 		ldr	r3, [r7, #204]
 2972 009a 1344     		add	r3, r3, r2
 2973              		.loc 2 602 15 discriminator 3
 2974 009c DB00     		lsls	r3, r3, #3
 2975 009e 7A68     		ldr	r2, [r7, #4]
 2976 00a0 1344     		add	r3, r3, r2
 2977              		.loc 2 602 10 discriminator 3
 2978 00a2 D3E90023 		ldrd	r2, [r3]
 2979 00a6 C7E92623 		strd	r2, [r7, #152]
 2980              	.LBB28:
 603:fft.c         **** 		FPC_DIV(mu_re, mu_im, g01_re, g01_im, g00_re, g00_im);
 2981              		.loc 2 603 3 discriminator 3
 2982 00aa D7E92C23 		ldrd	r2, [r7, #176]
 2983 00ae C7E92423 		strd	r2, [r7, #144]
 2984 00b2 D7E92A23 		ldrd	r2, [r7, #168]
 2985 00b6 C7E92223 		strd	r2, [r7, #136]
 2986 00ba D7E93023 		ldrd	r2, [r7, #192]
 2987 00be C7E92023 		strd	r2, [r7, #128]
 2988 00c2 D7E92E23 		ldrd	r2, [r7, #184]
 2989 00c6 C7E91E23 		strd	r2, [r7, #120]
 2990 00ca D7E92001 		ldrd	r0, [r7, #128]
 2991 00ce FFF7FEFF 		bl	fpr_sqr
 2992 00d2 0446     		mov	r4, r0
 2993 00d4 0D46     		mov	r5, r1
 2994 00d6 D7E91E01 		ldrd	r0, [r7, #120]
 2995 00da FFF7FEFF 		bl	fpr_sqr
 2996 00de 0246     		mov	r2, r0
 2997 00e0 0B46     		mov	r3, r1
 2998 00e2 2046     		mov	r0, r4
 2999 00e4 2946     		mov	r1, r5
 3000 00e6 FFF7FEFF 		bl	falcon_inner_fpr_add
 3001 00ea C7E91C01 		strd	r0, [r7, #112]
 3002 00ee D7E91C01 		ldrd	r0, [r7, #112]
 3003 00f2 FFF7FEFF 		bl	fpr_inv
 3004 00f6 C7E91C01 		strd	r0, [r7, #112]
 3005 00fa D7E91C23 		ldrd	r2, [r7, #112]
 3006 00fe D7E92001 		ldrd	r0, [r7, #128]
 3007 0102 FFF7FEFF 		bl	falcon_inner_fpr_mul
 3008 0106 C7E92001 		strd	r0, [r7, #128]
 3009 010a D7E91E01 		ldrd	r0, [r7, #120]
 3010 010e FFF7FEFF 		bl	fpr_neg
 3011 0112 D7E91C23 		ldrd	r2, [r7, #112]
 3012 0116 FFF7FEFF 		bl	falcon_inner_fpr_mul
 3013 011a C7E91E01 		strd	r0, [r7, #120]
 3014 011e D7E92023 		ldrd	r2, [r7, #128]
 3015 0122 D7E92401 		ldrd	r0, [r7, #144]
 3016 0126 FFF7FEFF 		bl	falcon_inner_fpr_mul
 3017 012a 0446     		mov	r4, r0
 3018 012c 0D46     		mov	r5, r1
 3019 012e D7E91E23 		ldrd	r2, [r7, #120]
 3020 0132 D7E92201 		ldrd	r0, [r7, #136]
 3021 0136 FFF7FEFF 		bl	falcon_inner_fpr_mul
 3022 013a 0246     		mov	r2, r0
 3023 013c 0B46     		mov	r3, r1
 3024 013e 2046     		mov	r0, r4
 3025 0140 2946     		mov	r1, r5
 3026 0142 FFF7FEFF 		bl	fpr_sub
 3027 0146 C7E91A01 		strd	r0, [r7, #104]
 3028 014a D7E91E23 		ldrd	r2, [r7, #120]
 3029 014e D7E92401 		ldrd	r0, [r7, #144]
 3030 0152 FFF7FEFF 		bl	falcon_inner_fpr_mul
 3031 0156 0446     		mov	r4, r0
 3032 0158 0D46     		mov	r5, r1
 3033 015a D7E92023 		ldrd	r2, [r7, #128]
 3034 015e D7E92201 		ldrd	r0, [r7, #136]
 3035 0162 FFF7FEFF 		bl	falcon_inner_fpr_mul
 3036 0166 0246     		mov	r2, r0
 3037 0168 0B46     		mov	r3, r1
 3038 016a 2046     		mov	r0, r4
 3039 016c 2946     		mov	r1, r5
 3040 016e FFF7FEFF 		bl	falcon_inner_fpr_add
 3041 0172 C7E91801 		strd	r0, [r7, #96]
 3042 0176 D7E91A23 		ldrd	r2, [r7, #104]
 3043 017a C7E91623 		strd	r2, [r7, #88]
 3044 017e D7E91823 		ldrd	r2, [r7, #96]
 3045 0182 C7E91423 		strd	r2, [r7, #80]
 3046              	.LBE28:
 3047              	.LBB29:
 604:fft.c         **** 		FPC_MUL(g01_re, g01_im, mu_re, mu_im, g01_re, fpr_neg(g01_im));
 3048              		.loc 2 604 3 discriminator 3
 3049 0186 D7E91623 		ldrd	r2, [r7, #88]
 3050 018a C7E91223 		strd	r2, [r7, #72]
 3051 018e D7E91423 		ldrd	r2, [r7, #80]
 3052 0192 C7E91023 		strd	r2, [r7, #64]
 3053 0196 D7E92C23 		ldrd	r2, [r7, #176]
 3054 019a C7E90E23 		strd	r2, [r7, #56]
 3055 019e D7E92A01 		ldrd	r0, [r7, #168]
 3056 01a2 FFF7FEFF 		bl	fpr_neg
 3057 01a6 C7E90C01 		strd	r0, [r7, #48]
 3058 01aa D7E90E23 		ldrd	r2, [r7, #56]
 3059 01ae D7E91201 		ldrd	r0, [r7, #72]
 3060 01b2 FFF7FEFF 		bl	falcon_inner_fpr_mul
 3061 01b6 0446     		mov	r4, r0
 3062 01b8 0D46     		mov	r5, r1
 3063 01ba D7E90C23 		ldrd	r2, [r7, #48]
 3064 01be D7E91001 		ldrd	r0, [r7, #64]
 3065 01c2 FFF7FEFF 		bl	falcon_inner_fpr_mul
 3066 01c6 0246     		mov	r2, r0
 3067 01c8 0B46     		mov	r3, r1
 3068 01ca 2046     		mov	r0, r4
 3069 01cc 2946     		mov	r1, r5
 3070 01ce FFF7FEFF 		bl	fpr_sub
 3071 01d2 C7E90A01 		strd	r0, [r7, #40]
 3072 01d6 D7E90C23 		ldrd	r2, [r7, #48]
 3073 01da D7E91201 		ldrd	r0, [r7, #72]
 3074 01de FFF7FEFF 		bl	falcon_inner_fpr_mul
 3075 01e2 0446     		mov	r4, r0
 3076 01e4 0D46     		mov	r5, r1
 3077 01e6 D7E90E23 		ldrd	r2, [r7, #56]
 3078 01ea D7E91001 		ldrd	r0, [r7, #64]
 3079 01ee FFF7FEFF 		bl	falcon_inner_fpr_mul
 3080 01f2 0246     		mov	r2, r0
 3081 01f4 0B46     		mov	r3, r1
 3082 01f6 2046     		mov	r0, r4
 3083 01f8 2946     		mov	r1, r5
 3084 01fa FFF7FEFF 		bl	falcon_inner_fpr_add
 3085 01fe C7E90801 		strd	r0, [r7, #32]
 3086 0202 D7E90A23 		ldrd	r2, [r7, #40]
 3087 0206 C7E92C23 		strd	r2, [r7, #176]
 3088 020a D7E90823 		ldrd	r2, [r7, #32]
 3089 020e C7E92A23 		strd	r2, [r7, #168]
 3090              	.LBE29:
 3091              	.LBB30:
 605:fft.c         **** 		FPC_SUB(g11[u], g11[u + hn], g11_re, g11_im, g01_re, g01_im);
 3092              		.loc 2 605 3 discriminator 3
 3093 0212 D7E92C23 		ldrd	r2, [r7, #176]
 3094 0216 D7E92801 		ldrd	r0, [r7, #160]
 3095 021a FFF7FEFF 		bl	fpr_sub
 3096 021e C7E90601 		strd	r0, [r7, #24]
 3097 0222 D7E92A23 		ldrd	r2, [r7, #168]
 3098 0226 D7E92601 		ldrd	r0, [r7, #152]
 3099 022a FFF7FEFF 		bl	fpr_sub
 3100 022e C7E90401 		strd	r0, [r7, #16]
 3101 0232 D7F8D430 		ldr	r3, [r7, #212]
 3102 0236 DB00     		lsls	r3, r3, #3
 3103 0238 7A68     		ldr	r2, [r7, #4]
 3104 023a D118     		adds	r1, r2, r3
 3105 023c D7E90623 		ldrd	r2, [r7, #24]
 3106 0240 C1E90023 		strd	r2, [r1]
 3107 0244 D7F8D420 		ldr	r2, [r7, #212]
 3108 0248 D7F8CC30 		ldr	r3, [r7, #204]
 3109 024c 1344     		add	r3, r3, r2
 3110 024e DB00     		lsls	r3, r3, #3
 3111 0250 7A68     		ldr	r2, [r7, #4]
 3112 0252 D118     		adds	r1, r2, r3
 3113 0254 D7E90423 		ldrd	r2, [r7, #16]
 3114 0258 C1E90023 		strd	r2, [r1]
 3115              	.LBE30:
 606:fft.c         **** 		g01[u] = mu_re;
 3116              		.loc 2 606 6 discriminator 3
 3117 025c D7F8D430 		ldr	r3, [r7, #212]
 3118 0260 DB00     		lsls	r3, r3, #3
 3119 0262 BA68     		ldr	r2, [r7, #8]
 3120 0264 D118     		adds	r1, r2, r3
 3121              		.loc 2 606 10 discriminator 3
 3122 0266 D7E91623 		ldrd	r2, [r7, #88]
 3123 026a C1E90023 		strd	r2, [r1]
 607:fft.c         **** 		g01[u + hn] = fpr_neg(mu_im);
 3124              		.loc 2 607 9 discriminator 3
 3125 026e D7F8D420 		ldr	r2, [r7, #212]
 3126 0272 D7F8CC30 		ldr	r3, [r7, #204]
 3127 0276 1344     		add	r3, r3, r2
 3128              		.loc 2 607 6 discriminator 3
 3129 0278 DB00     		lsls	r3, r3, #3
 3130 027a BA68     		ldr	r2, [r7, #8]
 3131 027c D418     		adds	r4, r2, r3
 3132              		.loc 2 607 17 discriminator 3
 3133 027e D7E91401 		ldrd	r0, [r7, #80]
 3134 0282 FFF7FEFF 		bl	fpr_neg
 3135 0286 0246     		mov	r2, r0
 3136 0288 0B46     		mov	r3, r1
 3137              		.loc 2 607 15 discriminator 3
 3138 028a C4E90023 		strd	r2, [r4]
 3139              	.LBE27:
 593:fft.c         **** 		fpr g00_re, g00_im, g01_re, g01_im, g11_re, g11_im;
 3140              		.loc 2 593 24 discriminator 3
 3141 028e D7F8D430 		ldr	r3, [r7, #212]
 3142 0292 0133     		adds	r3, r3, #1
 3143 0294 C7F8D430 		str	r3, [r7, #212]
 3144              	.L75:
 593:fft.c         **** 		fpr g00_re, g00_im, g01_re, g01_im, g11_re, g11_im;
 3145              		.loc 2 593 2 discriminator 1
 3146 0298 D7F8D420 		ldr	r2, [r7, #212]
 3147 029c D7F8CC30 		ldr	r3, [r7, #204]
 3148 02a0 9A42     		cmp	r2, r3
 3149 02a2 FFF4C3AE 		bcc	.L76
 608:fft.c         **** 	}
 609:fft.c         **** }
 3150              		.loc 2 609 1
 3151 02a6 00BF     		nop
 3152 02a8 00BF     		nop
 3153 02aa D837     		adds	r7, r7, #216
 3154              	.LCFI105:
 3155              		.cfi_def_cfa_offset 16
 3156 02ac BD46     		mov	sp, r7
 3157              	.LCFI106:
 3158              		.cfi_def_cfa_register 13
 3159              		@ sp needed
 3160 02ae B0BD     		pop	{r4, r5, r7, pc}
 3161              		.cfi_endproc
 3162              	.LFE33:
 3164              		.section	.text.falcon_inner_poly_LDLmv_fft,"ax",%progbits
 3165              		.align	1
 3166              		.global	falcon_inner_poly_LDLmv_fft
 3167              		.syntax unified
 3168              		.thumb
 3169              		.thumb_func
 3170              		.fpu softvfp
 3172              	falcon_inner_poly_LDLmv_fft:
 3173              	.LFB34:
 610:fft.c         **** 
 611:fft.c         **** /* see inner.h */
 612:fft.c         **** void
 613:fft.c         **** Zf(poly_LDLmv_fft)(
 614:fft.c         **** 	fpr *restrict d11, fpr *restrict l10,
 615:fft.c         **** 	const fpr *restrict g00, const fpr *restrict g01,
 616:fft.c         **** 	const fpr *restrict g11, unsigned logn)
 617:fft.c         **** {
 3174              		.loc 2 617 1
 3175              		.cfi_startproc
 3176              		@ args = 8, pretend = 0, frame = 216
 3177              		@ frame_needed = 1, uses_anonymous_args = 0
 3178 0000 B0B5     		push	{r4, r5, r7, lr}
 3179              	.LCFI107:
 3180              		.cfi_def_cfa_offset 16
 3181              		.cfi_offset 4, -16
 3182              		.cfi_offset 5, -12
 3183              		.cfi_offset 7, -8
 3184              		.cfi_offset 14, -4
 3185 0002 B6B0     		sub	sp, sp, #216
 3186              	.LCFI108:
 3187              		.cfi_def_cfa_offset 232
 3188 0004 00AF     		add	r7, sp, #0
 3189              	.LCFI109:
 3190              		.cfi_def_cfa_register 7
 3191 0006 F860     		str	r0, [r7, #12]
 3192 0008 B960     		str	r1, [r7, #8]
 3193 000a 7A60     		str	r2, [r7, #4]
 3194 000c 3B60     		str	r3, [r7]
 618:fft.c         **** 	size_t n, hn, u;
 619:fft.c         **** 
 620:fft.c         **** 	n = (size_t)1 << logn;
 3195              		.loc 2 620 4
 3196 000e 0122     		movs	r2, #1
 3197 0010 D7F8EC30 		ldr	r3, [r7, #236]
 3198 0014 02FA03F3 		lsl	r3, r2, r3
 3199 0018 C7F8D030 		str	r3, [r7, #208]
 621:fft.c         **** 	hn = n >> 1;
 3200              		.loc 2 621 5
 3201 001c D7F8D030 		ldr	r3, [r7, #208]
 3202 0020 5B08     		lsrs	r3, r3, #1
 3203 0022 C7F8CC30 		str	r3, [r7, #204]
 622:fft.c         **** 	for (u = 0; u < hn; u ++) {
 3204              		.loc 2 622 9
 3205 0026 0023     		movs	r3, #0
 3206 0028 C7F8D430 		str	r3, [r7, #212]
 3207              		.loc 2 622 2
 3208 002c 37E1     		b	.L78
 3209              	.L79:
 3210              	.LBB31:
 623:fft.c         **** 		fpr g00_re, g00_im, g01_re, g01_im, g11_re, g11_im;
 624:fft.c         **** 		fpr mu_re, mu_im;
 625:fft.c         **** 
 626:fft.c         **** 		g00_re = g00[u];
 3211              		.loc 2 626 15 discriminator 3
 3212 002e D7F8D430 		ldr	r3, [r7, #212]
 3213 0032 DB00     		lsls	r3, r3, #3
 3214 0034 7A68     		ldr	r2, [r7, #4]
 3215 0036 1344     		add	r3, r3, r2
 3216              		.loc 2 626 10 discriminator 3
 3217 0038 D3E90023 		ldrd	r2, [r3]
 3218 003c C7E93023 		strd	r2, [r7, #192]
 627:fft.c         **** 		g00_im = g00[u + hn];
 3219              		.loc 2 627 18 discriminator 3
 3220 0040 D7F8D420 		ldr	r2, [r7, #212]
 3221 0044 D7F8CC30 		ldr	r3, [r7, #204]
 3222 0048 1344     		add	r3, r3, r2
 3223              		.loc 2 627 15 discriminator 3
 3224 004a DB00     		lsls	r3, r3, #3
 3225 004c 7A68     		ldr	r2, [r7, #4]
 3226 004e 1344     		add	r3, r3, r2
 3227              		.loc 2 627 10 discriminator 3
 3228 0050 D3E90023 		ldrd	r2, [r3]
 3229 0054 C7E92E23 		strd	r2, [r7, #184]
 628:fft.c         **** 		g01_re = g01[u];
 3230              		.loc 2 628 15 discriminator 3
 3231 0058 D7F8D430 		ldr	r3, [r7, #212]
 3232 005c DB00     		lsls	r3, r3, #3
 3233 005e 3A68     		ldr	r2, [r7]
 3234 0060 1344     		add	r3, r3, r2
 3235              		.loc 2 628 10 discriminator 3
 3236 0062 D3E90023 		ldrd	r2, [r3]
 3237 0066 C7E92C23 		strd	r2, [r7, #176]
 629:fft.c         **** 		g01_im = g01[u + hn];
 3238              		.loc 2 629 18 discriminator 3
 3239 006a D7F8D420 		ldr	r2, [r7, #212]
 3240 006e D7F8CC30 		ldr	r3, [r7, #204]
 3241 0072 1344     		add	r3, r3, r2
 3242              		.loc 2 629 15 discriminator 3
 3243 0074 DB00     		lsls	r3, r3, #3
 3244 0076 3A68     		ldr	r2, [r7]
 3245 0078 1344     		add	r3, r3, r2
 3246              		.loc 2 629 10 discriminator 3
 3247 007a D3E90023 		ldrd	r2, [r3]
 3248 007e C7E92A23 		strd	r2, [r7, #168]
 630:fft.c         **** 		g11_re = g11[u];
 3249              		.loc 2 630 15 discriminator 3
 3250 0082 D7F8D430 		ldr	r3, [r7, #212]
 3251 0086 DB00     		lsls	r3, r3, #3
 3252 0088 D7F8E820 		ldr	r2, [r7, #232]
 3253 008c 1344     		add	r3, r3, r2
 3254              		.loc 2 630 10 discriminator 3
 3255 008e D3E90023 		ldrd	r2, [r3]
 3256 0092 C7E92823 		strd	r2, [r7, #160]
 631:fft.c         **** 		g11_im = g11[u + hn];
 3257              		.loc 2 631 18 discriminator 3
 3258 0096 D7F8D420 		ldr	r2, [r7, #212]
 3259 009a D7F8CC30 		ldr	r3, [r7, #204]
 3260 009e 1344     		add	r3, r3, r2
 3261              		.loc 2 631 15 discriminator 3
 3262 00a0 DB00     		lsls	r3, r3, #3
 3263 00a2 D7F8E820 		ldr	r2, [r7, #232]
 3264 00a6 1344     		add	r3, r3, r2
 3265              		.loc 2 631 10 discriminator 3
 3266 00a8 D3E90023 		ldrd	r2, [r3]
 3267 00ac C7E92623 		strd	r2, [r7, #152]
 3268              	.LBB32:
 632:fft.c         **** 		FPC_DIV(mu_re, mu_im, g01_re, g01_im, g00_re, g00_im);
 3269              		.loc 2 632 3 discriminator 3
 3270 00b0 D7E92C23 		ldrd	r2, [r7, #176]
 3271 00b4 C7E92423 		strd	r2, [r7, #144]
 3272 00b8 D7E92A23 		ldrd	r2, [r7, #168]
 3273 00bc C7E92223 		strd	r2, [r7, #136]
 3274 00c0 D7E93023 		ldrd	r2, [r7, #192]
 3275 00c4 C7E92023 		strd	r2, [r7, #128]
 3276 00c8 D7E92E23 		ldrd	r2, [r7, #184]
 3277 00cc C7E91E23 		strd	r2, [r7, #120]
 3278 00d0 D7E92001 		ldrd	r0, [r7, #128]
 3279 00d4 FFF7FEFF 		bl	fpr_sqr
 3280 00d8 0446     		mov	r4, r0
 3281 00da 0D46     		mov	r5, r1
 3282 00dc D7E91E01 		ldrd	r0, [r7, #120]
 3283 00e0 FFF7FEFF 		bl	fpr_sqr
 3284 00e4 0246     		mov	r2, r0
 3285 00e6 0B46     		mov	r3, r1
 3286 00e8 2046     		mov	r0, r4
 3287 00ea 2946     		mov	r1, r5
 3288 00ec FFF7FEFF 		bl	falcon_inner_fpr_add
 3289 00f0 C7E91C01 		strd	r0, [r7, #112]
 3290 00f4 D7E91C01 		ldrd	r0, [r7, #112]
 3291 00f8 FFF7FEFF 		bl	fpr_inv
 3292 00fc C7E91C01 		strd	r0, [r7, #112]
 3293 0100 D7E91C23 		ldrd	r2, [r7, #112]
 3294 0104 D7E92001 		ldrd	r0, [r7, #128]
 3295 0108 FFF7FEFF 		bl	falcon_inner_fpr_mul
 3296 010c C7E92001 		strd	r0, [r7, #128]
 3297 0110 D7E91E01 		ldrd	r0, [r7, #120]
 3298 0114 FFF7FEFF 		bl	fpr_neg
 3299 0118 D7E91C23 		ldrd	r2, [r7, #112]
 3300 011c FFF7FEFF 		bl	falcon_inner_fpr_mul
 3301 0120 C7E91E01 		strd	r0, [r7, #120]
 3302 0124 D7E92023 		ldrd	r2, [r7, #128]
 3303 0128 D7E92401 		ldrd	r0, [r7, #144]
 3304 012c FFF7FEFF 		bl	falcon_inner_fpr_mul
 3305 0130 0446     		mov	r4, r0
 3306 0132 0D46     		mov	r5, r1
 3307 0134 D7E91E23 		ldrd	r2, [r7, #120]
 3308 0138 D7E92201 		ldrd	r0, [r7, #136]
 3309 013c FFF7FEFF 		bl	falcon_inner_fpr_mul
 3310 0140 0246     		mov	r2, r0
 3311 0142 0B46     		mov	r3, r1
 3312 0144 2046     		mov	r0, r4
 3313 0146 2946     		mov	r1, r5
 3314 0148 FFF7FEFF 		bl	fpr_sub
 3315 014c C7E91A01 		strd	r0, [r7, #104]
 3316 0150 D7E91E23 		ldrd	r2, [r7, #120]
 3317 0154 D7E92401 		ldrd	r0, [r7, #144]
 3318 0158 FFF7FEFF 		bl	falcon_inner_fpr_mul
 3319 015c 0446     		mov	r4, r0
 3320 015e 0D46     		mov	r5, r1
 3321 0160 D7E92023 		ldrd	r2, [r7, #128]
 3322 0164 D7E92201 		ldrd	r0, [r7, #136]
 3323 0168 FFF7FEFF 		bl	falcon_inner_fpr_mul
 3324 016c 0246     		mov	r2, r0
 3325 016e 0B46     		mov	r3, r1
 3326 0170 2046     		mov	r0, r4
 3327 0172 2946     		mov	r1, r5
 3328 0174 FFF7FEFF 		bl	falcon_inner_fpr_add
 3329 0178 C7E91801 		strd	r0, [r7, #96]
 3330 017c D7E91A23 		ldrd	r2, [r7, #104]
 3331 0180 C7E91623 		strd	r2, [r7, #88]
 3332 0184 D7E91823 		ldrd	r2, [r7, #96]
 3333 0188 C7E91423 		strd	r2, [r7, #80]
 3334              	.LBE32:
 3335              	.LBB33:
 633:fft.c         **** 		FPC_MUL(g01_re, g01_im, mu_re, mu_im, g01_re, fpr_neg(g01_im));
 3336              		.loc 2 633 3 discriminator 3
 3337 018c D7E91623 		ldrd	r2, [r7, #88]
 3338 0190 C7E91223 		strd	r2, [r7, #72]
 3339 0194 D7E91423 		ldrd	r2, [r7, #80]
 3340 0198 C7E91023 		strd	r2, [r7, #64]
 3341 019c D7E92C23 		ldrd	r2, [r7, #176]
 3342 01a0 C7E90E23 		strd	r2, [r7, #56]
 3343 01a4 D7E92A01 		ldrd	r0, [r7, #168]
 3344 01a8 FFF7FEFF 		bl	fpr_neg
 3345 01ac C7E90C01 		strd	r0, [r7, #48]
 3346 01b0 D7E90E23 		ldrd	r2, [r7, #56]
 3347 01b4 D7E91201 		ldrd	r0, [r7, #72]
 3348 01b8 FFF7FEFF 		bl	falcon_inner_fpr_mul
 3349 01bc 0446     		mov	r4, r0
 3350 01be 0D46     		mov	r5, r1
 3351 01c0 D7E90C23 		ldrd	r2, [r7, #48]
 3352 01c4 D7E91001 		ldrd	r0, [r7, #64]
 3353 01c8 FFF7FEFF 		bl	falcon_inner_fpr_mul
 3354 01cc 0246     		mov	r2, r0
 3355 01ce 0B46     		mov	r3, r1
 3356 01d0 2046     		mov	r0, r4
 3357 01d2 2946     		mov	r1, r5
 3358 01d4 FFF7FEFF 		bl	fpr_sub
 3359 01d8 C7E90A01 		strd	r0, [r7, #40]
 3360 01dc D7E90C23 		ldrd	r2, [r7, #48]
 3361 01e0 D7E91201 		ldrd	r0, [r7, #72]
 3362 01e4 FFF7FEFF 		bl	falcon_inner_fpr_mul
 3363 01e8 0446     		mov	r4, r0
 3364 01ea 0D46     		mov	r5, r1
 3365 01ec D7E90E23 		ldrd	r2, [r7, #56]
 3366 01f0 D7E91001 		ldrd	r0, [r7, #64]
 3367 01f4 FFF7FEFF 		bl	falcon_inner_fpr_mul
 3368 01f8 0246     		mov	r2, r0
 3369 01fa 0B46     		mov	r3, r1
 3370 01fc 2046     		mov	r0, r4
 3371 01fe 2946     		mov	r1, r5
 3372 0200 FFF7FEFF 		bl	falcon_inner_fpr_add
 3373 0204 C7E90801 		strd	r0, [r7, #32]
 3374 0208 D7E90A23 		ldrd	r2, [r7, #40]
 3375 020c C7E92C23 		strd	r2, [r7, #176]
 3376 0210 D7E90823 		ldrd	r2, [r7, #32]
 3377 0214 C7E92A23 		strd	r2, [r7, #168]
 3378              	.LBE33:
 3379              	.LBB34:
 634:fft.c         **** 		FPC_SUB(d11[u], d11[u + hn], g11_re, g11_im, g01_re, g01_im);
 3380              		.loc 2 634 3 discriminator 3
 3381 0218 D7E92C23 		ldrd	r2, [r7, #176]
 3382 021c D7E92801 		ldrd	r0, [r7, #160]
 3383 0220 FFF7FEFF 		bl	fpr_sub
 3384 0224 C7E90601 		strd	r0, [r7, #24]
 3385 0228 D7E92A23 		ldrd	r2, [r7, #168]
 3386 022c D7E92601 		ldrd	r0, [r7, #152]
 3387 0230 FFF7FEFF 		bl	fpr_sub
 3388 0234 C7E90401 		strd	r0, [r7, #16]
 3389 0238 D7F8D430 		ldr	r3, [r7, #212]
 3390 023c DB00     		lsls	r3, r3, #3
 3391 023e FA68     		ldr	r2, [r7, #12]
 3392 0240 D118     		adds	r1, r2, r3
 3393 0242 D7E90623 		ldrd	r2, [r7, #24]
 3394 0246 C1E90023 		strd	r2, [r1]
 3395 024a D7F8D420 		ldr	r2, [r7, #212]
 3396 024e D7F8CC30 		ldr	r3, [r7, #204]
 3397 0252 1344     		add	r3, r3, r2
 3398 0254 DB00     		lsls	r3, r3, #3
 3399 0256 FA68     		ldr	r2, [r7, #12]
 3400 0258 D118     		adds	r1, r2, r3
 3401 025a D7E90423 		ldrd	r2, [r7, #16]
 3402 025e C1E90023 		strd	r2, [r1]
 3403              	.LBE34:
 635:fft.c         **** 		l10[u] = mu_re;
 3404              		.loc 2 635 6 discriminator 3
 3405 0262 D7F8D430 		ldr	r3, [r7, #212]
 3406 0266 DB00     		lsls	r3, r3, #3
 3407 0268 BA68     		ldr	r2, [r7, #8]
 3408 026a D118     		adds	r1, r2, r3
 3409              		.loc 2 635 10 discriminator 3
 3410 026c D7E91623 		ldrd	r2, [r7, #88]
 3411 0270 C1E90023 		strd	r2, [r1]
 636:fft.c         **** 		l10[u + hn] = fpr_neg(mu_im);
 3412              		.loc 2 636 9 discriminator 3
 3413 0274 D7F8D420 		ldr	r2, [r7, #212]
 3414 0278 D7F8CC30 		ldr	r3, [r7, #204]
 3415 027c 1344     		add	r3, r3, r2
 3416              		.loc 2 636 6 discriminator 3
 3417 027e DB00     		lsls	r3, r3, #3
 3418 0280 BA68     		ldr	r2, [r7, #8]
 3419 0282 D418     		adds	r4, r2, r3
 3420              		.loc 2 636 17 discriminator 3
 3421 0284 D7E91401 		ldrd	r0, [r7, #80]
 3422 0288 FFF7FEFF 		bl	fpr_neg
 3423 028c 0246     		mov	r2, r0
 3424 028e 0B46     		mov	r3, r1
 3425              		.loc 2 636 15 discriminator 3
 3426 0290 C4E90023 		strd	r2, [r4]
 3427              	.LBE31:
 622:fft.c         **** 		fpr g00_re, g00_im, g01_re, g01_im, g11_re, g11_im;
 3428              		.loc 2 622 24 discriminator 3
 3429 0294 D7F8D430 		ldr	r3, [r7, #212]
 3430 0298 0133     		adds	r3, r3, #1
 3431 029a C7F8D430 		str	r3, [r7, #212]
 3432              	.L78:
 622:fft.c         **** 		fpr g00_re, g00_im, g01_re, g01_im, g11_re, g11_im;
 3433              		.loc 2 622 2 discriminator 1
 3434 029e D7F8D420 		ldr	r2, [r7, #212]
 3435 02a2 D7F8CC30 		ldr	r3, [r7, #204]
 3436 02a6 9A42     		cmp	r2, r3
 3437 02a8 FFF4C1AE 		bcc	.L79
 637:fft.c         **** 	}
 638:fft.c         **** }
 3438              		.loc 2 638 1
 3439 02ac 00BF     		nop
 3440 02ae 00BF     		nop
 3441 02b0 D837     		adds	r7, r7, #216
 3442              	.LCFI110:
 3443              		.cfi_def_cfa_offset 16
 3444 02b2 BD46     		mov	sp, r7
 3445              	.LCFI111:
 3446              		.cfi_def_cfa_register 13
 3447              		@ sp needed
 3448 02b4 B0BD     		pop	{r4, r5, r7, pc}
 3449              		.cfi_endproc
 3450              	.LFE34:
 3452              		.section	.text.falcon_inner_poly_split_fft,"ax",%progbits
 3453              		.align	1
 3454              		.global	falcon_inner_poly_split_fft
 3455              		.syntax unified
 3456              		.thumb
 3457              		.thumb_func
 3458              		.fpu softvfp
 3460              	falcon_inner_poly_split_fft:
 3461              	.LFB35:
 639:fft.c         **** 
 640:fft.c         **** /* see inner.h */
 641:fft.c         **** void
 642:fft.c         **** Zf(poly_split_fft)(
 643:fft.c         **** 	fpr *restrict f0, fpr *restrict f1,
 644:fft.c         **** 	const fpr *restrict f, unsigned logn)
 645:fft.c         **** {
 3462              		.loc 2 645 1
 3463              		.cfi_startproc
 3464              		@ args = 0, pretend = 0, frame = 160
 3465              		@ frame_needed = 1, uses_anonymous_args = 0
 3466 0000 B0B5     		push	{r4, r5, r7, lr}
 3467              	.LCFI112:
 3468              		.cfi_def_cfa_offset 16
 3469              		.cfi_offset 4, -16
 3470              		.cfi_offset 5, -12
 3471              		.cfi_offset 7, -8
 3472              		.cfi_offset 14, -4
 3473 0002 A8B0     		sub	sp, sp, #160
 3474              	.LCFI113:
 3475              		.cfi_def_cfa_offset 176
 3476 0004 00AF     		add	r7, sp, #0
 3477              	.LCFI114:
 3478              		.cfi_def_cfa_register 7
 3479 0006 F860     		str	r0, [r7, #12]
 3480 0008 B960     		str	r1, [r7, #8]
 3481 000a 7A60     		str	r2, [r7, #4]
 3482 000c 3B60     		str	r3, [r7]
 646:fft.c         **** 	/*
 647:fft.c         **** 	 * The FFT representation we use is in bit-reversed order
 648:fft.c         **** 	 * (element i contains f(w^(rev(i))), where rev() is the
 649:fft.c         **** 	 * bit-reversal function over the ring degree. This changes
 650:fft.c         **** 	 * indexes with regards to the Falcon specification.
 651:fft.c         **** 	 */
 652:fft.c         **** 	size_t n, hn, qn, u;
 653:fft.c         **** 
 654:fft.c         **** 	n = (size_t)1 << logn;
 3483              		.loc 2 654 4
 3484 000e 0122     		movs	r2, #1
 3485 0010 3B68     		ldr	r3, [r7]
 3486 0012 02FA03F3 		lsl	r3, r2, r3
 3487 0016 C7F89830 		str	r3, [r7, #152]
 655:fft.c         **** 	hn = n >> 1;
 3488              		.loc 2 655 5
 3489 001a D7F89830 		ldr	r3, [r7, #152]
 3490 001e 5B08     		lsrs	r3, r3, #1
 3491 0020 C7F89430 		str	r3, [r7, #148]
 656:fft.c         **** 	qn = hn >> 1;
 3492              		.loc 2 656 5
 3493 0024 D7F89430 		ldr	r3, [r7, #148]
 3494 0028 5B08     		lsrs	r3, r3, #1
 3495 002a C7F89030 		str	r3, [r7, #144]
 657:fft.c         **** 
 658:fft.c         **** 	/*
 659:fft.c         **** 	 * We process complex values by pairs. For logn = 1, there is only
 660:fft.c         **** 	 * one complex value (the other one is the implicit conjugate),
 661:fft.c         **** 	 * so we add the two lines below because the loop will be
 662:fft.c         **** 	 * skipped.
 663:fft.c         **** 	 */
 664:fft.c         **** 	f0[0] = f[0];
 3496              		.loc 2 664 11
 3497 002e 7B68     		ldr	r3, [r7, #4]
 3498 0030 D3E90023 		ldrd	r2, [r3]
 3499              		.loc 2 664 8
 3500 0034 F968     		ldr	r1, [r7, #12]
 3501 0036 C1E90023 		strd	r2, [r1]
 665:fft.c         **** 	f1[0] = f[hn];
 3502              		.loc 2 665 11
 3503 003a D7F89430 		ldr	r3, [r7, #148]
 3504 003e DB00     		lsls	r3, r3, #3
 3505 0040 7A68     		ldr	r2, [r7, #4]
 3506 0042 1344     		add	r3, r3, r2
 3507 0044 D3E90023 		ldrd	r2, [r3]
 3508              		.loc 2 665 8
 3509 0048 B968     		ldr	r1, [r7, #8]
 3510 004a C1E90023 		strd	r2, [r1]
 666:fft.c         **** 
 667:fft.c         **** 	for (u = 0; u < qn; u ++) {
 3511              		.loc 2 667 9
 3512 004e 0023     		movs	r3, #0
 3513 0050 C7F89C30 		str	r3, [r7, #156]
 3514              		.loc 2 667 2
 3515 0054 F7E0     		b	.L81
 3516              	.L82:
 3517              	.LBB35:
 668:fft.c         **** 		fpr a_re, a_im, b_re, b_im;
 669:fft.c         **** 		fpr t_re, t_im;
 670:fft.c         **** 
 671:fft.c         **** 		a_re = f[(u << 1) + 0];
 3518              		.loc 2 671 11 discriminator 3
 3519 0056 D7F89C30 		ldr	r3, [r7, #156]
 3520 005a 1B01     		lsls	r3, r3, #4
 3521 005c 7A68     		ldr	r2, [r7, #4]
 3522 005e 1344     		add	r3, r3, r2
 3523              		.loc 2 671 8 discriminator 3
 3524 0060 D3E90023 		ldrd	r2, [r3]
 3525 0064 C7E92223 		strd	r2, [r7, #136]
 672:fft.c         **** 		a_im = f[(u << 1) + 0 + hn];
 3526              		.loc 2 672 21 discriminator 3
 3527 0068 D7F89C30 		ldr	r3, [r7, #156]
 3528 006c 5A00     		lsls	r2, r3, #1
 3529              		.loc 2 672 25 discriminator 3
 3530 006e D7F89430 		ldr	r3, [r7, #148]
 3531 0072 1344     		add	r3, r3, r2
 3532              		.loc 2 672 11 discriminator 3
 3533 0074 DB00     		lsls	r3, r3, #3
 3534 0076 7A68     		ldr	r2, [r7, #4]
 3535 0078 1344     		add	r3, r3, r2
 3536              		.loc 2 672 8 discriminator 3
 3537 007a D3E90023 		ldrd	r2, [r3]
 3538 007e C7E92023 		strd	r2, [r7, #128]
 673:fft.c         **** 		b_re = f[(u << 1) + 1];
 3539              		.loc 2 673 11 discriminator 3
 3540 0082 D7F89C30 		ldr	r3, [r7, #156]
 3541 0086 1B01     		lsls	r3, r3, #4
 3542 0088 0833     		adds	r3, r3, #8
 3543 008a 7A68     		ldr	r2, [r7, #4]
 3544 008c 1344     		add	r3, r3, r2
 3545              		.loc 2 673 8 discriminator 3
 3546 008e D3E90023 		ldrd	r2, [r3]
 3547 0092 C7E91E23 		strd	r2, [r7, #120]
 674:fft.c         **** 		b_im = f[(u << 1) + 1 + hn];
 3548              		.loc 2 674 15 discriminator 3
 3549 0096 D7F89C30 		ldr	r3, [r7, #156]
 3550 009a 5A00     		lsls	r2, r3, #1
 3551              		.loc 2 674 25 discriminator 3
 3552 009c D7F89430 		ldr	r3, [r7, #148]
 3553 00a0 1344     		add	r3, r3, r2
 3554 00a2 0133     		adds	r3, r3, #1
 3555              		.loc 2 674 11 discriminator 3
 3556 00a4 DB00     		lsls	r3, r3, #3
 3557 00a6 7A68     		ldr	r2, [r7, #4]
 3558 00a8 1344     		add	r3, r3, r2
 3559              		.loc 2 674 8 discriminator 3
 3560 00aa D3E90023 		ldrd	r2, [r3]
 3561 00ae C7E91C23 		strd	r2, [r7, #112]
 3562              	.LBB36:
 675:fft.c         **** 
 676:fft.c         **** 		FPC_ADD(t_re, t_im, a_re, a_im, b_re, b_im);
 3563              		.loc 2 676 3 discriminator 3
 3564 00b2 D7E91E23 		ldrd	r2, [r7, #120]
 3565 00b6 D7E92201 		ldrd	r0, [r7, #136]
 3566 00ba FFF7FEFF 		bl	falcon_inner_fpr_add
 3567 00be C7E91A01 		strd	r0, [r7, #104]
 3568 00c2 D7E91C23 		ldrd	r2, [r7, #112]
 3569 00c6 D7E92001 		ldrd	r0, [r7, #128]
 3570 00ca FFF7FEFF 		bl	falcon_inner_fpr_add
 3571 00ce C7E91801 		strd	r0, [r7, #96]
 3572 00d2 D7E91A23 		ldrd	r2, [r7, #104]
 3573 00d6 C7E91623 		strd	r2, [r7, #88]
 3574 00da D7E91823 		ldrd	r2, [r7, #96]
 3575 00de C7E91423 		strd	r2, [r7, #80]
 3576              	.LBE36:
 677:fft.c         **** 		f0[u] = fpr_half(t_re);
 3577              		.loc 2 677 5 discriminator 3
 3578 00e2 D7F89C30 		ldr	r3, [r7, #156]
 3579 00e6 DB00     		lsls	r3, r3, #3
 3580 00e8 FA68     		ldr	r2, [r7, #12]
 3581 00ea D418     		adds	r4, r2, r3
 3582              		.loc 2 677 11 discriminator 3
 3583 00ec D7E91601 		ldrd	r0, [r7, #88]
 3584 00f0 FFF7FEFF 		bl	fpr_half
 3585 00f4 0246     		mov	r2, r0
 3586 00f6 0B46     		mov	r3, r1
 3587              		.loc 2 677 9 discriminator 3
 3588 00f8 C4E90023 		strd	r2, [r4]
 678:fft.c         **** 		f0[u + qn] = fpr_half(t_im);
 3589              		.loc 2 678 8 discriminator 3
 3590 00fc D7F89C20 		ldr	r2, [r7, #156]
 3591 0100 D7F89030 		ldr	r3, [r7, #144]
 3592 0104 1344     		add	r3, r3, r2
 3593              		.loc 2 678 5 discriminator 3
 3594 0106 DB00     		lsls	r3, r3, #3
 3595 0108 FA68     		ldr	r2, [r7, #12]
 3596 010a D418     		adds	r4, r2, r3
 3597              		.loc 2 678 16 discriminator 3
 3598 010c D7E91401 		ldrd	r0, [r7, #80]
 3599 0110 FFF7FEFF 		bl	fpr_half
 3600 0114 0246     		mov	r2, r0
 3601 0116 0B46     		mov	r3, r1
 3602              		.loc 2 678 14 discriminator 3
 3603 0118 C4E90023 		strd	r2, [r4]
 3604              	.LBB37:
 679:fft.c         **** 
 680:fft.c         **** 		FPC_SUB(t_re, t_im, a_re, a_im, b_re, b_im);
 3605              		.loc 2 680 3 discriminator 3
 3606 011c D7E91E23 		ldrd	r2, [r7, #120]
 3607 0120 D7E92201 		ldrd	r0, [r7, #136]
 3608 0124 FFF7FEFF 		bl	fpr_sub
 3609 0128 C7E91201 		strd	r0, [r7, #72]
 3610 012c D7E91C23 		ldrd	r2, [r7, #112]
 3611 0130 D7E92001 		ldrd	r0, [r7, #128]
 3612 0134 FFF7FEFF 		bl	fpr_sub
 3613 0138 C7E91001 		strd	r0, [r7, #64]
 3614 013c D7E91223 		ldrd	r2, [r7, #72]
 3615 0140 C7E91623 		strd	r2, [r7, #88]
 3616 0144 D7E91023 		ldrd	r2, [r7, #64]
 3617 0148 C7E91423 		strd	r2, [r7, #80]
 3618              	.LBE37:
 3619              	.LBB38:
 681:fft.c         **** 		FPC_MUL(t_re, t_im, t_re, t_im,
 3620              		.loc 2 681 3 discriminator 3
 3621 014c D7E91623 		ldrd	r2, [r7, #88]
 3622 0150 C7E90E23 		strd	r2, [r7, #56]
 3623 0154 D7E91423 		ldrd	r2, [r7, #80]
 3624 0158 C7E90C23 		strd	r2, [r7, #48]
 3625 015c D7F89C20 		ldr	r2, [r7, #156]
 3626 0160 D7F89430 		ldr	r3, [r7, #148]
 3627 0164 1344     		add	r3, r3, r2
 3628 0166 5B00     		lsls	r3, r3, #1
 3629 0168 3D4A     		ldr	r2, .L83
 3630 016a DB00     		lsls	r3, r3, #3
 3631 016c 1344     		add	r3, r3, r2
 3632 016e D3E90023 		ldrd	r2, [r3]
 3633 0172 C7E90A23 		strd	r2, [r7, #40]
 3634 0176 D7F89C20 		ldr	r2, [r7, #156]
 3635 017a D7F89430 		ldr	r3, [r7, #148]
 3636 017e 1344     		add	r3, r3, r2
 3637 0180 5B00     		lsls	r3, r3, #1
 3638 0182 0133     		adds	r3, r3, #1
 3639 0184 364A     		ldr	r2, .L83
 3640 0186 DB00     		lsls	r3, r3, #3
 3641 0188 1344     		add	r3, r3, r2
 3642 018a D3E90023 		ldrd	r2, [r3]
 3643 018e 1046     		mov	r0, r2
 3644 0190 1946     		mov	r1, r3
 3645 0192 FFF7FEFF 		bl	fpr_neg
 3646 0196 C7E90801 		strd	r0, [r7, #32]
 3647 019a D7E90A23 		ldrd	r2, [r7, #40]
 3648 019e D7E90E01 		ldrd	r0, [r7, #56]
 3649 01a2 FFF7FEFF 		bl	falcon_inner_fpr_mul
 3650 01a6 0446     		mov	r4, r0
 3651 01a8 0D46     		mov	r5, r1
 3652 01aa D7E90823 		ldrd	r2, [r7, #32]
 3653 01ae D7E90C01 		ldrd	r0, [r7, #48]
 3654 01b2 FFF7FEFF 		bl	falcon_inner_fpr_mul
 3655 01b6 0246     		mov	r2, r0
 3656 01b8 0B46     		mov	r3, r1
 3657 01ba 2046     		mov	r0, r4
 3658 01bc 2946     		mov	r1, r5
 3659 01be FFF7FEFF 		bl	fpr_sub
 3660 01c2 C7E90601 		strd	r0, [r7, #24]
 3661 01c6 D7E90823 		ldrd	r2, [r7, #32]
 3662 01ca D7E90E01 		ldrd	r0, [r7, #56]
 3663 01ce FFF7FEFF 		bl	falcon_inner_fpr_mul
 3664 01d2 0446     		mov	r4, r0
 3665 01d4 0D46     		mov	r5, r1
 3666 01d6 D7E90A23 		ldrd	r2, [r7, #40]
 3667 01da D7E90C01 		ldrd	r0, [r7, #48]
 3668 01de FFF7FEFF 		bl	falcon_inner_fpr_mul
 3669 01e2 0246     		mov	r2, r0
 3670 01e4 0B46     		mov	r3, r1
 3671 01e6 2046     		mov	r0, r4
 3672 01e8 2946     		mov	r1, r5
 3673 01ea FFF7FEFF 		bl	falcon_inner_fpr_add
 3674 01ee C7E90401 		strd	r0, [r7, #16]
 3675 01f2 D7E90623 		ldrd	r2, [r7, #24]
 3676 01f6 C7E91623 		strd	r2, [r7, #88]
 3677 01fa D7E90423 		ldrd	r2, [r7, #16]
 3678 01fe C7E91423 		strd	r2, [r7, #80]
 3679              	.LBE38:
 682:fft.c         **** 			fpr_gm_tab[((u + hn) << 1) + 0],
 683:fft.c         **** 			fpr_neg(fpr_gm_tab[((u + hn) << 1) + 1]));
 684:fft.c         **** 		f1[u] = fpr_half(t_re);
 3680              		.loc 2 684 5 discriminator 3
 3681 0202 D7F89C30 		ldr	r3, [r7, #156]
 3682 0206 DB00     		lsls	r3, r3, #3
 3683 0208 BA68     		ldr	r2, [r7, #8]
 3684 020a D418     		adds	r4, r2, r3
 3685              		.loc 2 684 11 discriminator 3
 3686 020c D7E91601 		ldrd	r0, [r7, #88]
 3687 0210 FFF7FEFF 		bl	fpr_half
 3688 0214 0246     		mov	r2, r0
 3689 0216 0B46     		mov	r3, r1
 3690              		.loc 2 684 9 discriminator 3
 3691 0218 C4E90023 		strd	r2, [r4]
 685:fft.c         **** 		f1[u + qn] = fpr_half(t_im);
 3692              		.loc 2 685 8 discriminator 3
 3693 021c D7F89C20 		ldr	r2, [r7, #156]
 3694 0220 D7F89030 		ldr	r3, [r7, #144]
 3695 0224 1344     		add	r3, r3, r2
 3696              		.loc 2 685 5 discriminator 3
 3697 0226 DB00     		lsls	r3, r3, #3
 3698 0228 BA68     		ldr	r2, [r7, #8]
 3699 022a D418     		adds	r4, r2, r3
 3700              		.loc 2 685 16 discriminator 3
 3701 022c D7E91401 		ldrd	r0, [r7, #80]
 3702 0230 FFF7FEFF 		bl	fpr_half
 3703 0234 0246     		mov	r2, r0
 3704 0236 0B46     		mov	r3, r1
 3705              		.loc 2 685 14 discriminator 3
 3706 0238 C4E90023 		strd	r2, [r4]
 3707              	.LBE35:
 667:fft.c         **** 		fpr a_re, a_im, b_re, b_im;
 3708              		.loc 2 667 24 discriminator 3
 3709 023c D7F89C30 		ldr	r3, [r7, #156]
 3710 0240 0133     		adds	r3, r3, #1
 3711 0242 C7F89C30 		str	r3, [r7, #156]
 3712              	.L81:
 667:fft.c         **** 		fpr a_re, a_im, b_re, b_im;
 3713              		.loc 2 667 2 discriminator 1
 3714 0246 D7F89C20 		ldr	r2, [r7, #156]
 3715 024a D7F89030 		ldr	r3, [r7, #144]
 3716 024e 9A42     		cmp	r2, r3
 3717 0250 FFF401AF 		bcc	.L82
 686:fft.c         **** 	}
 687:fft.c         **** }
 3718              		.loc 2 687 1
 3719 0254 00BF     		nop
 3720 0256 00BF     		nop
 3721 0258 A037     		adds	r7, r7, #160
 3722              	.LCFI115:
 3723              		.cfi_def_cfa_offset 16
 3724 025a BD46     		mov	sp, r7
 3725              	.LCFI116:
 3726              		.cfi_def_cfa_register 13
 3727              		@ sp needed
 3728 025c B0BD     		pop	{r4, r5, r7, pc}
 3729              	.L84:
 3730 025e 00BF     		.align	2
 3731              	.L83:
 3732 0260 00000000 		.word	falcon_inner_fpr_gm_tab
 3733              		.cfi_endproc
 3734              	.LFE35:
 3736              		.section	.text.falcon_inner_poly_merge_fft,"ax",%progbits
 3737              		.align	1
 3738              		.global	falcon_inner_poly_merge_fft
 3739              		.syntax unified
 3740              		.thumb
 3741              		.thumb_func
 3742              		.fpu softvfp
 3744              	falcon_inner_poly_merge_fft:
 3745              	.LFB36:
 688:fft.c         **** 
 689:fft.c         **** /* see inner.h */
 690:fft.c         **** void
 691:fft.c         **** Zf(poly_merge_fft)(
 692:fft.c         **** 	fpr *restrict f,
 693:fft.c         **** 	const fpr *restrict f0, const fpr *restrict f1, unsigned logn)
 694:fft.c         **** {
 3746              		.loc 2 694 1
 3747              		.cfi_startproc
 3748              		@ args = 0, pretend = 0, frame = 160
 3749              		@ frame_needed = 1, uses_anonymous_args = 0
 3750 0000 B0B5     		push	{r4, r5, r7, lr}
 3751              	.LCFI117:
 3752              		.cfi_def_cfa_offset 16
 3753              		.cfi_offset 4, -16
 3754              		.cfi_offset 5, -12
 3755              		.cfi_offset 7, -8
 3756              		.cfi_offset 14, -4
 3757 0002 A8B0     		sub	sp, sp, #160
 3758              	.LCFI118:
 3759              		.cfi_def_cfa_offset 176
 3760 0004 00AF     		add	r7, sp, #0
 3761              	.LCFI119:
 3762              		.cfi_def_cfa_register 7
 3763 0006 F860     		str	r0, [r7, #12]
 3764 0008 B960     		str	r1, [r7, #8]
 3765 000a 7A60     		str	r2, [r7, #4]
 3766 000c 3B60     		str	r3, [r7]
 695:fft.c         **** 	size_t n, hn, qn, u;
 696:fft.c         **** 
 697:fft.c         **** 	n = (size_t)1 << logn;
 3767              		.loc 2 697 4
 3768 000e 0122     		movs	r2, #1
 3769 0010 3B68     		ldr	r3, [r7]
 3770 0012 02FA03F3 		lsl	r3, r2, r3
 3771 0016 C7F89830 		str	r3, [r7, #152]
 698:fft.c         **** 	hn = n >> 1;
 3772              		.loc 2 698 5
 3773 001a D7F89830 		ldr	r3, [r7, #152]
 3774 001e 5B08     		lsrs	r3, r3, #1
 3775 0020 C7F89430 		str	r3, [r7, #148]
 699:fft.c         **** 	qn = hn >> 1;
 3776              		.loc 2 699 5
 3777 0024 D7F89430 		ldr	r3, [r7, #148]
 3778 0028 5B08     		lsrs	r3, r3, #1
 3779 002a C7F89030 		str	r3, [r7, #144]
 700:fft.c         **** 
 701:fft.c         **** 	/*
 702:fft.c         **** 	 * An extra copy to handle the special case logn = 1.
 703:fft.c         **** 	 */
 704:fft.c         **** 	f[0] = f0[0];
 3780              		.loc 2 704 11
 3781 002e BB68     		ldr	r3, [r7, #8]
 3782 0030 D3E90023 		ldrd	r2, [r3]
 3783              		.loc 2 704 7
 3784 0034 F968     		ldr	r1, [r7, #12]
 3785 0036 C1E90023 		strd	r2, [r1]
 705:fft.c         **** 	f[hn] = f1[0];
 3786              		.loc 2 705 3
 3787 003a D7F89430 		ldr	r3, [r7, #148]
 3788 003e DB00     		lsls	r3, r3, #3
 3789 0040 FA68     		ldr	r2, [r7, #12]
 3790 0042 D118     		adds	r1, r2, r3
 3791              		.loc 2 705 12
 3792 0044 7B68     		ldr	r3, [r7, #4]
 3793 0046 D3E90023 		ldrd	r2, [r3]
 3794              		.loc 2 705 8
 3795 004a C1E90023 		strd	r2, [r1]
 706:fft.c         **** 
 707:fft.c         **** 	for (u = 0; u < qn; u ++) {
 3796              		.loc 2 707 9
 3797 004e 0023     		movs	r3, #0
 3798 0050 C7F89C30 		str	r3, [r7, #156]
 3799              		.loc 2 707 2
 3800 0054 DBE0     		b	.L86
 3801              	.L87:
 3802              	.LBB39:
 708:fft.c         **** 		fpr a_re, a_im, b_re, b_im;
 709:fft.c         **** 		fpr t_re, t_im;
 710:fft.c         **** 
 711:fft.c         **** 		a_re = f0[u];
 3803              		.loc 2 711 12 discriminator 3
 3804 0056 D7F89C30 		ldr	r3, [r7, #156]
 3805 005a DB00     		lsls	r3, r3, #3
 3806 005c BA68     		ldr	r2, [r7, #8]
 3807 005e 1344     		add	r3, r3, r2
 3808              		.loc 2 711 8 discriminator 3
 3809 0060 D3E90023 		ldrd	r2, [r3]
 3810 0064 C7E92223 		strd	r2, [r7, #136]
 712:fft.c         **** 		a_im = f0[u + qn];
 3811              		.loc 2 712 15 discriminator 3
 3812 0068 D7F89C20 		ldr	r2, [r7, #156]
 3813 006c D7F89030 		ldr	r3, [r7, #144]
 3814 0070 1344     		add	r3, r3, r2
 3815              		.loc 2 712 12 discriminator 3
 3816 0072 DB00     		lsls	r3, r3, #3
 3817 0074 BA68     		ldr	r2, [r7, #8]
 3818 0076 1344     		add	r3, r3, r2
 3819              		.loc 2 712 8 discriminator 3
 3820 0078 D3E90023 		ldrd	r2, [r3]
 3821 007c C7E92023 		strd	r2, [r7, #128]
 3822              	.LBB40:
 713:fft.c         **** 		FPC_MUL(b_re, b_im, f1[u], f1[u + qn],
 3823              		.loc 2 713 3 discriminator 3
 3824 0080 D7F89C30 		ldr	r3, [r7, #156]
 3825 0084 DB00     		lsls	r3, r3, #3
 3826 0086 7A68     		ldr	r2, [r7, #4]
 3827 0088 1344     		add	r3, r3, r2
 3828 008a D3E90023 		ldrd	r2, [r3]
 3829 008e C7E91E23 		strd	r2, [r7, #120]
 3830 0092 D7F89C20 		ldr	r2, [r7, #156]
 3831 0096 D7F89030 		ldr	r3, [r7, #144]
 3832 009a 1344     		add	r3, r3, r2
 3833 009c DB00     		lsls	r3, r3, #3
 3834 009e 7A68     		ldr	r2, [r7, #4]
 3835 00a0 1344     		add	r3, r3, r2
 3836 00a2 D3E90023 		ldrd	r2, [r3]
 3837 00a6 C7E91C23 		strd	r2, [r7, #112]
 3838 00aa D7F89C20 		ldr	r2, [r7, #156]
 3839 00ae D7F89430 		ldr	r3, [r7, #148]
 3840 00b2 1344     		add	r3, r3, r2
 3841 00b4 5B00     		lsls	r3, r3, #1
 3842 00b6 5C4A     		ldr	r2, .L88
 3843 00b8 DB00     		lsls	r3, r3, #3
 3844 00ba 1344     		add	r3, r3, r2
 3845 00bc D3E90023 		ldrd	r2, [r3]
 3846 00c0 C7E91A23 		strd	r2, [r7, #104]
 3847 00c4 D7F89C20 		ldr	r2, [r7, #156]
 3848 00c8 D7F89430 		ldr	r3, [r7, #148]
 3849 00cc 1344     		add	r3, r3, r2
 3850 00ce 5B00     		lsls	r3, r3, #1
 3851 00d0 0133     		adds	r3, r3, #1
 3852 00d2 554A     		ldr	r2, .L88
 3853 00d4 DB00     		lsls	r3, r3, #3
 3854 00d6 1344     		add	r3, r3, r2
 3855 00d8 D3E90023 		ldrd	r2, [r3]
 3856 00dc C7E91823 		strd	r2, [r7, #96]
 3857 00e0 D7E91A23 		ldrd	r2, [r7, #104]
 3858 00e4 D7E91E01 		ldrd	r0, [r7, #120]
 3859 00e8 FFF7FEFF 		bl	falcon_inner_fpr_mul
 3860 00ec 0446     		mov	r4, r0
 3861 00ee 0D46     		mov	r5, r1
 3862 00f0 D7E91823 		ldrd	r2, [r7, #96]
 3863 00f4 D7E91C01 		ldrd	r0, [r7, #112]
 3864 00f8 FFF7FEFF 		bl	falcon_inner_fpr_mul
 3865 00fc 0246     		mov	r2, r0
 3866 00fe 0B46     		mov	r3, r1
 3867 0100 2046     		mov	r0, r4
 3868 0102 2946     		mov	r1, r5
 3869 0104 FFF7FEFF 		bl	fpr_sub
 3870 0108 C7E91601 		strd	r0, [r7, #88]
 3871 010c D7E91823 		ldrd	r2, [r7, #96]
 3872 0110 D7E91E01 		ldrd	r0, [r7, #120]
 3873 0114 FFF7FEFF 		bl	falcon_inner_fpr_mul
 3874 0118 0446     		mov	r4, r0
 3875 011a 0D46     		mov	r5, r1
 3876 011c D7E91A23 		ldrd	r2, [r7, #104]
 3877 0120 D7E91C01 		ldrd	r0, [r7, #112]
 3878 0124 FFF7FEFF 		bl	falcon_inner_fpr_mul
 3879 0128 0246     		mov	r2, r0
 3880 012a 0B46     		mov	r3, r1
 3881 012c 2046     		mov	r0, r4
 3882 012e 2946     		mov	r1, r5
 3883 0130 FFF7FEFF 		bl	falcon_inner_fpr_add
 3884 0134 C7E91401 		strd	r0, [r7, #80]
 3885 0138 D7E91623 		ldrd	r2, [r7, #88]
 3886 013c C7E91223 		strd	r2, [r7, #72]
 3887 0140 D7E91423 		ldrd	r2, [r7, #80]
 3888 0144 C7E91023 		strd	r2, [r7, #64]
 3889              	.LBE40:
 3890              	.LBB41:
 714:fft.c         **** 			fpr_gm_tab[((u + hn) << 1) + 0],
 715:fft.c         **** 			fpr_gm_tab[((u + hn) << 1) + 1]);
 716:fft.c         **** 		FPC_ADD(t_re, t_im, a_re, a_im, b_re, b_im);
 3891              		.loc 2 716 3 discriminator 3
 3892 0148 D7E91223 		ldrd	r2, [r7, #72]
 3893 014c D7E92201 		ldrd	r0, [r7, #136]
 3894 0150 FFF7FEFF 		bl	falcon_inner_fpr_add
 3895 0154 C7E90E01 		strd	r0, [r7, #56]
 3896 0158 D7E91023 		ldrd	r2, [r7, #64]
 3897 015c D7E92001 		ldrd	r0, [r7, #128]
 3898 0160 FFF7FEFF 		bl	falcon_inner_fpr_add
 3899 0164 C7E90C01 		strd	r0, [r7, #48]
 3900 0168 D7E90E23 		ldrd	r2, [r7, #56]
 3901 016c C7E90A23 		strd	r2, [r7, #40]
 3902 0170 D7E90C23 		ldrd	r2, [r7, #48]
 3903 0174 C7E90823 		strd	r2, [r7, #32]
 3904              	.LBE41:
 717:fft.c         **** 		f[(u << 1) + 0] = t_re;
 3905              		.loc 2 717 4 discriminator 3
 3906 0178 D7F89C30 		ldr	r3, [r7, #156]
 3907 017c 1B01     		lsls	r3, r3, #4
 3908 017e FA68     		ldr	r2, [r7, #12]
 3909 0180 D118     		adds	r1, r2, r3
 3910              		.loc 2 717 19 discriminator 3
 3911 0182 D7E90A23 		ldrd	r2, [r7, #40]
 3912 0186 C1E90023 		strd	r2, [r1]
 718:fft.c         **** 		f[(u << 1) + 0 + hn] = t_im;
 3913              		.loc 2 718 14 discriminator 3
 3914 018a D7F89C30 		ldr	r3, [r7, #156]
 3915 018e 5A00     		lsls	r2, r3, #1
 3916              		.loc 2 718 18 discriminator 3
 3917 0190 D7F89430 		ldr	r3, [r7, #148]
 3918 0194 1344     		add	r3, r3, r2
 3919              		.loc 2 718 4 discriminator 3
 3920 0196 DB00     		lsls	r3, r3, #3
 3921 0198 FA68     		ldr	r2, [r7, #12]
 3922 019a D118     		adds	r1, r2, r3
 3923              		.loc 2 718 24 discriminator 3
 3924 019c D7E90823 		ldrd	r2, [r7, #32]
 3925 01a0 C1E90023 		strd	r2, [r1]
 3926              	.LBB42:
 719:fft.c         **** 		FPC_SUB(t_re, t_im, a_re, a_im, b_re, b_im);
 3927              		.loc 2 719 3 discriminator 3
 3928 01a4 D7E91223 		ldrd	r2, [r7, #72]
 3929 01a8 D7E92201 		ldrd	r0, [r7, #136]
 3930 01ac FFF7FEFF 		bl	fpr_sub
 3931 01b0 C7E90601 		strd	r0, [r7, #24]
 3932 01b4 D7E91023 		ldrd	r2, [r7, #64]
 3933 01b8 D7E92001 		ldrd	r0, [r7, #128]
 3934 01bc FFF7FEFF 		bl	fpr_sub
 3935 01c0 C7E90401 		strd	r0, [r7, #16]
 3936 01c4 D7E90623 		ldrd	r2, [r7, #24]
 3937 01c8 C7E90A23 		strd	r2, [r7, #40]
 3938 01cc D7E90423 		ldrd	r2, [r7, #16]
 3939 01d0 C7E90823 		strd	r2, [r7, #32]
 3940              	.LBE42:
 720:fft.c         **** 		f[(u << 1) + 1] = t_re;
 3941              		.loc 2 720 4 discriminator 3
 3942 01d4 D7F89C30 		ldr	r3, [r7, #156]
 3943 01d8 1B01     		lsls	r3, r3, #4
 3944 01da 0833     		adds	r3, r3, #8
 3945 01dc FA68     		ldr	r2, [r7, #12]
 3946 01de D118     		adds	r1, r2, r3
 3947              		.loc 2 720 19 discriminator 3
 3948 01e0 D7E90A23 		ldrd	r2, [r7, #40]
 3949 01e4 C1E90023 		strd	r2, [r1]
 721:fft.c         **** 		f[(u << 1) + 1 + hn] = t_im;
 3950              		.loc 2 721 8 discriminator 3
 3951 01e8 D7F89C30 		ldr	r3, [r7, #156]
 3952 01ec 5A00     		lsls	r2, r3, #1
 3953              		.loc 2 721 18 discriminator 3
 3954 01ee D7F89430 		ldr	r3, [r7, #148]
 3955 01f2 1344     		add	r3, r3, r2
 3956 01f4 0133     		adds	r3, r3, #1
 3957              		.loc 2 721 4 discriminator 3
 3958 01f6 DB00     		lsls	r3, r3, #3
 3959 01f8 FA68     		ldr	r2, [r7, #12]
 3960 01fa D118     		adds	r1, r2, r3
 3961              		.loc 2 721 24 discriminator 3
 3962 01fc D7E90823 		ldrd	r2, [r7, #32]
 3963 0200 C1E90023 		strd	r2, [r1]
 3964              	.LBE39:
 707:fft.c         **** 		fpr a_re, a_im, b_re, b_im;
 3965              		.loc 2 707 24 discriminator 3
 3966 0204 D7F89C30 		ldr	r3, [r7, #156]
 3967 0208 0133     		adds	r3, r3, #1
 3968 020a C7F89C30 		str	r3, [r7, #156]
 3969              	.L86:
 707:fft.c         **** 		fpr a_re, a_im, b_re, b_im;
 3970              		.loc 2 707 2 discriminator 1
 3971 020e D7F89C20 		ldr	r2, [r7, #156]
 3972 0212 D7F89030 		ldr	r3, [r7, #144]
 3973 0216 9A42     		cmp	r2, r3
 3974 0218 FFF41DAF 		bcc	.L87
 722:fft.c         **** 	}
 723:fft.c         **** }
 3975              		.loc 2 723 1
 3976 021c 00BF     		nop
 3977 021e 00BF     		nop
 3978 0220 A037     		adds	r7, r7, #160
 3979              	.LCFI120:
 3980              		.cfi_def_cfa_offset 16
 3981 0222 BD46     		mov	sp, r7
 3982              	.LCFI121:
 3983              		.cfi_def_cfa_register 13
 3984              		@ sp needed
 3985 0224 B0BD     		pop	{r4, r5, r7, pc}
 3986              	.L89:
 3987 0226 00BF     		.align	2
 3988              	.L88:
 3989 0228 00000000 		.word	falcon_inner_fpr_gm_tab
 3990              		.cfi_endproc
 3991              	.LFE36:
 3993              		.text
 3994              	.Letext0:
 3995              		.file 3 "c:\\users\\user\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\gcc-arm-none-eabi-10-2020
 3996              		.file 4 "c:\\users\\user\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\gcc-arm-none-eabi-10-2020
 3997              		.file 5 "c:\\users\\user\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\gcc-arm-none-eabi-10-2020
DEFINED SYMBOLS
                            *ABS*:00000000 fft.c
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:16     .rodata:00000000 $d
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:19     .rodata:00000000 fpr_q
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:25     .rodata:00000008 fpr_inverse_of_q
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:31     .rodata:00000010 fpr_inv_2sqrsigma0
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:37     .rodata:00000018 fpr_inv_sigma
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:63     .rodata:00000070 fpr_sigma_min
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:89     .rodata:000000c8 fpr_log2
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:95     .rodata:000000d0 fpr_inv_log2
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:101    .rodata:000000d8 fpr_bnorm_max
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:107    .rodata:000000e0 fpr_zero
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:112    .rodata:000000e8 fpr_one
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:118    .rodata:000000f0 fpr_two
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:124    .rodata:000000f8 fpr_onehalf
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:130    .rodata:00000100 fpr_invsqrt2
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:136    .rodata:00000108 fpr_invsqrt8
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:142    .rodata:00000110 fpr_ptwo31
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:148    .rodata:00000118 fpr_ptwo31m1
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:154    .rodata:00000120 fpr_mtwo31m1
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:160    .rodata:00000128 fpr_ptwo63m1
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:166    .rodata:00000130 fpr_mtwo63m1
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:172    .rodata:00000138 fpr_ptwo63
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:176    .text.fpr_sub:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:183    .text.fpr_sub:00000000 fpr_sub
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:231    .text.fpr_neg:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:237    .text.fpr_neg:00000000 fpr_neg
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:281    .text.fpr_half:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:287    .text.fpr_half:00000000 fpr_half
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:371    .text.fpr_sqr:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:377    .text.fpr_sqr:00000000 fpr_sqr
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:416    .text.fpr_inv:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:422    .text.fpr_inv:00000000 fpr_inv
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:461    .text.fpr_inv:00000028 $d
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:466    .text.falcon_inner_FFT:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:473    .text.falcon_inner_FFT:00000000 falcon_inner_FFT
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:773    .text.falcon_inner_FFT:000002a0 $d
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:778    .text.falcon_inner_iFFT:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:785    .text.falcon_inner_iFFT:00000000 falcon_inner_iFFT
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:1133   .text.falcon_inner_iFFT:000002fc $d
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:1139   .text.falcon_inner_poly_add:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:1146   .text.falcon_inner_poly_add:00000000 falcon_inner_poly_add
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:1229   .text.falcon_inner_poly_sub:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:1236   .text.falcon_inner_poly_sub:00000000 falcon_inner_poly_sub
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:1319   .text.falcon_inner_poly_neg:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:1326   .text.falcon_inner_poly_neg:00000000 falcon_inner_poly_neg
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:1402   .text.falcon_inner_poly_adj_fft:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:1409   .text.falcon_inner_poly_adj_fft:00000000 falcon_inner_poly_adj_fft
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:1486   .text.falcon_inner_poly_mul_fft:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:1493   .text.falcon_inner_poly_mul_fft:00000000 falcon_inner_poly_mul_fft
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:1648   .text.falcon_inner_poly_muladj_fft:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:1655   .text.falcon_inner_poly_muladj_fft:00000000 falcon_inner_poly_muladj_fft
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:1813   .text.falcon_inner_poly_mulselfadj_fft:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:1820   .text.falcon_inner_poly_mulselfadj_fft:00000000 falcon_inner_poly_mulselfadj_fft
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:1937   .text.falcon_inner_poly_mulconst:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:1944   .text.falcon_inner_poly_mulconst:00000000 falcon_inner_poly_mulconst
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:2019   .text.falcon_inner_poly_div_fft:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:2026   .text.falcon_inner_poly_div_fft:00000000 falcon_inner_poly_div_fft
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:2205   .text.falcon_inner_poly_invnorm2_fft:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:2212   .text.falcon_inner_poly_invnorm2_fft:00000000 falcon_inner_poly_invnorm2_fft
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:2362   .text.falcon_inner_poly_add_muladj_fft:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:2369   .text.falcon_inner_poly_add_muladj_fft:00000000 falcon_inner_poly_add_muladj_fft
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:2627   .text.falcon_inner_poly_mul_autoadj_fft:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:2634   .text.falcon_inner_poly_mul_autoadj_fft:00000000 falcon_inner_poly_mul_autoadj_fft
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:2752   .text.falcon_inner_poly_div_autoadj_fft:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:2759   .text.falcon_inner_poly_div_autoadj_fft:00000000 falcon_inner_poly_div_autoadj_fft
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:2877   .text.falcon_inner_poly_LDL_fft:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:2884   .text.falcon_inner_poly_LDL_fft:00000000 falcon_inner_poly_LDL_fft
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:3165   .text.falcon_inner_poly_LDLmv_fft:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:3172   .text.falcon_inner_poly_LDLmv_fft:00000000 falcon_inner_poly_LDLmv_fft
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:3453   .text.falcon_inner_poly_split_fft:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:3460   .text.falcon_inner_poly_split_fft:00000000 falcon_inner_poly_split_fft
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:3732   .text.falcon_inner_poly_split_fft:00000260 $d
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:3737   .text.falcon_inner_poly_merge_fft:00000000 $t
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:3744   .text.falcon_inner_poly_merge_fft:00000000 falcon_inner_poly_merge_fft
C:\Users\user\AppData\Local\Temp\cc95Yi7n.s:3989   .text.falcon_inner_poly_merge_fft:00000228 $d

UNDEFINED SYMBOLS
falcon_inner_fpr_add
falcon_inner_fpr_mul
falcon_inner_fpr_div
falcon_inner_fpr_gm_tab
falcon_inner_fpr_p2_tab
