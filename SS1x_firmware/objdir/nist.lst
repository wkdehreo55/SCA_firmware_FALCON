   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"nist.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.rodata
  16              		.align	3
  19              	fpr_q:
  20 0000 00000000 		.word	0
  21 0004 8000C840 		.word	1086849152
  22              		.align	3
  25              	fpr_inverse_of_q:
  26 0008 82A79790 		.word	-1869109374
  27 000c E354153F 		.word	1058362595
  28              		.align	3
  31              	fpr_inv_2sqrsigma0:
  32 0010 C2BB83C1 		.word	-1048331326
  33 0014 8B4FC33F 		.word	1069764491
  34              		.align	3
  37              	fpr_inv_sigma:
  38 0018 00000000 		.word	0
  39 001c 00000000 		.word	0
  40 0020 9A16247E 		.word	2116294298
  41 0024 EB487C3F 		.word	1065109739
  42 0028 D9AE8C54 		.word	1418505945
  43 002c 0AE57B3F 		.word	1065084170
  44 0030 2C769EE0 		.word	-526485972
  45 0034 2E857B3F 		.word	1065059630
  46 0038 36DACAD3 		.word	-741680586
  47 003c 5EFC7A3F 		.word	1065024606
  48 0040 EDB37609 		.word	158774253
  49 0044 3B7B7A3F 		.word	1064991547
  50 0048 989CCA82 		.word	-2100650856
  51 004c 12017A3F 		.word	1064960274
  52 0050 36275FCE 		.word	-832624842
  53 0054 498D793F 		.word	1064930633
  54 0058 EED96EC5 		.word	-982590994
  55 005c 571F793F 		.word	1064902487
  56 0060 CAC764DE 		.word	-563820598
  57 0064 C2B6783F 		.word	1064875714
  58 0068 E31A31F6 		.word	-164554013
  59 006c 1E53783F 		.word	1064850206
  60              		.align	3
  63              	fpr_sigma_min:
  64 0070 00000000 		.word	0
  65 0074 00000000 		.word	0
  66 0078 8B564406 		.word	105141899
  67 007c 38DDF13F 		.word	1072815416
  68 0080 2686ADDC 		.word	-592607706
  69 0084 2E1DF23F 		.word	1072831790
  70 0088 7A7CAAE1 		.word	-508920710
  71 008c 465CF23F 		.word	1072847942
  72 0090 25FB4A57 		.word	1464531749
  73 0094 5CB9F23F 		.word	1072871772
  74 0098 B622FEC7 		.word	-939646282
  75 009c AB14F33F 		.word	1072895147
  76 00a0 C3D77534 		.word	880138179
  77 00a4 4E6EF33F 		.word	1072918094
  78 00a8 24C2A166 		.word	1721877028
  79 00ac 5AC6F33F 		.word	1072940634
  80 00b0 A0B38C35 		.word	898413472
  81 00b4 E51CF43F 		.word	1072962789
  82 00b8 757A1FBF 		.word	-1088456075
  83 00bc 0172F43F 		.word	1072984577
  84 00c0 64C79099 		.word	-1718565020
  85 00c4 C1C5F43F 		.word	1073006017
  86              		.align	3
  89              	fpr_log2:
  90 00c8 EF39FAFE 		.word	-17155601
  91 00cc 422EE63F 		.word	1072049730
  92              		.align	3
  95              	fpr_inv_log2:
  96 00d0 FE822B65 		.word	1697350398
  97 00d4 4715F73F 		.word	1073157447
  98              		.align	3
 101              	fpr_bnorm_max:
 102 00d8 ACADD85F 		.word	1608035756
 103 00dc 9A6DD040 		.word	1087401370
 104              		.align	3
 107              	fpr_zero:
 108 00e0 00000000 		.space	8
 108      00000000 
 109              		.align	3
 112              	fpr_one:
 113 00e8 00000000 		.word	0
 114 00ec 0000F03F 		.word	1072693248
 115              		.align	3
 118              	fpr_two:
 119 00f0 00000000 		.word	0
 120 00f4 00000040 		.word	1073741824
 121              		.align	3
 124              	fpr_onehalf:
 125 00f8 00000000 		.word	0
 126 00fc 0000E03F 		.word	1071644672
 127              		.align	3
 130              	fpr_invsqrt2:
 131 0100 CD3B7F66 		.word	1719614413
 132 0104 9EA0E63F 		.word	1072079006
 133              		.align	3
 136              	fpr_invsqrt8:
 137 0108 CD3B7F66 		.word	1719614413
 138 010c 9EA0D63F 		.word	1071030430
 139              		.align	3
 142              	fpr_ptwo31:
 143 0110 00000000 		.word	0
 144 0114 0000E041 		.word	1105199104
 145              		.align	3
 148              	fpr_ptwo31m1:
 149 0118 0000C0FF 		.word	-4194304
 150 011c FFFFDF41 		.word	1105199103
 151              		.align	3
 154              	fpr_mtwo31m1:
 155 0120 0000C0FF 		.word	-4194304
 156 0124 FFFFDFC1 		.word	-1042284545
 157              		.align	3
 160              	fpr_ptwo63m1:
 161 0128 00000000 		.word	0
 162 012c 0000E043 		.word	1138753536
 163              		.align	3
 166              	fpr_mtwo63m1:
 167 0130 00000000 		.word	0
 168 0134 0000E0C3 		.word	-1008730112
 169              		.align	3
 172              	fpr_ptwo63:
 173 0138 00000000 		.word	0
 174 013c 0000E043 		.word	1138753536
 175              		.section	.text.crypto_sign_keypair,"ax",%progbits
 176              		.align	1
 177              		.global	crypto_sign_keypair
 178              		.arch armv7e-m
 179              		.syntax unified
 180              		.thumb
 181              		.thumb_func
 182              		.fpu softvfp
 184              	crypto_sign_keypair:
 185              	.LFB21:
 186              		.file 1 "nist.c"
   1:nist.c        **** /*
   2:nist.c        ****  * Wrapper for implementing the NIST API for the PQC standardization
   3:nist.c        ****  * process.
   4:nist.c        ****  */
   5:nist.c        **** 
   6:nist.c        **** #include <stddef.h>
   7:nist.c        **** #include <string.h>
   8:nist.c        **** #include <stdio.h>
   9:nist.c        **** 
  10:nist.c        **** #include "api.h"
  11:nist.c        **** #include "inner.h"
  12:nist.c        **** 
  13:nist.c        **** #define NONCELEN   40
  14:nist.c        **** 
  15:nist.c        **** /*
  16:nist.c        ****  * If stack usage is an issue, define TEMPALLOC to static in order to
  17:nist.c        ****  * allocate temporaries in the data section instead of the stack. This
  18:nist.c        ****  * would make the crypto_sign_keypair(), crypto_sign(), and
  19:nist.c        ****  * crypto_sign_open() functions not reentrant and not thread-safe, so
  20:nist.c        ****  * this should be done only for testing purposes.
  21:nist.c        ****  */
  22:nist.c        **** #define TEMPALLOC
  23:nist.c        **** 
  24:nist.c        **** void randombytes_init(unsigned char *entropy_input,
  25:nist.c        **** 	unsigned char *personalization_string,
  26:nist.c        **** 	int security_strength);
  27:nist.c        **** int randombytes(unsigned char *x, unsigned long long xlen);
  28:nist.c        **** 
  29:nist.c        **** int
  30:nist.c        **** crypto_sign_keypair(unsigned char *pk, unsigned char *sk)
  31:nist.c        **** {
 187              		.loc 1 31 1
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 17168
 190              		@ frame_needed = 1, uses_anonymous_args = 0
 191 0000 90B5     		push	{r4, r7, lr}
 192              	.LCFI0:
 193              		.cfi_def_cfa_offset 12
 194              		.cfi_offset 4, -12
 195              		.cfi_offset 7, -8
 196              		.cfi_offset 14, -4
 197 0002 ADF5864D 		sub	sp, sp, #17152
 198              	.LCFI1:
 199              		.cfi_def_cfa_offset 17164
 200 0006 89B0     		sub	sp, sp, #36
 201              	.LCFI2:
 202              		.cfi_def_cfa_offset 17200
 203 0008 04AF     		add	r7, sp, #16
 204              	.LCFI3:
 205              		.cfi_def_cfa 7, 17184
 206 000a 07F54473 		add	r3, r7, #784
 207 000e A3F54373 		sub	r3, r3, #780
 208 0012 1860     		str	r0, [r3]
 209 0014 07F54473 		add	r3, r7, #784
 210 0018 A3F54473 		sub	r3, r3, #784
 211 001c 1960     		str	r1, [r3]
  32:nist.c        **** 	TEMPALLOC union {
  33:nist.c        **** 		uint8_t b[FALCON_KEYGEN_TEMP_9];
  34:nist.c        **** 		uint64_t dummy_u64;
  35:nist.c        **** 		fpr dummy_fpr;
  36:nist.c        **** 	} tmp;
  37:nist.c        **** 	TEMPALLOC int8_t f[512], g[512], F[512];
  38:nist.c        **** 	TEMPALLOC uint16_t h[512];
  39:nist.c        **** 	TEMPALLOC unsigned char seed[48];
  40:nist.c        **** 
  41:nist.c        **** 	// typedef struct {
  42:nist.c        **** 	// union {
  43:nist.c        **** 	// 	uint64_t A[25];
  44:nist.c        **** 	// 	uint8_t dbuf[200];
  45:nist.c        **** 	// } st;
  46:nist.c        **** 	// uint64_t dptr;
  47:nist.c        **** 	// } inner_shake256_context;
  48:nist.c        **** 	TEMPALLOC inner_shake256_context rng;
  49:nist.c        **** 	size_t u, v;
  50:nist.c        **** 
  51:nist.c        **** 
  52:nist.c        **** 	/*
  53:nist.c        **** 	 * Generate key pair.
  54:nist.c        **** 	 */
  55:nist.c        **** 	randombytes(seed, sizeof seed);
 212              		.loc 1 55 2
 213 001e 07F58871 		add	r1, r7, #272
 214 0022 3839     		subs	r1, r1, #56
 215 0024 4FF03002 		mov	r2, #48
 216 0028 4FF00003 		mov	r3, #0
 217 002c 0846     		mov	r0, r1
 218 002e FFF7FEFF 		bl	randombytes
  56:nist.c        **** 	// rng에 있는 A의 값과 dptr의 값을 0으로 초기화 시켜준다.
  57:nist.c        **** 	inner_shake256_init(&rng);
 219              		.loc 1 57 2
 220 0032 07F11003 		add	r3, r7, #16
 221 0036 083B     		subs	r3, r3, #8
 222 0038 1846     		mov	r0, r3
 223 003a FFF7FEFF 		bl	falcon_inner_i_shake256_init
  58:nist.c        **** 	inner_shake256_inject(&rng, seed, sizeof seed);
 224              		.loc 1 58 2
 225 003e 07F58871 		add	r1, r7, #272
 226 0042 3839     		subs	r1, r1, #56
 227 0044 07F11003 		add	r3, r7, #16
 228 0048 083B     		subs	r3, r3, #8
 229 004a 3022     		movs	r2, #48
 230 004c 1846     		mov	r0, r3
 231 004e FFF7FEFF 		bl	falcon_inner_i_shake256_inject
  59:nist.c        **** 	inner_shake256_flip(&rng);
 232              		.loc 1 59 2
 233 0052 07F11003 		add	r3, r7, #16
 234 0056 083B     		subs	r3, r3, #8
 235 0058 1846     		mov	r0, r3
 236 005a FFF7FEFF 		bl	falcon_inner_i_shake256_flip
  60:nist.c        **** 	// 아직도 rng의 쓰임은 잘 모르겠지만 많이 쓰이는듯?
  61:nist.c        **** 
  62:nist.c        **** 	// 밑에서 NULL 부분이 대문자 G부분이다.
  63:nist.c        **** 	// 
  64:nist.c        **** 	Zf(keygen)(&rng, f, g, F, NULL, h, 9, tmp.b);
 237              		.loc 1 64 2
 238 005e 07F5A264 		add	r4, r7, #1296
 239 0062 083C     		subs	r4, r4, #8
 240 0064 07F5E262 		add	r2, r7, #1808
 241 0068 083A     		subs	r2, r2, #8
 242 006a 07F51161 		add	r1, r7, #2320
 243 006e 0839     		subs	r1, r1, #8
 244 0070 07F11000 		add	r0, r7, #16
 245 0074 0838     		subs	r0, r0, #8
 246 0076 07F53163 		add	r3, r7, #2832
 247 007a 083B     		subs	r3, r3, #8
 248 007c 0393     		str	r3, [sp, #12]
 249 007e 0923     		movs	r3, #9
 250 0080 0293     		str	r3, [sp, #8]
 251 0082 07F58873 		add	r3, r7, #272
 252 0086 083B     		subs	r3, r3, #8
 253 0088 0193     		str	r3, [sp, #4]
 254 008a 0023     		movs	r3, #0
 255 008c 0093     		str	r3, [sp]
 256 008e 2346     		mov	r3, r4
 257 0090 FFF7FEFF 		bl	falcon_inner_keygen
  65:nist.c        **** 
  66:nist.c        **** 	/*
  67:nist.c        **** 	 * Encode private key.
  68:nist.c        **** 	 */
  69:nist.c        **** 	sk[0] = 0x50 + 9;
 258              		.loc 1 69 8
 259 0094 07F54473 		add	r3, r7, #784
 260 0098 A3F54473 		sub	r3, r3, #784
 261 009c 1B68     		ldr	r3, [r3]
 262 009e 5922     		movs	r2, #89
 263 00a0 1A70     		strb	r2, [r3]
  70:nist.c        **** 	u = 1;
 264              		.loc 1 70 4
 265 00a2 0123     		movs	r3, #1
 266 00a4 07F58642 		add	r2, r7, #17152
 267 00a8 02F10C02 		add	r2, r2, #12
 268 00ac 1360     		str	r3, [r2]
  71:nist.c        **** 	v = Zf(trim_i8_encode)(sk + u, CRYPTO_SECRETKEYBYTES - u,
 269              		.loc 1 71 28
 270 00ae 07F54473 		add	r3, r7, #784
 271 00b2 A3F54473 		sub	r3, r3, #784
 272 00b6 1A68     		ldr	r2, [r3]
 273 00b8 07F58643 		add	r3, r7, #17152
 274 00bc 03F10C03 		add	r3, r3, #12
 275 00c0 1B68     		ldr	r3, [r3]
 276 00c2 D018     		adds	r0, r2, r3
 277              		.loc 1 71 6
 278 00c4 07F58643 		add	r3, r7, #17152
 279 00c8 03F10C03 		add	r3, r3, #12
 280 00cc 1B68     		ldr	r3, [r3]
 281 00ce C3F5A061 		rsb	r1, r3, #1280
 282 00d2 0131     		adds	r1, r1, #1
  72:nist.c        **** 		f, 9, Zf(max_fg_bits)[9]);
 283              		.loc 1 72 24
 284 00d4 6A4B     		ldr	r3, .L9
 285 00d6 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
  71:nist.c        **** 	v = Zf(trim_i8_encode)(sk + u, CRYPTO_SECRETKEYBYTES - u,
 286              		.loc 1 71 6
 287 00d8 07F51162 		add	r2, r7, #2320
 288 00dc 083A     		subs	r2, r2, #8
 289 00de 0093     		str	r3, [sp]
 290 00e0 0923     		movs	r3, #9
 291 00e2 FFF7FEFF 		bl	falcon_inner_trim_i8_encode
 292 00e6 07F58643 		add	r3, r7, #17152
 293 00ea 03F10803 		add	r3, r3, #8
 294 00ee 1860     		str	r0, [r3]
  73:nist.c        **** 	if (v == 0) {
 295              		.loc 1 73 5
 296 00f0 07F58643 		add	r3, r7, #17152
 297 00f4 03F10803 		add	r3, r3, #8
 298 00f8 1B68     		ldr	r3, [r3]
 299 00fa 002B     		cmp	r3, #0
 300 00fc 02D1     		bne	.L2
  74:nist.c        **** 		return -1;
 301              		.loc 1 74 10
 302 00fe 4FF0FF33 		mov	r3, #-1
 303 0102 B7E0     		b	.L8
 304              	.L2:
  75:nist.c        **** 	}
  76:nist.c        **** 	u += v;
 305              		.loc 1 76 4
 306 0104 07F58643 		add	r3, r7, #17152
 307 0108 03F10C03 		add	r3, r3, #12
 308 010c 1A68     		ldr	r2, [r3]
 309 010e 07F58643 		add	r3, r7, #17152
 310 0112 03F10803 		add	r3, r3, #8
 311 0116 1B68     		ldr	r3, [r3]
 312 0118 1344     		add	r3, r3, r2
 313 011a 07F58642 		add	r2, r7, #17152
 314 011e 02F10C02 		add	r2, r2, #12
 315 0122 1360     		str	r3, [r2]
  77:nist.c        **** 
  78:nist.c        **** 	v = Zf(trim_i8_encode)(sk + u, CRYPTO_SECRETKEYBYTES - u,
 316              		.loc 1 78 28
 317 0124 07F54473 		add	r3, r7, #784
 318 0128 A3F54473 		sub	r3, r3, #784
 319 012c 1A68     		ldr	r2, [r3]
 320 012e 07F58643 		add	r3, r7, #17152
 321 0132 03F10C03 		add	r3, r3, #12
 322 0136 1B68     		ldr	r3, [r3]
 323 0138 D018     		adds	r0, r2, r3
 324              		.loc 1 78 6
 325 013a 07F58643 		add	r3, r7, #17152
 326 013e 03F10C03 		add	r3, r3, #12
 327 0142 1B68     		ldr	r3, [r3]
 328 0144 C3F5A061 		rsb	r1, r3, #1280
 329 0148 0131     		adds	r1, r1, #1
  79:nist.c        **** 		g, 9, Zf(max_fg_bits)[9]);
 330              		.loc 1 79 24
 331 014a 4D4B     		ldr	r3, .L9
 332 014c 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
  78:nist.c        **** 		g, 9, Zf(max_fg_bits)[9]);
 333              		.loc 1 78 6
 334 014e 07F5E262 		add	r2, r7, #1808
 335 0152 083A     		subs	r2, r2, #8
 336 0154 0093     		str	r3, [sp]
 337 0156 0923     		movs	r3, #9
 338 0158 FFF7FEFF 		bl	falcon_inner_trim_i8_encode
 339 015c 07F58643 		add	r3, r7, #17152
 340 0160 03F10803 		add	r3, r3, #8
 341 0164 1860     		str	r0, [r3]
  80:nist.c        **** 	if (v == 0) {
 342              		.loc 1 80 5
 343 0166 07F58643 		add	r3, r7, #17152
 344 016a 03F10803 		add	r3, r3, #8
 345 016e 1B68     		ldr	r3, [r3]
 346 0170 002B     		cmp	r3, #0
 347 0172 02D1     		bne	.L4
  81:nist.c        **** 		return -1;
 348              		.loc 1 81 10
 349 0174 4FF0FF33 		mov	r3, #-1
 350 0178 7CE0     		b	.L8
 351              	.L4:
  82:nist.c        **** 	}
  83:nist.c        **** 	u += v;
 352              		.loc 1 83 4
 353 017a 07F58643 		add	r3, r7, #17152
 354 017e 03F10C03 		add	r3, r3, #12
 355 0182 1A68     		ldr	r2, [r3]
 356 0184 07F58643 		add	r3, r7, #17152
 357 0188 03F10803 		add	r3, r3, #8
 358 018c 1B68     		ldr	r3, [r3]
 359 018e 1344     		add	r3, r3, r2
 360 0190 07F58642 		add	r2, r7, #17152
 361 0194 02F10C02 		add	r2, r2, #12
 362 0198 1360     		str	r3, [r2]
  84:nist.c        **** 
  85:nist.c        **** 	v = Zf(trim_i8_encode)(sk + u, CRYPTO_SECRETKEYBYTES - u,
 363              		.loc 1 85 28
 364 019a 07F54473 		add	r3, r7, #784
 365 019e A3F54473 		sub	r3, r3, #784
 366 01a2 1A68     		ldr	r2, [r3]
 367 01a4 07F58643 		add	r3, r7, #17152
 368 01a8 03F10C03 		add	r3, r3, #12
 369 01ac 1B68     		ldr	r3, [r3]
 370 01ae D018     		adds	r0, r2, r3
 371              		.loc 1 85 6
 372 01b0 07F58643 		add	r3, r7, #17152
 373 01b4 03F10C03 		add	r3, r3, #12
 374 01b8 1B68     		ldr	r3, [r3]
 375 01ba C3F5A061 		rsb	r1, r3, #1280
 376 01be 0131     		adds	r1, r1, #1
  86:nist.c        **** 		F, 9, Zf(max_FG_bits)[9]);
 377              		.loc 1 86 24
 378 01c0 304B     		ldr	r3, .L9+4
 379 01c2 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
  85:nist.c        **** 		F, 9, Zf(max_FG_bits)[9]);
 380              		.loc 1 85 6
 381 01c4 07F5A262 		add	r2, r7, #1296
 382 01c8 083A     		subs	r2, r2, #8
 383 01ca 0093     		str	r3, [sp]
 384 01cc 0923     		movs	r3, #9
 385 01ce FFF7FEFF 		bl	falcon_inner_trim_i8_encode
 386 01d2 07F58643 		add	r3, r7, #17152
 387 01d6 03F10803 		add	r3, r3, #8
 388 01da 1860     		str	r0, [r3]
  87:nist.c        **** 	if (v == 0) {
 389              		.loc 1 87 5
 390 01dc 07F58643 		add	r3, r7, #17152
 391 01e0 03F10803 		add	r3, r3, #8
 392 01e4 1B68     		ldr	r3, [r3]
 393 01e6 002B     		cmp	r3, #0
 394 01e8 02D1     		bne	.L5
  88:nist.c        **** 		return -1;
 395              		.loc 1 88 10
 396 01ea 4FF0FF33 		mov	r3, #-1
 397 01ee 41E0     		b	.L8
 398              	.L5:
  89:nist.c        **** 	}
  90:nist.c        **** 
  91:nist.c        **** 	u += v;
 399              		.loc 1 91 4
 400 01f0 07F58643 		add	r3, r7, #17152
 401 01f4 03F10C03 		add	r3, r3, #12
 402 01f8 1A68     		ldr	r2, [r3]
 403 01fa 07F58643 		add	r3, r7, #17152
 404 01fe 03F10803 		add	r3, r3, #8
 405 0202 1B68     		ldr	r3, [r3]
 406 0204 1344     		add	r3, r3, r2
 407 0206 07F58642 		add	r2, r7, #17152
 408 020a 02F10C02 		add	r2, r2, #12
 409 020e 1360     		str	r3, [r2]
  92:nist.c        **** 	if (u != CRYPTO_SECRETKEYBYTES) {
 410              		.loc 1 92 5
 411 0210 07F58643 		add	r3, r7, #17152
 412 0214 03F10C03 		add	r3, r3, #12
 413 0218 1B68     		ldr	r3, [r3]
 414 021a 40F20152 		movw	r2, #1281
 415 021e 9342     		cmp	r3, r2
 416 0220 02D0     		beq	.L6
  93:nist.c        **** 		return -1;
 417              		.loc 1 93 10
 418 0222 4FF0FF33 		mov	r3, #-1
 419 0226 25E0     		b	.L8
 420              	.L6:
  94:nist.c        **** 	}
  95:nist.c        **** 
  96:nist.c        **** 	/*
  97:nist.c        **** 	 * Encode public key.
  98:nist.c        **** 	 */
  99:nist.c        **** 	pk[0] = 0x00 + 9;
 421              		.loc 1 99 8
 422 0228 07F54473 		add	r3, r7, #784
 423 022c A3F54373 		sub	r3, r3, #780
 424 0230 1B68     		ldr	r3, [r3]
 425 0232 0922     		movs	r2, #9
 426 0234 1A70     		strb	r2, [r3]
 100:nist.c        **** 	v = Zf(modq_encode)(pk + 1, CRYPTO_PUBLICKEYBYTES - 1, h, 9);
 427              		.loc 1 100 25
 428 0236 07F54473 		add	r3, r7, #784
 429 023a A3F54373 		sub	r3, r3, #780
 430 023e 1B68     		ldr	r3, [r3]
 431 0240 581C     		adds	r0, r3, #1
 432              		.loc 1 100 6
 433 0242 07F58872 		add	r2, r7, #272
 434 0246 083A     		subs	r2, r2, #8
 435 0248 0923     		movs	r3, #9
 436 024a 4FF46071 		mov	r1, #896
 437 024e FFF7FEFF 		bl	falcon_inner_modq_encode
 438 0252 07F58643 		add	r3, r7, #17152
 439 0256 03F10803 		add	r3, r3, #8
 440 025a 1860     		str	r0, [r3]
 101:nist.c        **** 	if (v != CRYPTO_PUBLICKEYBYTES - 1) {
 441              		.loc 1 101 5
 442 025c 07F58643 		add	r3, r7, #17152
 443 0260 03F10803 		add	r3, r3, #8
 444 0264 1B68     		ldr	r3, [r3]
 445 0266 B3F5607F 		cmp	r3, #896
 446 026a 02D0     		beq	.L7
 102:nist.c        **** 		return -1;
 447              		.loc 1 102 10
 448 026c 4FF0FF33 		mov	r3, #-1
 449 0270 00E0     		b	.L8
 450              	.L7:
 103:nist.c        **** 	}
 104:nist.c        **** 	return 0;
 451              		.loc 1 104 9
 452 0272 0023     		movs	r3, #0
 453              	.L8:
 105:nist.c        **** }
 454              		.loc 1 105 1 discriminator 1
 455 0274 1846     		mov	r0, r3
 456 0276 07F58647 		add	r7, r7, #17152
 457 027a 1437     		adds	r7, r7, #20
 458              	.LCFI4:
 459              		.cfi_def_cfa_offset 12
 460 027c BD46     		mov	sp, r7
 461              	.LCFI5:
 462              		.cfi_def_cfa_register 13
 463              		@ sp needed
 464 027e 90BD     		pop	{r4, r7, pc}
 465              	.L10:
 466              		.align	2
 467              	.L9:
 468 0280 00000000 		.word	falcon_inner_max_fg_bits
 469 0284 00000000 		.word	falcon_inner_max_FG_bits
 470              		.cfi_endproc
 471              	.LFE21:
 473              		.section	.rodata
 474              		.align	2
 475              	.LC0:
 476 0140 01040402 		.ascii	"\001\004\004\002\374\374\376\376\006\376\000\374\005"
 476      FCFCFEFE 
 476      06FE00FC 
 476      05
 477 014d 040402FD 		.ascii	"\004\004\002\375\376\375\365\376\376\376\003\001\003"
 477      FEFDF5FE 
 477      FEFE0301 
 477      03
 478 015a FDFCFF02 		.ascii	"\375\374\377\002\003\002\002\376\373\000\001\375\370"
 478      030202FE 
 478      FB0001FD 
 478      F8
 479 0167 FF0101FE 		.ascii	"\377\001\001\376\377\002\377\375\000\004\004\004\003"
 479      FF02FFFD 
 479      00040404 
 479      03
 480 0174 03040004 		.ascii	"\003\004\000\004\003\372\371\376\004\003\375\376\004"
 480      03FAF9FE 
 480      0403FDFE 
 480      04
 481 0181 000205FF 		.ascii	"\000\002\005\377\000\004\375\005\001\003\010\003\002"
 481      0004FD05 
 481      01030803 
 481      02
 482 018e FC000201 		.ascii	"\374\000\002\001\001\006\007\002\375\010\002\376\372"
 482      01060702 
 482      FD0802FE 
 482      FA
 483 019b 0005FD05 		.ascii	"\000\005\375\005\377\001\377\005\001\006\372\011\000"
 483      FF01FF05 
 483      0106FA09 
 483      00
 484 01a8 04FC06FD 		.ascii	"\004\374\006\375\376\003\367\004\001\375\005\376\001"
 484      FE03F704 
 484      01FD05FE 
 484      01
 485 01b5 FC04F905 		.ascii	"\374\004\371\005\377\003\371\001\004\001\005\377\004"
 485      FF03F901 
 485      040105FF 
 485      04
 486 01c2 02FD03FF 		.ascii	"\002\375\003\377\001\375\001\376\374\000\000\375\377"
 486      01FD01FE 
 486      FC0000FD 
 486      FF
 487 01cf 01FCFCFF 		.ascii	"\001\374\374\377\375\007\374\000\377\373\374\002\370"
 487      FD07FC00 
 487      FFFBFC02 
 487      F8
 488 01dc FF06F9FB 		.ascii	"\377\006\371\373\002\373\366\375\003\376\002\376\005"
 488      02FBF6FD 
 488      03FE02FE 
 488      05
 489 01e9 FD050301 		.ascii	"\375\005\003\001\376\377\376\003\373\377\006\376\001"
 489      FEFFFE03 
 489      FBFF06FE 
 489      01
 490 01f6 FEFFFD03 		.ascii	"\376\377\375\003\373\001\376\007\001\001\365\002\002"
 490      FB01FE07 
 490      0101F502 
 490      02
 491 0203 03FB03F7 		.ascii	"\003\373\003\367\002\375\004\001\373\376\004\373\004"
 491      02FD0401 
 491      FBFE04FB 
 491      04
 492 0210 0500FF04 		.ascii	"\005\000\377\004\000\377\000\367\374\377\373\000\004"
 492      00FF00F7 
 492      FCFFFB00 
 492      04
 493 021d FE03FEF8 		.ascii	"\376\003\376\370\002\006\000\002\002\376\003\376\376"
 493      02060002 
 493      02FE03FE 
 493      FE
 494 022a 01FBFFFE 		.ascii	"\001\373\377\376\001\003\375\000\373\006\377\373\006"
 494      0103FD00 
 494      FB06FFFB 
 494      06
 495 0237 FF080000 		.ascii	"\377\010\000\000\007\377\373\377\372\003\377\375\357"
 495      07FFFBFF 
 495      FA03FFFD 
 495      EF
 496 0244 FEFCFA03 		.ascii	"\376\374\372\003\372\377\372\376\377\000\377\375\374"
 496      FAFFFAFE 
 496      FF00FFFD 
 496      FC
 497 0251 FF0403FF 		.ascii	"\377\004\003\377\006\374\377\374\005\000\012\006\007"
 497      06FCFFFC 
 497      05000A06 
 497      07
 498 025e 06030200 		.ascii	"\006\003\002\000\001\375\000\377\010\000\371\002\004"
 498      01FD00FF 
 498      0800F902 
 498      04
 499 026b FBFC04FF 		.ascii	"\373\374\004\377\375\005\375\000\000\374\000\005\372"
 499      FD05FD00 
 499      00FC0005 
 499      FA
 500 0278 05FF0600 		.ascii	"\005\377\006\000\370\004\377\377\001\375\373\002\011"
 500      F804FFFF 
 500      01FDFB02 
 500      09
 501 0285 04010805 		.ascii	"\004\001\010\005\010\372\007\001\005\000\376\370\006"
 501      08FA0701 
 501      0500FEF8 
 501      06
 502 0292 FE060200 		.ascii	"\376\006\002\000\011\003\376\001\377\377\000\373\375"
 502      0903FE01 
 502      FFFF00FB 
 502      FD
 503 029f 0000FF01 		.ascii	"\000\000\377\001\376\374\375\370\002\376\377\377\000"
 503      FEFCFDF8 
 503      02FEFFFF 
 503      00
 504 02ac 01020301 		.ascii	"\001\002\003\001\375\000\376\375\374\007\001\376\001"
 504      FD00FEFD 
 504      FC0701FE 
 504      01
 505 02b9 03FFF5FF 		.ascii	"\003\377\365\377\375\000\000\001\003\001\000\003\004"
 505      FD000001 
 505      03010003 
 505      04
 506 02c6 FD09FD02 		.ascii	"\375\011\375\002\001\374\005\002\376\000\373\003\370"
 506      01FC0502 
 506      FE00FB03 
 506      F8
 507 02d3 0102FFFD 		.ascii	"\001\002\377\375\374\004\377\001\377\376\005\375\377"
 507      FC04FF01 
 507      FFFE05FD 
 507      FF
 508 02e0 05FE01FC 		.ascii	"\005\376\001\374\005\377\374\363\377\004\373\003\000"
 508      05FFFCF3 
 508      FF04FB03 
 508      00
 509 02ed FFFEFCFF 		.ascii	"\377\376\374\377\376\373\004\006\003\003\377\002\003"
 509      FEFB0406 
 509      0303FF02 
 509      03
 510 02fa 06FDFD05 		.ascii	"\006\375\375\005\374\005\374\006\377\005\000\373\003"
 510      FC05FC06 
 510      FF0500FB 
 510      03
 511 0307 00FE04F9 		.ascii	"\000\376\004\371\000\004\376\004\000\371\376\005\004"
 511      0004FE04 
 511      00F9FE05 
 511      04
 512 0314 05050302 		.ascii	"\005\005\003\002\376\376\372\374\003\000\376\376\377"
 512      FEFEFAFC 
 512      0300FEFE 
 512      FF
 513 0321 0602FCFF 		.ascii	"\006\002\374\377\376\374\374\376\375\375\003\000\376"
 513      FEFCFCFE 
 513      FDFD0300 
 513      FE
 514 032e FE0002FF 		.ascii	"\376\000\002\377\012\376\002\377\000\001\374\001\375"
 514      0AFE02FF 
 514      0001FC01 
 514      FD
 515 033b 03FD01FF 		.ascii	"\003\375\001\377\376"
 515      FE
 516              		.align	2
 517              	.LC1:
 518 0340 020505FB 		.ascii	"\002\005\005\373\000\001\005\001\370\000\005\004\375"
 518      00010501 
 518      F8000504 
 518      FD
 519 034d FEFE0001 		.ascii	"\376\376\000\001\374\372\375\377\377\375\002\004\372"
 519      FCFAFDFF 
 519      FFFD0204 
 519      FA
 520 035a 02F9FE0A 		.ascii	"\002\371\376\012\003\376\001\001\000\374\005\376\002"
 520      03FE0101 
 520      00FC05FE 
 520      02
 521 0367 0202FB07 		.ascii	"\002\002\373\007\003\003\003\003\000\003\377\377\374"
 521      03030303 
 521      0003FFFF 
 521      FC
 522 0374 000001FD 		.ascii	"\000\000\001\375\006\000\005\374\377\371\003\003\004"
 522      060005FC 
 522      FFF90303 
 522      04
 523 0381 01F9FE04 		.ascii	"\001\371\376\004\003\001\000\377\004\376\376\001\002"
 523      030100FF 
 523      04FEFE01 
 523      02
 524 038e 04FE01FA 		.ascii	"\004\376\001\372\376\000\377\376\377\010\003\373\376"
 524      FE00FFFE 
 524      FF0803FB 
 524      FE
 525 039b FD020102 		.ascii	"\375\002\001\002\374\376\370\376\374\002\007\376\370"
 525      FCFEF8FE 
 525      FC0207FE 
 525      F8
 526 03a8 FFFF0401 		.ascii	"\377\377\004\001\003\002\372\001\000\002\374\376\374"
 526      0302FA01 
 526      0002FCFE 
 526      FC
 527 03b5 FBFC01FC 		.ascii	"\373\374\001\374\007\371\001\376\374\001\377\013\000"
 527      07F901FE 
 527      FC01FF0B 
 527      00
 528 03c2 FEF8FD03 		.ascii	"\376\370\375\003\375\000\007\005\366\001\377\374\372"
 528      FD000705 
 528      F601FFFC 
 528      FA
 529 03cf FE01FC01 		.ascii	"\376\001\374\001\376\002\377\005\376\372\376\372\003"
 529      FE02FF05 
 529      FEFAFEFA 
 529      03
 530 03dc 03050500 		.ascii	"\003\005\005\000\000\377\375\376\374\376\002\004\000"
 530      00FFFDFE 
 530      FCFE0204 
 530      00
 531 03e9 FD07FFFF 		.ascii	"\375\007\377\377\376\004\005\376\004\003\002\002\375"
 531      FE0405FE 
 531      04030202 
 531      FD
 532 03f6 FC0601FF 		.ascii	"\374\006\001\377\377\376\375\006\371\376\377\377\002"
 532      FFFEFD06 
 532      F9FEFFFF 
 532      02
 533 0403 00000400 		.ascii	"\000\000\004\000\015\372\003\000\000\003\363\376\002"
 533      0DFA0300 
 533      0003F3FE 
 533      02
 534 0410 FBF9F602 		.ascii	"\373\371\366\002\372\004\373\377\374\374\373\004\372"
 534      FA04FBFF 
 534      FCFCFB04 
 534      FA
 535 041d 01F80100 		.ascii	"\001\370\001\000\002\004\003\004\002\373\374\002\000"
 535      02040304 
 535      02FBFC02 
 535      00
 536 042a FCFB0200 		.ascii	"\374\373\002\000\004\004\006\372\371\002\375\377\001"
 536      040406FA 
 536      F902FDFF 
 536      01
 537 0437 00FE03FB 		.ascii	"\000\376\003\373\003\004\001\000\003\006\374\001\001"
 537      03040100 
 537      0306FC01 
 537      01
 538 0444 03FAFFF9 		.ascii	"\003\372\377\371\374\000\001\000\004\001\014\372\002"
 538      FC000100 
 538      04010CFA 
 538      02
 539 0451 09FFFEFD 		.ascii	"\011\377\376\375\373\372\003\005\372\000\002\003\376"
 539      FBFA0305 
 539      FA000203 
 539      FE
 540 045e FC010005 		.ascii	"\374\001\000\005\012\372\001\001\001\376\004\000\376"
 540      0AFA0101 
 540      01FE0400 
 540      FE
 541 046b 020702FD 		.ascii	"\002\007\002\375\001\375\004\375\016\375\373\000\000"
 541      01FD04FD 
 541      0EFDFB00 
 541      00
 542 0478 FC02F901 		.ascii	"\374\002\371\001\376\002\374\370\002\003\003\376\002"
 542      FE02FCF8 
 542      020303FE 
 542      02
 543 0485 0A07F701 		.ascii	"\012\007\367\001\377\376\002\373\007\375\002\372\001"
 543      FFFE02FB 
 543      07FD02FA 
 543      01
 544 0492 00040101 		.ascii	"\000\004\001\001\004\003\372\003\001\373\004\375\003"
 544      0403FA03 
 544      01FB04FD 
 544      03
 545 049f FDFFF8FE 		.ascii	"\375\377\370\376\003\003\371\377\005\377\374\365\376"
 545      0303F9FF 
 545      05FFFCF5 
 545      FE
 546 04ac 0100FD01 		.ascii	"\001\000\375\001\003\377\376\371\375\002\015\365\002"
 546      03FFFEF9 
 546      FD020DF5 
 546      02
 547 04b9 06030107 		.ascii	"\006\003\001\007\005\377\372\005\004\373\000\002\000"
 547      05FFFA05 
 547      04FB0002 
 547      00
 548 04c6 FC02F700 		.ascii	"\374\002\367\000\375\002\002\002\001\005\001\371\000"
 548      FD020202 
 548      010501F9 
 548      00
 549 04d3 0202FCFE 		.ascii	"\002\002\374\376\000\373\377\376\374\373\004\376\377"
 549      00FBFFFE 
 549      FCFB04FE 
 549      FF
 550 04e0 FD02000A 		.ascii	"\375\002\000\012\377\000\003\000\010\006\003\000\001"
 550      FF000300 
 550      08060300 
 550      01
 551 04ed 0300FEFE 		.ascii	"\003\000\376\376\001\377\372\004\004\004\007\371\001"
 551      01FFFA04 
 551      040407F9 
 551      01
 552 04fa 05FAFC01 		.ascii	"\005\372\374\001\376\001\010\002\377\001\371\004\005"
 552      FE010802 
 552      FF01F904 
 552      05
 553 0507 03FFFE08 		.ascii	"\003\377\376\010\006\372\363\372\010\006\373\004\377"
 553      06FAF3FA 
 553      0806FB04 
 553      FF
 554 0514 04F90804 		.ascii	"\004\371\010\004\000\377\375\372\000\000\005\004\004"
 554      00FFFDFA 
 554      00000504 
 554      04
 555 0521 02F9FFFF 		.ascii	"\002\371\377\377\002\005\003\371\377\375\012\374\377"
 555      020503F9 
 555      FFFD0AFC 
 555      FF
 556 052e 04FF01FE 		.ascii	"\004\377\001\376\006\001\367\003\005\376\011\000\375"
 556      0601F703 
 556      05FE0900 
 556      FD
 557 053b 05000300 		.ascii	"\005\000\003\000\377"
 557      FF
 558              		.align	2
 559              	.LC2:
 560 0540 2DDDCF1E 		.ascii	"-\335\317\036\025\023\343\357\025\350\334\023\011\345"
 560      1513E3EF 
 560      15E8DC13 
 560      09E5
 561 054e 0AEE03EF 		.ascii	"\012\356\003\357\334\027\010\027\006\375\003\346\354"
 561      DC170817 
 561      06FD03E6 
 561      EC
 562 055b E4F30EBD 		.ascii	"\344\363\016\275\031\011\005\031\006\351\014\350\006"
 562      19090519 
 562      06E90CE8 
 562      06
 563 0568 EB0B19E7 		.ascii	"\353\013\031\347\031\357\373\361\015\015\361\334\014"
 563      19EFFBF1 
 563      0D0DF1DC 
 563      0C
 564 0575 F6F1F4F8 		.ascii	"\366\361\364\370\376\373\351\371U\016!\007\374\334\313"
 564      FEFBE9F9 
 564      550E2107 
 564      FCDCCB
 565 0584 DFE9F4F7 		.ascii	"\337\351\364\367\356\032\370\024!\025\371\020\000*\362"
 565      EE1AF814 
 565      2115F910 
 565      002AF2
 566 0593 F5FF141A 		.ascii	"\365\377\024\032\332\"\012\354\376\004\014\357\013)"
 566      DA220AEC 
 566      FE040CEF 
 566      0B29
 567 05a1 EB201930 		.ascii	"\353 \0310\362\323\344\001\345\336\357\364\335\352\027"
 567      F2D3E401 
 567      E5DEEFF4 
 567      DDEA17
 568 05b0 F1FE1412 		.ascii	"\361\376\024\022\027\370\0346\005\001\011\370\366\037"
 568      17F81C36 
 568      050109F8 
 568      F61F
 569 05be 02DD19F9 		.ascii	"\002\335\031\371\003\020\307\364\002\010\351\005,9B"
 569      0310C7F4 
 569      0208E905 
 569      2C3942
 570 05cd F8FFF2CC 		.ascii	"\370\377\362\314\371\375\370<\372\022\334\011\034\015"
 570      F9FDF83C 
 570      FA12DC09 
 570      1C0D
 571 05db 02F00411 		.ascii	"\002\360\004\021\365(\036@\327\371-\272\021\327=\004"
 571      F5281E40 
 571      D7F92DBA 
 571      11D73D04 
 572 05eb C10BFD13 		.ascii	"\301\013\375\023\346\027\021\012\363\355\005\366\317"
 572      E617110A 
 572      F3ED05F6 
 572      CF
 573 05f8 E705E0F7 		.ascii	"\347\005\340\367\016\037\370\0053\374\022\014\000,\350"
 573      0E1FF805 
 573      33FC120C 
 573      002CE8
 574 0607 1FF52638 		.ascii	"\037\365&8\031\017\343\376\326\360\373\273#\346\364"
 574      190FE3FE 
 574      D6F0FBBB 
 574      23E6F4
 575 0616 08EF3222 		.ascii	"\010\3572\"\013\023\335'\360\007\345\372\000\327&\024"
 575      0B13DD27 
 575      F007E5FA 
 575      00D72614 
 576 0626 F0E30221 		.ascii	"\360\343\002!\007\007\354\021\036\007\016*\003-\371"
 576      0707EC11 
 576      1E070E2A 
 576      032DF9
 577 0635 1DE3FCE8 		.ascii	"\035\343\374\350\000\361\371\362\367\376\027\001\001"
 577      00F1F9F2 
 577      F7FE1701 
 577      01
 578 0642 180412CB 		.ascii	"\030\004\022\313\321\351\000\031\362\001\025\"\332\352"
 578      D1E90019 
 578      F2011522 
 578      DAEA
 579 0650 ED13F8E5 		.ascii	"\355\023\370\345\364%\334\357$\340\034\346\024\347\334"
 579      F425DCEF 
 579      24E01CE6 
 579      14E7DC
 580 065f EC01F2F4 		.ascii	"\354\001\362\364\371\024\364\001\001\007\355&\342\351"
 580      F914F401 
 580      0107ED26 
 580      E2E9
 581 066d DF0BF5F0 		.ascii	"\337\013\365\360\007\352\007\372\373\306\327\346\007"
 581      07EA07FA 
 581      FBC6D7E6 
 581      07
 582 067a FAFCFD27 		.ascii	"\372\374\375'\015\375\015\027\374N\360\356\000\007\032"
 582      0DFD0D17 
 582      FC4EF0EE 
 582      00071A
 583 0689 ECDE09F8 		.ascii	"\354\336\011\370\362\025\341\023\370\002\011\314\363"
 583      F215E113 
 583      F80209CC 
 583      F3
 584 0696 08D7E625 		.ascii	"\010\327\346%\036\316\016\337\355\014\311\364\005\013"
 584      1ECE0EDF 
 584      ED0CC9F4 
 584      050B
 585 06a4 2714F61B 		.ascii	"'\024\366\033\367\003\360\353\361\004\001\015\353\373"
 585      F703F0EB 
 585      F104010D 
 585      EBFB
 586 06b2 F21AFC1B 		.ascii	"\362\032\374\033\360\030#\376\336\372\367\370\007\343"
 586      F01823FE 
 586      DEFAF7F8 
 586      07E3
 587 06c0 F3020AEB 		.ascii	"\363\002\012\353\001\376\031\356\350\351\015\000\345"
 587      01FE19EE 
 587      E8E90D00 
 587      E5
 588 06cd FAED1EFD 		.ascii	"\372\355\036\375\366(\345\360\346\360\374\023\364\373"
 588      F628E5F0 
 588      E6F0FC13 
 588      F4FB
 589 06db 05FB0B09 		.ascii	"\005\373\013\011\352\012\016\010\356\023)2\022\351\014"
 589      EA0A0E08 
 589      EE132932 
 589      12E90C
 590 06ea E4FEF223 		.ascii	"\344\376\362#\364\377\003\013\353\355\033@.\322\366"
 590      F4FF030B 
 590      EBED1B40 
 590      2ED2F6
 591 06f9 171102BC 		.ascii	"\027\021\002\274\014\371\351\3635\355\014\001\372\360"
 591      0CF9E9F3 
 591      35ED0C01 
 591      FAF0
 592 0707 FEFAE41D 		.ascii	"\376\372\344\035\360\005\012\026,\021\027\034\331\013"
 592      F0050A16 
 592      2C11171C 
 592      D90B
 593 0715 EE211218 		.ascii	"\356!\022\030\355\372\372\017\003\364\027\024\022\363"
 593      EDFAFA0F 
 593      03F41714 
 593      12F3
 594 0723 19D60B01 		.ascii	"\031\326\013\001\372\356\037(#\360\326\357\022\326\337"
 594      FAEE1F28 
 594      23F0D6EF 
 594      12D6DF
 595 0732 EAFBFC17 		.ascii	"\352\373\374\027\015\354\332\006\347\316\325\000\003"
 595      0DECDA06 
 595      E7CED500 
 595      03
 596 073f 1E       		.ascii	"\036"
 597              		.align	2
 598              	.LC3:
 599 0740 10EDD3FC 		.ascii	"\020\355\323\374\032\015\334\317\370\370\001\375\352"
 599      1A0DDCCF 
 599      F8F801FD 
 599      EA
 600 074d EFC9F5A8 		.ascii	"\357\311\365\250\000!7\365\003\030\017\355\366:E\024"
 600      002137F5 
 600      03180FED 
 600      F63A4514 
 601 075d CED7E105 		.ascii	"\316\327\341\005\342\012\342\367\035\371\000\363\027"
 601      E20AE2F7 
 601      1DF900F3 
 601      17
 602 076a 07F00C23 		.ascii	"\007\360\014#\002\036+\022\345\375\325\326\013\306\320"
 602      021E2B12 
 602      E5FDD5D6 
 602      0BC6D0
 603 0779 1323FD06 		.ascii	"\023#\375\006\362\"\322\337\315\023D\022\351\336\031"
 603      F222D2DF 
 603      CD134412 
 603      E9DE19
 604 0788 E8DF1E33 		.ascii	"\350\337\0363\022\014\007\003\370\006\015\357\364\365"
 604      120C0703 
 604      F8060DEF 
 604      F4F5
 605 0796 17F53B1D 		.ascii	"\027\365;\035\037\022\320\354\366\010\035\371\370\014"
 605      1F12D0EC 
 605      F6081DF9 
 605      F80C
 606 07a4 E61CE415 		.ascii	"\346\034\344\025\365\366\365\366\020\345\001\025\363"
 606      F5F6F5F6 
 606      10E50115 
 606      F3
 607 07b1 C1FCFC05 		.ascii	"\301\374\374\005?\031\364\017\370\011\356\360.\367\012"
 607      3F19F40F 
 607      F809EEF0 
 607      2EF70A
 608 07c0 EFFFFCF4 		.ascii	"\357\377\374\364\354\373\001\356\365\374\021\356A\377"
 608      ECFB01EE 
 608      F5FC11EE 
 608      41FF
 609 07ce 01EEE70C 		.ascii	"\001\356\347\014\374\004\031\342\024\353\011\011\320"
 609      FC0419E2 
 609      14EB0909 
 609      D0
 610 07db 09153317 		.ascii	"\011\0253\027\372\345\352\335\340\352\000\337 \371\374"
 610      FAE5EADD 
 610      E0EA00DF 
 610      20F9FC
 611 07ea F5D52313 		.ascii	"\365\325#\023\034\002\363\021\020\011\371\016\322\351"
 611      1C02F311 
 611      1009F90E 
 611      D2E9
 612 07f8 EFE40106 		.ascii	"\357\344\001\006\030\033%\022\325'\357\030\011\030\357"
 612      181B2512 
 612      D527EF18 
 612      0918EF
 613 0807 EEE812E9 		.ascii	"\356\350\022\351\336\000\020,\372\365\360)\021\343\361"
 613      DE00102C 
 613      FAF5F029 
 613      11E3F1
 614 0816 10160A09 		.ascii	"\020\026\012\011\377\002:\374\365\375\015\372\340\016"
 614      FF023AFC 
 614      F5FD0DFA 
 614      E00E
 615 0824 EA0F1CE9 		.ascii	"\352\017\034\351\355\372\354\001\345\340\001\346!\337"
 615      EDFAEC01 
 615      E5E001E6 
 615      21DF
 616 0832 06D5F443 		.ascii	"\006\325\364C\012@\360\0075$\004\020\324\031\364\031"
 616      0A40F007 
 616      35240410 
 616      D419F419 
 617 0842 F1FBF0C0 		.ascii	"\361\373\360\300\364\327\035\360\000\362\007\357\344"
 617      F4D71DF0 
 617      00F207EF 
 617      E4
 618 084f 26472BFA 		.ascii	"&G+\372\331\362\014\347\365\342%\266\334\037\026\016"
 618      D9F20CE7 
 618      F5E225B6 
 618      DC1F160E 
 619 085f 060826E9 		.ascii	"\006\010&\351\337\345\366\030\336-\343\373\010\354!"
 619      DFE5F618 
 619      DE2DE3FB 
 619      08EC21
 620 086e FAE8FDF3 		.ascii	"\372\350\375\363\013\357\354\004\322\007\344\344\035"
 620      0BEFEC04 
 620      D207E4E4 
 620      1D
 621 087b 053BEC22 		.ascii	"\005;\354\"\360\034#\344\303 \3754\322\010\022\036\371"
 621      F01C23E4 
 621      C320FD34 
 621      D208121E 
 621      F9
 622 088c C8EE0513 		.ascii	"\310\356\005\023\352-8\376\366(\010\322\001T\015\323"
 622      EA2D38FE 
 622      F62808D2 
 622      01540DD3 
 623 089c FBE11AD9 		.ascii	"\373\341\032\331\017\357\034\010\300\350\3561\311\326"
 623      0FEF1C08 
 623      C0E8EE31 
 623      C9D6
 624 08aa F327F42A 		.ascii	"\363'\364*\273\030\014\037\003\356\015\372\007\001\011"
 624      BB180C1F 
 624      03EE0DFA 
 624      070109
 625 08b9 5207F204 		.ascii	"R\007\362\004\370\354\357\030\005\354\006\377/\343\330"
 625      F8ECEF18 
 625      05EC06FF 
 625      2FE3D8
 626 08c8 CD50121E 		.ascii	"\315P\022\036\357\0109\025\346\341\026\025\365\270\373"
 626      EF083915 
 626      E6E11615 
 626      F5B8FB
 627 08d7 041EE4F4 		.ascii	"\004\036\344\364\035\361\362\352\003.\024A\023\374 "
 627      1DF1F2EA 
 627      032E1441 
 627      13FC20
 628 08e6 0EF7D62C 		.ascii	"\016\367\326,\372\352\364\334\027\030\347\360\005\363"
 628      FAEAF4DC 
 628      1718E7F0 
 628      05F3
 629 08f4 06FAE3F0 		.ascii	"\006\372\343\360\002\013\374\334\022\030\370\012\336"
 629      020BFCDC 
 629      1218F80A 
 629      DE
 630 0901 E4292609 		.ascii	"\344)&\011\000\357\016\332\344\370\037\345\344\341\307"
 630      00EF0EDA 
 630      E4F81FE5 
 630      E4E1C7
 631 0910 16EB1628 		.ascii	"\026\353\026(\340-\355\000\346\351\014\021\0023\356"
 631      E02DED00 
 631      E6E90C11 
 631      0233EE
 632 091f F9F109E0 		.ascii	"\371\361\011\340\343\003\033\010\023\371\011\361\352"
 632      E3031B08 
 632      13F909F1 
 632      EA
 633 092c EA403CE8 		.ascii	"\352@<\350\356\004)\025\367\317\377\002\374\312\353"
 633      EE042915 
 633      F7CFFF02 
 633      FCCAEB
 634 093b 0C32C71C 		.ascii	"\0142\307\034\026"
 634      16
 635              		.align	2
 636              	.LC4:
 637 0940 D81C4D8D 		.ascii	"\330\034M\215sO\313\373\352\336=?\212\003\237\252*,"
 637      734FCBFB 
 637      EADE3D3F 
 637      8A039FAA 
 637      2A2C
 638 0952 9957E835 		.ascii	"\231W\3505\255U\262.u\277W\273Uj\310\032\335\346\256"
 638      AD55B22E 
 638      75BF57BB 
 638      556AC81A 
 638      DDE6AE
 639 0965 EB4A5A87 		.ascii	"\353JZ\207\\;\374\255\372\225\217"
 639      5C3BFCAD 
 639      FA958F
 640              		.align	2
 641              	.LC5:
 642 0970 D81C4D8D 		.ascii	"\330\034M\215sO\313\373\352\336=?\212\003\237\252*,"
 642      734FCBFB 
 642      EADE3D3F 
 642      8A039FAA 
 642      2A2C
 643 0982 9957E835 		.ascii	"\231W\3505\255U\262.u\277W\273Uj\310\032\335\346\256"
 643      AD55B22E 
 643      75BF57BB 
 643      556AC81A 
 643      DDE6AE
 644 0995 EB4A5A   		.ascii	"\353JZ"
 645              		.section	.text.crypto_sign,"ax",%progbits
 646              		.align	1
 647              		.global	crypto_sign
 648              		.syntax unified
 649              		.thumb
 650              		.thumb_func
 651              		.fpu softvfp
 653              	crypto_sign:
 654              	.LFB22:
 106:nist.c        **** 
 107:nist.c        **** int
 108:nist.c        **** crypto_sign(unsigned char *sm, unsigned long long *smlen,
 109:nist.c        **** 	const unsigned char *m, unsigned long long mlen,
 110:nist.c        **** 	const unsigned char *sk)
 111:nist.c        **** {
 655              		.loc 1 111 1
 656              		.cfi_startproc
 657              		@ args = 12, pretend = 0, frame = 39664
 658              		@ frame_needed = 1, uses_anonymous_args = 0
 659 0000 B0B5     		push	{r4, r5, r7, lr}
 660              	.LCFI6:
 661              		.cfi_def_cfa_offset 16
 662              		.cfi_offset 4, -16
 663              		.cfi_offset 5, -12
 664              		.cfi_offset 7, -8
 665              		.cfi_offset 14, -4
 666 0002 ADF51B4D 		sub	sp, sp, #39680
 667              	.LCFI7:
 668              		.cfi_def_cfa_offset 39696
 669 0006 82B0     		sub	sp, sp, #8
 670              	.LCFI8:
 671              		.cfi_def_cfa_offset 39704
 672 0008 06AF     		add	r7, sp, #24
 673              	.LCFI9:
 674              		.cfi_def_cfa 7, 39680
 675 000a 07F52F63 		add	r3, r7, #2800
 676 000e A3F6E423 		subw	r3, r3, #2788
 677 0012 1860     		str	r0, [r3]
 678 0014 07F52F63 		add	r3, r7, #2800
 679 0018 A3F6E823 		subw	r3, r3, #2792
 680 001c 1960     		str	r1, [r3]
 681 001e 07F52F63 		add	r3, r7, #2800
 682 0022 A3F6EC23 		subw	r3, r3, #2796
 683 0026 1A60     		str	r2, [r3]
 112:nist.c        **** 	TEMPALLOC union {
 113:nist.c        **** 		uint8_t b[72 * 512];
 114:nist.c        **** 		uint64_t dummy_u64;
 115:nist.c        **** 		fpr dummy_fpr;
 116:nist.c        **** 	} tmp;
 117:nist.c        **** 
 118:nist.c        **** 	TEMPALLOC int8_t f[512] = {1, 4, 4, 2, -4, -4, -2, -2, 6, -2, 0, -4, 5, 4, 4, 2, -3, -2, -3, -11, 
 684              		.loc 1 118 19
 685 0028 07F52F63 		add	r3, r7, #2800
 686 002c A3F50073 		sub	r3, r3, #512
 687 0030 494A     		ldr	r2, .L13
 688 0032 1846     		mov	r0, r3
 689 0034 1146     		mov	r1, r2
 690 0036 4FF40073 		mov	r3, #512
 691 003a 1A46     		mov	r2, r3
 692 003c FFF7FEFF 		bl	memcpy
 119:nist.c        **** 	TEMPALLOC int8_t g[512] = {2, 5, 5, -5, 0, 1, 5, 1, -8, 0, 5, 4, -3, -2, -2, 0, 1, -4, -6, -3, -1,
 693              		.loc 1 119 19
 694 0040 07F52F63 		add	r3, r7, #2800
 695 0044 A3F58063 		sub	r3, r3, #1024
 696 0048 444A     		ldr	r2, .L13+4
 697 004a 1846     		mov	r0, r3
 698 004c 1146     		mov	r1, r2
 699 004e 4FF40073 		mov	r3, #512
 700 0052 1A46     		mov	r2, r3
 701 0054 FFF7FEFF 		bl	memcpy
 120:nist.c        **** 	TEMPALLOC int8_t F[512] = {45, -35, -49, 30, 21, 19, -29, -17, 21, -24, -36, 19, 9, -27, 10, -18, 
 702              		.loc 1 120 19
 703 0058 07F52F63 		add	r3, r7, #2800
 704 005c A3F5C063 		sub	r3, r3, #1536
 705 0060 3F4A     		ldr	r2, .L13+8
 706 0062 1846     		mov	r0, r3
 707 0064 1146     		mov	r1, r2
 708 0066 4FF40073 		mov	r3, #512
 709 006a 1A46     		mov	r2, r3
 710 006c FFF7FEFF 		bl	memcpy
 121:nist.c        **** 	TEMPALLOC int8_t G[512] = {16, -19, -45, -4, 26, 13, -36, -49, -8, -8, 1, -3, -22, -17, -55, -11, 
 711              		.loc 1 121 19
 712 0070 07F52F63 		add	r3, r7, #2800
 713 0074 A3F50063 		sub	r3, r3, #2048
 714 0078 3A4A     		ldr	r2, .L13+12
 715 007a 1846     		mov	r0, r3
 716 007c 1146     		mov	r1, r2
 717 007e 4FF40073 		mov	r3, #512
 718 0082 1A46     		mov	r2, r3
 719 0084 FFF7FEFF 		bl	memcpy
 122:nist.c        **** 	
 123:nist.c        **** 	static TEMPALLOC union {
 124:nist.c        **** 		int16_t sig[512];
 125:nist.c        **** 		uint16_t hm[512];
 126:nist.c        **** 	} r;
 127:nist.c        **** 	TEMPALLOC unsigned char seed[48] = {216, 28, 77, 141, 115, 79, 203, 251, 234, 222, 61, 63, 138, 3,
 720              		.loc 1 127 26
 721 0088 07F52F63 		add	r3, r7, #2800
 722 008c A3F50363 		sub	r3, r3, #2096
 723 0090 354A     		ldr	r2, .L13+16
 724 0092 1C46     		mov	r4, r3
 725 0094 1546     		mov	r5, r2
 726 0096 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 727 0098 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 728 009a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 729 009c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 730 009e 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 731 00a2 84E80F00 		stm	r4, {r0, r1, r2, r3}
 128:nist.c        **** 	TEMPALLOC unsigned char nonce[NONCELEN] = {216, 28, 77, 141, 115, 79, 203, 251, 234, 222, 61, 63, 
 732              		.loc 1 128 26
 733 00a6 07F52F63 		add	r3, r7, #2800
 734 00aa A3F65803 		subw	r3, r3, #2136
 735 00ae 2F4A     		ldr	r2, .L13+20
 736 00b0 1C46     		mov	r4, r3
 737 00b2 1546     		mov	r5, r2
 738 00b4 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 739 00b6 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 740 00b8 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 741 00ba 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 742 00bc 95E80300 		ldm	r5, {r0, r1}
 743 00c0 84E80300 		stm	r4, {r0, r1}
 129:nist.c        **** 
 130:nist.c        **** 	TEMPALLOC unsigned char esig[CRYPTO_BYTES - 2 - sizeof nonce];
 131:nist.c        **** 	static TEMPALLOC inner_shake256_context sc;
 132:nist.c        **** 	size_t u, v, sig_len;
 133:nist.c        **** 
 134:nist.c        **** 	inner_shake256_init(&sc);
 744              		.loc 1 134 2
 745 00c4 2A48     		ldr	r0, .L13+24
 746 00c6 FFF7FEFF 		bl	falcon_inner_i_shake256_init
 135:nist.c        **** 
 136:nist.c        **** 	inner_shake256_inject(&sc, nonce, sizeof nonce);
 747              		.loc 1 136 2
 748 00ca 07F53C73 		add	r3, r7, #752
 749 00ce 583B     		subs	r3, r3, #88
 750 00d0 2822     		movs	r2, #40
 751 00d2 1946     		mov	r1, r3
 752 00d4 2648     		ldr	r0, .L13+24
 753 00d6 FFF7FEFF 		bl	falcon_inner_i_shake256_inject
 137:nist.c        **** 	inner_shake256_inject(&sc, m, mlen);
 754              		.loc 1 137 2
 755 00da 07F51B43 		add	r3, r7, #39680
 756 00de 1A68     		ldr	r2, [r3]
 757 00e0 07F52F63 		add	r3, r7, #2800
 758 00e4 A3F6EC23 		subw	r3, r3, #2796
 759 00e8 1968     		ldr	r1, [r3]
 760 00ea 2148     		ldr	r0, .L13+24
 761 00ec FFF7FEFF 		bl	falcon_inner_i_shake256_inject
 138:nist.c        **** 
 139:nist.c        **** 	inner_shake256_flip(&sc);
 762              		.loc 1 139 2
 763 00f0 1F48     		ldr	r0, .L13+24
 764 00f2 FFF7FEFF 		bl	falcon_inner_i_shake256_flip
 140:nist.c        **** 	Zf(hash_to_point_vartime)(&sc, r.hm, 9);
 765              		.loc 1 140 2
 766 00f6 0922     		movs	r2, #9
 767 00f8 1E49     		ldr	r1, .L13+28
 768 00fa 1D48     		ldr	r0, .L13+24
 769 00fc FFF7FEFF 		bl	falcon_inner_hash_to_point_vartime
 141:nist.c        **** 
 142:nist.c        **** 
 143:nist.c        **** 	inner_shake256_init(&sc);
 770              		.loc 1 143 2
 771 0100 1B48     		ldr	r0, .L13+24
 772 0102 FFF7FEFF 		bl	falcon_inner_i_shake256_init
 144:nist.c        **** 	inner_shake256_inject(&sc, seed, sizeof seed);
 773              		.loc 1 144 2
 774 0106 07F53C73 		add	r3, r7, #752
 775 010a 303B     		subs	r3, r3, #48
 776 010c 3022     		movs	r2, #48
 777 010e 1946     		mov	r1, r3
 778 0110 1748     		ldr	r0, .L13+24
 779 0112 FFF7FEFF 		bl	falcon_inner_i_shake256_inject
 145:nist.c        **** 	inner_shake256_flip(&sc);
 780              		.loc 1 145 2
 781 0116 1648     		ldr	r0, .L13+24
 782 0118 FFF7FEFF 		bl	falcon_inner_i_shake256_flip
 146:nist.c        **** 
 147:nist.c        **** 	Zf(sign_dyn)(r.sig, &sc, f, g, F, G, r.hm, 9, tmp.b);
 783              		.loc 1 147 2
 784 011c 07F5DE61 		add	r1, r7, #1776
 785 0120 07F50F62 		add	r2, r7, #2288
 786 0124 07F52F63 		add	r3, r7, #2800
 787 0128 0493     		str	r3, [sp, #16]
 788 012a 0923     		movs	r3, #9
 789 012c 0393     		str	r3, [sp, #12]
 790 012e 114B     		ldr	r3, .L13+28
 791 0130 0293     		str	r3, [sp, #8]
 792 0132 07F53C73 		add	r3, r7, #752
 793 0136 0193     		str	r3, [sp, #4]
 794 0138 07F59E63 		add	r3, r7, #1264
 795 013c 0093     		str	r3, [sp]
 796 013e 0B46     		mov	r3, r1
 797 0140 0B49     		ldr	r1, .L13+24
 798 0142 0C48     		ldr	r0, .L13+28
 799 0144 FFF7FEFF 		bl	falcon_inner_sign_dyn
 148:nist.c        **** 
 149:nist.c        **** 	return 0;
 800              		.loc 1 149 9
 801 0148 0023     		movs	r3, #0
 150:nist.c        **** }
 802              		.loc 1 150 1
 803 014a 1846     		mov	r0, r3
 804 014c 07F51A47 		add	r7, r7, #39424
 805 0150 F037     		adds	r7, r7, #240
 806              	.LCFI10:
 807              		.cfi_def_cfa_offset 16
 808 0152 BD46     		mov	sp, r7
 809              	.LCFI11:
 810              		.cfi_def_cfa_register 13
 811              		@ sp needed
 812 0154 B0BD     		pop	{r4, r5, r7, pc}
 813              	.L14:
 814 0156 00BF     		.align	2
 815              	.L13:
 816 0158 40010000 		.word	.LC0
 817 015c 40030000 		.word	.LC1
 818 0160 40050000 		.word	.LC2
 819 0164 40070000 		.word	.LC3
 820 0168 40090000 		.word	.LC4
 821 016c 70090000 		.word	.LC5
 822 0170 00000000 		.word	sc.1
 823 0174 D0000000 		.word	r.0
 824              		.cfi_endproc
 825              	.LFE22:
 827              		.section	.text.crypto_sign_open,"ax",%progbits
 828              		.align	1
 829              		.global	crypto_sign_open
 830              		.syntax unified
 831              		.thumb
 832              		.thumb_func
 833              		.fpu softvfp
 835              	crypto_sign_open:
 836              	.LFB23:
 151:nist.c        **** 
 152:nist.c        **** int
 153:nist.c        **** crypto_sign_open(unsigned char *m, unsigned long long *mlen,
 154:nist.c        **** 	const unsigned char *sm, unsigned long long smlen,
 155:nist.c        **** 	const unsigned char *pk)
 156:nist.c        **** {
 837              		.loc 1 156 1
 838              		.cfi_startproc
 839              		@ args = 12, pretend = 0, frame = 4336
 840              		@ frame_needed = 1, uses_anonymous_args = 0
 841 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 842              	.LCFI12:
 843              		.cfi_def_cfa_offset 24
 844              		.cfi_offset 4, -24
 845              		.cfi_offset 5, -20
 846              		.cfi_offset 7, -16
 847              		.cfi_offset 8, -12
 848              		.cfi_offset 9, -8
 849              		.cfi_offset 14, -4
 850 0004 ADF5875D 		sub	sp, sp, #4320
 851              	.LCFI13:
 852              		.cfi_def_cfa_offset 4344
 853 0008 86B0     		sub	sp, sp, #24
 854              	.LCFI14:
 855              		.cfi_def_cfa_offset 4368
 856 000a 02AF     		add	r7, sp, #8
 857              	.LCFI15:
 858              		.cfi_def_cfa 7, 4360
 859 000c 07F1F003 		add	r3, r7, #240
 860 0010 43F8E40C 		str	r0, [r3, #-228]
 861 0014 07F1F003 		add	r3, r7, #240
 862 0018 43F8E81C 		str	r1, [r3, #-232]
 863 001c 07F1F003 		add	r3, r7, #240
 864 0020 43F8EC2C 		str	r2, [r3, #-236]
 157:nist.c        **** 	TEMPALLOC union {
 158:nist.c        **** 		uint8_t b[2 * 512];
 159:nist.c        **** 		uint64_t dummy_u64;
 160:nist.c        **** 		fpr dummy_fpr;
 161:nist.c        **** 	} tmp;
 162:nist.c        **** 	const unsigned char *esig;
 163:nist.c        **** 	TEMPALLOC uint16_t h[512], hm[512];
 164:nist.c        **** 	TEMPALLOC int16_t sig[512];
 165:nist.c        **** 	TEMPALLOC inner_shake256_context sc;
 166:nist.c        **** 	size_t sig_len, msg_len;
 167:nist.c        **** 
 168:nist.c        **** 	/*
 169:nist.c        **** 	 * Decode public key.
 170:nist.c        **** 	 */
 171:nist.c        **** 	if (pk[0] != 0x00 + 9) {
 865              		.loc 1 171 8
 866 0024 07F58853 		add	r3, r7, #4352
 867 0028 03F11003 		add	r3, r3, #16
 868 002c 1B68     		ldr	r3, [r3]
 869 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 870              		.loc 1 171 5
 871 0030 092B     		cmp	r3, #9
 872 0032 02D0     		beq	.L16
 172:nist.c        **** 		return -1;
 873              		.loc 1 172 10
 874 0034 4FF0FF33 		mov	r3, #-1
 875 0038 F5E0     		b	.L25
 876              	.L16:
 173:nist.c        **** 	}
 174:nist.c        **** 	if (Zf(modq_decode)(h, 9, pk + 1, CRYPTO_PUBLICKEYBYTES - 1)
 877              		.loc 1 174 31
 878 003a 07F58853 		add	r3, r7, #4352
 879 003e 03F11003 		add	r3, r3, #16
 880 0042 1B68     		ldr	r3, [r3]
 881 0044 5A1C     		adds	r2, r3, #1
 882              		.loc 1 174 6
 883 0046 07F50E60 		add	r0, r7, #2272
 884 004a 4FF46073 		mov	r3, #896
 885 004e 0921     		movs	r1, #9
 886 0050 FFF7FEFF 		bl	falcon_inner_modq_decode
 887 0054 0346     		mov	r3, r0
 888              		.loc 1 174 5
 889 0056 B3F5607F 		cmp	r3, #896
 890 005a 02D0     		beq	.L18
 175:nist.c        **** 		!= CRYPTO_PUBLICKEYBYTES - 1)
 176:nist.c        **** 	{
 177:nist.c        **** 		return -1;
 891              		.loc 1 177 10
 892 005c 4FF0FF33 		mov	r3, #-1
 893 0060 E1E0     		b	.L25
 894              	.L18:
 178:nist.c        **** 	}
 179:nist.c        **** 	Zf(to_ntt_monty)(h, 9);
 895              		.loc 1 179 2
 896 0062 07F50E63 		add	r3, r7, #2272
 897 0066 0921     		movs	r1, #9
 898 0068 1846     		mov	r0, r3
 899 006a FFF7FEFF 		bl	falcon_inner_to_ntt_monty
 180:nist.c        **** 
 181:nist.c        **** 	/*
 182:nist.c        **** 	 * Find nonce, signature, message length.
 183:nist.c        **** 	 */
 184:nist.c        **** 	if (smlen < 2 + NONCELEN) {
 900              		.loc 1 184 5
 901 006e 07F58853 		add	r3, r7, #4352
 902 0072 03F10803 		add	r3, r3, #8
 903 0076 D3E90023 		ldrd	r2, [r3]
 904 007a 2A2A     		cmp	r2, #42
 905 007c 73F10003 		sbcs	r3, r3, #0
 906 0080 02D2     		bcs	.L19
 185:nist.c        **** 		return -1;
 907              		.loc 1 185 10
 908 0082 4FF0FF33 		mov	r3, #-1
 909 0086 CEE0     		b	.L25
 910              	.L19:
 186:nist.c        **** 	}
 187:nist.c        **** 	sig_len = ((size_t)sm[0] << 8) | (size_t)sm[1];
 911              		.loc 1 187 23
 912 0088 07F1F003 		add	r3, r7, #240
 913 008c 53F8EC3C 		ldr	r3, [r3, #-236]
 914 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 915              		.loc 1 187 27
 916 0092 1B02     		lsls	r3, r3, #8
 917              		.loc 1 187 45
 918 0094 07F1F002 		add	r2, r7, #240
 919 0098 52F8EC2C 		ldr	r2, [r2, #-236]
 920 009c 0132     		adds	r2, r2, #1
 921 009e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 922              		.loc 1 187 10
 923 00a0 1343     		orrs	r3, r3, r2
 924 00a2 07F58752 		add	r2, r7, #4320
 925 00a6 02F10C02 		add	r2, r2, #12
 926 00aa 1360     		str	r3, [r2]
 188:nist.c        **** 	if (sig_len > (smlen - 2 - NONCELEN)) {
 927              		.loc 1 188 14
 928 00ac 07F58753 		add	r3, r7, #4320
 929 00b0 03F10C03 		add	r3, r3, #12
 930 00b4 1B68     		ldr	r3, [r3]
 931 00b6 0022     		movs	r2, #0
 932 00b8 9846     		mov	r8, r3
 933 00ba 9146     		mov	r9, r2
 934              		.loc 1 188 27
 935 00bc 07F58853 		add	r3, r7, #4352
 936 00c0 03F10803 		add	r3, r3, #8
 937 00c4 D3E90023 		ldrd	r2, [r3]
 938 00c8 B2F12A04 		subs	r4, r2, #42
 939 00cc 43F1FF35 		adc	r5, r3, #-1
 940              		.loc 1 188 5
 941 00d0 4445     		cmp	r4, r8
 942 00d2 75EB0903 		sbcs	r3, r5, r9
 943 00d6 02D2     		bcs	.L20
 189:nist.c        **** 		return -1;
 944              		.loc 1 189 10
 945 00d8 4FF0FF33 		mov	r3, #-1
 946 00dc A3E0     		b	.L25
 947              	.L20:
 190:nist.c        **** 	}
 191:nist.c        **** 	msg_len = smlen - 2 - NONCELEN - sig_len;
 948              		.loc 1 191 33
 949 00de 07F58853 		add	r3, r7, #4352
 950 00e2 03F10803 		add	r3, r3, #8
 951 00e6 1A68     		ldr	r2, [r3]
 952 00e8 07F58753 		add	r3, r7, #4320
 953 00ec 03F10C03 		add	r3, r3, #12
 954 00f0 1B68     		ldr	r3, [r3]
 955 00f2 D31A     		subs	r3, r2, r3
 956              		.loc 1 191 10
 957 00f4 2A3B     		subs	r3, r3, #42
 958 00f6 07F58752 		add	r2, r7, #4320
 959 00fa 02F10802 		add	r2, r2, #8
 960 00fe 1360     		str	r3, [r2]
 192:nist.c        **** 
 193:nist.c        **** 	/*
 194:nist.c        **** 	 * Decode signature.
 195:nist.c        **** 	 */
 196:nist.c        **** 	esig = sm + 2 + NONCELEN + msg_len;
 961              		.loc 1 196 27
 962 0100 07F58753 		add	r3, r7, #4320
 963 0104 03F10803 		add	r3, r3, #8
 964 0108 1B68     		ldr	r3, [r3]
 965 010a 2A33     		adds	r3, r3, #42
 966              		.loc 1 196 7
 967 010c 07F1F002 		add	r2, r7, #240
 968 0110 52F8EC2C 		ldr	r2, [r2, #-236]
 969 0114 1344     		add	r3, r3, r2
 970 0116 07F58752 		add	r2, r7, #4320
 971 011a 02F10402 		add	r2, r2, #4
 972 011e 1360     		str	r3, [r2]
 197:nist.c        **** 	if (sig_len < 1 || esig[0] != 0x20 + 9) {
 973              		.loc 1 197 5
 974 0120 07F58753 		add	r3, r7, #4320
 975 0124 03F10C03 		add	r3, r3, #12
 976 0128 1B68     		ldr	r3, [r3]
 977 012a 002B     		cmp	r3, #0
 978 012c 07D0     		beq	.L21
 979              		.loc 1 197 25 discriminator 1
 980 012e 07F58753 		add	r3, r7, #4320
 981 0132 03F10403 		add	r3, r3, #4
 982 0136 1B68     		ldr	r3, [r3]
 983 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 984              		.loc 1 197 18 discriminator 1
 985 013a 292B     		cmp	r3, #41
 986 013c 02D0     		beq	.L22
 987              	.L21:
 198:nist.c        **** 		return -1;
 988              		.loc 1 198 10
 989 013e 4FF0FF33 		mov	r3, #-1
 990 0142 70E0     		b	.L25
 991              	.L22:
 199:nist.c        **** 	}
 200:nist.c        **** 	if (Zf(comp_decode)(sig, 9,
 201:nist.c        **** 		esig + 1, sig_len - 1) != sig_len - 1)
 992              		.loc 1 201 8
 993 0144 07F58753 		add	r3, r7, #4320
 994 0148 03F10403 		add	r3, r3, #4
 995 014c 1B68     		ldr	r3, [r3]
 996 014e 5A1C     		adds	r2, r3, #1
 200:nist.c        **** 		esig + 1, sig_len - 1) != sig_len - 1)
 997              		.loc 1 200 6
 998 0150 07F58753 		add	r3, r7, #4320
 999 0154 03F10C03 		add	r3, r3, #12
 1000 0158 1B68     		ldr	r3, [r3]
 1001 015a 013B     		subs	r3, r3, #1
 1002 015c 07F1F000 		add	r0, r7, #240
 1003 0160 1038     		subs	r0, r0, #16
 1004 0162 0921     		movs	r1, #9
 1005 0164 FFF7FEFF 		bl	falcon_inner_comp_decode
 1006 0168 0246     		mov	r2, r0
 1007              		.loc 1 201 37
 1008 016a 07F58753 		add	r3, r7, #4320
 1009 016e 03F10C03 		add	r3, r3, #12
 1010 0172 1B68     		ldr	r3, [r3]
 1011 0174 013B     		subs	r3, r3, #1
 200:nist.c        **** 		esig + 1, sig_len - 1) != sig_len - 1)
 1012              		.loc 1 200 5
 1013 0176 9A42     		cmp	r2, r3
 1014 0178 02D0     		beq	.L23
 202:nist.c        **** 	{
 203:nist.c        **** 		return -1;
 1015              		.loc 1 203 10
 1016 017a 4FF0FF33 		mov	r3, #-1
 1017 017e 52E0     		b	.L25
 1018              	.L23:
 204:nist.c        **** 	}
 205:nist.c        **** 
 206:nist.c        **** 	/*
 207:nist.c        **** 	 * Hash nonce + message into a vector.
 208:nist.c        **** 	 */
 209:nist.c        **** 	inner_shake256_init(&sc);
 1019              		.loc 1 209 2
 1020 0180 07F11003 		add	r3, r7, #16
 1021 0184 1846     		mov	r0, r3
 1022 0186 FFF7FEFF 		bl	falcon_inner_i_shake256_init
 210:nist.c        **** 	inner_shake256_inject(&sc, sm + 2, NONCELEN + msg_len);
 1023              		.loc 1 210 32
 1024 018a 07F1F003 		add	r3, r7, #240
 1025 018e 53F8EC3C 		ldr	r3, [r3, #-236]
 1026 0192 991C     		adds	r1, r3, #2
 1027              		.loc 1 210 2
 1028 0194 07F58753 		add	r3, r7, #4320
 1029 0198 03F10803 		add	r3, r3, #8
 1030 019c 1B68     		ldr	r3, [r3]
 1031 019e 03F12802 		add	r2, r3, #40
 1032 01a2 07F11003 		add	r3, r7, #16
 1033 01a6 1846     		mov	r0, r3
 1034 01a8 FFF7FEFF 		bl	falcon_inner_i_shake256_inject
 211:nist.c        **** 	inner_shake256_flip(&sc);
 1035              		.loc 1 211 2
 1036 01ac 07F11003 		add	r3, r7, #16
 1037 01b0 1846     		mov	r0, r3
 1038 01b2 FFF7FEFF 		bl	falcon_inner_i_shake256_flip
 212:nist.c        **** 	Zf(hash_to_point_vartime)(&sc, hm, 9);
 1039              		.loc 1 212 2
 1040 01b6 07F59C61 		add	r1, r7, #1248
 1041 01ba 07F11003 		add	r3, r7, #16
 1042 01be 0922     		movs	r2, #9
 1043 01c0 1846     		mov	r0, r3
 1044 01c2 FFF7FEFF 		bl	falcon_inner_hash_to_point_vartime
 213:nist.c        **** 
 214:nist.c        **** 	/*
 215:nist.c        **** 	 * Verify signature.
 216:nist.c        **** 	 */
 217:nist.c        **** 	if (!Zf(verify_raw)(hm, sig, h, 9, tmp.b)) {
 1045              		.loc 1 217 7
 1046 01c6 07F50E62 		add	r2, r7, #2272
 1047 01ca 07F1F001 		add	r1, r7, #240
 1048 01ce 1039     		subs	r1, r1, #16
 1049 01d0 07F59C60 		add	r0, r7, #1248
 1050 01d4 07F54E63 		add	r3, r7, #3296
 1051 01d8 0093     		str	r3, [sp]
 1052 01da 0923     		movs	r3, #9
 1053 01dc FFF7FEFF 		bl	falcon_inner_verify_raw
 1054 01e0 0346     		mov	r3, r0
 1055              		.loc 1 217 5
 1056 01e2 002B     		cmp	r3, #0
 1057 01e4 02D1     		bne	.L24
 218:nist.c        **** 		return -1;
 1058              		.loc 1 218 10
 1059 01e6 4FF0FF33 		mov	r3, #-1
 1060 01ea 1CE0     		b	.L25
 1061              	.L24:
 219:nist.c        **** 	}
 220:nist.c        **** 
 221:nist.c        **** 	/*
 222:nist.c        **** 	 * Return plaintext.
 223:nist.c        **** 	 */
 224:nist.c        **** 
 225:nist.c        **** 	memmove(m, sm + 2 + NONCELEN, msg_len);
 1062              		.loc 1 225 20
 1063 01ec 07F1F003 		add	r3, r7, #240
 1064 01f0 53F8EC3C 		ldr	r3, [r3, #-236]
 1065 01f4 2A33     		adds	r3, r3, #42
 1066              		.loc 1 225 2
 1067 01f6 07F1F002 		add	r2, r7, #240
 1068 01fa 1046     		mov	r0, r2
 1069 01fc 07F58752 		add	r2, r7, #4320
 1070 0200 02F10802 		add	r2, r2, #8
 1071 0204 1268     		ldr	r2, [r2]
 1072 0206 1946     		mov	r1, r3
 1073 0208 50F8E40C 		ldr	r0, [r0, #-228]
 1074 020c FFF7FEFF 		bl	memmove
 226:nist.c        **** 
 227:nist.c        **** 	*mlen = 33;
 1075              		.loc 1 227 8
 1076 0210 07F1F003 		add	r3, r7, #240
 1077 0214 53F8E81C 		ldr	r1, [r3, #-232]
 1078 0218 4FF02102 		mov	r2, #33
 1079 021c 4FF00003 		mov	r3, #0
 1080 0220 C1E90023 		strd	r2, [r1]
 228:nist.c        **** 	return 0;
 1081              		.loc 1 228 9
 1082 0224 0023     		movs	r3, #0
 1083              	.L25:
 229:nist.c        **** }
 1084              		.loc 1 229 1 discriminator 1
 1085 0226 1846     		mov	r0, r3
 1086 0228 07F58757 		add	r7, r7, #4320
 1087 022c 1037     		adds	r7, r7, #16
 1088              	.LCFI16:
 1089              		.cfi_def_cfa_offset 24
 1090 022e BD46     		mov	sp, r7
 1091              	.LCFI17:
 1092              		.cfi_def_cfa_register 13
 1093              		@ sp needed
 1094 0230 BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 1095              		.cfi_endproc
 1096              	.LFE23:
 1098              		.bss
 1099              		.align	3
 1100              	sc.1:
 1101 0000 00000000 		.space	208
 1101      00000000 
 1101      00000000 
 1101      00000000 
 1101      00000000 
 1103              		.align	2
 1104              	r.0:
 1105 00d0 00000000 		.space	1024
 1105      00000000 
 1105      00000000 
 1105      00000000 
 1105      00000000 
 1107              		.text
 1108              	.Letext0:
 1109              		.file 2 "c:\\users\\user\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\gcc-arm-none-eabi-10-2020
 1110              		.file 3 "c:\\users\\user\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\gcc-arm-none-eabi-10-2020
 1111              		.file 4 "c:\\users\\user\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\gcc-arm-none-eabi-10-2020
 1112              		.file 5 "inner.h"
 1113              		.file 6 "fpr.h"
DEFINED SYMBOLS
                            *ABS*:00000000 nist.c
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:16     .rodata:00000000 $d
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:19     .rodata:00000000 fpr_q
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:25     .rodata:00000008 fpr_inverse_of_q
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:31     .rodata:00000010 fpr_inv_2sqrsigma0
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:37     .rodata:00000018 fpr_inv_sigma
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:63     .rodata:00000070 fpr_sigma_min
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:89     .rodata:000000c8 fpr_log2
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:95     .rodata:000000d0 fpr_inv_log2
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:101    .rodata:000000d8 fpr_bnorm_max
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:107    .rodata:000000e0 fpr_zero
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:112    .rodata:000000e8 fpr_one
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:118    .rodata:000000f0 fpr_two
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:124    .rodata:000000f8 fpr_onehalf
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:130    .rodata:00000100 fpr_invsqrt2
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:136    .rodata:00000108 fpr_invsqrt8
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:142    .rodata:00000110 fpr_ptwo31
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:148    .rodata:00000118 fpr_ptwo31m1
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:154    .rodata:00000120 fpr_mtwo31m1
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:160    .rodata:00000128 fpr_ptwo63m1
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:166    .rodata:00000130 fpr_mtwo63m1
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:172    .rodata:00000138 fpr_ptwo63
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:176    .text.crypto_sign_keypair:00000000 $t
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:184    .text.crypto_sign_keypair:00000000 crypto_sign_keypair
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:468    .text.crypto_sign_keypair:00000280 $d
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:646    .text.crypto_sign:00000000 $t
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:653    .text.crypto_sign:00000000 crypto_sign
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:816    .text.crypto_sign:00000158 $d
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:1100   .bss:00000000 sc.1
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:1104   .bss:000000d0 r.0
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:828    .text.crypto_sign_open:00000000 $t
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:835    .text.crypto_sign_open:00000000 crypto_sign_open
C:\Users\user\AppData\Local\Temp\ccDImzGC.s:1099   .bss:00000000 $d

UNDEFINED SYMBOLS
randombytes
falcon_inner_i_shake256_init
falcon_inner_i_shake256_inject
falcon_inner_i_shake256_flip
falcon_inner_keygen
falcon_inner_trim_i8_encode
falcon_inner_modq_encode
falcon_inner_max_fg_bits
falcon_inner_max_FG_bits
memcpy
falcon_inner_hash_to_point_vartime
falcon_inner_sign_dyn
falcon_inner_modq_decode
falcon_inner_to_ntt_monty
falcon_inner_comp_decode
falcon_inner_verify_raw
memmove
