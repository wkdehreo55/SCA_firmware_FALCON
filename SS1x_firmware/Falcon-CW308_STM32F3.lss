
Falcon-CW308_STM32F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002b5c  08002b5c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002b5c  08002b5c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002b5c  08002b5c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b5c  08002b5c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b5c  08002b5c  00012b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b60  08002b60  00012b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000010  08002b74  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000404  200001cc  08002b74  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003bd9  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008e3  00000000  00000000  00023c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000e18  00000000  00000000  000244f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  0002530e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001c0  00000000  00000000  000254de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e78  00000000  00000000  0002569e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000013da  00000000  00000000  00027516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  000288f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000728  00000000  00000000  00028940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  00029068  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000055  00000000  00000000  000291ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b44 	.word	0x08002b44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002b44 	.word	0x08002b44

080001c8 <transform>:
unsigned long long *smlen;
const unsigned char *m;
unsigned long long mlen = 33;
const unsigned char *sk;

uint64_t transform(uint8_t *in) {
 80001c8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80001cc:	b087      	sub	sp, #28
 80001ce:	af00      	add	r7, sp, #0
 80001d0:	6078      	str	r0, [r7, #4]
    uint64_t result = 0;
 80001d2:	f04f 0200 	mov.w	r2, #0
 80001d6:	f04f 0300 	mov.w	r3, #0
 80001da:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < 8; i++) { //8
 80001de:	2300      	movs	r3, #0
 80001e0:	60fb      	str	r3, [r7, #12]
 80001e2:	e021      	b.n	8000228 <transform+0x60>
        result |= in[i];
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	687a      	ldr	r2, [r7, #4]
 80001e8:	4413      	add	r3, r2
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	2200      	movs	r2, #0
 80001f0:	461c      	mov	r4, r3
 80001f2:	4615      	mov	r5, r2
 80001f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80001f8:	ea42 0804 	orr.w	r8, r2, r4
 80001fc:	ea43 0905 	orr.w	r9, r3, r5
 8000200:	e9c7 8904 	strd	r8, r9, [r7, #16]
        if (i != 7) //7
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	2b07      	cmp	r3, #7
 8000208:	d00b      	beq.n	8000222 <transform+0x5a>
            result <<= 8;
 800020a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800020e:	f04f 0200 	mov.w	r2, #0
 8000212:	f04f 0300 	mov.w	r3, #0
 8000216:	020b      	lsls	r3, r1, #8
 8000218:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800021c:	0202      	lsls	r2, r0, #8
 800021e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < 8; i++) { //8
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	3301      	adds	r3, #1
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	2b07      	cmp	r3, #7
 800022c:	ddda      	ble.n	80001e4 <transform+0x1c>
    }
    return result;
 800022e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8000232:	4610      	mov	r0, r2
 8000234:	4619      	mov	r1, r3
 8000236:	371c      	adds	r7, #28
 8000238:	46bd      	mov	sp, r7
 800023a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800023e:	4770      	bx	lr

08000240 <set_f>:
            result <<= 8;
    }
    return result;
}

uint8_t set_f(uint8_t *text_in_buf, uint8_t len) {
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	460b      	mov	r3, r1
 800024a:	70fb      	strb	r3, [r7, #3]
    f = transform(text_in_buf);
 800024c:	6878      	ldr	r0, [r7, #4]
 800024e:	f7ff ffbb 	bl	80001c8 <transform>
 8000252:	4602      	mov	r2, r0
 8000254:	460b      	mov	r3, r1
 8000256:	4904      	ldr	r1, [pc, #16]	; (8000268 <set_f+0x28>)
 8000258:	e9c1 2300 	strd	r2, r3, [r1]
    return 0;
 800025c:	2300      	movs	r3, #0
}
 800025e:	4618      	mov	r0, r3
 8000260:	3708      	adds	r7, #8
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	20000038 	.word	0x20000038

0800026c <sign>:

// hm 값을 설정한다.
uint8_t sign(uint8_t *text_in_buf, uint8_t len) {
 800026c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000270:	b092      	sub	sp, #72	; 0x48
 8000272:	af00      	add	r7, sp, #0
 8000274:	6278      	str	r0, [r7, #36]	; 0x24
 8000276:	460b      	mov	r3, r1
 8000278:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
//        fpr_mul(fpct_a_im, fpct_b_im)); \
//    fpct_d_im = fpr_add(\
//        fpr_mul(fpct_a_re, fpct_b_im), \
//        fpr_mul(fpct_a_im, fpct_b_re)); \
//    trigger_low();
    hm = transform(text_in_buf);
 800027c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800027e:	f7ff ffa3 	bl	80001c8 <transform>
 8000282:	4602      	mov	r2, r0
 8000284:	460b      	mov	r3, r1
 8000286:	4927      	ldr	r1, [pc, #156]	; (8000324 <sign+0xb8>)
 8000288:	e9c1 2300 	strd	r2, r3, [r1]
    uint64_t xu, yu, w, zu, zv;
    uint32_t x0, x1, y0, y1, z0, z1, z2;
    int ex, ey, e, s, d;
//    fpr x = 'c18832928d3bca60';
//    fpr y = 'c03828bb90a8aabc';
    xu = (hm & (((uint64_t) 1 << 52) - 1)) | ((uint64_t) 1 << 52); //1.xx 값의 곱셈이르모 앞에 1을 붙힘 (하위 25비트, 상위 28비트)
 800028c:	4b25      	ldr	r3, [pc, #148]	; (8000324 <sign+0xb8>)
 800028e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000292:	61ba      	str	r2, [r7, #24]
 8000294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000298:	61fb      	str	r3, [r7, #28]
 800029a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800029e:	4611      	mov	r1, r2
 80002a0:	60b9      	str	r1, [r7, #8]
 80002a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80002ac:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    yu = (f & (((uint64_t) 1 << 52) - 1)) | ((uint64_t) 1 << 52);
 80002b0:	4b1d      	ldr	r3, [pc, #116]	; (8000328 <sign+0xbc>)
 80002b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002b6:	613a      	str	r2, [r7, #16]
 80002b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80002bc:	617b      	str	r3, [r7, #20]
 80002be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80002c2:	4611      	mov	r1, r2
 80002c4:	6039      	str	r1, [r7, #0]
 80002c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002ca:	607b      	str	r3, [r7, #4]
 80002cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80002d0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

    trigger_high();
 80002d4:	f000 fc38 	bl	8000b48 <trigger_high>
    x0 = (uint32_t) xu & 0x01FFFFFF;
 80002d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002da:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80002de:	637b      	str	r3, [r7, #52]	; 0x34
//    x1 = (uint32_t) (xu >> 25);
    y0 = (uint32_t) yu & 0x01FFFFFF;
 80002e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80002e2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80002e6:	633b      	str	r3, [r7, #48]	; 0x30
//    y1 = (uint32_t) (yu >> 25);
    w = (uint64_t) x0 * (uint64_t) y0;
 80002e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002ea:	2200      	movs	r2, #0
 80002ec:	469a      	mov	sl, r3
 80002ee:	4693      	mov	fp, r2
 80002f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002f2:	2200      	movs	r2, #0
 80002f4:	4698      	mov	r8, r3
 80002f6:	4691      	mov	r9, r2
 80002f8:	fb08 f20b 	mul.w	r2, r8, fp
 80002fc:	fb0a f309 	mul.w	r3, sl, r9
 8000300:	4413      	add	r3, r2
 8000302:	fbaa 4508 	umull	r4, r5, sl, r8
 8000306:	442b      	add	r3, r5
 8000308:	461d      	mov	r5, r3
 800030a:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 800030e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
    trigger_low();
 8000312:	f000 fc24 	bl	8000b5e <trigger_low>

//	trigger_high();
//	Zf(poly_mul_fft)(hm, b01, logn);
//	trigger_low();
    //Zf(poly_mulconst)(hm, ni, logn);
    return 0;
 8000316:	2300      	movs	r3, #0
}
 8000318:	4618      	mov	r0, r3
 800031a:	3748      	adds	r7, #72	; 0x48
 800031c:	46bd      	mov	sp, r7
 800031e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000322:	bf00      	nop
 8000324:	20000030 	.word	0x20000030
 8000328:	20000038 	.word	0x20000038

0800032c <check_f>:

uint8_t check_f(uint8_t *text_in_buf, uint8_t len) {
 800032c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800032e:	b087      	sub	sp, #28
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	70f9      	strb	r1, [r7, #3]
    uint8_t buf[8];
    for (int i = 0; i < 8; i++)
 8000336:	2100      	movs	r1, #0
 8000338:	6179      	str	r1, [r7, #20]
 800033a:	e01e      	b.n	800037a <check_f+0x4e>
        buf[i] = (f >> (8 * (7 - i))) & 0xff;
 800033c:	4916      	ldr	r1, [pc, #88]	; (8000398 <check_f+0x6c>)
 800033e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000342:	697c      	ldr	r4, [r7, #20]
 8000344:	f1c4 0407 	rsb	r4, r4, #7
 8000348:	00e4      	lsls	r4, r4, #3
 800034a:	f1c4 0620 	rsb	r6, r4, #32
 800034e:	f1a4 0520 	sub.w	r5, r4, #32
 8000352:	fa20 f204 	lsr.w	r2, r0, r4
 8000356:	fa01 f606 	lsl.w	r6, r1, r6
 800035a:	4332      	orrs	r2, r6
 800035c:	fa21 f505 	lsr.w	r5, r1, r5
 8000360:	432a      	orrs	r2, r5
 8000362:	fa21 f304 	lsr.w	r3, r1, r4
 8000366:	b2d4      	uxtb	r4, r2
 8000368:	f107 000c 	add.w	r0, r7, #12
 800036c:	6979      	ldr	r1, [r7, #20]
 800036e:	4401      	add	r1, r0
 8000370:	4620      	mov	r0, r4
 8000372:	7008      	strb	r0, [r1, #0]
    for (int i = 0; i < 8; i++)
 8000374:	6979      	ldr	r1, [r7, #20]
 8000376:	3101      	adds	r1, #1
 8000378:	6179      	str	r1, [r7, #20]
 800037a:	6979      	ldr	r1, [r7, #20]
 800037c:	2907      	cmp	r1, #7
 800037e:	dddd      	ble.n	800033c <check_f+0x10>
    simpleserial_put('r', 8, buf);
 8000380:	f107 030c 	add.w	r3, r7, #12
 8000384:	461a      	mov	r2, r3
 8000386:	2108      	movs	r1, #8
 8000388:	2072      	movs	r0, #114	; 0x72
 800038a:	f000 fad9 	bl	8000940 <simpleserial_put>
    return 0;
 800038e:	2300      	movs	r3, #0
}
 8000390:	4618      	mov	r0, r3
 8000392:	371c      	adds	r7, #28
 8000394:	46bd      	mov	sp, r7
 8000396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000398:	20000038 	.word	0x20000038

0800039c <check_hm>:

uint8_t check_hm(uint8_t *text_in_buf, uint8_t len) {
 800039c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800039e:	b087      	sub	sp, #28
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	70f9      	strb	r1, [r7, #3]
    uint8_t buf[8];
    for (int i = 0; i < 8; i++)
 80003a6:	2100      	movs	r1, #0
 80003a8:	6179      	str	r1, [r7, #20]
 80003aa:	e01e      	b.n	80003ea <check_hm+0x4e>
        buf[i] = (hm >> (8 * (7 - i))) & 0xff;
 80003ac:	4916      	ldr	r1, [pc, #88]	; (8000408 <check_hm+0x6c>)
 80003ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80003b2:	697c      	ldr	r4, [r7, #20]
 80003b4:	f1c4 0407 	rsb	r4, r4, #7
 80003b8:	00e4      	lsls	r4, r4, #3
 80003ba:	f1c4 0620 	rsb	r6, r4, #32
 80003be:	f1a4 0520 	sub.w	r5, r4, #32
 80003c2:	fa20 f204 	lsr.w	r2, r0, r4
 80003c6:	fa01 f606 	lsl.w	r6, r1, r6
 80003ca:	4332      	orrs	r2, r6
 80003cc:	fa21 f505 	lsr.w	r5, r1, r5
 80003d0:	432a      	orrs	r2, r5
 80003d2:	fa21 f304 	lsr.w	r3, r1, r4
 80003d6:	b2d4      	uxtb	r4, r2
 80003d8:	f107 000c 	add.w	r0, r7, #12
 80003dc:	6979      	ldr	r1, [r7, #20]
 80003de:	4401      	add	r1, r0
 80003e0:	4620      	mov	r0, r4
 80003e2:	7008      	strb	r0, [r1, #0]
    for (int i = 0; i < 8; i++)
 80003e4:	6979      	ldr	r1, [r7, #20]
 80003e6:	3101      	adds	r1, #1
 80003e8:	6179      	str	r1, [r7, #20]
 80003ea:	6979      	ldr	r1, [r7, #20]
 80003ec:	2907      	cmp	r1, #7
 80003ee:	dddd      	ble.n	80003ac <check_hm+0x10>
    simpleserial_put('r', 8, buf);
 80003f0:	f107 030c 	add.w	r3, r7, #12
 80003f4:	461a      	mov	r2, r3
 80003f6:	2108      	movs	r1, #8
 80003f8:	2072      	movs	r0, #114	; 0x72
 80003fa:	f000 faa1 	bl	8000940 <simpleserial_put>
    return 0;
 80003fe:	2300      	movs	r3, #0
}
 8000400:	4618      	mov	r0, r3
 8000402:	371c      	adds	r7, #28
 8000404:	46bd      	mov	sp, r7
 8000406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000408:	20000030 	.word	0x20000030

0800040c <main>:
//    // trigger_low();
//
//    return 0;
//}

int main(void) {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0


    platform_init();
 8000410:	f000 facc 	bl	80009ac <platform_init>
    init_uart();
 8000414:	f000 fb1c 	bl	8000a50 <init_uart>
    trigger_setup();
 8000418:	f000 fb6a 	bl	8000af0 <trigger_setup>
    putch('l');
    putch('o');
    putch('\n');
    */

    simpleserial_init();  // 'v': check_version, 'y': ss_num_commands, 'w': ss_get_commands
 800041c:	f000 f93e 	bl	800069c <simpleserial_init>

    simpleserial_addcmd('f', 8, set_f);
 8000420:	4a0b      	ldr	r2, [pc, #44]	; (8000450 <main+0x44>)
 8000422:	2108      	movs	r1, #8
 8000424:	2066      	movs	r0, #102	; 0x66
 8000426:	f000 f953 	bl	80006d0 <simpleserial_addcmd>
    simpleserial_addcmd('s', 8, sign);
 800042a:	4a0a      	ldr	r2, [pc, #40]	; (8000454 <main+0x48>)
 800042c:	2108      	movs	r1, #8
 800042e:	2073      	movs	r0, #115	; 0x73
 8000430:	f000 f94e 	bl	80006d0 <simpleserial_addcmd>
    simpleserial_addcmd('c', 0, check_f);
 8000434:	4a08      	ldr	r2, [pc, #32]	; (8000458 <main+0x4c>)
 8000436:	2100      	movs	r1, #0
 8000438:	2063      	movs	r0, #99	; 0x63
 800043a:	f000 f949 	bl	80006d0 <simpleserial_addcmd>
    simpleserial_addcmd('h', 0, check_hm);
 800043e:	4a07      	ldr	r2, [pc, #28]	; (800045c <main+0x50>)
 8000440:	2100      	movs	r1, #0
 8000442:	2068      	movs	r0, #104	; 0x68
 8000444:	f000 f944 	bl	80006d0 <simpleserial_addcmd>
    while (1)
        simpleserial_get();
 8000448:	f000 f998 	bl	800077c <simpleserial_get>
 800044c:	e7fc      	b.n	8000448 <main+0x3c>
 800044e:	bf00      	nop
 8000450:	08000241 	.word	0x08000241
 8000454:	0800026d 	.word	0x0800026d
 8000458:	0800032d 	.word	0x0800032d
 800045c:	0800039d 	.word	0x0800039d

08000460 <check_version>:
} ss_cmd;
static ss_cmd commands[MAX_SS_CMDS];
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	460b      	mov	r3, r1
 800046a:	70fb      	strb	r3, [r7, #3]
	return SS_VER;
 800046c:	2301      	movs	r3, #1
}
 800046e:	4618      	mov	r0, r3
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr

08000478 <ss_num_commands>:

uint8_t ss_num_commands(uint8_t *x, uint8_t len)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	460b      	mov	r3, r1
 8000482:	70fb      	strb	r3, [r7, #3]
    uint8_t ncmds = num_commands & 0xFF;
 8000484:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <ss_num_commands+0x2c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	b2db      	uxtb	r3, r3
 800048a:	73fb      	strb	r3, [r7, #15]
    simpleserial_put('r', 0x01, &ncmds);
 800048c:	f107 030f 	add.w	r3, r7, #15
 8000490:	461a      	mov	r2, r3
 8000492:	2101      	movs	r1, #1
 8000494:	2072      	movs	r0, #114	; 0x72
 8000496:	f000 fa53 	bl	8000940 <simpleserial_put>
    return 0x00;
 800049a:	2300      	movs	r3, #0
}
 800049c:	4618      	mov	r0, r3
 800049e:	3710      	adds	r7, #16
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	20000050 	.word	0x20000050

080004a8 <ss_get_commands>:
    uint8_t len;
    uint8_t flags;
} ss_cmd_repr;

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b090      	sub	sp, #64	; 0x40
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	460b      	mov	r3, r1
 80004b2:	70fb      	strb	r3, [r7, #3]
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80004b4:	2300      	movs	r3, #0
 80004b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80004ba:	e03a      	b.n	8000532 <ss_get_commands+0x8a>
        repr_cmd_buf[i].c = commands[i].c;
 80004bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80004c0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80004c4:	4927      	ldr	r1, [pc, #156]	; (8000564 <ss_get_commands+0xbc>)
 80004c6:	011b      	lsls	r3, r3, #4
 80004c8:	440b      	add	r3, r1
 80004ca:	7819      	ldrb	r1, [r3, #0]
 80004cc:	4613      	mov	r3, r2
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	4413      	add	r3, r2
 80004d2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80004d6:	4413      	add	r3, r2
 80004d8:	3b34      	subs	r3, #52	; 0x34
 80004da:	460a      	mov	r2, r1
 80004dc:	701a      	strb	r2, [r3, #0]
        repr_cmd_buf[i].len = commands[i].len;
 80004de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80004e2:	4a20      	ldr	r2, [pc, #128]	; (8000564 <ss_get_commands+0xbc>)
 80004e4:	011b      	lsls	r3, r3, #4
 80004e6:	4413      	add	r3, r2
 80004e8:	3304      	adds	r3, #4
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80004f0:	b2d9      	uxtb	r1, r3
 80004f2:	4613      	mov	r3, r2
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	4413      	add	r3, r2
 80004f8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80004fc:	4413      	add	r3, r2
 80004fe:	3b33      	subs	r3, #51	; 0x33
 8000500:	460a      	mov	r2, r1
 8000502:	701a      	strb	r2, [r3, #0]
        repr_cmd_buf[i].flags = commands[i].flags;
 8000504:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000508:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800050c:	4915      	ldr	r1, [pc, #84]	; (8000564 <ss_get_commands+0xbc>)
 800050e:	011b      	lsls	r3, r3, #4
 8000510:	440b      	add	r3, r1
 8000512:	330c      	adds	r3, #12
 8000514:	7819      	ldrb	r1, [r3, #0]
 8000516:	4613      	mov	r3, r2
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	4413      	add	r3, r2
 800051c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000520:	4413      	add	r3, r2
 8000522:	3b32      	subs	r3, #50	; 0x32
 8000524:	460a      	mov	r2, r1
 8000526:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000528:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800052c:	3301      	adds	r3, #1
 800052e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000532:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <ss_get_commands+0xc0>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	b2db      	uxtb	r3, r3
 800053c:	429a      	cmp	r2, r3
 800053e:	dbbd      	blt.n	80004bc <ss_get_commands+0x14>
    }

    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <ss_get_commands+0xc0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	461a      	mov	r2, r3
 8000548:	0052      	lsls	r2, r2, #1
 800054a:	4413      	add	r3, r2
 800054c:	b2db      	uxtb	r3, r3
 800054e:	f107 020c 	add.w	r2, r7, #12
 8000552:	4619      	mov	r1, r3
 8000554:	2072      	movs	r0, #114	; 0x72
 8000556:	f000 f9f3 	bl	8000940 <simpleserial_put>
    return 0x00;
 800055a:	2300      	movs	r3, #0
}
 800055c:	4618      	mov	r0, r3
 800055e:	3740      	adds	r7, #64	; 0x40
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000054 	.word	0x20000054
 8000568:	20000050 	.word	0x20000050

0800056c <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 800056c:	b480      	push	{r7}
 800056e:	b087      	sub	sp, #28
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	e083      	b.n	8000686 <hex_decode+0x11a>
	{
		char n_hi = ascii_buf[2*i];
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	461a      	mov	r2, r3
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	4413      	add	r3, r2
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	74fb      	strb	r3, [r7, #19]
		char n_lo = ascii_buf[2*i+1];
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	3301      	adds	r3, #1
 8000592:	68ba      	ldr	r2, [r7, #8]
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	74bb      	strb	r3, [r7, #18]

		if(n_lo >= '0' && n_lo <= '9')
 800059a:	7cbb      	ldrb	r3, [r7, #18]
 800059c:	2b2f      	cmp	r3, #47	; 0x2f
 800059e:	d90a      	bls.n	80005b6 <hex_decode+0x4a>
 80005a0:	7cbb      	ldrb	r3, [r7, #18]
 80005a2:	2b39      	cmp	r3, #57	; 0x39
 80005a4:	d807      	bhi.n	80005b6 <hex_decode+0x4a>
			data_buf[i] = n_lo - '0';
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4413      	add	r3, r2
 80005ac:	7cba      	ldrb	r2, [r7, #18]
 80005ae:	3a30      	subs	r2, #48	; 0x30
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	701a      	strb	r2, [r3, #0]
 80005b4:	e01d      	b.n	80005f2 <hex_decode+0x86>
		else if(n_lo >= 'A' && n_lo <= 'F')
 80005b6:	7cbb      	ldrb	r3, [r7, #18]
 80005b8:	2b40      	cmp	r3, #64	; 0x40
 80005ba:	d90a      	bls.n	80005d2 <hex_decode+0x66>
 80005bc:	7cbb      	ldrb	r3, [r7, #18]
 80005be:	2b46      	cmp	r3, #70	; 0x46
 80005c0:	d807      	bhi.n	80005d2 <hex_decode+0x66>
			data_buf[i] = n_lo - 'A' + 10;
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	4413      	add	r3, r2
 80005c8:	7cba      	ldrb	r2, [r7, #18]
 80005ca:	3a37      	subs	r2, #55	; 0x37
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	701a      	strb	r2, [r3, #0]
 80005d0:	e00f      	b.n	80005f2 <hex_decode+0x86>
		else if(n_lo >= 'a' && n_lo <= 'f')
 80005d2:	7cbb      	ldrb	r3, [r7, #18]
 80005d4:	2b60      	cmp	r3, #96	; 0x60
 80005d6:	d90a      	bls.n	80005ee <hex_decode+0x82>
 80005d8:	7cbb      	ldrb	r3, [r7, #18]
 80005da:	2b66      	cmp	r3, #102	; 0x66
 80005dc:	d807      	bhi.n	80005ee <hex_decode+0x82>
			data_buf[i] = n_lo - 'a' + 10;
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	4413      	add	r3, r2
 80005e4:	7cba      	ldrb	r2, [r7, #18]
 80005e6:	3a57      	subs	r2, #87	; 0x57
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	701a      	strb	r2, [r3, #0]
 80005ec:	e001      	b.n	80005f2 <hex_decode+0x86>
		else
			return 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e04f      	b.n	8000692 <hex_decode+0x126>

		if(n_hi >= '0' && n_hi <= '9')
 80005f2:	7cfb      	ldrb	r3, [r7, #19]
 80005f4:	2b2f      	cmp	r3, #47	; 0x2f
 80005f6:	d913      	bls.n	8000620 <hex_decode+0xb4>
 80005f8:	7cfb      	ldrb	r3, [r7, #19]
 80005fa:	2b39      	cmp	r3, #57	; 0x39
 80005fc:	d810      	bhi.n	8000620 <hex_decode+0xb4>
			data_buf[i] |= (n_hi - '0') << 4;
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	4413      	add	r3, r2
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	b25a      	sxtb	r2, r3
 8000608:	7cfb      	ldrb	r3, [r7, #19]
 800060a:	3b30      	subs	r3, #48	; 0x30
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	b25b      	sxtb	r3, r3
 8000610:	4313      	orrs	r3, r2
 8000612:	b259      	sxtb	r1, r3
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	b2ca      	uxtb	r2, r1
 800061c:	701a      	strb	r2, [r3, #0]
 800061e:	e02f      	b.n	8000680 <hex_decode+0x114>
		else if(n_hi >= 'A' && n_hi <= 'F')
 8000620:	7cfb      	ldrb	r3, [r7, #19]
 8000622:	2b40      	cmp	r3, #64	; 0x40
 8000624:	d913      	bls.n	800064e <hex_decode+0xe2>
 8000626:	7cfb      	ldrb	r3, [r7, #19]
 8000628:	2b46      	cmp	r3, #70	; 0x46
 800062a:	d810      	bhi.n	800064e <hex_decode+0xe2>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b25a      	sxtb	r2, r3
 8000636:	7cfb      	ldrb	r3, [r7, #19]
 8000638:	3b37      	subs	r3, #55	; 0x37
 800063a:	011b      	lsls	r3, r3, #4
 800063c:	b25b      	sxtb	r3, r3
 800063e:	4313      	orrs	r3, r2
 8000640:	b259      	sxtb	r1, r3
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	4413      	add	r3, r2
 8000648:	b2ca      	uxtb	r2, r1
 800064a:	701a      	strb	r2, [r3, #0]
 800064c:	e018      	b.n	8000680 <hex_decode+0x114>
		else if(n_hi >= 'a' && n_hi <= 'f')
 800064e:	7cfb      	ldrb	r3, [r7, #19]
 8000650:	2b60      	cmp	r3, #96	; 0x60
 8000652:	d913      	bls.n	800067c <hex_decode+0x110>
 8000654:	7cfb      	ldrb	r3, [r7, #19]
 8000656:	2b66      	cmp	r3, #102	; 0x66
 8000658:	d810      	bhi.n	800067c <hex_decode+0x110>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b25a      	sxtb	r2, r3
 8000664:	7cfb      	ldrb	r3, [r7, #19]
 8000666:	3b57      	subs	r3, #87	; 0x57
 8000668:	011b      	lsls	r3, r3, #4
 800066a:	b25b      	sxtb	r3, r3
 800066c:	4313      	orrs	r3, r2
 800066e:	b259      	sxtb	r1, r3
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	b2ca      	uxtb	r2, r1
 8000678:	701a      	strb	r2, [r3, #0]
 800067a:	e001      	b.n	8000680 <hex_decode+0x114>
		else
			return 1;
 800067c:	2301      	movs	r3, #1
 800067e:	e008      	b.n	8000692 <hex_decode+0x126>
	for(int i = 0; i < len; i++)
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	3301      	adds	r3, #1
 8000684:	617b      	str	r3, [r7, #20]
 8000686:	697a      	ldr	r2, [r7, #20]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	429a      	cmp	r2, r3
 800068c:	f6ff af77 	blt.w	800057e <hex_decode+0x12>
	}

	return 0;
 8000690:	2300      	movs	r3, #0
}
 8000692:	4618      	mov	r0, r3
 8000694:	371c      	adds	r7, #28
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <simpleserial_init>:


// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	simpleserial_addcmd('v', 0, check_version);
 80006a0:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <simpleserial_init+0x28>)
 80006a2:	2100      	movs	r1, #0
 80006a4:	2076      	movs	r0, #118	; 0x76
 80006a6:	f000 f813 	bl	80006d0 <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 80006aa:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <simpleserial_init+0x2c>)
 80006ac:	2100      	movs	r1, #0
 80006ae:	2077      	movs	r0, #119	; 0x77
 80006b0:	f000 f80e 	bl	80006d0 <simpleserial_addcmd>
    simpleserial_addcmd('y', 0, ss_num_commands);
 80006b4:	4a05      	ldr	r2, [pc, #20]	; (80006cc <simpleserial_init+0x30>)
 80006b6:	2100      	movs	r1, #0
 80006b8:	2079      	movs	r0, #121	; 0x79
 80006ba:	f000 f809 	bl	80006d0 <simpleserial_addcmd>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	08000461 	.word	0x08000461
 80006c8:	080004a9 	.word	0x080004a9
 80006cc:	08000479 	.word	0x08000479

080006d0 <simpleserial_addcmd>:

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t))
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
 80006dc:	73fb      	strb	r3, [r7, #15]
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 80006de:	7bf8      	ldrb	r0, [r7, #15]
 80006e0:	2300      	movs	r3, #0
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	68b9      	ldr	r1, [r7, #8]
 80006e6:	f000 f805 	bl	80006f4 <simpleserial_addcmd_flags>
 80006ea:	4603      	mov	r3, r0
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <simpleserial_addcmd_flags>:

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60b9      	str	r1, [r7, #8]
 80006fc:	607a      	str	r2, [r7, #4]
 80006fe:	461a      	mov	r2, r3
 8000700:	4603      	mov	r3, r0
 8000702:	73fb      	strb	r3, [r7, #15]
 8000704:	4613      	mov	r3, r2
 8000706:	73bb      	strb	r3, [r7, #14]
	if(num_commands >= MAX_SS_CMDS)
 8000708:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <simpleserial_addcmd_flags+0x80>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b0f      	cmp	r3, #15
 800070e:	dd01      	ble.n	8000714 <simpleserial_addcmd_flags+0x20>
		return 1;
 8000710:	2301      	movs	r3, #1
 8000712:	e029      	b.n	8000768 <simpleserial_addcmd_flags+0x74>

	if(len >= MAX_SS_LEN)
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	2bbf      	cmp	r3, #191	; 0xbf
 8000718:	d901      	bls.n	800071e <simpleserial_addcmd_flags+0x2a>
		return 1;
 800071a:	2301      	movs	r3, #1
 800071c:	e024      	b.n	8000768 <simpleserial_addcmd_flags+0x74>

	commands[num_commands].c   = c;
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <simpleserial_addcmd_flags+0x80>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a15      	ldr	r2, [pc, #84]	; (8000778 <simpleserial_addcmd_flags+0x84>)
 8000724:	011b      	lsls	r3, r3, #4
 8000726:	4413      	add	r3, r2
 8000728:	7bfa      	ldrb	r2, [r7, #15]
 800072a:	701a      	strb	r2, [r3, #0]
	commands[num_commands].len = len;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <simpleserial_addcmd_flags+0x80>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a11      	ldr	r2, [pc, #68]	; (8000778 <simpleserial_addcmd_flags+0x84>)
 8000732:	011b      	lsls	r3, r3, #4
 8000734:	4413      	add	r3, r2
 8000736:	3304      	adds	r3, #4
 8000738:	68ba      	ldr	r2, [r7, #8]
 800073a:	601a      	str	r2, [r3, #0]
	commands[num_commands].fp  = fp;
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <simpleserial_addcmd_flags+0x80>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <simpleserial_addcmd_flags+0x84>)
 8000742:	011b      	lsls	r3, r3, #4
 8000744:	4413      	add	r3, r2
 8000746:	3308      	adds	r3, #8
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	601a      	str	r2, [r3, #0]
	commands[num_commands].flags = fl;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <simpleserial_addcmd_flags+0x80>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a09      	ldr	r2, [pc, #36]	; (8000778 <simpleserial_addcmd_flags+0x84>)
 8000752:	011b      	lsls	r3, r3, #4
 8000754:	4413      	add	r3, r2
 8000756:	330c      	adds	r3, #12
 8000758:	7bba      	ldrb	r2, [r7, #14]
 800075a:	701a      	strb	r2, [r3, #0]
	num_commands++;
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <simpleserial_addcmd_flags+0x80>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	3301      	adds	r3, #1
 8000762:	4a04      	ldr	r2, [pc, #16]	; (8000774 <simpleserial_addcmd_flags+0x80>)
 8000764:	6013      	str	r3, [r2, #0]

	return 0;
 8000766:	2300      	movs	r3, #0
}
 8000768:	4618      	mov	r0, r3
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	20000050 	.word	0x20000050
 8000778:	20000054 	.word	0x20000054

0800077c <simpleserial_get>:

void simpleserial_get(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8000782:	af00      	add	r7, sp, #0
	char ascii_buf[2*MAX_SS_LEN];
	uint8_t data_buf[MAX_SS_LEN];
	char c;

	// Find which command we're receiving
	c = getch();
 8000784:	f000 f9f6 	bl	8000b74 <getch>
 8000788:	4603      	mov	r3, r0
 800078a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 800078e:	2300      	movs	r3, #0
 8000790:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8000794:	e00e      	b.n	80007b4 <simpleserial_get+0x38>
	{
		if(commands[cmd].c == c)
 8000796:	4a68      	ldr	r2, [pc, #416]	; (8000938 <simpleserial_get+0x1bc>)
 8000798:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800079c:	011b      	lsls	r3, r3, #4
 800079e:	4413      	add	r3, r2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d00b      	beq.n	80007c2 <simpleserial_get+0x46>
	for(cmd = 0; cmd < num_commands; cmd++)
 80007aa:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80007ae:	3301      	adds	r3, #1
 80007b0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80007b4:	4b61      	ldr	r3, [pc, #388]	; (800093c <simpleserial_get+0x1c0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80007bc:	429a      	cmp	r2, r3
 80007be:	dbea      	blt.n	8000796 <simpleserial_get+0x1a>
 80007c0:	e000      	b.n	80007c4 <simpleserial_get+0x48>
			break;
 80007c2:	bf00      	nop
	}

	// If we didn't find a match, give up right away
	if(cmd == num_commands)
 80007c4:	4b5d      	ldr	r3, [pc, #372]	; (800093c <simpleserial_get+0x1c0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80007cc:	429a      	cmp	r2, r3
 80007ce:	f000 80a6 	beq.w	800091e <simpleserial_get+0x1a2>
		return;

	// If flag CMD_FLAG_LEN is set, the next byte indicates the sent length
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 80007d2:	4a59      	ldr	r2, [pc, #356]	; (8000938 <simpleserial_get+0x1bc>)
 80007d4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80007d8:	011b      	lsls	r3, r3, #4
 80007da:	4413      	add	r3, r2
 80007dc:	330c      	adds	r3, #12
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d02d      	beq.n	8000844 <simpleserial_get+0xc8>
	{
		uint8_t l = 0;
 80007e8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80007ec:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
		char buff[2];
		buff[0] = getch();
 80007f4:	f000 f9be 	bl	8000b74 <getch>
 80007f8:	4603      	mov	r3, r0
 80007fa:	461a      	mov	r2, r3
 80007fc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000800:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8000804:	701a      	strb	r2, [r3, #0]
		buff[1] = getch();
 8000806:	f000 f9b5 	bl	8000b74 <getch>
 800080a:	4603      	mov	r3, r0
 800080c:	461a      	mov	r2, r3
 800080e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000812:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8000816:	705a      	strb	r2, [r3, #1]
		if (hex_decode(1, buff, &l))
 8000818:	1dfa      	adds	r2, r7, #7
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	4619      	mov	r1, r3
 800081e:	2001      	movs	r0, #1
 8000820:	f7ff fea4 	bl	800056c <hex_decode>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d17b      	bne.n	8000922 <simpleserial_get+0x1a6>
			return;
		commands[cmd].len = l;
 800082a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800082e:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4619      	mov	r1, r3
 8000836:	4a40      	ldr	r2, [pc, #256]	; (8000938 <simpleserial_get+0x1bc>)
 8000838:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	4413      	add	r3, r2
 8000840:	3304      	adds	r3, #4
 8000842:	6019      	str	r1, [r3, #0]
	}

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8000844:	2300      	movs	r3, #0
 8000846:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800084a:	e01b      	b.n	8000884 <simpleserial_get+0x108>
	{
		c = getch();
 800084c:	f000 f992 	bl	8000b74 <getch>
 8000850:	4603      	mov	r3, r0
 8000852:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f

		// Check for early \n
		if(c == '\n' || c == '\r')
 8000856:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800085a:	2b0a      	cmp	r3, #10
 800085c:	d063      	beq.n	8000926 <simpleserial_get+0x1aa>
 800085e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8000862:	2b0d      	cmp	r3, #13
 8000864:	d05f      	beq.n	8000926 <simpleserial_get+0x1aa>
			return;

		ascii_buf[i] = c;
 8000866:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800086a:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800086e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8000872:	4413      	add	r3, r2
 8000874:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 8000878:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 2*commands[cmd].len; i++)
 800087a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800087e:	3301      	adds	r3, #1
 8000880:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8000884:	4a2c      	ldr	r2, [pc, #176]	; (8000938 <simpleserial_get+0x1bc>)
 8000886:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800088a:	011b      	lsls	r3, r3, #4
 800088c:	4413      	add	r3, r2
 800088e:	3304      	adds	r3, #4
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	005a      	lsls	r2, r3, #1
 8000894:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8000898:	429a      	cmp	r2, r3
 800089a:	d8d7      	bhi.n	800084c <simpleserial_get+0xd0>
	}

	// Assert that last character is \n or \r
	c = getch();
 800089c:	f000 f96a 	bl	8000b74 <getch>
 80008a0:	4603      	mov	r3, r0
 80008a2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
	if(c != '\n' && c != '\r')
 80008a6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80008aa:	2b0a      	cmp	r3, #10
 80008ac:	d003      	beq.n	80008b6 <simpleserial_get+0x13a>
 80008ae:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80008b2:	2b0d      	cmp	r3, #13
 80008b4:	d139      	bne.n	800092a <simpleserial_get+0x1ae>
		return;

	// ASCII buffer is full: convert to bytes
	// Check for illegal characters here
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 80008b6:	4a20      	ldr	r2, [pc, #128]	; (8000938 <simpleserial_get+0x1bc>)
 80008b8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80008bc:	011b      	lsls	r3, r3, #4
 80008be:	4413      	add	r3, r2
 80008c0:	3304      	adds	r3, #4
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f107 020c 	add.w	r2, r7, #12
 80008ca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008ce:	4619      	mov	r1, r3
 80008d0:	f7ff fe4c 	bl	800056c <hex_decode>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d129      	bne.n	800092e <simpleserial_get+0x1b2>
		return;

	// Callback
	uint8_t ret[1];
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 80008da:	4a17      	ldr	r2, [pc, #92]	; (8000938 <simpleserial_get+0x1bc>)
 80008dc:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80008e0:	011b      	lsls	r3, r3, #4
 80008e2:	4413      	add	r3, r2
 80008e4:	3308      	adds	r3, #8
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4913      	ldr	r1, [pc, #76]	; (8000938 <simpleserial_get+0x1bc>)
 80008ea:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	440a      	add	r2, r1
 80008f2:	3204      	adds	r2, #4
 80008f4:	6812      	ldr	r2, [r2, #0]
 80008f6:	b2d1      	uxtb	r1, r2
 80008f8:	f107 020c 	add.w	r2, r7, #12
 80008fc:	4610      	mov	r0, r2
 80008fe:	4798      	blx	r3
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000908:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800090c:	701a      	strb	r2, [r3, #0]

	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	461a      	mov	r2, r3
 8000914:	2101      	movs	r1, #1
 8000916:	207a      	movs	r0, #122	; 0x7a
 8000918:	f000 f812 	bl	8000940 <simpleserial_put>
 800091c:	e008      	b.n	8000930 <simpleserial_get+0x1b4>
		return;
 800091e:	bf00      	nop
 8000920:	e006      	b.n	8000930 <simpleserial_get+0x1b4>
			return;
 8000922:	bf00      	nop
 8000924:	e004      	b.n	8000930 <simpleserial_get+0x1b4>
			return;
 8000926:	bf00      	nop
 8000928:	e002      	b.n	8000930 <simpleserial_get+0x1b4>
		return;
 800092a:	bf00      	nop
 800092c:	e000      	b.n	8000930 <simpleserial_get+0x1b4>
		return;
 800092e:	bf00      	nop
#endif
}
 8000930:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000054 	.word	0x20000054
 800093c:	20000050 	.word	0x20000050

08000940 <simpleserial_put>:

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	603a      	str	r2, [r7, #0]
 800094a:	71fb      	strb	r3, [r7, #7]
 800094c:	460b      	mov	r3, r1
 800094e:	71bb      	strb	r3, [r7, #6]
	// Write first character
	putch(c);
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f92c 	bl	8000bb0 <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	e019      	b.n	8000992 <simpleserial_put+0x52>
	{
		putch(hex_lookup[output[i] >> 4 ]);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	683a      	ldr	r2, [r7, #0]
 8000962:	4413      	add	r3, r2
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	091b      	lsrs	r3, r3, #4
 8000968:	b2db      	uxtb	r3, r3
 800096a:	461a      	mov	r2, r3
 800096c:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <simpleserial_put+0x68>)
 800096e:	5c9b      	ldrb	r3, [r3, r2]
 8000970:	4618      	mov	r0, r3
 8000972:	f000 f91d 	bl	8000bb0 <putch>
		putch(hex_lookup[output[i] & 0xF]);
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	683a      	ldr	r2, [r7, #0]
 800097a:	4413      	add	r3, r2
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	f003 030f 	and.w	r3, r3, #15
 8000982:	4a09      	ldr	r2, [pc, #36]	; (80009a8 <simpleserial_put+0x68>)
 8000984:	5cd3      	ldrb	r3, [r2, r3]
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f912 	bl	8000bb0 <putch>
	for(int i = 0; i < size; i++)
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	3301      	adds	r3, #1
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	79bb      	ldrb	r3, [r7, #6]
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	429a      	cmp	r2, r3
 8000998:	dbe1      	blt.n	800095e <simpleserial_put+0x1e>
	}

	// Write trailing '\n'
	putch('\n');
 800099a:	200a      	movs	r0, #10
 800099c:	f000 f908 	bl	8000bb0 <putch>
}
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000000 	.word	0x20000000

080009ac <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b096      	sub	sp, #88	; 0x58
 80009b0:	af00      	add	r7, sp, #0
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 80009b2:	2303      	movs	r3, #3
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80009b6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80009bc:	2300      	movs	r3, #0
 80009be:	63fb      	str	r3, [r7, #60]	; 0x3c
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	64fb      	str	r3, [r7, #76]	; 0x4c
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80009c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 f925 	bl	8000c18 <HAL_RCC_OscConfig>

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80009ce:	230f      	movs	r3, #15
 80009d0:	61bb      	str	r3, [r7, #24]
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61fb      	str	r3, [r7, #28]
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
     uint32_t flash_latency = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	657b      	str	r3, [r7, #84]	; 0x54
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80009e6:	f107 0318 	add.w	r3, r7, #24
 80009ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 f923 	bl	8001c38 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <platform_init+0x9c>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <platform_init+0x9c>)
 80009f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009fc:	6153      	str	r3, [r2, #20]
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <platform_init+0x9c>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8000a0a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a0e:	607b      	str	r3, [r7, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480a      	ldr	r0, [pc, #40]	; (8000a4c <platform_init+0xa0>)
 8000a22:	f001 fa93 	bl	8001f4c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2c:	4807      	ldr	r0, [pc, #28]	; (8000a4c <platform_init+0xa0>)
 8000a2e:	f001 fc0b 	bl	8002248 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <platform_init+0xa0>)
 8000a3a:	f001 fc05 	bl	8002248 <HAL_GPIO_WritePin>
#endif
}
 8000a3e:	bf00      	nop
 8000a40:	3758      	adds	r7, #88	; 0x58
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	48000800 	.word	0x48000800

08000a50 <init_uart>:

void init_uart(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8000a56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a5a:	60fb      	str	r3, [r7, #12]
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	613b      	str	r3, [r7, #16]
  GpioInit.Pull      = GPIO_PULLUP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	61bb      	str	r3, [r7, #24]
  GpioInit.Alternate = GPIO_AF7_USART1;
 8000a68:	2307      	movs	r3, #7
 8000a6a:	61fb      	str	r3, [r7, #28]
  __GPIOA_CLK_ENABLE();
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <init_uart+0x94>)
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	4a1c      	ldr	r2, [pc, #112]	; (8000ae4 <init_uart+0x94>)
 8000a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a76:	6153      	str	r3, [r2, #20]
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <init_uart+0x94>)
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8e:	f001 fa5d 	bl	8001f4c <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <init_uart+0x98>)
 8000a94:	4a15      	ldr	r2, [pc, #84]	; (8000aec <init_uart+0x9c>)
 8000a96:	601a      	str	r2, [r3, #0]
  #if SS_VER==SS_VER_2_0
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <init_uart+0x98>)
 8000a9a:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000a9e:	605a      	str	r2, [r3, #4]
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <init_uart+0x98>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <init_uart+0x98>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <init_uart+0x98>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <init_uart+0x98>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <init_uart+0x98>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  __USART1_CLK_ENABLE();
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <init_uart+0x94>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <init_uart+0x94>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6193      	str	r3, [r2, #24]
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <init_uart+0x94>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  HAL_UART_Init(&UartHandle);
 8000ad6:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <init_uart+0x98>)
 8000ad8:	f001 fe17 	bl	800270a <HAL_UART_Init>
}
 8000adc:	bf00      	nop
 8000ade:	3720      	adds	r7, #32
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	20000154 	.word	0x20000154
 8000aec:	40013800 	.word	0x40013800

08000af0 <trigger_setup>:

void trigger_setup(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <trigger_setup+0x54>)
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <trigger_setup+0x54>)
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	6153      	str	r3, [r2, #20]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <trigger_setup+0x54>)
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
 8000b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b12:	607b      	str	r3, [r7, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	60bb      	str	r3, [r7, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b28:	f001 fa10 	bl	8001f4c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b36:	f001 fb87 	bl	8002248 <HAL_GPIO_WritePin>
}
 8000b3a:	bf00      	nop
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40021000 	.word	0x40021000

08000b48 <trigger_high>:

void trigger_high(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b56:	f001 fb77 	bl	8002248 <HAL_GPIO_WritePin>
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <trigger_low>:

void trigger_low(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6c:	f001 fb6c 	bl	8002248 <HAL_GPIO_WritePin>
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <getch>:

char getch(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000b7a:	e005      	b.n	8000b88 <getch+0x14>
    USART1->ICR |= (1 << 3);
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <getch+0x34>)
 8000b7e:	6a1b      	ldr	r3, [r3, #32]
 8000b80:	4a09      	ldr	r2, [pc, #36]	; (8000ba8 <getch+0x34>)
 8000b82:	f043 0308 	orr.w	r3, r3, #8
 8000b86:	6213      	str	r3, [r2, #32]
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000b88:	1df9      	adds	r1, r7, #7
 8000b8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b8e:	2201      	movs	r2, #1
 8000b90:	4806      	ldr	r0, [pc, #24]	; (8000bac <getch+0x38>)
 8000b92:	f001 fed8 	bl	8002946 <HAL_UART_Receive>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1ef      	bne.n	8000b7c <getch+0x8>
  //putch(d);
  return d;
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40013800 	.word	0x40013800
 8000bac:	20000154 	.word	0x20000154

08000bb0 <putch>:

void putch(char c)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  uint8_t d  = c;
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000bbe:	f107 010f 	add.w	r1, r7, #15
 8000bc2:	f241 3388 	movw	r3, #5000	; 0x1388
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <putch+0x28>)
 8000bca:	f001 fe2f 	bl	800282c <HAL_UART_Transmit>
}
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000154 	.word	0x20000154

08000bdc <HAL_GetTick>:
{
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
	return hal_sys_tick++;
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <HAL_GetTick+0x18>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	1c5a      	adds	r2, r3, #1
 8000be6:	4903      	ldr	r1, [pc, #12]	; (8000bf4 <HAL_GetTick+0x18>)
 8000be8:	600a      	str	r2, [r1, #0]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	200001c4 	.word	0x200001c4

08000bf8 <HAL_RCC_GetSysClockFreq>:

#define UART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
                                     USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8)) /*!< UART or USART CR1 fields of parameters set by UART_SetConfig API */

uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
	return F_CPU;
 8000bfc:	f44f 03e1 	mov.w	r3, #7372800	; 0x708000
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <HAL_RCC_GetPCLK1Freq>:

uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
	return F_CPU;
 8000c0c:	f44f 03e1 	mov.w	r3, #7372800	; 0x708000
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c28:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f000 8180 	beq.w	8000f46 <HAL_RCC_OscConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c46:	4bbe      	ldr	r3, [pc, #760]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 030c 	and.w	r3, r3, #12
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	d00c      	beq.n	8000c6c <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c52:	4bbb      	ldr	r3, [pc, #748]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 030c 	and.w	r3, r3, #12
 8000c5a:	2b08      	cmp	r3, #8
 8000c5c:	d15d      	bne.n	8000d1a <HAL_RCC_OscConfig+0x102>
 8000c5e:	4bb8      	ldr	r3, [pc, #736]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c6a:	d156      	bne.n	8000d1a <HAL_RCC_OscConfig+0x102>
 8000c6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c70:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c74:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000c78:	fa93 f3a3 	rbit	r3, r3
 8000c7c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000c80:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c84:	fab3 f383 	clz	r3, r3
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	095b      	lsrs	r3, r3, #5
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d102      	bne.n	8000c9e <HAL_RCC_OscConfig+0x86>
 8000c98:	4ba9      	ldr	r3, [pc, #676]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	e015      	b.n	8000cca <HAL_RCC_OscConfig+0xb2>
 8000c9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ca2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000caa:	fa93 f3a3 	rbit	r3, r3
 8000cae:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000cb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000cba:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000cbe:	fa93 f3a3 	rbit	r3, r3
 8000cc2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000cc6:	4b9e      	ldr	r3, [pc, #632]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cce:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000cd2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000cd6:	fa92 f2a2 	rbit	r2, r2
 8000cda:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8000cde:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	b252      	sxtb	r2, r2
 8000ce8:	f042 0220 	orr.w	r2, r2, #32
 8000cec:	b252      	sxtb	r2, r2
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	f002 021f 	and.w	r2, r2, #31
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	f000 8121 	beq.w	8000f44 <HAL_RCC_OscConfig+0x32c>
 8000d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 8118 	bne.w	8000f44 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	f000 bf87 	b.w	8001c28 <HAL_RCC_OscConfig+0x1010>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d2a:	d106      	bne.n	8000d3a <HAL_RCC_OscConfig+0x122>
 8000d2c:	4b84      	ldr	r3, [pc, #528]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a83      	ldr	r2, [pc, #524]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	e036      	b.n	8000da8 <HAL_RCC_OscConfig+0x190>
 8000d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10c      	bne.n	8000d64 <HAL_RCC_OscConfig+0x14c>
 8000d4a:	4b7d      	ldr	r3, [pc, #500]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a7c      	ldr	r2, [pc, #496]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	4b7a      	ldr	r3, [pc, #488]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a79      	ldr	r2, [pc, #484]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	e021      	b.n	8000da8 <HAL_RCC_OscConfig+0x190>
 8000d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d74:	d10c      	bne.n	8000d90 <HAL_RCC_OscConfig+0x178>
 8000d76:	4b72      	ldr	r3, [pc, #456]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a71      	ldr	r2, [pc, #452]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	4b6f      	ldr	r3, [pc, #444]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a6e      	ldr	r2, [pc, #440]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	e00b      	b.n	8000da8 <HAL_RCC_OscConfig+0x190>
 8000d90:	4b6b      	ldr	r3, [pc, #428]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a6a      	ldr	r2, [pc, #424]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	4b68      	ldr	r3, [pc, #416]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a67      	ldr	r2, [pc, #412]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000da8:	4b65      	ldr	r3, [pc, #404]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dac:	f023 020f 	bic.w	r2, r3, #15
 8000db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000db4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	4960      	ldr	r1, [pc, #384]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d05a      	beq.n	8000e88 <HAL_RCC_OscConfig+0x270>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd2:	f7ff ff03 	bl	8000bdc <HAL_GetTick>
 8000dd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dda:	e00a      	b.n	8000df2 <HAL_RCC_OscConfig+0x1da>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ddc:	f7ff fefe 	bl	8000bdc <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	2b64      	cmp	r3, #100	; 0x64
 8000dea:	d902      	bls.n	8000df2 <HAL_RCC_OscConfig+0x1da>
          {
            return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	f000 bf1b 	b.w	8001c28 <HAL_RCC_OscConfig+0x1010>
 8000df2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfa:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000dfe:	fa93 f3a3 	rbit	r3, r3
 8000e02:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000e06:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e0a:	fab3 f383 	clz	r3, r3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	095b      	lsrs	r3, r3, #5
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d102      	bne.n	8000e24 <HAL_RCC_OscConfig+0x20c>
 8000e1e:	4b48      	ldr	r3, [pc, #288]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	e015      	b.n	8000e50 <HAL_RCC_OscConfig+0x238>
 8000e24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e28:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000e30:	fa93 f3a3 	rbit	r3, r3
 8000e34:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e3c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e40:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000e44:	fa93 f3a3 	rbit	r3, r3
 8000e48:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e4c:	4b3c      	ldr	r3, [pc, #240]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e54:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000e58:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000e5c:	fa92 f2a2 	rbit	r2, r2
 8000e60:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000e64:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000e68:	fab2 f282 	clz	r2, r2
 8000e6c:	b252      	sxtb	r2, r2
 8000e6e:	f042 0220 	orr.w	r2, r2, #32
 8000e72:	b252      	sxtb	r2, r2
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	f002 021f 	and.w	r2, r2, #31
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e80:	4013      	ands	r3, r2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d0aa      	beq.n	8000ddc <HAL_RCC_OscConfig+0x1c4>
 8000e86:	e05e      	b.n	8000f46 <HAL_RCC_OscConfig+0x32e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e88:	f7ff fea8 	bl	8000bdc <HAL_GetTick>
 8000e8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e90:	e00a      	b.n	8000ea8 <HAL_RCC_OscConfig+0x290>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e92:	f7ff fea3 	bl	8000bdc <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b64      	cmp	r3, #100	; 0x64
 8000ea0:	d902      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	f000 bec0 	b.w	8001c28 <HAL_RCC_OscConfig+0x1010>
 8000ea8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eac:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000eb4:	fa93 f3a3 	rbit	r3, r3
 8000eb8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000ebc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec0:	fab3 f383 	clz	r3, r3
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	095b      	lsrs	r3, r3, #5
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d102      	bne.n	8000eda <HAL_RCC_OscConfig+0x2c2>
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	e015      	b.n	8000f06 <HAL_RCC_OscConfig+0x2ee>
 8000eda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ede:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000ee6:	fa93 f3a3 	rbit	r3, r3
 8000eea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000ef6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000efa:	fa93 f3a3 	rbit	r3, r3
 8000efe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_RCC_OscConfig+0x328>)
 8000f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f0a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000f0e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000f12:	fa92 f2a2 	rbit	r2, r2
 8000f16:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000f1a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f1e:	fab2 f282 	clz	r2, r2
 8000f22:	b252      	sxtb	r2, r2
 8000f24:	f042 0220 	orr.w	r2, r2, #32
 8000f28:	b252      	sxtb	r2, r2
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	f002 021f 	and.w	r2, r2, #31
 8000f30:	2101      	movs	r1, #1
 8000f32:	fa01 f202 	lsl.w	r2, r1, r2
 8000f36:	4013      	ands	r3, r2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1aa      	bne.n	8000e92 <HAL_RCC_OscConfig+0x27a>
 8000f3c:	e003      	b.n	8000f46 <HAL_RCC_OscConfig+0x32e>
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 817e 	beq.w	8001258 <HAL_RCC_OscConfig+0x640>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f5c:	4ba6      	ldr	r3, [pc, #664]	; (80011f8 <HAL_RCC_OscConfig+0x5e0>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 030c 	and.w	r3, r3, #12
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00b      	beq.n	8000f80 <HAL_RCC_OscConfig+0x368>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f68:	4ba3      	ldr	r3, [pc, #652]	; (80011f8 <HAL_RCC_OscConfig+0x5e0>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 030c 	and.w	r3, r3, #12
 8000f70:	2b08      	cmp	r3, #8
 8000f72:	d173      	bne.n	800105c <HAL_RCC_OscConfig+0x444>
 8000f74:	4ba0      	ldr	r3, [pc, #640]	; (80011f8 <HAL_RCC_OscConfig+0x5e0>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d16d      	bne.n	800105c <HAL_RCC_OscConfig+0x444>
 8000f80:	2302      	movs	r3, #2
 8000f82:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f86:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000f8a:	fa93 f3a3 	rbit	r3, r3
 8000f8e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000f92:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f96:	fab3 f383 	clz	r3, r3
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	095b      	lsrs	r3, r3, #5
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d102      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x398>
 8000faa:	4b93      	ldr	r3, [pc, #588]	; (80011f8 <HAL_RCC_OscConfig+0x5e0>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	e013      	b.n	8000fd8 <HAL_RCC_OscConfig+0x3c0>
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000fba:	fa93 f3a3 	rbit	r3, r3
 8000fbe:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000fc8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000fcc:	fa93 f3a3 	rbit	r3, r3
 8000fd0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000fd4:	4b88      	ldr	r3, [pc, #544]	; (80011f8 <HAL_RCC_OscConfig+0x5e0>)
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	2202      	movs	r2, #2
 8000fda:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000fde:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000fe2:	fa92 f2a2 	rbit	r2, r2
 8000fe6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000fea:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000fee:	fab2 f282 	clz	r2, r2
 8000ff2:	b252      	sxtb	r2, r2
 8000ff4:	f042 0220 	orr.w	r2, r2, #32
 8000ff8:	b252      	sxtb	r2, r2
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	f002 021f 	and.w	r2, r2, #31
 8001000:	2101      	movs	r1, #1
 8001002:	fa01 f202 	lsl.w	r2, r1, r2
 8001006:	4013      	ands	r3, r2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00a      	beq.n	8001022 <HAL_RCC_OscConfig+0x40a>
 800100c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001010:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d002      	beq.n	8001022 <HAL_RCC_OscConfig+0x40a>
      {
        return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	f000 be03 	b.w	8001c28 <HAL_RCC_OscConfig+0x1010>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001022:	4b75      	ldr	r3, [pc, #468]	; (80011f8 <HAL_RCC_OscConfig+0x5e0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800102a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800102e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6959      	ldr	r1, [r3, #20]
 8001036:	23f8      	movs	r3, #248	; 0xf8
 8001038:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001040:	fa93 f3a3 	rbit	r3, r3
 8001044:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8001048:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800104c:	fab3 f383 	clz	r3, r3
 8001050:	fa01 f303 	lsl.w	r3, r1, r3
 8001054:	4968      	ldr	r1, [pc, #416]	; (80011f8 <HAL_RCC_OscConfig+0x5e0>)
 8001056:	4313      	orrs	r3, r2
 8001058:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105a:	e0fd      	b.n	8001258 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800105c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001060:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 8088 	beq.w	800117e <HAL_RCC_OscConfig+0x566>
 800106e:	2301      	movs	r3, #1
 8001070:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001074:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001078:	fa93 f3a3 	rbit	r3, r3
 800107c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001080:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001084:	fab3 f383 	clz	r3, r3
 8001088:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800108c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	461a      	mov	r2, r3
 8001094:	2301      	movs	r3, #1
 8001096:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001098:	f7ff fda0 	bl	8000bdc <HAL_GetTick>
 800109c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a0:	e00a      	b.n	80010b8 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a2:	f7ff fd9b 	bl	8000bdc <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d902      	bls.n	80010b8 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	f000 bdb8 	b.w	8001c28 <HAL_RCC_OscConfig+0x1010>
 80010b8:	2302      	movs	r3, #2
 80010ba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010be:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80010c2:	fa93 f3a3 	rbit	r3, r3
 80010c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 80010ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ce:	fab3 f383 	clz	r3, r3
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	095b      	lsrs	r3, r3, #5
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d102      	bne.n	80010e8 <HAL_RCC_OscConfig+0x4d0>
 80010e2:	4b45      	ldr	r3, [pc, #276]	; (80011f8 <HAL_RCC_OscConfig+0x5e0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	e013      	b.n	8001110 <HAL_RCC_OscConfig+0x4f8>
 80010e8:	2302      	movs	r3, #2
 80010ea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80010f2:	fa93 f3a3 	rbit	r3, r3
 80010f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80010fa:	2302      	movs	r3, #2
 80010fc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001100:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001104:	fa93 f3a3 	rbit	r3, r3
 8001108:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800110c:	4b3a      	ldr	r3, [pc, #232]	; (80011f8 <HAL_RCC_OscConfig+0x5e0>)
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	2202      	movs	r2, #2
 8001112:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001116:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800111a:	fa92 f2a2 	rbit	r2, r2
 800111e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8001122:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001126:	fab2 f282 	clz	r2, r2
 800112a:	b252      	sxtb	r2, r2
 800112c:	f042 0220 	orr.w	r2, r2, #32
 8001130:	b252      	sxtb	r2, r2
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	f002 021f 	and.w	r2, r2, #31
 8001138:	2101      	movs	r1, #1
 800113a:	fa01 f202 	lsl.w	r2, r1, r2
 800113e:	4013      	ands	r3, r2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0ae      	beq.n	80010a2 <HAL_RCC_OscConfig+0x48a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001144:	4b2c      	ldr	r3, [pc, #176]	; (80011f8 <HAL_RCC_OscConfig+0x5e0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800114c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001150:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6959      	ldr	r1, [r3, #20]
 8001158:	23f8      	movs	r3, #248	; 0xf8
 800115a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001162:	fa93 f3a3 	rbit	r3, r3
 8001166:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 800116a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800116e:	fab3 f383 	clz	r3, r3
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	4920      	ldr	r1, [pc, #128]	; (80011f8 <HAL_RCC_OscConfig+0x5e0>)
 8001178:	4313      	orrs	r3, r2
 800117a:	600b      	str	r3, [r1, #0]
 800117c:	e06c      	b.n	8001258 <HAL_RCC_OscConfig+0x640>
 800117e:	2301      	movs	r3, #1
 8001180:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001184:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001188:	fa93 f3a3 	rbit	r3, r3
 800118c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8001190:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001194:	fab3 f383 	clz	r3, r3
 8001198:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800119c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	461a      	mov	r2, r3
 80011a4:	2300      	movs	r3, #0
 80011a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff fd18 	bl	8000bdc <HAL_GetTick>
 80011ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b0:	e00a      	b.n	80011c8 <HAL_RCC_OscConfig+0x5b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b2:	f7ff fd13 	bl	8000bdc <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d902      	bls.n	80011c8 <HAL_RCC_OscConfig+0x5b0>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	f000 bd30 	b.w	8001c28 <HAL_RCC_OscConfig+0x1010>
 80011c8:	2302      	movs	r3, #2
 80011ca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80011d2:	fa93 f3a3 	rbit	r3, r3
 80011d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 80011da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011de:	fab3 f383 	clz	r3, r3
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	095b      	lsrs	r3, r3, #5
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d104      	bne.n	80011fc <HAL_RCC_OscConfig+0x5e4>
 80011f2:	4b01      	ldr	r3, [pc, #4]	; (80011f8 <HAL_RCC_OscConfig+0x5e0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	e015      	b.n	8001224 <HAL_RCC_OscConfig+0x60c>
 80011f8:	40021000 	.word	0x40021000
 80011fc:	2302      	movs	r3, #2
 80011fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001206:	fa93 f3a3 	rbit	r3, r3
 800120a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001214:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001218:	fa93 f3a3 	rbit	r3, r3
 800121c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001220:	4bc5      	ldr	r3, [pc, #788]	; (8001538 <HAL_RCC_OscConfig+0x920>)
 8001222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001224:	2202      	movs	r2, #2
 8001226:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800122a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800122e:	fa92 f2a2 	rbit	r2, r2
 8001232:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001236:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800123a:	fab2 f282 	clz	r2, r2
 800123e:	b252      	sxtb	r2, r2
 8001240:	f042 0220 	orr.w	r2, r2, #32
 8001244:	b252      	sxtb	r2, r2
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	f002 021f 	and.w	r2, r2, #31
 800124c:	2101      	movs	r1, #1
 800124e:	fa01 f202 	lsl.w	r2, r1, r2
 8001252:	4013      	ands	r3, r2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1ac      	bne.n	80011b2 <HAL_RCC_OscConfig+0x59a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800125c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0308 	and.w	r3, r3, #8
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 810a 	beq.w	8001482 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800126e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001272:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d073      	beq.n	8001366 <HAL_RCC_OscConfig+0x74e>
 800127e:	2301      	movs	r3, #1
 8001280:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001288:	fa93 f3a3 	rbit	r3, r3
 800128c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8001290:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001294:	fab3 f383 	clz	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	4ba8      	ldr	r3, [pc, #672]	; (800153c <HAL_RCC_OscConfig+0x924>)
 800129c:	4413      	add	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	461a      	mov	r2, r3
 80012a2:	2301      	movs	r3, #1
 80012a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a6:	f7ff fc99 	bl	8000bdc <HAL_GetTick>
 80012aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ae:	e00a      	b.n	80012c6 <HAL_RCC_OscConfig+0x6ae>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b0:	f7ff fc94 	bl	8000bdc <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d902      	bls.n	80012c6 <HAL_RCC_OscConfig+0x6ae>
        {
          return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	f000 bcb1 	b.w	8001c28 <HAL_RCC_OscConfig+0x1010>
 80012c6:	2302      	movs	r3, #2
 80012c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80012d0:	fa93 f3a3 	rbit	r3, r3
 80012d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80012d8:	2302      	movs	r3, #2
 80012da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80012de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80012e2:	fa93 f2a3 	rbit	r2, r3
 80012e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80012f8:	2202      	movs	r2, #2
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001300:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	fa93 f2a3 	rbit	r2, r3
 800130a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800130e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001312:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001314:	4b88      	ldr	r3, [pc, #544]	; (8001538 <HAL_RCC_OscConfig+0x920>)
 8001316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800131c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001320:	2102      	movs	r1, #2
 8001322:	6019      	str	r1, [r3, #0]
 8001324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001328:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	fa93 f1a3 	rbit	r1, r3
 8001332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001336:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800133a:	6019      	str	r1, [r3, #0]
  return(result);
 800133c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001340:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	fab3 f383 	clz	r3, r3
 800134a:	b25b      	sxtb	r3, r3
 800134c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001350:	b25b      	sxtb	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	f003 031f 	and.w	r3, r3, #31
 8001358:	2101      	movs	r1, #1
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	4013      	ands	r3, r2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0a5      	beq.n	80012b0 <HAL_RCC_OscConfig+0x698>
 8001364:	e08d      	b.n	8001482 <HAL_RCC_OscConfig+0x86a>
 8001366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800136a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001376:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	fa93 f2a3 	rbit	r2, r3
 8001380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001384:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001388:	601a      	str	r2, [r3, #0]
  return(result);
 800138a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800138e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001392:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001394:	fab3 f383 	clz	r3, r3
 8001398:	461a      	mov	r2, r3
 800139a:	4b68      	ldr	r3, [pc, #416]	; (800153c <HAL_RCC_OscConfig+0x924>)
 800139c:	4413      	add	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	461a      	mov	r2, r3
 80013a2:	2300      	movs	r3, #0
 80013a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a6:	f7ff fc19 	bl	8000bdc <HAL_GetTick>
 80013aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ae:	e00a      	b.n	80013c6 <HAL_RCC_OscConfig+0x7ae>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b0:	f7ff fc14 	bl	8000bdc <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d902      	bls.n	80013c6 <HAL_RCC_OscConfig+0x7ae>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	f000 bc31 	b.w	8001c28 <HAL_RCC_OscConfig+0x1010>
 80013c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013ce:	2202      	movs	r2, #2
 80013d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	fa93 f2a3 	rbit	r2, r3
 80013e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ee:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80013f2:	2202      	movs	r2, #2
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013fa:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	fa93 f2a3 	rbit	r2, r3
 8001404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001408:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001412:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001416:	2202      	movs	r2, #2
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	fa93 f2a3 	rbit	r2, r3
 8001428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001430:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001432:	4b41      	ldr	r3, [pc, #260]	; (8001538 <HAL_RCC_OscConfig+0x920>)
 8001434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800143a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800143e:	2102      	movs	r1, #2
 8001440:	6019      	str	r1, [r3, #0]
 8001442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001446:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	fa93 f1a3 	rbit	r1, r3
 8001450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001454:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001458:	6019      	str	r1, [r3, #0]
  return(result);
 800145a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	fab3 f383 	clz	r3, r3
 8001468:	b25b      	sxtb	r3, r3
 800146a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800146e:	b25b      	sxtb	r3, r3
 8001470:	b2db      	uxtb	r3, r3
 8001472:	f003 031f 	and.w	r3, r3, #31
 8001476:	2101      	movs	r1, #1
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	4013      	ands	r3, r2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d196      	bne.n	80013b0 <HAL_RCC_OscConfig+0x798>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001486:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 81a4 	beq.w	80017e0 <HAL_RCC_OscConfig+0xbc8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149e:	4b26      	ldr	r3, [pc, #152]	; (8001538 <HAL_RCC_OscConfig+0x920>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d116      	bne.n	80014d8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	4b23      	ldr	r3, [pc, #140]	; (8001538 <HAL_RCC_OscConfig+0x920>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4a22      	ldr	r2, [pc, #136]	; (8001538 <HAL_RCC_OscConfig+0x920>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	61d3      	str	r3, [r2, #28]
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <HAL_RCC_OscConfig+0x920>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80014be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014cc:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80014d0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80014d2:	2301      	movs	r3, #1
 80014d4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_RCC_OscConfig+0x928>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d11a      	bne.n	800151a <HAL_RCC_OscConfig+0x902>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e4:	4b16      	ldr	r3, [pc, #88]	; (8001540 <HAL_RCC_OscConfig+0x928>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a15      	ldr	r2, [pc, #84]	; (8001540 <HAL_RCC_OscConfig+0x928>)
 80014ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ee:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f0:	f7ff fb74 	bl	8000bdc <HAL_GetTick>
 80014f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f8:	e009      	b.n	800150e <HAL_RCC_OscConfig+0x8f6>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fa:	f7ff fb6f 	bl	8000bdc <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	; 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x8f6>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e38c      	b.n	8001c28 <HAL_RCC_OscConfig+0x1010>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <HAL_RCC_OscConfig+0x928>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0ef      	beq.n	80014fa <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800151a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x92c>
 800152a:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_RCC_OscConfig+0x920>)
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	4a02      	ldr	r2, [pc, #8]	; (8001538 <HAL_RCC_OscConfig+0x920>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6213      	str	r3, [r2, #32]
 8001536:	e03b      	b.n	80015b0 <HAL_RCC_OscConfig+0x998>
 8001538:	40021000 	.word	0x40021000
 800153c:	10908120 	.word	0x10908120
 8001540:	40007000 	.word	0x40007000
 8001544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001548:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10c      	bne.n	800156e <HAL_RCC_OscConfig+0x956>
 8001554:	4b7f      	ldr	r3, [pc, #508]	; (8001754 <HAL_RCC_OscConfig+0xb3c>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	4a7e      	ldr	r2, [pc, #504]	; (8001754 <HAL_RCC_OscConfig+0xb3c>)
 800155a:	f023 0301 	bic.w	r3, r3, #1
 800155e:	6213      	str	r3, [r2, #32]
 8001560:	4b7c      	ldr	r3, [pc, #496]	; (8001754 <HAL_RCC_OscConfig+0xb3c>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4a7b      	ldr	r2, [pc, #492]	; (8001754 <HAL_RCC_OscConfig+0xb3c>)
 8001566:	f023 0304 	bic.w	r3, r3, #4
 800156a:	6213      	str	r3, [r2, #32]
 800156c:	e020      	b.n	80015b0 <HAL_RCC_OscConfig+0x998>
 800156e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001572:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b05      	cmp	r3, #5
 800157c:	d10c      	bne.n	8001598 <HAL_RCC_OscConfig+0x980>
 800157e:	4b75      	ldr	r3, [pc, #468]	; (8001754 <HAL_RCC_OscConfig+0xb3c>)
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	4a74      	ldr	r2, [pc, #464]	; (8001754 <HAL_RCC_OscConfig+0xb3c>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	6213      	str	r3, [r2, #32]
 800158a:	4b72      	ldr	r3, [pc, #456]	; (8001754 <HAL_RCC_OscConfig+0xb3c>)
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	4a71      	ldr	r2, [pc, #452]	; (8001754 <HAL_RCC_OscConfig+0xb3c>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6213      	str	r3, [r2, #32]
 8001596:	e00b      	b.n	80015b0 <HAL_RCC_OscConfig+0x998>
 8001598:	4b6e      	ldr	r3, [pc, #440]	; (8001754 <HAL_RCC_OscConfig+0xb3c>)
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4a6d      	ldr	r2, [pc, #436]	; (8001754 <HAL_RCC_OscConfig+0xb3c>)
 800159e:	f023 0301 	bic.w	r3, r3, #1
 80015a2:	6213      	str	r3, [r2, #32]
 80015a4:	4b6b      	ldr	r3, [pc, #428]	; (8001754 <HAL_RCC_OscConfig+0xb3c>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	4a6a      	ldr	r2, [pc, #424]	; (8001754 <HAL_RCC_OscConfig+0xb3c>)
 80015aa:	f023 0304 	bic.w	r3, r3, #4
 80015ae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 8082 	beq.w	80016c6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c2:	f7ff fb0b 	bl	8000bdc <HAL_GetTick>
 80015c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ca:	e00b      	b.n	80015e4 <HAL_RCC_OscConfig+0x9cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015cc:	f7ff fb06 	bl	8000bdc <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015dc:	4293      	cmp	r3, r2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x9cc>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e321      	b.n	8001c28 <HAL_RCC_OscConfig+0x1010>
 80015e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015ec:	2202      	movs	r2, #2
 80015ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	fa93 f2a3 	rbit	r2, r3
 80015fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001602:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001610:	2202      	movs	r2, #2
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001618:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	fa93 f2a3 	rbit	r2, r3
 8001622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001626:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800162a:	601a      	str	r2, [r3, #0]
  return(result);
 800162c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001630:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001634:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001636:	fab3 f383 	clz	r3, r3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	095b      	lsrs	r3, r3, #5
 800163e:	b2db      	uxtb	r3, r3
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d102      	bne.n	8001650 <HAL_RCC_OscConfig+0xa38>
 800164a:	4b42      	ldr	r3, [pc, #264]	; (8001754 <HAL_RCC_OscConfig+0xb3c>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	e013      	b.n	8001678 <HAL_RCC_OscConfig+0xa60>
 8001650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001654:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001658:	2202      	movs	r2, #2
 800165a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001660:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	fa93 f2a3 	rbit	r2, r3
 800166a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	4b37      	ldr	r3, [pc, #220]	; (8001754 <HAL_RCC_OscConfig+0xb3c>)
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800167c:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8001680:	2102      	movs	r1, #2
 8001682:	6011      	str	r1, [r2, #0]
 8001684:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001688:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	fa92 f1a2 	rbit	r1, r2
 8001692:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001696:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800169a:	6011      	str	r1, [r2, #0]
  return(result);
 800169c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016a0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80016a4:	6812      	ldr	r2, [r2, #0]
 80016a6:	fab2 f282 	clz	r2, r2
 80016aa:	b252      	sxtb	r2, r2
 80016ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016b0:	b252      	sxtb	r2, r2
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	f002 021f 	and.w	r2, r2, #31
 80016b8:	2101      	movs	r1, #1
 80016ba:	fa01 f202 	lsl.w	r2, r1, r2
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d083      	beq.n	80015cc <HAL_RCC_OscConfig+0x9b4>
 80016c4:	e082      	b.n	80017cc <HAL_RCC_OscConfig+0xbb4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c6:	f7ff fa89 	bl	8000bdc <HAL_GetTick>
 80016ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ce:	e00b      	b.n	80016e8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7ff fa84 	bl	8000bdc <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e29f      	b.n	8001c28 <HAL_RCC_OscConfig+0x1010>
 80016e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ec:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80016f0:	2202      	movs	r2, #2
 80016f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	fa93 f2a3 	rbit	r2, r3
 8001702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001706:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001710:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001714:	2202      	movs	r2, #2
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	fa93 f2a3 	rbit	r2, r3
 8001726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800172e:	601a      	str	r2, [r3, #0]
  return(result);
 8001730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001734:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001738:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800173a:	fab3 f383 	clz	r3, r3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	095b      	lsrs	r3, r3, #5
 8001742:	b2db      	uxtb	r3, r3
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d104      	bne.n	8001758 <HAL_RCC_OscConfig+0xb40>
 800174e:	4b01      	ldr	r3, [pc, #4]	; (8001754 <HAL_RCC_OscConfig+0xb3c>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	e015      	b.n	8001780 <HAL_RCC_OscConfig+0xb68>
 8001754:	40021000 	.word	0x40021000
 8001758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001760:	2202      	movs	r2, #2
 8001762:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001768:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	fa93 f2a3 	rbit	r2, r3
 8001772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001776:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	4bac      	ldr	r3, [pc, #688]	; (8001a30 <HAL_RCC_OscConfig+0xe18>)
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001784:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 8001788:	2102      	movs	r1, #2
 800178a:	6011      	str	r1, [r2, #0]
 800178c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001790:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	fa92 f1a2 	rbit	r1, r2
 800179a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800179e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80017a2:	6011      	str	r1, [r2, #0]
  return(result);
 80017a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017a8:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80017ac:	6812      	ldr	r2, [r2, #0]
 80017ae:	fab2 f282 	clz	r2, r2
 80017b2:	b252      	sxtb	r2, r2
 80017b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017b8:	b252      	sxtb	r2, r2
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	f002 021f 	and.w	r2, r2, #31
 80017c0:	2101      	movs	r1, #1
 80017c2:	fa01 f202 	lsl.w	r2, r1, r2
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d181      	bne.n	80016d0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d105      	bne.n	80017e0 <HAL_RCC_OscConfig+0xbc8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d4:	4b96      	ldr	r3, [pc, #600]	; (8001a30 <HAL_RCC_OscConfig+0xe18>)
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	4a95      	ldr	r2, [pc, #596]	; (8001a30 <HAL_RCC_OscConfig+0xe18>)
 80017da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 821a 	beq.w	8001c26 <HAL_RCC_OscConfig+0x100e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017f2:	4b8f      	ldr	r3, [pc, #572]	; (8001a30 <HAL_RCC_OscConfig+0xe18>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	f000 8211 	beq.w	8001c22 <HAL_RCC_OscConfig+0x100a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001804:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	2b02      	cmp	r3, #2
 800180e:	f040 8162 	bne.w	8001ad6 <HAL_RCC_OscConfig+0xebe>
 8001812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001816:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800181a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800181e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001824:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	fa93 f2a3 	rbit	r2, r3
 800182e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001832:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001836:	601a      	str	r2, [r3, #0]
  return(result);
 8001838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001840:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001842:	fab3 f383 	clz	r3, r3
 8001846:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800184a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	461a      	mov	r2, r3
 8001852:	2300      	movs	r3, #0
 8001854:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001856:	f7ff f9c1 	bl	8000bdc <HAL_GetTick>
 800185a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185e:	e009      	b.n	8001874 <HAL_RCC_OscConfig+0xc5c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff f9bc 	bl	8000bdc <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0xc5c>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e1d9      	b.n	8001c28 <HAL_RCC_OscConfig+0x1010>
 8001874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001878:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800187c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001886:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	fa93 f2a3 	rbit	r2, r3
 8001890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001894:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001898:	601a      	str	r2, [r3, #0]
  return(result);
 800189a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a4:	fab3 f383 	clz	r3, r3
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d102      	bne.n	80018be <HAL_RCC_OscConfig+0xca6>
 80018b8:	4b5d      	ldr	r3, [pc, #372]	; (8001a30 <HAL_RCC_OscConfig+0xe18>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	e027      	b.n	800190e <HAL_RCC_OscConfig+0xcf6>
 80018be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	fa93 f2a3 	rbit	r2, r3
 80018da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018de:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80018ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	fa93 f2a3 	rbit	r2, r3
 8001900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001904:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	4b49      	ldr	r3, [pc, #292]	; (8001a30 <HAL_RCC_OscConfig+0xe18>)
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001912:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 8001916:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800191a:	6011      	str	r1, [r2, #0]
 800191c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001920:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 8001924:	6812      	ldr	r2, [r2, #0]
 8001926:	fa92 f1a2 	rbit	r1, r2
 800192a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800192e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001932:	6011      	str	r1, [r2, #0]
  return(result);
 8001934:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001938:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	fab2 f282 	clz	r2, r2
 8001942:	b252      	sxtb	r2, r2
 8001944:	f042 0220 	orr.w	r2, r2, #32
 8001948:	b252      	sxtb	r2, r2
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	f002 021f 	and.w	r2, r2, #31
 8001950:	2101      	movs	r1, #1
 8001952:	fa01 f202 	lsl.w	r2, r1, r2
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d181      	bne.n	8001860 <HAL_RCC_OscConfig+0xc48>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800195c:	4b34      	ldr	r3, [pc, #208]	; (8001a30 <HAL_RCC_OscConfig+0xe18>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001968:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001974:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	430b      	orrs	r3, r1
 800197e:	492c      	ldr	r1, [pc, #176]	; (8001a30 <HAL_RCC_OscConfig+0xe18>)
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
 8001984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001988:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800198c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001996:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	fa93 f2a3 	rbit	r2, r3
 80019a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80019a8:	601a      	str	r2, [r3, #0]
  return(result);
 80019aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ae:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80019b2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b4:	fab3 f383 	clz	r3, r3
 80019b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	461a      	mov	r2, r3
 80019c4:	2301      	movs	r3, #1
 80019c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff f908 	bl	8000bdc <HAL_GetTick>
 80019cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019d0:	e009      	b.n	80019e6 <HAL_RCC_OscConfig+0xdce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d2:	f7ff f903 	bl	8000bdc <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0xdce>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e120      	b.n	8001c28 <HAL_RCC_OscConfig+0x1010>
 80019e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ea:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80019ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	fa93 f2a3 	rbit	r2, r3
 8001a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a06:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a0a:	601a      	str	r2, [r3, #0]
  return(result);
 8001a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a10:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	095b      	lsrs	r3, r3, #5
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d104      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe1c>
 8001a2a:	4b01      	ldr	r3, [pc, #4]	; (8001a30 <HAL_RCC_OscConfig+0xe18>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	e029      	b.n	8001a84 <HAL_RCC_OscConfig+0xe6c>
 8001a30:	40021000 	.word	0x40021000
 8001a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a38:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a46:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	fa93 f2a3 	rbit	r2, r3
 8001a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a54:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001a62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	fa93 f2a3 	rbit	r2, r3
 8001a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	4b6c      	ldr	r3, [pc, #432]	; (8001c34 <HAL_RCC_OscConfig+0x101c>)
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a88:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8001a8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a90:	6011      	str	r1, [r2, #0]
 8001a92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a96:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	fa92 f1a2 	rbit	r1, r2
 8001aa0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aa4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001aa8:	6011      	str	r1, [r2, #0]
  return(result);
 8001aaa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	fab2 f282 	clz	r2, r2
 8001ab8:	b252      	sxtb	r2, r2
 8001aba:	f042 0220 	orr.w	r2, r2, #32
 8001abe:	b252      	sxtb	r2, r2
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	f002 021f 	and.w	r2, r2, #31
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f43f af7f 	beq.w	80019d2 <HAL_RCC_OscConfig+0xdba>
 8001ad4:	e0a7      	b.n	8001c26 <HAL_RCC_OscConfig+0x100e>
 8001ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ada:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001ade:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ae2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	fa93 f2a3 	rbit	r2, r3
 8001af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001afa:	601a      	str	r2, [r3, #0]
  return(result);
 8001afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b00:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b04:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b06:	fab3 f383 	clz	r3, r3
 8001b0a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b0e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	461a      	mov	r2, r3
 8001b16:	2300      	movs	r3, #0
 8001b18:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff f85f 	bl	8000bdc <HAL_GetTick>
 8001b1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b22:	e009      	b.n	8001b38 <HAL_RCC_OscConfig+0xf20>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff f85a 	bl	8000bdc <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0xf20>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e077      	b.n	8001c28 <HAL_RCC_OscConfig+0x1010>
 8001b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	fa93 f2a3 	rbit	r2, r3
 8001b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b58:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001b5c:	601a      	str	r2, [r3, #0]
  return(result);
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001b66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b68:	fab3 f383 	clz	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d102      	bne.n	8001b82 <HAL_RCC_OscConfig+0xf6a>
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_RCC_OscConfig+0x101c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	e027      	b.n	8001bd2 <HAL_RCC_OscConfig+0xfba>
 8001b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b86:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001b8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b94:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	fa93 f2a3 	rbit	r2, r3
 8001b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bac:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001bb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bba:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	fa93 f2a3 	rbit	r2, r3
 8001bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_RCC_OscConfig+0x101c>)
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bd6:	f5a2 72f6 	sub.w	r2, r2, #492	; 0x1ec
 8001bda:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bde:	6011      	str	r1, [r2, #0]
 8001be0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001be4:	f5a2 72f6 	sub.w	r2, r2, #492	; 0x1ec
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	fa92 f1a2 	rbit	r1, r2
 8001bee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bf2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001bf6:	6011      	str	r1, [r2, #0]
  return(result);
 8001bf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bfc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	fab2 f282 	clz	r2, r2
 8001c06:	b252      	sxtb	r2, r2
 8001c08:	f042 0220 	orr.w	r2, r2, #32
 8001c0c:	b252      	sxtb	r2, r2
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	f002 021f 	and.w	r2, r2, #31
 8001c14:	2101      	movs	r1, #1
 8001c16:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d181      	bne.n	8001b24 <HAL_RCC_OscConfig+0xf0c>
 8001c20:	e001      	b.n	8001c26 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_RCC_OscConfig+0x1010>
    }
  }
  
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000

08001c38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b09c      	sub	sp, #112	; 0x70
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c46:	4b98      	ldr	r3, [pc, #608]	; (8001ea8 <HAL_RCC_ClockConfig+0x270>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d910      	bls.n	8001c76 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c54:	4b94      	ldr	r3, [pc, #592]	; (8001ea8 <HAL_RCC_ClockConfig+0x270>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 0207 	bic.w	r2, r3, #7
 8001c5c:	4992      	ldr	r1, [pc, #584]	; (8001ea8 <HAL_RCC_ClockConfig+0x270>)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c64:	4b90      	ldr	r3, [pc, #576]	; (8001ea8 <HAL_RCC_ClockConfig+0x270>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d001      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e15a      	b.n	8001f2c <HAL_RCC_ClockConfig+0x2f4>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d008      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c82:	4b8a      	ldr	r3, [pc, #552]	; (8001eac <HAL_RCC_ClockConfig+0x274>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	4987      	ldr	r1, [pc, #540]	; (8001eac <HAL_RCC_ClockConfig+0x274>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 810d 	beq.w	8001ebc <HAL_RCC_ClockConfig+0x284>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d13d      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xee>
 8001caa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 8001cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	fab3 f383 	clz	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	095b      	lsrs	r3, r3, #5
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d102      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x9c>
 8001cce:	4b77      	ldr	r3, [pc, #476]	; (8001eac <HAL_RCC_ClockConfig+0x274>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	e00f      	b.n	8001cf4 <HAL_RCC_ClockConfig+0xbc>
 8001cd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cd8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ce2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ce6:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ce8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	657b      	str	r3, [r7, #84]	; 0x54
 8001cf0:	4b6e      	ldr	r3, [pc, #440]	; (8001eac <HAL_RCC_ClockConfig+0x274>)
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cf8:	653a      	str	r2, [r7, #80]	; 0x50
 8001cfa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001cfc:	fa92 f2a2 	rbit	r2, r2
 8001d00:	64fa      	str	r2, [r7, #76]	; 0x4c
  return(result);
 8001d02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d04:	fab2 f282 	clz	r2, r2
 8001d08:	b252      	sxtb	r2, r2
 8001d0a:	f042 0220 	orr.w	r2, r2, #32
 8001d0e:	b252      	sxtb	r2, r2
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	f002 021f 	and.w	r2, r2, #31
 8001d16:	2101      	movs	r1, #1
 8001d18:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d17d      	bne.n	8001e1e <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e102      	b.n	8001f2c <HAL_RCC_ClockConfig+0x2f4>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d13d      	bne.n	8001daa <HAL_RCC_ClockConfig+0x172>
 8001d2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d32:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8001d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3e:	fab3 f383 	clz	r3, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	095b      	lsrs	r3, r3, #5
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d102      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x120>
 8001d52:	4b56      	ldr	r3, [pc, #344]	; (8001eac <HAL_RCC_ClockConfig+0x274>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	e00f      	b.n	8001d78 <HAL_RCC_ClockConfig+0x140>
 8001d58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	637b      	str	r3, [r7, #52]	; 0x34
 8001d74:	4b4d      	ldr	r3, [pc, #308]	; (8001eac <HAL_RCC_ClockConfig+0x274>)
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d7c:	633a      	str	r2, [r7, #48]	; 0x30
 8001d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d80:	fa92 f2a2 	rbit	r2, r2
 8001d84:	62fa      	str	r2, [r7, #44]	; 0x2c
  return(result);
 8001d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d88:	fab2 f282 	clz	r2, r2
 8001d8c:	b252      	sxtb	r2, r2
 8001d8e:	f042 0220 	orr.w	r2, r2, #32
 8001d92:	b252      	sxtb	r2, r2
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	f002 021f 	and.w	r2, r2, #31
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d13b      	bne.n	8001e1e <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e0c0      	b.n	8001f2c <HAL_RCC_ClockConfig+0x2f4>
 8001daa:	2302      	movs	r3, #2
 8001dac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db0:	fa93 f3a3 	rbit	r3, r3
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db8:	fab3 f383 	clz	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d102      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0x19a>
 8001dcc:	4b37      	ldr	r3, [pc, #220]	; (8001eac <HAL_RCC_ClockConfig+0x274>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	e00d      	b.n	8001dee <HAL_RCC_ClockConfig+0x1b6>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	2302      	movs	r3, #2
 8001de0:	61bb      	str	r3, [r7, #24]
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	4b30      	ldr	r3, [pc, #192]	; (8001eac <HAL_RCC_ClockConfig+0x274>)
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	2202      	movs	r2, #2
 8001df0:	613a      	str	r2, [r7, #16]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	fa92 f2a2 	rbit	r2, r2
 8001df8:	60fa      	str	r2, [r7, #12]
  return(result);
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	fab2 f282 	clz	r2, r2
 8001e00:	b252      	sxtb	r2, r2
 8001e02:	f042 0220 	orr.w	r2, r2, #32
 8001e06:	b252      	sxtb	r2, r2
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	f002 021f 	and.w	r2, r2, #31
 8001e0e:	2101      	movs	r1, #1
 8001e10:	fa01 f202 	lsl.w	r2, r1, r2
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e086      	b.n	8001f2c <HAL_RCC_ClockConfig+0x2f4>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1e:	4b23      	ldr	r3, [pc, #140]	; (8001eac <HAL_RCC_ClockConfig+0x274>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f023 0203 	bic.w	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4920      	ldr	r1, [pc, #128]	; (8001eac <HAL_RCC_ClockConfig+0x274>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e30:	f7fe fed4 	bl	8000bdc <HAL_GetTick>
 8001e34:	66f8      	str	r0, [r7, #108]	; 0x6c
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d112      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x22c>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e3e:	e00a      	b.n	8001e56 <HAL_RCC_ClockConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e40:	f7fe fecc 	bl	8000bdc <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_ClockConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e06a      	b.n	8001f2c <HAL_RCC_ClockConfig+0x2f4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <HAL_RCC_ClockConfig+0x274>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d1ee      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x208>
 8001e62:	e02b      	b.n	8001ebc <HAL_RCC_ClockConfig+0x284>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d121      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x278>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e6c:	e00a      	b.n	8001e84 <HAL_RCC_ClockConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6e:	f7fe feb5 	bl	8000bdc <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_ClockConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e053      	b.n	8001f2c <HAL_RCC_ClockConfig+0x2f4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_RCC_ClockConfig+0x274>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d1ee      	bne.n	8001e6e <HAL_RCC_ClockConfig+0x236>
 8001e90:	e014      	b.n	8001ebc <HAL_RCC_ClockConfig+0x284>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e92:	f7fe fea3 	bl	8000bdc <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d905      	bls.n	8001eb0 <HAL_RCC_ClockConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e041      	b.n	8001f2c <HAL_RCC_ClockConfig+0x2f4>
 8001ea8:	40022000 	.word	0x40022000
 8001eac:	40021000 	.word	0x40021000
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eb0:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <HAL_RCC_ClockConfig+0x2fc>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 030c 	and.w	r3, r3, #12
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1ea      	bne.n	8001e92 <HAL_RCC_ClockConfig+0x25a>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <HAL_RCC_ClockConfig+0x300>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d210      	bcs.n	8001eec <HAL_RCC_ClockConfig+0x2b4>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eca:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_RCC_ClockConfig+0x300>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 0207 	bic.w	r2, r3, #7
 8001ed2:	4919      	ldr	r1, [pc, #100]	; (8001f38 <HAL_RCC_ClockConfig+0x300>)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HAL_RCC_ClockConfig+0x300>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_ClockConfig+0x2b4>
    {
      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e01f      	b.n	8001f2c <HAL_RCC_ClockConfig+0x2f4>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d008      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <HAL_RCC_ClockConfig+0x2fc>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	490b      	ldr	r1, [pc, #44]	; (8001f34 <HAL_RCC_ClockConfig+0x2fc>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d009      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <HAL_RCC_ClockConfig+0x2fc>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4903      	ldr	r1, [pc, #12]	; (8001f34 <HAL_RCC_ClockConfig+0x2fc>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	604b      	str	r3, [r1, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3770      	adds	r7, #112	; 0x70
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40022000 	.word	0x40022000

08001f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  //return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
  return F_CPU;
 8001f40:	f44f 03e1 	mov.w	r3, #7372800	; 0x708000
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001f62:	e154      	b.n	800220e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	2101      	movs	r1, #1
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	4013      	ands	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8146 	beq.w	8002208 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x40>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b12      	cmp	r3, #18
 8001f8a:	d123      	bne.n	8001fd4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	08da      	lsrs	r2, r3, #3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3208      	adds	r2, #8
 8001f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	220f      	movs	r2, #15
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	08da      	lsrs	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3208      	adds	r2, #8
 8001fce:	6939      	ldr	r1, [r7, #16]
 8001fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	2203      	movs	r2, #3
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0203 	and.w	r2, r3, #3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d00b      	beq.n	8002028 <HAL_GPIO_Init+0xdc>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d007      	beq.n	8002028 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800201c:	2b11      	cmp	r3, #17
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b12      	cmp	r3, #18
 8002026:	d130      	bne.n	800208a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	2203      	movs	r2, #3
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4013      	ands	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800205e:	2201      	movs	r2, #1
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4013      	ands	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	f003 0201 	and.w	r2, r3, #1
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 80a0 	beq.w	8002208 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c8:	4b58      	ldr	r3, [pc, #352]	; (800222c <HAL_GPIO_Init+0x2e0>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	4a57      	ldr	r2, [pc, #348]	; (800222c <HAL_GPIO_Init+0x2e0>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6193      	str	r3, [r2, #24]
 80020d4:	4b55      	ldr	r3, [pc, #340]	; (800222c <HAL_GPIO_Init+0x2e0>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80020e0:	4a53      	ldr	r2, [pc, #332]	; (8002230 <HAL_GPIO_Init+0x2e4>)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	3302      	adds	r3, #2
 80020e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ec:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	220f      	movs	r2, #15
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800210a:	d019      	beq.n	8002140 <HAL_GPIO_Init+0x1f4>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a49      	ldr	r2, [pc, #292]	; (8002234 <HAL_GPIO_Init+0x2e8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d013      	beq.n	800213c <HAL_GPIO_Init+0x1f0>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a48      	ldr	r2, [pc, #288]	; (8002238 <HAL_GPIO_Init+0x2ec>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00d      	beq.n	8002138 <HAL_GPIO_Init+0x1ec>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a47      	ldr	r2, [pc, #284]	; (800223c <HAL_GPIO_Init+0x2f0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d007      	beq.n	8002134 <HAL_GPIO_Init+0x1e8>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a46      	ldr	r2, [pc, #280]	; (8002240 <HAL_GPIO_Init+0x2f4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_GPIO_Init+0x1e4>
 800212c:	2304      	movs	r3, #4
 800212e:	e008      	b.n	8002142 <HAL_GPIO_Init+0x1f6>
 8002130:	2305      	movs	r3, #5
 8002132:	e006      	b.n	8002142 <HAL_GPIO_Init+0x1f6>
 8002134:	2303      	movs	r3, #3
 8002136:	e004      	b.n	8002142 <HAL_GPIO_Init+0x1f6>
 8002138:	2302      	movs	r3, #2
 800213a:	e002      	b.n	8002142 <HAL_GPIO_Init+0x1f6>
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <HAL_GPIO_Init+0x1f6>
 8002140:	2300      	movs	r3, #0
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	f002 0203 	and.w	r2, r2, #3
 8002148:	0092      	lsls	r2, r2, #2
 800214a:	4093      	lsls	r3, r2
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002152:	4937      	ldr	r1, [pc, #220]	; (8002230 <HAL_GPIO_Init+0x2e4>)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	3302      	adds	r3, #2
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002160:	4b38      	ldr	r3, [pc, #224]	; (8002244 <HAL_GPIO_Init+0x2f8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	43db      	mvns	r3, r3
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002184:	4a2f      	ldr	r2, [pc, #188]	; (8002244 <HAL_GPIO_Init+0x2f8>)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800218a:	4b2e      	ldr	r3, [pc, #184]	; (8002244 <HAL_GPIO_Init+0x2f8>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	43db      	mvns	r3, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021ae:	4a25      	ldr	r2, [pc, #148]	; (8002244 <HAL_GPIO_Init+0x2f8>)
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021b4:	4b23      	ldr	r3, [pc, #140]	; (8002244 <HAL_GPIO_Init+0x2f8>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	43db      	mvns	r3, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021d8:	4a1a      	ldr	r2, [pc, #104]	; (8002244 <HAL_GPIO_Init+0x2f8>)
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021de:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_GPIO_Init+0x2f8>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002202:	4a10      	ldr	r2, [pc, #64]	; (8002244 <HAL_GPIO_Init+0x2f8>)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	3301      	adds	r3, #1
 800220c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	fa22 f303 	lsr.w	r3, r2, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	f47f aea3 	bne.w	8001f64 <HAL_GPIO_Init+0x18>
  }
}
 800221e:	bf00      	nop
 8002220:	bf00      	nop
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40021000 	.word	0x40021000
 8002230:	40010000 	.word	0x40010000
 8002234:	48000400 	.word	0x48000400
 8002238:	48000800 	.word	0x48000800
 800223c:	48000c00 	.word	0x48000c00
 8002240:	48001000 	.word	0x48001000
 8002244:	40010400 	.word	0x40010400

08002248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	807b      	strh	r3, [r7, #2]
 8002254:	4613      	mov	r3, r2
 8002256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002258:	787b      	ldrb	r3, [r7, #1]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800225e:	887a      	ldrh	r2, [r7, #2]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002264:	e002      	b.n	800226c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002266:	887a      	ldrh	r2, [r7, #2]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr
 8002276:	0000      	movs	r0, r0

08002278 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002284:	2310      	movs	r3, #16
 8002286:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002288:	2300      	movs	r3, #0
 800228a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 800228c:	2300      	movs	r3, #0
 800228e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80022b6:	f023 030c 	bic.w	r3, r3, #12
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	68f9      	ldr	r1, [r7, #12]
 80022c0:	430b      	orrs	r3, r1
 80022c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699a      	ldr	r2, [r3, #24]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4aa1      	ldr	r2, [pc, #644]	; (8002584 <UART_SetConfig+0x30c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d120      	bne.n	8002346 <UART_SetConfig+0xce>
 8002304:	4ba0      	ldr	r3, [pc, #640]	; (8002588 <UART_SetConfig+0x310>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b03      	cmp	r3, #3
 800230e:	d817      	bhi.n	8002340 <UART_SetConfig+0xc8>
 8002310:	a201      	add	r2, pc, #4	; (adr r2, 8002318 <UART_SetConfig+0xa0>)
 8002312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002316:	bf00      	nop
 8002318:	08002329 	.word	0x08002329
 800231c:	08002335 	.word	0x08002335
 8002320:	0800233b 	.word	0x0800233b
 8002324:	0800232f 	.word	0x0800232f
 8002328:	2301      	movs	r3, #1
 800232a:	75fb      	strb	r3, [r7, #23]
 800232c:	e0b5      	b.n	800249a <UART_SetConfig+0x222>
 800232e:	2302      	movs	r3, #2
 8002330:	75fb      	strb	r3, [r7, #23]
 8002332:	e0b2      	b.n	800249a <UART_SetConfig+0x222>
 8002334:	2304      	movs	r3, #4
 8002336:	75fb      	strb	r3, [r7, #23]
 8002338:	e0af      	b.n	800249a <UART_SetConfig+0x222>
 800233a:	2308      	movs	r3, #8
 800233c:	75fb      	strb	r3, [r7, #23]
 800233e:	e0ac      	b.n	800249a <UART_SetConfig+0x222>
 8002340:	2310      	movs	r3, #16
 8002342:	75fb      	strb	r3, [r7, #23]
 8002344:	e0a9      	b.n	800249a <UART_SetConfig+0x222>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a90      	ldr	r2, [pc, #576]	; (800258c <UART_SetConfig+0x314>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d124      	bne.n	800239a <UART_SetConfig+0x122>
 8002350:	4b8d      	ldr	r3, [pc, #564]	; (8002588 <UART_SetConfig+0x310>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002358:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800235c:	d011      	beq.n	8002382 <UART_SetConfig+0x10a>
 800235e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002362:	d817      	bhi.n	8002394 <UART_SetConfig+0x11c>
 8002364:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002368:	d011      	beq.n	800238e <UART_SetConfig+0x116>
 800236a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800236e:	d811      	bhi.n	8002394 <UART_SetConfig+0x11c>
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <UART_SetConfig+0x104>
 8002374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002378:	d006      	beq.n	8002388 <UART_SetConfig+0x110>
 800237a:	e00b      	b.n	8002394 <UART_SetConfig+0x11c>
 800237c:	2300      	movs	r3, #0
 800237e:	75fb      	strb	r3, [r7, #23]
 8002380:	e08b      	b.n	800249a <UART_SetConfig+0x222>
 8002382:	2302      	movs	r3, #2
 8002384:	75fb      	strb	r3, [r7, #23]
 8002386:	e088      	b.n	800249a <UART_SetConfig+0x222>
 8002388:	2304      	movs	r3, #4
 800238a:	75fb      	strb	r3, [r7, #23]
 800238c:	e085      	b.n	800249a <UART_SetConfig+0x222>
 800238e:	2308      	movs	r3, #8
 8002390:	75fb      	strb	r3, [r7, #23]
 8002392:	e082      	b.n	800249a <UART_SetConfig+0x222>
 8002394:	2310      	movs	r3, #16
 8002396:	75fb      	strb	r3, [r7, #23]
 8002398:	e07f      	b.n	800249a <UART_SetConfig+0x222>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a7c      	ldr	r2, [pc, #496]	; (8002590 <UART_SetConfig+0x318>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d124      	bne.n	80023ee <UART_SetConfig+0x176>
 80023a4:	4b78      	ldr	r3, [pc, #480]	; (8002588 <UART_SetConfig+0x310>)
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80023ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80023b0:	d011      	beq.n	80023d6 <UART_SetConfig+0x15e>
 80023b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80023b6:	d817      	bhi.n	80023e8 <UART_SetConfig+0x170>
 80023b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023bc:	d011      	beq.n	80023e2 <UART_SetConfig+0x16a>
 80023be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023c2:	d811      	bhi.n	80023e8 <UART_SetConfig+0x170>
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <UART_SetConfig+0x158>
 80023c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023cc:	d006      	beq.n	80023dc <UART_SetConfig+0x164>
 80023ce:	e00b      	b.n	80023e8 <UART_SetConfig+0x170>
 80023d0:	2300      	movs	r3, #0
 80023d2:	75fb      	strb	r3, [r7, #23]
 80023d4:	e061      	b.n	800249a <UART_SetConfig+0x222>
 80023d6:	2302      	movs	r3, #2
 80023d8:	75fb      	strb	r3, [r7, #23]
 80023da:	e05e      	b.n	800249a <UART_SetConfig+0x222>
 80023dc:	2304      	movs	r3, #4
 80023de:	75fb      	strb	r3, [r7, #23]
 80023e0:	e05b      	b.n	800249a <UART_SetConfig+0x222>
 80023e2:	2308      	movs	r3, #8
 80023e4:	75fb      	strb	r3, [r7, #23]
 80023e6:	e058      	b.n	800249a <UART_SetConfig+0x222>
 80023e8:	2310      	movs	r3, #16
 80023ea:	75fb      	strb	r3, [r7, #23]
 80023ec:	e055      	b.n	800249a <UART_SetConfig+0x222>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a68      	ldr	r2, [pc, #416]	; (8002594 <UART_SetConfig+0x31c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d124      	bne.n	8002442 <UART_SetConfig+0x1ca>
 80023f8:	4b63      	ldr	r3, [pc, #396]	; (8002588 <UART_SetConfig+0x310>)
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002400:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002404:	d011      	beq.n	800242a <UART_SetConfig+0x1b2>
 8002406:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800240a:	d817      	bhi.n	800243c <UART_SetConfig+0x1c4>
 800240c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002410:	d011      	beq.n	8002436 <UART_SetConfig+0x1be>
 8002412:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002416:	d811      	bhi.n	800243c <UART_SetConfig+0x1c4>
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <UART_SetConfig+0x1ac>
 800241c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002420:	d006      	beq.n	8002430 <UART_SetConfig+0x1b8>
 8002422:	e00b      	b.n	800243c <UART_SetConfig+0x1c4>
 8002424:	2300      	movs	r3, #0
 8002426:	75fb      	strb	r3, [r7, #23]
 8002428:	e037      	b.n	800249a <UART_SetConfig+0x222>
 800242a:	2302      	movs	r3, #2
 800242c:	75fb      	strb	r3, [r7, #23]
 800242e:	e034      	b.n	800249a <UART_SetConfig+0x222>
 8002430:	2304      	movs	r3, #4
 8002432:	75fb      	strb	r3, [r7, #23]
 8002434:	e031      	b.n	800249a <UART_SetConfig+0x222>
 8002436:	2308      	movs	r3, #8
 8002438:	75fb      	strb	r3, [r7, #23]
 800243a:	e02e      	b.n	800249a <UART_SetConfig+0x222>
 800243c:	2310      	movs	r3, #16
 800243e:	75fb      	strb	r3, [r7, #23]
 8002440:	e02b      	b.n	800249a <UART_SetConfig+0x222>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a54      	ldr	r2, [pc, #336]	; (8002598 <UART_SetConfig+0x320>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d124      	bne.n	8002496 <UART_SetConfig+0x21e>
 800244c:	4b4e      	ldr	r3, [pc, #312]	; (8002588 <UART_SetConfig+0x310>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002454:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002458:	d011      	beq.n	800247e <UART_SetConfig+0x206>
 800245a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800245e:	d817      	bhi.n	8002490 <UART_SetConfig+0x218>
 8002460:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002464:	d011      	beq.n	800248a <UART_SetConfig+0x212>
 8002466:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800246a:	d811      	bhi.n	8002490 <UART_SetConfig+0x218>
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <UART_SetConfig+0x200>
 8002470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002474:	d006      	beq.n	8002484 <UART_SetConfig+0x20c>
 8002476:	e00b      	b.n	8002490 <UART_SetConfig+0x218>
 8002478:	2300      	movs	r3, #0
 800247a:	75fb      	strb	r3, [r7, #23]
 800247c:	e00d      	b.n	800249a <UART_SetConfig+0x222>
 800247e:	2302      	movs	r3, #2
 8002480:	75fb      	strb	r3, [r7, #23]
 8002482:	e00a      	b.n	800249a <UART_SetConfig+0x222>
 8002484:	2304      	movs	r3, #4
 8002486:	75fb      	strb	r3, [r7, #23]
 8002488:	e007      	b.n	800249a <UART_SetConfig+0x222>
 800248a:	2308      	movs	r3, #8
 800248c:	75fb      	strb	r3, [r7, #23]
 800248e:	e004      	b.n	800249a <UART_SetConfig+0x222>
 8002490:	2310      	movs	r3, #16
 8002492:	75fb      	strb	r3, [r7, #23]
 8002494:	e001      	b.n	800249a <UART_SetConfig+0x222>
 8002496:	2310      	movs	r3, #16
 8002498:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024a2:	d17b      	bne.n	800259c <UART_SetConfig+0x324>
  {
    switch (clocksource)
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d856      	bhi.n	8002558 <UART_SetConfig+0x2e0>
 80024aa:	a201      	add	r2, pc, #4	; (adr r2, 80024b0 <UART_SetConfig+0x238>)
 80024ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b0:	080024d5 	.word	0x080024d5
 80024b4:	080024f1 	.word	0x080024f1
 80024b8:	0800250d 	.word	0x0800250d
 80024bc:	08002559 	.word	0x08002559
 80024c0:	08002527 	.word	0x08002527
 80024c4:	08002559 	.word	0x08002559
 80024c8:	08002559 	.word	0x08002559
 80024cc:	08002559 	.word	0x08002559
 80024d0:	08002543 	.word	0x08002543
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80024d4:	f7fe fb98 	bl	8000c08 <HAL_RCC_GetPCLK1Freq>
 80024d8:	4603      	mov	r3, r0
 80024da:	005a      	lsls	r2, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	085b      	lsrs	r3, r3, #1
 80024e2:	441a      	add	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ec:	82bb      	strh	r3, [r7, #20]
        break;
 80024ee:	e036      	b.n	800255e <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80024f0:	f7ff fd24 	bl	8001f3c <HAL_RCC_GetPCLK2Freq>
 80024f4:	4603      	mov	r3, r0
 80024f6:	005a      	lsls	r2, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	085b      	lsrs	r3, r3, #1
 80024fe:	441a      	add	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	fbb2 f3f3 	udiv	r3, r2, r3
 8002508:	82bb      	strh	r3, [r7, #20]
        break;
 800250a:	e028      	b.n	800255e <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	085b      	lsrs	r3, r3, #1
 8002512:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002516:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6852      	ldr	r2, [r2, #4]
 800251e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002522:	82bb      	strh	r3, [r7, #20]
        break;
 8002524:	e01b      	b.n	800255e <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002526:	f7fe fb67 	bl	8000bf8 <HAL_RCC_GetSysClockFreq>
 800252a:	4603      	mov	r3, r0
 800252c:	005a      	lsls	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	085b      	lsrs	r3, r3, #1
 8002534:	441a      	add	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	82bb      	strh	r3, [r7, #20]
        break;
 8002540:	e00d      	b.n	800255e <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	085b      	lsrs	r3, r3, #1
 8002548:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	fbb2 f3f3 	udiv	r3, r2, r3
 8002554:	82bb      	strh	r3, [r7, #20]
        break;
 8002556:	e002      	b.n	800255e <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	74fb      	strb	r3, [r7, #19]
        break;
 800255c:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 800255e:	8abb      	ldrh	r3, [r7, #20]
 8002560:	f023 030f 	bic.w	r3, r3, #15
 8002564:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002566:	8abb      	ldrh	r3, [r7, #20]
 8002568:	105b      	asrs	r3, r3, #1
 800256a:	b29b      	uxth	r3, r3
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	b29a      	uxth	r2, r3
 8002572:	897b      	ldrh	r3, [r7, #10]
 8002574:	4313      	orrs	r3, r2
 8002576:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	897a      	ldrh	r2, [r7, #10]
 800257e:	60da      	str	r2, [r3, #12]
 8002580:	e075      	b.n	800266e <UART_SetConfig+0x3f6>
 8002582:	bf00      	nop
 8002584:	40013800 	.word	0x40013800
 8002588:	40021000 	.word	0x40021000
 800258c:	40004400 	.word	0x40004400
 8002590:	40004800 	.word	0x40004800
 8002594:	40004c00 	.word	0x40004c00
 8002598:	40005000 	.word	0x40005000
  }
  else
  {
    switch (clocksource)
 800259c:	7dfb      	ldrb	r3, [r7, #23]
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d862      	bhi.n	8002668 <UART_SetConfig+0x3f0>
 80025a2:	a201      	add	r2, pc, #4	; (adr r2, 80025a8 <UART_SetConfig+0x330>)
 80025a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a8:	080025cd 	.word	0x080025cd
 80025ac:	080025ed 	.word	0x080025ed
 80025b0:	0800260d 	.word	0x0800260d
 80025b4:	08002669 	.word	0x08002669
 80025b8:	0800262d 	.word	0x0800262d
 80025bc:	08002669 	.word	0x08002669
 80025c0:	08002669 	.word	0x08002669
 80025c4:	08002669 	.word	0x08002669
 80025c8:	0800264d 	.word	0x0800264d
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80025cc:	f7fe fb1c 	bl	8000c08 <HAL_RCC_GetPCLK1Freq>
 80025d0:	4602      	mov	r2, r0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	085b      	lsrs	r3, r3, #1
 80025d8:	441a      	add	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	60da      	str	r2, [r3, #12]
        break;
 80025ea:	e040      	b.n	800266e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80025ec:	f7ff fca6 	bl	8001f3c <HAL_RCC_GetPCLK2Freq>
 80025f0:	4602      	mov	r2, r0
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	085b      	lsrs	r3, r3, #1
 80025f8:	441a      	add	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	b29a      	uxth	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60da      	str	r2, [r3, #12]
        break;
 800260a:	e030      	b.n	800266e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002616:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6852      	ldr	r2, [r2, #4]
 800261e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002622:	b29a      	uxth	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	60da      	str	r2, [r3, #12]
        break;
 800262a:	e020      	b.n	800266e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800262c:	f7fe fae4 	bl	8000bf8 <HAL_RCC_GetSysClockFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	441a      	add	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002642:	b29a      	uxth	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60da      	str	r2, [r3, #12]
        break;
 800264a:	e010      	b.n	800266e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	085b      	lsrs	r3, r3, #1
 8002652:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	fbb2 f3f3 	udiv	r3, r2, r3
 800265e:	b29a      	uxth	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60da      	str	r2, [r3, #12]
        break;
 8002666:	e002      	b.n	800266e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	74fb      	strb	r3, [r7, #19]
        break;
 800266c:	bf00      	nop
    }
  }

  return ret;
 800266e:	7cfb      	ldrb	r3, [r7, #19]

}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af02      	add	r7, sp, #8
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800268a:	f7fe faa7 	bl	8000bdc <HAL_GetTick>
 800268e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b08      	cmp	r3, #8
 800269c:	d10e      	bne.n	80026bc <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800269e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f873 	bl	8002798 <UART_WaitOnFlagUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e022      	b.n	8002702 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d10e      	bne.n	80026e8 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f85d 	bl	8002798 <UART_WaitOnFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e00c      	b.n	8002702 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e039      	b.n	8002790 <HAL_UART_Init+0x86>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d103      	bne.n	8002730 <HAL_UART_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    //HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2224      	movs	r2, #36	; 0x24
 8002734:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0201 	bic.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff fd95 	bl	8002278 <UART_SetConfig>
 800274e:	4603      	mov	r3, r0
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e01b      	b.n	8002790 <HAL_UART_Init+0x86>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002766:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002776:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return UART_CheckIdleState(huart);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ff75 	bl	8002678 <UART_CheckIdleState>
 800278e:	4603      	mov	r3, r0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027a8:	e02c      	b.n	8002804 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b0:	d028      	beq.n	8002804 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d007      	beq.n	80027c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80027b8:	f7fe fa10 	bl	8000bdc <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d21d      	bcs.n	8002804 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027d6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0201 	bic.w	r2, r2, #1
 80027e6:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e00f      	b.n	8002824 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	69da      	ldr	r2, [r3, #28]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	4013      	ands	r3, r2
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	429a      	cmp	r2, r3
 8002812:	bf0c      	ite	eq
 8002814:	2301      	moveq	r3, #1
 8002816:	2300      	movne	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	461a      	mov	r2, r3
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	429a      	cmp	r2, r3
 8002820:	d0c3      	beq.n	80027aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af02      	add	r7, sp, #8
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b20      	cmp	r3, #32
 800284a:	d177      	bne.n	800293c <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <HAL_UART_Transmit+0x2c>
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e070      	b.n	800293e <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_UART_Transmit+0x3e>
 8002866:	2302      	movs	r3, #2
 8002868:	e069      	b.n	800293e <HAL_UART_Transmit+0x112>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2221      	movs	r2, #33	; 0x21
 800287c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002880:	f7fe f9ac 	bl	8000bdc <HAL_GetTick>
 8002884:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	88fa      	ldrh	r2, [r7, #6]
 800288a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	88fa      	ldrh	r2, [r7, #6]
 8002892:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002896:	e034      	b.n	8002902 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2200      	movs	r2, #0
 80028b2:	2180      	movs	r1, #128	; 0x80
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f7ff ff6f 	bl	8002798 <UART_WaitOnFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e03c      	b.n	800293e <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028cc:	d111      	bne.n	80028f2 <HAL_UART_Transmit+0xc6>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10d      	bne.n	80028f2 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	881a      	ldrh	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028e6:	b292      	uxth	r2, r2
 80028e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	3302      	adds	r3, #2
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	e007      	b.n	8002902 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	60ba      	str	r2, [r7, #8]
 80028f8:	781a      	ldrb	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	b292      	uxth	r2, r2
 8002900:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1c4      	bne.n	8002898 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2200      	movs	r2, #0
 8002916:	2140      	movs	r1, #64	; 0x40
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f7ff ff3d 	bl	8002798 <UART_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e00a      	b.n	800293e <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b08a      	sub	sp, #40	; 0x28
 800294a:	af02      	add	r7, sp, #8
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	4613      	mov	r3, r2
 8002954:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b20      	cmp	r3, #32
 8002964:	f040 809f 	bne.w	8002aa6 <HAL_UART_Receive+0x160>
  {
    if((pData == NULL ) || (Size == 0U))
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <HAL_UART_Receive+0x2e>
 800296e:	88fb      	ldrh	r3, [r7, #6]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e097      	b.n	8002aa8 <HAL_UART_Receive+0x162>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_UART_Receive+0x40>
 8002982:	2302      	movs	r3, #2
 8002984:	e090      	b.n	8002aa8 <HAL_UART_Receive+0x162>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f04f 32ff 	mov.w	r2, #4294967295
 8002996:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2222      	movs	r2, #34	; 0x22
 80029a2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80029a6:	f7fe f919 	bl	8000bdc <HAL_GetTick>
 80029aa:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	88fa      	ldrh	r2, [r7, #6]
 80029b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	88fa      	ldrh	r2, [r7, #6]
 80029b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c4:	d10e      	bne.n	80029e4 <HAL_UART_Receive+0x9e>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d105      	bne.n	80029da <HAL_UART_Receive+0x94>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80029d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029d8:	e015      	b.n	8002a06 <HAL_UART_Receive+0xc0>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	22ff      	movs	r2, #255	; 0xff
 80029de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029e2:	e010      	b.n	8002a06 <HAL_UART_Receive+0xc0>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10c      	bne.n	8002a06 <HAL_UART_Receive+0xc0>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d104      	bne.n	80029fe <HAL_UART_Receive+0xb8>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	22ff      	movs	r2, #255	; 0xff
 80029f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029fc:	e003      	b.n	8002a06 <HAL_UART_Receive+0xc0>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	227f      	movs	r2, #127	; 0x7f
 8002a02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002a0c:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8002a0e:	e03a      	b.n	8002a86 <HAL_UART_Receive+0x140>
    {
      huart->RxXferCount--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2120      	movs	r1, #32
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f7ff feb3 	bl	8002798 <UART_WaitOnFlagUntilTimeout>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_UART_Receive+0xf6>
      {
        return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e035      	b.n	8002aa8 <HAL_UART_Receive+0x162>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a44:	d112      	bne.n	8002a6c <HAL_UART_Receive+0x126>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10e      	bne.n	8002a6c <HAL_UART_Receive+0x126>
      {
        tmp = (uint16_t*) pData ;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	8b7b      	ldrh	r3, [r7, #26]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	3302      	adds	r3, #2
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	e00c      	b.n	8002a86 <HAL_UART_Receive+0x140>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	b2d9      	uxtb	r1, r3
 8002a76:	8b7b      	ldrh	r3, [r7, #26]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	1c58      	adds	r0, r3, #1
 8002a7e:	60b8      	str	r0, [r7, #8]
 8002a80:	400a      	ands	r2, r1
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1be      	bne.n	8002a10 <HAL_UART_Receive+0xca>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	e000      	b.n	8002aa8 <HAL_UART_Receive+0x162>
  }
  else
  {
    return HAL_BUSY;
 8002aa6:	2302      	movs	r3, #2
  }
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3720      	adds	r7, #32
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <Reset_Handler>:
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	e003      	b.n	8002abc <LoopCopyDataInit>

08002ab4 <CopyDataInit>:
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <LoopForever+0x2>)
 8002ab6:	585b      	ldr	r3, [r3, r1]
 8002ab8:	5043      	str	r3, [r0, r1]
 8002aba:	3104      	adds	r1, #4

08002abc <LoopCopyDataInit>:
 8002abc:	480a      	ldr	r0, [pc, #40]	; (8002ae8 <LoopForever+0x6>)
 8002abe:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <LoopForever+0xa>)
 8002ac0:	1842      	adds	r2, r0, r1
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d3f6      	bcc.n	8002ab4 <CopyDataInit>
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <LoopForever+0xe>)
 8002ac8:	e002      	b.n	8002ad0 <LoopFillZerobss>

08002aca <FillZerobss>:
 8002aca:	2300      	movs	r3, #0
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	3204      	adds	r2, #4

08002ad0 <LoopFillZerobss>:
 8002ad0:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <LoopForever+0x12>)
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d3f9      	bcc.n	8002aca <FillZerobss>
 8002ad6:	f3af 8000 	nop.w
 8002ada:	f000 f80f 	bl	8002afc <__libc_init_array>
 8002ade:	f7fd fc95 	bl	800040c <main>

08002ae2 <LoopForever>:
 8002ae2:	e7fe      	b.n	8002ae2 <LoopForever>
 8002ae4:	08002b64 	.word	0x08002b64
 8002ae8:	20000000 	.word	0x20000000
 8002aec:	20000010 	.word	0x20000010
 8002af0:	20000010 	.word	0x20000010
 8002af4:	200001cc 	.word	0x200001cc

08002af8 <BusFault_Handler>:
 8002af8:	e7fe      	b.n	8002af8 <BusFault_Handler>
 8002afa:	0000      	movs	r0, r0

08002afc <__libc_init_array>:
 8002afc:	b570      	push	{r4, r5, r6, lr}
 8002afe:	4d0d      	ldr	r5, [pc, #52]	; (8002b34 <__libc_init_array+0x38>)
 8002b00:	4c0d      	ldr	r4, [pc, #52]	; (8002b38 <__libc_init_array+0x3c>)
 8002b02:	1b64      	subs	r4, r4, r5
 8002b04:	10a4      	asrs	r4, r4, #2
 8002b06:	2600      	movs	r6, #0
 8002b08:	42a6      	cmp	r6, r4
 8002b0a:	d109      	bne.n	8002b20 <__libc_init_array+0x24>
 8002b0c:	4d0b      	ldr	r5, [pc, #44]	; (8002b3c <__libc_init_array+0x40>)
 8002b0e:	4c0c      	ldr	r4, [pc, #48]	; (8002b40 <__libc_init_array+0x44>)
 8002b10:	f000 f818 	bl	8002b44 <_init>
 8002b14:	1b64      	subs	r4, r4, r5
 8002b16:	10a4      	asrs	r4, r4, #2
 8002b18:	2600      	movs	r6, #0
 8002b1a:	42a6      	cmp	r6, r4
 8002b1c:	d105      	bne.n	8002b2a <__libc_init_array+0x2e>
 8002b1e:	bd70      	pop	{r4, r5, r6, pc}
 8002b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b24:	4798      	blx	r3
 8002b26:	3601      	adds	r6, #1
 8002b28:	e7ee      	b.n	8002b08 <__libc_init_array+0xc>
 8002b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b2e:	4798      	blx	r3
 8002b30:	3601      	adds	r6, #1
 8002b32:	e7f2      	b.n	8002b1a <__libc_init_array+0x1e>
 8002b34:	08002b5c 	.word	0x08002b5c
 8002b38:	08002b5c 	.word	0x08002b5c
 8002b3c:	08002b5c 	.word	0x08002b5c
 8002b40:	08002b60 	.word	0x08002b60

08002b44 <_init>:
 8002b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b46:	bf00      	nop
 8002b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b4a:	bc08      	pop	{r3}
 8002b4c:	469e      	mov	lr, r3
 8002b4e:	4770      	bx	lr

08002b50 <_fini>:
 8002b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b52:	bf00      	nop
 8002b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b56:	bc08      	pop	{r3}
 8002b58:	469e      	mov	lr, r3
 8002b5a:	4770      	bx	lr
